
QR_Wanbot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea60  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800ec00  0800ec00  0000fc00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f010  0800f010  00011110  2**0
                  CONTENTS
  4 .ARM          00000008  0800f010  0800f010  00010010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f018  0800f018  00011110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f018  0800f018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f01c  0800f01c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  0800f020  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006054  20000110  0800f130  00011110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006164  0800f130  00011164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f3c  00000000  00000000  00011140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b74  00000000  00000000  0002a07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0002dbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee2  00000000  00000000  0002ef30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199e6  00000000  00000000  0002fe12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198d3  00000000  00000000  000497f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000945a7  00000000  00000000  000630cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7672  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c18  00000000  00000000  000f76b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000fd2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000110 	.word	0x20000110
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ebe8 	.word	0x0800ebe8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000114 	.word	0x20000114
 80001dc:	0800ebe8 	.word	0x0800ebe8

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MPUInit>:
 */

#include "MPU6050.h"


void MPUInit(MPU6050_t *mpu6050, I2C_HandleTypeDef *hi2c,uint8_t rate, uint8_t AccelerometerSensitivity, uint8_t GyroscopeSensitivity, float sample_time, float alpha){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	@ 0x30
 8000edc:	af04      	add	r7, sp, #16
 8000ede:	6178      	str	r0, [r7, #20]
 8000ee0:	6139      	str	r1, [r7, #16]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	ed87 0a02 	vstr	s0, [r7, #8]
 8000eea:	edc7 0a01 	vstr	s1, [r7, #4]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	73bb      	strb	r3, [r7, #14]

	uint8_t data;
	uint8_t temp;
	mpu6050->hi2c = hi2c;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	601a      	str	r2, [r3, #0]
	mpu6050->alpha = alpha;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	641a      	str	r2, [r3, #64]	@ 0x40
	mpu6050->sample_time = sample_time;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	63da      	str	r2, [r3, #60]	@ 0x3c


	data = 0x00;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	77fb      	strb	r3, [r7, #31]
	HAL_I2C_Mem_Write(mpu6050->hi2c, (uint16_t)0xD0, MPU6050_PWR_MGMT_1, 1,&data, 1, 500);
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	2301      	movs	r3, #1
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	f107 031f 	add.w	r3, r7, #31
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	226b      	movs	r2, #107	@ 0x6b
 8000f24:	21d0      	movs	r1, #208	@ 0xd0
 8000f26:	f005 fb5b 	bl	80065e0 <HAL_I2C_Mem_Write>

	/* Set sample rate to 1kHz */
	data = rate;
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	77fb      	strb	r3, [r7, #31]
	HAL_I2C_Mem_Write(mpu6050->hi2c, (uint16_t)0xD0, MPU6050_SMPLRT_DIV, 1,&data, 1, 500);
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	6818      	ldr	r0, [r3, #0]
 8000f32:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f36:	9302      	str	r3, [sp, #8]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	f107 031f 	add.w	r3, r7, #31
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2301      	movs	r3, #1
 8000f44:	2219      	movs	r2, #25
 8000f46:	21d0      	movs	r1, #208	@ 0xd0
 8000f48:	f005 fb4a 	bl	80065e0 <HAL_I2C_Mem_Write>

	/* Config accelerometer */
	uint8_t reg = MPU6050_ACCEL_CONFIG;
 8000f4c:	231c      	movs	r3, #28
 8000f4e:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(mpu6050->hi2c, (uint16_t)0xD0, &reg, 1, 500);
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	f107 021d 	add.w	r2, r7, #29
 8000f58:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	21d0      	movs	r1, #208	@ 0xd0
 8000f62:	f005 f80d 	bl	8005f80 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(mpu6050->hi2c, (uint16_t)0xD0, &temp, 1, 500);
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	6818      	ldr	r0, [r3, #0]
 8000f6a:	f107 021e 	add.w	r2, r7, #30
 8000f6e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	21d0      	movs	r1, #208	@ 0xd0
 8000f78:	f005 f900 	bl	800617c <HAL_I2C_Master_Receive>
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8000f7c:	7fbb      	ldrb	r3, [r7, #30]
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	f023 0318 	bic.w	r3, r3, #24
 8000f84:	b25a      	sxtb	r2, r3
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	b25b      	sxtb	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	77bb      	strb	r3, [r7, #30]
	HAL_I2C_Master_Transmit(mpu6050->hi2c, (uint16_t)0xD0,&temp, 1, 500);
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	f107 021e 	add.w	r2, r7, #30
 8000f9c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	21d0      	movs	r1, #208	@ 0xd0
 8000fa6:	f004 ffeb 	bl	8005f80 <HAL_I2C_Master_Transmit>

	switch (AccelerometerSensitivity) {
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d81f      	bhi.n	8000ff0 <MPUInit+0x118>
 8000fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8000fb8 <MPUInit+0xe0>)
 8000fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb6:	bf00      	nop
 8000fb8:	08000fc9 	.word	0x08000fc9
 8000fbc:	08000fd3 	.word	0x08000fd3
 8000fc0:	08000fdd 	.word	0x08000fdd
 8000fc4:	08000fe7 	.word	0x08000fe7
	case MPU6050_Accelerometer_2G:
		mpu6050->Acc_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	f04f 5262 	mov.w	r2, #947912704	@ 0x38800000
 8000fce:	621a      	str	r2, [r3, #32]
		break;
 8000fd0:	e00f      	b.n	8000ff2 <MPUInit+0x11a>
	case MPU6050_Accelerometer_4G:
		mpu6050->Acc_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f04f 5264 	mov.w	r2, #956301312	@ 0x39000000
 8000fd8:	621a      	str	r2, [r3, #32]
		break;
 8000fda:	e00a      	b.n	8000ff2 <MPUInit+0x11a>
	case MPU6050_Accelerometer_8G:
		mpu6050->Acc_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	f04f 5266 	mov.w	r2, #964689920	@ 0x39800000
 8000fe2:	621a      	str	r2, [r3, #32]
		break;
 8000fe4:	e005      	b.n	8000ff2 <MPUInit+0x11a>
	case MPU6050_Accelerometer_16G:
		mpu6050->Acc_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 8000fec:	621a      	str	r2, [r3, #32]
		break;
 8000fee:	e000      	b.n	8000ff2 <MPUInit+0x11a>
	default:
		break;
 8000ff0:	bf00      	nop
	}

	/* Config Gyroscope */
	reg = MPU6050_GYRO_CONFIG;
 8000ff2:	231b      	movs	r3, #27
 8000ff4:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(mpu6050->hi2c, (uint16_t)0xD0, &reg, 1, 500);
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	6818      	ldr	r0, [r3, #0]
 8000ffa:	f107 021d 	add.w	r2, r7, #29
 8000ffe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2301      	movs	r3, #1
 8001006:	21d0      	movs	r1, #208	@ 0xd0
 8001008:	f004 ffba 	bl	8005f80 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(mpu6050->hi2c, (uint16_t)0xD0, &temp, 1, 500);
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	f107 021e 	add.w	r2, r7, #30
 8001014:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	21d0      	movs	r1, #208	@ 0xd0
 800101e:	f005 f8ad 	bl	800617c <HAL_I2C_Master_Receive>
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity  << 3;
 8001022:	7fbb      	ldrb	r3, [r7, #30]
 8001024:	b25b      	sxtb	r3, r3
 8001026:	f023 0318 	bic.w	r3, r3, #24
 800102a:	b25a      	sxtb	r2, r3
 800102c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	b25b      	sxtb	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	b25b      	sxtb	r3, r3
 8001038:	b2db      	uxtb	r3, r3
 800103a:	77bb      	strb	r3, [r7, #30]
	HAL_I2C_Master_Transmit(mpu6050->hi2c, (uint16_t)0xD0,&temp, 1, 500);
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	f107 021e 	add.w	r2, r7, #30
 8001044:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2301      	movs	r3, #1
 800104c:	21d0      	movs	r1, #208	@ 0xd0
 800104e:	f004 ff97 	bl	8005f80 <HAL_I2C_Master_Transmit>

	switch (GyroscopeSensitivity) {
 8001052:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001056:	2b03      	cmp	r3, #3
 8001058:	d81a      	bhi.n	8001090 <MPUInit+0x1b8>
 800105a:	a201      	add	r2, pc, #4	@ (adr r2, 8001060 <MPUInit+0x188>)
 800105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001060:	08001071 	.word	0x08001071
 8001064:	08001079 	.word	0x08001079
 8001068:	08001081 	.word	0x08001081
 800106c:	08001089 	.word	0x08001089
	case MPU6050_Gyroscope_250s:
		mpu6050->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <MPUInit+0x1c4>)
 8001074:	61da      	str	r2, [r3, #28]
		break;
 8001076:	e00c      	b.n	8001092 <MPUInit+0x1ba>
	case MPU6050_Gyroscope_500s:
		mpu6050->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	4a09      	ldr	r2, [pc, #36]	@ (80010a0 <MPUInit+0x1c8>)
 800107c:	61da      	str	r2, [r3, #28]
		break;
 800107e:	e008      	b.n	8001092 <MPUInit+0x1ba>
	case MPU6050_Gyroscope_1000s:
		mpu6050->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	4a08      	ldr	r2, [pc, #32]	@ (80010a4 <MPUInit+0x1cc>)
 8001084:	61da      	str	r2, [r3, #28]
		break;
 8001086:	e004      	b.n	8001092 <MPUInit+0x1ba>
	case MPU6050_Gyroscope_2000s:
		mpu6050->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	4a07      	ldr	r2, [pc, #28]	@ (80010a8 <MPUInit+0x1d0>)
 800108c:	61da      	str	r2, [r3, #28]
		break;
 800108e:	e000      	b.n	8001092 <MPUInit+0x1ba>
	default:
		break;
 8001090:	bf00      	nop
	}

}
 8001092:	bf00      	nop
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	3bfa232d 	.word	0x3bfa232d
 80010a0:	3c7a232d 	.word	0x3c7a232d
 80010a4:	3cf9c190 	.word	0x3cf9c190
 80010a8:	3d79c190 	.word	0x3d79c190

080010ac <MPUSetOffsets>:

void MPUSetOffsets(MPU6050_t *mpu6050, int16_t ACCx, int16_t ACCy, int16_t ACCz, int16_t GYROx, int16_t GYROy, int16_t GYROz){
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	4608      	mov	r0, r1
 80010b6:	4611      	mov	r1, r2
 80010b8:	461a      	mov	r2, r3
 80010ba:	4603      	mov	r3, r0
 80010bc:	817b      	strh	r3, [r7, #10]
 80010be:	460b      	mov	r3, r1
 80010c0:	813b      	strh	r3, [r7, #8]
 80010c2:	4613      	mov	r3, r2
 80010c4:	80fb      	strh	r3, [r7, #6]

	mpu6050->Acc_offsets[0] = ACCx;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	897a      	ldrh	r2, [r7, #10]
 80010ca:	82da      	strh	r2, [r3, #22]
	mpu6050->Acc_offsets[1] = ACCy;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	893a      	ldrh	r2, [r7, #8]
 80010d0:	831a      	strh	r2, [r3, #24]
	mpu6050->Acc_offsets[2] = ACCz;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	88fa      	ldrh	r2, [r7, #6]
 80010d6:	835a      	strh	r2, [r3, #26]

	mpu6050->Gyro_offsets[0] = GYROx;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	8b3a      	ldrh	r2, [r7, #24]
 80010dc:	821a      	strh	r2, [r3, #16]
	mpu6050->Gyro_offsets[1] = GYROy;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	8bba      	ldrh	r2, [r7, #28]
 80010e2:	825a      	strh	r2, [r3, #18]
	mpu6050->Gyro_offsets[2] = GYROz;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	8c3a      	ldrh	r2, [r7, #32]
 80010e8:	829a      	strh	r2, [r3, #20]

}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <MPUReqAccGyro>:

void MPUReqAccGyro(MPU6050_t *mpu6050){
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b088      	sub	sp, #32
 80010fa:	af04      	add	r7, sp, #16
 80010fc:	6078      	str	r0, [r7, #4]

	uint8_t buff[6];

	HAL_I2C_Mem_Read(mpu6050->hi2c, (uint16_t)0xD0, MPU6050_ACCEL_XOUT_H, 1, buff, 6, 5);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	2305      	movs	r3, #5
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	2306      	movs	r3, #6
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	223b      	movs	r2, #59	@ 0x3b
 8001114:	21d0      	movs	r1, #208	@ 0xd0
 8001116:	f005 fb5d 	bl	80067d4 <HAL_I2C_Mem_Read>

	mpu6050->Accx = (int16_t)(buff[0] << 8 | buff[1]);
 800111a:	7a3b      	ldrb	r3, [r7, #8]
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b21a      	sxth	r2, r3
 8001120:	7a7b      	ldrb	r3, [r7, #9]
 8001122:	b21b      	sxth	r3, r3
 8001124:	4313      	orrs	r3, r2
 8001126:	b21a      	sxth	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	809a      	strh	r2, [r3, #4]
	mpu6050->Accy = (int16_t)(buff[2] << 8 | buff[3]);
 800112c:	7abb      	ldrb	r3, [r7, #10]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	b21a      	sxth	r2, r3
 8001132:	7afb      	ldrb	r3, [r7, #11]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21a      	sxth	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	80da      	strh	r2, [r3, #6]
	mpu6050->Accz = (int16_t)(buff[4] << 8 | buff[5]);
 800113e:	7b3b      	ldrb	r3, [r7, #12]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21a      	sxth	r2, r3
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	b21b      	sxth	r3, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	b21a      	sxth	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	811a      	strh	r2, [r3, #8]

	mpu6050->Acc_f[0] = (mpu6050->Accx + mpu6050->Acc_offsets[0]) * mpu6050->Acc_Mult;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001156:	461a      	mov	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800115e:	4413      	add	r3, r2
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	edd3 7a08 	vldr	s15, [r3, #32]
 800116e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	mpu6050->Acc_f[1] = (mpu6050->Accy + mpu6050->Acc_offsets[1]) * mpu6050->Acc_Mult;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001186:	4413      	add	r3, r2
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	edd3 7a08 	vldr	s15, [r3, #32]
 8001196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	mpu6050->Acc_f[2] = (mpu6050->Accz + mpu6050->Acc_offsets[2]) * mpu6050->Acc_Mult;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80011a6:	461a      	mov	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80011ae:	4413      	add	r3, r2
 80011b0:	ee07 3a90 	vmov	s15, r3
 80011b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edd3 7a08 	vldr	s15, [r3, #32]
 80011be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	HAL_I2C_Mem_Read(mpu6050->hi2c, (uint16_t)0xD0, MPU6050_GYRO_XOUT_H, 1, buff, 6, 5);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	2305      	movs	r3, #5
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	2306      	movs	r3, #6
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	2243      	movs	r2, #67	@ 0x43
 80011de:	21d0      	movs	r1, #208	@ 0xd0
 80011e0:	f005 faf8 	bl	80067d4 <HAL_I2C_Mem_Read>

	mpu6050->Gyrox = (int16_t)(buff[0] << 8 | buff[1]);
 80011e4:	7a3b      	ldrb	r3, [r7, #8]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	7a7b      	ldrb	r3, [r7, #9]
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	815a      	strh	r2, [r3, #10]
	mpu6050->Gyroy = (int16_t)(buff[2] << 8 | buff[3]);
 80011f6:	7abb      	ldrb	r3, [r7, #10]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	7afb      	ldrb	r3, [r7, #11]
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	b21a      	sxth	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	819a      	strh	r2, [r3, #12]
	mpu6050->Gyroz = (int16_t)(buff[4] << 8 | buff[5]);
 8001208:	7b3b      	ldrb	r3, [r7, #12]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	7b7b      	ldrb	r3, [r7, #13]
 8001210:	b21b      	sxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b21a      	sxth	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	81da      	strh	r2, [r3, #14]

	mpu6050->Gyro_f[0] = (mpu6050->Gyrox + mpu6050->Gyro_offsets[0]) * mpu6050->Gyro_Mult;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001220:	461a      	mov	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001228:	4413      	add	r3, r2
 800122a:	ee07 3a90 	vmov	s15, r3
 800122e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	edd3 7a07 	vldr	s15, [r3, #28]
 8001238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	mpu6050->Gyro_f[1] = (mpu6050->Gyroy + mpu6050->Gyro_offsets[1]) * mpu6050->Gyro_Mult;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001248:	461a      	mov	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001250:	4413      	add	r3, r2
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001260:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	mpu6050->Gyro_f[2] = (mpu6050->Gyroz + mpu6050->Gyro_offsets[2]) * mpu6050->Gyro_Mult;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001278:	4413      	add	r3, r2
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	edd3 7a07 	vldr	s15, [r3, #28]
 8001288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

}
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	0000      	movs	r0, r0
 800129c:	0000      	movs	r0, r0
	...

080012a0 <CompPitchRoll>:


void CompPitchRoll(MPU6050_t *mpu6050){
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

	if(mpu6050->Acc_f[1] && mpu6050->Acc_f[2] && mpu6050->Acc_f[0]){
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80012ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b6:	f000 809d 	beq.w	80013f4 <CompPitchRoll+0x154>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80012c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	f000 8094 	beq.w	80013f4 <CompPitchRoll+0x154>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80012d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012da:	f000 808b 	beq.w	80013f4 <CompPitchRoll+0x154>
		float acc_pitch = atan ((mpu6050->Acc_f[1]) / (mpu6050->Acc_f[2])) *  57.3248;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80012ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012ee:	ee16 0a90 	vmov	r0, s13
 80012f2:	f7ff f8d9 	bl	80004a8 <__aeabi_f2d>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	ec43 2b10 	vmov	d0, r2, r3
 80012fe:	f00a fd77 	bl	800bdf0 <atan>
 8001302:	ec51 0b10 	vmov	r0, r1, d0
 8001306:	a33e      	add	r3, pc, #248	@ (adr r3, 8001400 <CompPitchRoll+0x160>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f924 	bl	8000558 <__aeabi_dmul>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	f7ff fc16 	bl	8000b48 <__aeabi_d2f>
 800131c:	4603      	mov	r3, r0
 800131e:	60fb      	str	r3, [r7, #12]
		float acc_roll = - atan ((mpu6050->Acc_f[0]) / (mpu6050->Acc_f[2])) * 57.3248;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800132c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001330:	ee16 0a90 	vmov	r0, s13
 8001334:	f7ff f8b8 	bl	80004a8 <__aeabi_f2d>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	ec43 2b10 	vmov	d0, r2, r3
 8001340:	f00a fd56 	bl	800bdf0 <atan>
 8001344:	ec53 2b10 	vmov	r2, r3, d0
 8001348:	4614      	mov	r4, r2
 800134a:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800134e:	a32c      	add	r3, pc, #176	@ (adr r3, 8001400 <CompPitchRoll+0x160>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	4620      	mov	r0, r4
 8001356:	4629      	mov	r1, r5
 8001358:	f7ff f8fe 	bl	8000558 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fbf0 	bl	8000b48 <__aeabi_d2f>
 8001368:	4603      	mov	r3, r0
 800136a:	60bb      	str	r3, [r7, #8]

		mpu6050->pitch = (acc_pitch * mpu6050->alpha) + ((mpu6050->pitch + mpu6050->Gyro_f[0]*mpu6050->sample_time)*(1-mpu6050->alpha));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001372:	edd7 7a03 	vldr	s15, [r7, #12]
 8001376:	ee27 7a27 	vmul.f32	s14, s14, s15
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	ed93 6a0c 	vldr	s12, [r3, #48]	@ 0x30
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800138c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001390:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800139a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800139e:	ee76 7a67 	vsub.f32	s15, s12, s15
 80013a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		mpu6050->roll = (acc_roll * mpu6050->alpha) + ((mpu6050->roll + mpu6050->Gyro_f[1]*mpu6050->sample_time)*(1-mpu6050->alpha));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80013b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	ed93 6a0d 	vldr	s12, [r3, #52]	@ 0x34
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80013d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80013d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80013de:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80013e2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80013e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	}

}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bdb0      	pop	{r4, r5, r7, pc}
 80013fc:	f3af 8000 	nop.w
 8001400:	0be0ded3 	.word	0x0be0ded3
 8001404:	404ca993 	.word	0x404ca993

08001408 <ServoDriverInit>:
 * 						  hi2cx        				      Pointer to I2C handle
 * 						  _i2caddr				          Address of the Servo Driver
 * Function Return		: NONE
 * Function Example		:   ServoDriverInit(&srv_drv,&hi2c2,0x40);
 */
void ServoDriverInit(Srv_Drv_t *srv_drvx,I2C_HandleTypeDef *hi2cx,uint16_t _i2caddr){
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	4613      	mov	r3, r2
 8001414:	80fb      	strh	r3, [r7, #6]

	srv_drvx->_i2caddr = _i2caddr;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	88fa      	ldrh	r2, [r7, #6]
 800141a:	801a      	strh	r2, [r3, #0]
	srv_drvx->hi2cx = hi2cx;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	605a      	str	r2, [r3, #4]

	ServoDriverReset(srv_drvx);
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f000 f8d0 	bl	80015c8 <ServoDriverReset>

	ServoDriverSetPWMFreq(srv_drvx,50);
 8001428:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 800143c <ServoDriverInit+0x34>
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f000 f807 	bl	8001440 <ServoDriverSetPWMFreq>
}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	42480000 	.word	0x42480000

08001440 <ServoDriverSetPWMFreq>:
 *						  srv_drvx                         Pointer to Servo Driver struct
 * 						  freq        				      Frequency between 1 and 3500
 * Function Return		: NONE
 * Function Example		:  ServoDriverSetPWMFreq(&srv_drv,1000);
 */
void ServoDriverSetPWMFreq(Srv_Drv_t *srv_drvx,float freq){
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	ed87 0a02 	vstr	s0, [r7, #8]

	if(freq<1)
 800144c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001450:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145c:	d503      	bpl.n	8001466 <ServoDriverSetPWMFreq+0x26>
		freq=1;
 800145e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	e00a      	b.n	800147c <ServoDriverSetPWMFreq+0x3c>
	else if(freq>3500)   // Datasheet limit is 3052=50MHz/(4*4096)
 8001466:	edd7 7a02 	vldr	s15, [r7, #8]
 800146a:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80015a8 <ServoDriverSetPWMFreq+0x168>
 800146e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001476:	dd01      	ble.n	800147c <ServoDriverSetPWMFreq+0x3c>
		freq=3500;
 8001478:	4b4c      	ldr	r3, [pc, #304]	@ (80015ac <ServoDriverSetPWMFreq+0x16c>)
 800147a:	60bb      	str	r3, [r7, #8]

	float prescaleval = ((26000000 / (freq * 4096.0)) + 0.5) - 1;
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f7ff f813 	bl	80004a8 <__aeabi_f2d>
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	4b4a      	ldr	r3, [pc, #296]	@ (80015b0 <ServoDriverSetPWMFreq+0x170>)
 8001488:	f7ff f866 	bl	8000558 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	a143      	add	r1, pc, #268	@ (adr r1, 80015a0 <ServoDriverSetPWMFreq+0x160>)
 8001492:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001496:	f7ff f989 	bl	80007ac <__aeabi_ddiv>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	4b43      	ldr	r3, [pc, #268]	@ (80015b4 <ServoDriverSetPWMFreq+0x174>)
 80014a8:	f7fe fea0 	bl	80001ec <__adddf3>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	4b3f      	ldr	r3, [pc, #252]	@ (80015b8 <ServoDriverSetPWMFreq+0x178>)
 80014ba:	f7fe fe95 	bl	80001e8 <__aeabi_dsub>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f7ff fb3f 	bl	8000b48 <__aeabi_d2f>
 80014ca:	4603      	mov	r3, r0
 80014cc:	617b      	str	r3, [r7, #20]
	  if (prescaleval < PCA9685_PRESCALE_MIN)
 80014ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d2:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80014d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014de:	d501      	bpl.n	80014e4 <ServoDriverSetPWMFreq+0xa4>
	    prescaleval = PCA9685_PRESCALE_MIN;
 80014e0:	4b36      	ldr	r3, [pc, #216]	@ (80015bc <ServoDriverSetPWMFreq+0x17c>)
 80014e2:	617b      	str	r3, [r7, #20]
	  if (prescaleval > PCA9685_PRESCALE_MAX)
 80014e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80014e8:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80015c0 <ServoDriverSetPWMFreq+0x180>
 80014ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	dd01      	ble.n	80014fa <ServoDriverSetPWMFreq+0xba>
	    prescaleval = PCA9685_PRESCALE_MAX;
 80014f6:	4b33      	ldr	r3, [pc, #204]	@ (80015c4 <ServoDriverSetPWMFreq+0x184>)
 80014f8:	617b      	str	r3, [r7, #20]
	  uint8_t prescale = (uint8_t)prescaleval;
 80014fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80014fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001502:	edc7 7a01 	vstr	s15, [r7, #4]
 8001506:	793b      	ldrb	r3, [r7, #4]
 8001508:	74fb      	strb	r3, [r7, #19]

	  uint8_t oldmode = I2CReadReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6858      	ldr	r0, [r3, #4]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2200      	movs	r2, #0
 8001516:	4619      	mov	r1, r3
 8001518:	f000 f8ca 	bl	80016b0 <I2CReadReg8>
 800151c:	4603      	mov	r3, r0
 800151e:	74bb      	strb	r3, [r7, #18]

	  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP;
 8001520:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001524:	f003 036f 	and.w	r3, r3, #111	@ 0x6f
 8001528:	b25b      	sxtb	r3, r3
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	b25b      	sxtb	r3, r3
 8001530:	747b      	strb	r3, [r7, #17]


	  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1,newmode);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6858      	ldr	r0, [r3, #4]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	b2d9      	uxtb	r1, r3
 800153c:	7c7b      	ldrb	r3, [r7, #17]
 800153e:	2200      	movs	r2, #0
 8001540:	f000 f895 	bl	800166e <I2CWriteReg8>

	  HAL_Delay(5);
 8001544:	2005      	movs	r0, #5
 8001546:	f004 f871 	bl	800562c <HAL_Delay>

	  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_PRESCALE,prescale);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6858      	ldr	r0, [r3, #4]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	b2d9      	uxtb	r1, r3
 8001554:	7cfb      	ldrb	r3, [r7, #19]
 8001556:	22fe      	movs	r2, #254	@ 0xfe
 8001558:	f000 f889 	bl	800166e <I2CWriteReg8>

	  HAL_Delay(5);
 800155c:	2005      	movs	r0, #5
 800155e:	f004 f865 	bl	800562c <HAL_Delay>

	  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1,oldmode);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6858      	ldr	r0, [r3, #4]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	b2d9      	uxtb	r1, r3
 800156c:	7cbb      	ldrb	r3, [r7, #18]
 800156e:	2200      	movs	r2, #0
 8001570:	f000 f87d 	bl	800166e <I2CWriteReg8>

	  HAL_Delay(5);
 8001574:	2005      	movs	r0, #5
 8001576:	f004 f859 	bl	800562c <HAL_Delay>

	  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1,(oldmode | MODE1_RESTART | MODE1_AI));
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6858      	ldr	r0, [r3, #4]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	b2d9      	uxtb	r1, r3
 8001584:	7cbb      	ldrb	r3, [r7, #18]
 8001586:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2200      	movs	r2, #0
 800158e:	f000 f86e 	bl	800166e <I2CWriteReg8>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	f3af 8000 	nop.w
 80015a0:	00000000 	.word	0x00000000
 80015a4:	4178cba8 	.word	0x4178cba8
 80015a8:	455ac000 	.word	0x455ac000
 80015ac:	455ac000 	.word	0x455ac000
 80015b0:	40b00000 	.word	0x40b00000
 80015b4:	3fe00000 	.word	0x3fe00000
 80015b8:	3ff00000 	.word	0x3ff00000
 80015bc:	40400000 	.word	0x40400000
 80015c0:	437f0000 	.word	0x437f0000
 80015c4:	437f0000 	.word	0x437f0000

080015c8 <ServoDriverReset>:
 *
 *						  srv_drvx                         Pointer to Servo Driver struct
 * Function Return		: NONE
 * Function Example		:  ServoDriverReset(&srv_drv);
 */
void ServoDriverReset(Srv_Drv_t *srv_drvx){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1,MODE1_RESTART);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6858      	ldr	r0, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	b2d9      	uxtb	r1, r3
 80015da:	2380      	movs	r3, #128	@ 0x80
 80015dc:	2200      	movs	r2, #0
 80015de:	f000 f846 	bl	800166e <I2CWriteReg8>
//	I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE2,MODE2_OUTDRV);
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <ServoDriverSetOnOff_Multi>:
 *						  on 							  Time to set the wave to high from (0 to 4095)
 *						  off                             Time to set the wave to low (0 to 4095)
 * Function Return		: NONE
 * Function Example		:  ServoDriverSetOnOff(&srv_drv,0,0,1024);  // 25% duty cycle
 */
void ServoDriverSetOnOff_Multi(Srv_Drv_t *srv_drvx, uint8_t start_channel, uint8_t num, uint16_t pulses[]){
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b088      	sub	sp, #32
 80015ee:	af02      	add	r7, sp, #8
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	72fb      	strb	r3, [r7, #11]
 80015f8:	4613      	mov	r3, r2
 80015fa:	72bb      	strb	r3, [r7, #10]

	uint8_t data[5];

	for (uint8_t i = 0; i < num; i++){
 80015fc:	2300      	movs	r3, #0
 80015fe:	75fb      	strb	r3, [r7, #23]
 8001600:	e02c      	b.n	800165c <ServoDriverSetOnOff_Multi+0x72>
		data[0] = PCA9685_LED0_ON_L + (4 * (start_channel+i));
 8001602:	7afa      	ldrb	r2, [r7, #11]
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	4413      	add	r3, r2
 8001608:	b2db      	uxtb	r3, r3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	b2db      	uxtb	r3, r3
 800160e:	3306      	adds	r3, #6
 8001610:	b2db      	uxtb	r3, r3
 8001612:	743b      	strb	r3, [r7, #16]
		data[1] = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	747b      	strb	r3, [r7, #17]
		data[2] = 0 >> 8;
 8001618:	2300      	movs	r3, #0
 800161a:	74bb      	strb	r3, [r7, #18]
		data[3] = pulses[i];
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	74fb      	strb	r3, [r7, #19]
		data[4] = pulses[i] >> 8;
 800162a:	7dfb      	ldrb	r3, [r7, #23]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	881b      	ldrh	r3, [r3, #0]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	b29b      	uxth	r3, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	753b      	strb	r3, [r7, #20]
		HAL_I2C_Master_Transmit(srv_drvx->hi2cx,srv_drvx->_i2caddr<<1,data,5,20);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6858      	ldr	r0, [r3, #4]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	b299      	uxth	r1, r3
 8001648:	f107 0210 	add.w	r2, r7, #16
 800164c:	2314      	movs	r3, #20
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2305      	movs	r3, #5
 8001652:	f004 fc95 	bl	8005f80 <HAL_I2C_Master_Transmit>
	for (uint8_t i = 0; i < num; i++){
 8001656:	7dfb      	ldrb	r3, [r7, #23]
 8001658:	3301      	adds	r3, #1
 800165a:	75fb      	strb	r3, [r7, #23]
 800165c:	7dfa      	ldrb	r2, [r7, #23]
 800165e:	7abb      	ldrb	r3, [r7, #10]
 8001660:	429a      	cmp	r2, r3
 8001662:	d3ce      	bcc.n	8001602 <ServoDriverSetOnOff_Multi+0x18>
	}


}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <I2CWriteReg8>:
  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE2,newmode);

}

void I2CWriteReg8(I2C_HandleTypeDef *hi2cx, uint8_t slave_addr,uint8_t register_pointer, uint8_t register_value)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af04      	add	r7, sp, #16
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	4608      	mov	r0, r1
 8001678:	4611      	mov	r1, r2
 800167a:	461a      	mov	r2, r3
 800167c:	4603      	mov	r3, r0
 800167e:	70fb      	strb	r3, [r7, #3]
 8001680:	460b      	mov	r3, r1
 8001682:	70bb      	strb	r3, [r7, #2]
 8001684:	4613      	mov	r3, r2
 8001686:	707b      	strb	r3, [r7, #1]

    if(HAL_I2C_Mem_Write(hi2cx,slave_addr<<1,(uint8_t)register_pointer, I2C_MEMADD_SIZE_8BIT, (uint8_t*)(&register_value), 1, 10) != HAL_OK)
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	b29b      	uxth	r3, r3
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	b299      	uxth	r1, r3
 8001690:	78bb      	ldrb	r3, [r7, #2]
 8001692:	b29a      	uxth	r2, r3
 8001694:	230a      	movs	r3, #10
 8001696:	9302      	str	r3, [sp, #8]
 8001698:	2301      	movs	r3, #1
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	1c7b      	adds	r3, r7, #1
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2301      	movs	r3, #1
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f004 ff9c 	bl	80065e0 <HAL_I2C_Mem_Write>
    {
        // Error handling, for example re-initialization of the I2C peripheral
    }
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <I2CReadReg8>:

uint8_t I2CReadReg8(I2C_HandleTypeDef *hi2cx, uint8_t slave_addr,uint8_t register_pointer)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af04      	add	r7, sp, #16
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	70fb      	strb	r3, [r7, #3]
 80016bc:	4613      	mov	r3, r2
 80016be:	70bb      	strb	r3, [r7, #2]
	    uint8_t return_value;

	    /* Check the communication status */
	    if(HAL_I2C_Mem_Read(hi2cx,slave_addr<<1, (uint8_t)register_pointer, I2C_MEMADD_SIZE_8BIT, &return_value, 1, 10) != HAL_OK)
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	b299      	uxth	r1, r3
 80016c8:	78bb      	ldrb	r3, [r7, #2]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	230a      	movs	r3, #10
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	2301      	movs	r3, #1
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	f107 030f 	add.w	r3, r7, #15
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2301      	movs	r3, #1
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f005 f879 	bl	80067d4 <HAL_I2C_Mem_Read>
	    {
	    	//Error handling, for example re-initialization of the I2C peripheral
	    }

	    return return_value;
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of MainTask */
	MainTaskHandle = osThreadNew(Mainfunc, NULL, &MainTask_attributes);
 80016f0:	4a08      	ldr	r2, [pc, #32]	@ (8001714 <MX_FREERTOS_Init+0x28>)
 80016f2:	2100      	movs	r1, #0
 80016f4:	4808      	ldr	r0, [pc, #32]	@ (8001718 <MX_FREERTOS_Init+0x2c>)
 80016f6:	f007 fbed 	bl	8008ed4 <osThreadNew>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a07      	ldr	r2, [pc, #28]	@ (800171c <MX_FREERTOS_Init+0x30>)
 80016fe:	6013      	str	r3, [r2, #0]

	/* creation of CalcTask */
	CalcTaskHandle = osThreadNew(CalcFunc, NULL, &CalcTask_attributes);
 8001700:	4a07      	ldr	r2, [pc, #28]	@ (8001720 <MX_FREERTOS_Init+0x34>)
 8001702:	2100      	movs	r1, #0
 8001704:	4807      	ldr	r0, [pc, #28]	@ (8001724 <MX_FREERTOS_Init+0x38>)
 8001706:	f007 fbe5 	bl	8008ed4 <osThreadNew>
 800170a:	4603      	mov	r3, r0
 800170c:	4a06      	ldr	r2, [pc, #24]	@ (8001728 <MX_FREERTOS_Init+0x3c>)
 800170e:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	0800ec30 	.word	0x0800ec30
 8001718:	08001731 	.word	0x08001731
 800171c:	20000320 	.word	0x20000320
 8001720:	0800ec54 	.word	0x0800ec54
 8001724:	08001a99 	.word	0x08001a99
 8001728:	20000324 	.word	0x20000324
 800172c:	00000000 	.word	0x00000000

08001730 <Mainfunc>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Mainfunc */
void Mainfunc(void *argument)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Mainfunc */
	Rise();
 8001738:	f003 fac2 	bl	8004cc0 <Rise>
	mode = WALK;
 800173c:	4ba4      	ldr	r3, [pc, #656]	@ (80019d0 <Mainfunc+0x2a0>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
	HAL_UART_Init(&huart1);
 8001742:	48a4      	ldr	r0, [pc, #656]	@ (80019d4 <Mainfunc+0x2a4>)
 8001744:	f006 fbd4 	bl	8007ef0 <HAL_UART_Init>
	HAL_UART_Receive_IT(&huart1, &rx, 1);
 8001748:	2201      	movs	r2, #1
 800174a:	49a3      	ldr	r1, [pc, #652]	@ (80019d8 <Mainfunc+0x2a8>)
 800174c:	48a1      	ldr	r0, [pc, #644]	@ (80019d4 <Mainfunc+0x2a4>)
 800174e:	f006 fc1f 	bl	8007f90 <HAL_UART_Receive_IT>
	for(;;)
	{
		X_setpoint = J1y * step_length;
 8001752:	4ba2      	ldr	r3, [pc, #648]	@ (80019dc <Mainfunc+0x2ac>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175e:	4ba0      	ldr	r3, [pc, #640]	@ (80019e0 <Mainfunc+0x2b0>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001768:	4b9e      	ldr	r3, [pc, #632]	@ (80019e4 <Mainfunc+0x2b4>)
 800176a:	edc3 7a00 	vstr	s15, [r3]
		Y_setpoint = J1x * step_length * 0.75;
 800176e:	4b9e      	ldr	r3, [pc, #632]	@ (80019e8 <Mainfunc+0x2b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800177a:	4b99      	ldr	r3, [pc, #612]	@ (80019e0 <Mainfunc+0x2b0>)
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001784:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8001788:	ee67 7a87 	vmul.f32	s15, s15, s14
 800178c:	4b97      	ldr	r3, [pc, #604]	@ (80019ec <Mainfunc+0x2bc>)
 800178e:	edc3 7a00 	vstr	s15, [r3]
		if(X_setpoint != 0.0 || Y_setpoint != 0.0 || body_rotation[2] != 0){
 8001792:	4b94      	ldr	r3, [pc, #592]	@ (80019e4 <Mainfunc+0x2b4>)
 8001794:	edd3 7a00 	vldr	s15, [r3]
 8001798:	eef5 7a40 	vcmp.f32	s15, #0.0
 800179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a0:	d10f      	bne.n	80017c2 <Mainfunc+0x92>
 80017a2:	4b92      	ldr	r3, [pc, #584]	@ (80019ec <Mainfunc+0x2bc>)
 80017a4:	edd3 7a00 	vldr	s15, [r3]
 80017a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b0:	d107      	bne.n	80017c2 <Mainfunc+0x92>
 80017b2:	4b8f      	ldr	r3, [pc, #572]	@ (80019f0 <Mainfunc+0x2c0>)
 80017b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80017b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	d02c      	beq.n	800181c <Mainfunc+0xec>
			Gait_controller(ticks, X_setpoint, Y_setpoint);
 80017c2:	4b8c      	ldr	r3, [pc, #560]	@ (80019f4 <Mainfunc+0x2c4>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	4a87      	ldr	r2, [pc, #540]	@ (80019e4 <Mainfunc+0x2b4>)
 80017c8:	edd2 7a00 	vldr	s15, [r2]
 80017cc:	4a87      	ldr	r2, [pc, #540]	@ (80019ec <Mainfunc+0x2bc>)
 80017ce:	ed92 7a00 	vldr	s14, [r2]
 80017d2:	eef0 0a47 	vmov.f32	s1, s14
 80017d6:	eeb0 0a67 	vmov.f32	s0, s15
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 fed2 	bl	8003584 <Gait_controller>
			//			osSemaphoreRelease(sendSemaphoreHandle);
			ticks+=1;
 80017e0:	4b84      	ldr	r3, [pc, #528]	@ (80019f4 <Mainfunc+0x2c4>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b82      	ldr	r3, [pc, #520]	@ (80019f4 <Mainfunc+0x2c4>)
 80017ea:	701a      	strb	r2, [r3, #0]
			if ( mode == TROT){
 80017ec:	4b78      	ldr	r3, [pc, #480]	@ (80019d0 <Mainfunc+0x2a0>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d107      	bne.n	8001804 <Mainfunc+0xd4>
				if(ticks > 5)
 80017f4:	4b7f      	ldr	r3, [pc, #508]	@ (80019f4 <Mainfunc+0x2c4>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d912      	bls.n	8001822 <Mainfunc+0xf2>
					ticks = 0;
 80017fc:	4b7d      	ldr	r3, [pc, #500]	@ (80019f4 <Mainfunc+0x2c4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
			if ( mode == TROT){
 8001802:	e00e      	b.n	8001822 <Mainfunc+0xf2>
			}else if (mode == WALK){
 8001804:	4b72      	ldr	r3, [pc, #456]	@ (80019d0 <Mainfunc+0x2a0>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10a      	bne.n	8001822 <Mainfunc+0xf2>
				if(ticks > 11)
 800180c:	4b79      	ldr	r3, [pc, #484]	@ (80019f4 <Mainfunc+0x2c4>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b0b      	cmp	r3, #11
 8001812:	d906      	bls.n	8001822 <Mainfunc+0xf2>
					ticks = 0;
 8001814:	4b77      	ldr	r3, [pc, #476]	@ (80019f4 <Mainfunc+0x2c4>)
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
			if ( mode == TROT){
 800181a:	e002      	b.n	8001822 <Mainfunc+0xf2>
			}
		}else{
			Stand();
 800181c:	f001 fe28 	bl	8003470 <Stand>
 8001820:	e000      	b.n	8001824 <Mainfunc+0xf4>
			if ( mode == TROT){
 8001822:	bf00      	nop
		}

		if(mode == WALK && ticks > 0 && ticks < 7){
 8001824:	4b6a      	ldr	r3, [pc, #424]	@ (80019d0 <Mainfunc+0x2a0>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d140      	bne.n	80018ae <Mainfunc+0x17e>
 800182c:	4b71      	ldr	r3, [pc, #452]	@ (80019f4 <Mainfunc+0x2c4>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d03c      	beq.n	80018ae <Mainfunc+0x17e>
 8001834:	4b6f      	ldr	r3, [pc, #444]	@ (80019f4 <Mainfunc+0x2c4>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b06      	cmp	r3, #6
 800183a:	d838      	bhi.n	80018ae <Mainfunc+0x17e>
			req_body_rotation[0] = (0.0025 * J2y) * 57.3248;
 800183c:	4b6e      	ldr	r3, [pc, #440]	@ (80019f8 <Mainfunc+0x2c8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe1f 	bl	8000484 <__aeabi_i2d>
 8001846:	a35e      	add	r3, pc, #376	@ (adr r3, 80019c0 <Mainfunc+0x290>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7fe fe84 	bl	8000558 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	a35b      	add	r3, pc, #364	@ (adr r3, 80019c8 <Mainfunc+0x298>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	f7fe fe7b 	bl	8000558 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	f7ff f96d 	bl	8000b48 <__aeabi_d2f>
 800186e:	4603      	mov	r3, r0
 8001870:	4a62      	ldr	r2, [pc, #392]	@ (80019fc <Mainfunc+0x2cc>)
 8001872:	6013      	str	r3, [r2, #0]
			req_body_rotation[1] = (0.0025 * J2x) * 57.3248;
 8001874:	4b62      	ldr	r3, [pc, #392]	@ (8001a00 <Mainfunc+0x2d0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe03 	bl	8000484 <__aeabi_i2d>
 800187e:	a350      	add	r3, pc, #320	@ (adr r3, 80019c0 <Mainfunc+0x290>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fe68 	bl	8000558 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	a34d      	add	r3, pc, #308	@ (adr r3, 80019c8 <Mainfunc+0x298>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe fe5f 	bl	8000558 <__aeabi_dmul>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff f951 	bl	8000b48 <__aeabi_d2f>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a54      	ldr	r2, [pc, #336]	@ (80019fc <Mainfunc+0x2cc>)
 80018aa:	6053      	str	r3, [r2, #4]
 80018ac:	e078      	b.n	80019a0 <Mainfunc+0x270>
		}else if(mode == WALK && ticks >= 7){
 80018ae:	4b48      	ldr	r3, [pc, #288]	@ (80019d0 <Mainfunc+0x2a0>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d13c      	bne.n	8001930 <Mainfunc+0x200>
 80018b6:	4b4f      	ldr	r3, [pc, #316]	@ (80019f4 <Mainfunc+0x2c4>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d938      	bls.n	8001930 <Mainfunc+0x200>
			req_body_rotation[0] = (0.0025 * J2y) * 57.3248;
 80018be:	4b4e      	ldr	r3, [pc, #312]	@ (80019f8 <Mainfunc+0x2c8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fdde 	bl	8000484 <__aeabi_i2d>
 80018c8:	a33d      	add	r3, pc, #244	@ (adr r3, 80019c0 <Mainfunc+0x290>)
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	f7fe fe43 	bl	8000558 <__aeabi_dmul>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	a33b      	add	r3, pc, #236	@ (adr r3, 80019c8 <Mainfunc+0x298>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe fe3a 	bl	8000558 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff f92c 	bl	8000b48 <__aeabi_d2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a42      	ldr	r2, [pc, #264]	@ (80019fc <Mainfunc+0x2cc>)
 80018f4:	6013      	str	r3, [r2, #0]
			req_body_rotation[1] = (0.0025 * J2x) * 57.3248;
 80018f6:	4b42      	ldr	r3, [pc, #264]	@ (8001a00 <Mainfunc+0x2d0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fdc2 	bl	8000484 <__aeabi_i2d>
 8001900:	a32f      	add	r3, pc, #188	@ (adr r3, 80019c0 <Mainfunc+0x290>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fe27 	bl	8000558 <__aeabi_dmul>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	a32d      	add	r3, pc, #180	@ (adr r3, 80019c8 <Mainfunc+0x298>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe fe1e 	bl	8000558 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff f910 	bl	8000b48 <__aeabi_d2f>
 8001928:	4603      	mov	r3, r0
 800192a:	4a34      	ldr	r2, [pc, #208]	@ (80019fc <Mainfunc+0x2cc>)
 800192c:	6053      	str	r3, [r2, #4]
 800192e:	e037      	b.n	80019a0 <Mainfunc+0x270>
		}else{
			req_body_rotation[0] = (0.0025 * J2y) * 57.3248;
 8001930:	4b31      	ldr	r3, [pc, #196]	@ (80019f8 <Mainfunc+0x2c8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fda5 	bl	8000484 <__aeabi_i2d>
 800193a:	a321      	add	r3, pc, #132	@ (adr r3, 80019c0 <Mainfunc+0x290>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	f7fe fe0a 	bl	8000558 <__aeabi_dmul>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	a31e      	add	r3, pc, #120	@ (adr r3, 80019c8 <Mainfunc+0x298>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7fe fe01 	bl	8000558 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff f8f3 	bl	8000b48 <__aeabi_d2f>
 8001962:	4603      	mov	r3, r0
 8001964:	4a25      	ldr	r2, [pc, #148]	@ (80019fc <Mainfunc+0x2cc>)
 8001966:	6013      	str	r3, [r2, #0]
			req_body_rotation[1] = (0.0025 * J2x) * 57.3248;
 8001968:	4b25      	ldr	r3, [pc, #148]	@ (8001a00 <Mainfunc+0x2d0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fd89 	bl	8000484 <__aeabi_i2d>
 8001972:	a313      	add	r3, pc, #76	@ (adr r3, 80019c0 <Mainfunc+0x290>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fdee 	bl	8000558 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	a310      	add	r3, pc, #64	@ (adr r3, 80019c8 <Mainfunc+0x298>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fde5 	bl	8000558 <__aeabi_dmul>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	f7ff f8d7 	bl	8000b48 <__aeabi_d2f>
 800199a:	4603      	mov	r3, r0
 800199c:	4a17      	ldr	r2, [pc, #92]	@ (80019fc <Mainfunc+0x2cc>)
 800199e:	6053      	str	r3, [r2, #4]
		}


		if(pressed_button == L1){
 80019a0:	4b18      	ldr	r3, [pc, #96]	@ (8001a04 <Mainfunc+0x2d4>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d103      	bne.n	80019b0 <Mainfunc+0x280>
			body_rotation[2] = -0.17;
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <Mainfunc+0x2c0>)
 80019aa:	4a17      	ldr	r2, [pc, #92]	@ (8001a08 <Mainfunc+0x2d8>)
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	e033      	b.n	8001a18 <Mainfunc+0x2e8>
		}else if (pressed_button == R1){
 80019b0:	4b14      	ldr	r3, [pc, #80]	@ (8001a04 <Mainfunc+0x2d4>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b09      	cmp	r3, #9
 80019b6:	d12b      	bne.n	8001a10 <Mainfunc+0x2e0>
			body_rotation[2] = 0.17;
 80019b8:	4b0d      	ldr	r3, [pc, #52]	@ (80019f0 <Mainfunc+0x2c0>)
 80019ba:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <Mainfunc+0x2dc>)
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	e02b      	b.n	8001a18 <Mainfunc+0x2e8>
 80019c0:	47ae147b 	.word	0x47ae147b
 80019c4:	3f647ae1 	.word	0x3f647ae1
 80019c8:	0be0ded3 	.word	0x0be0ded3
 80019cc:	404ca993 	.word	0x404ca993
 80019d0:	2000031c 	.word	0x2000031c
 80019d4:	200003d0 	.word	0x200003d0
 80019d8:	20000306 	.word	0x20000306
 80019dc:	20000310 	.word	0x20000310
 80019e0:	20000094 	.word	0x20000094
 80019e4:	200002d8 	.word	0x200002d8
 80019e8:	2000030c 	.word	0x2000030c
 80019ec:	200002dc 	.word	0x200002dc
 80019f0:	200002a8 	.word	0x200002a8
 80019f4:	20000309 	.word	0x20000309
 80019f8:	20000318 	.word	0x20000318
 80019fc:	200002b4 	.word	0x200002b4
 8001a00:	20000314 	.word	0x20000314
 8001a04:	20000308 	.word	0x20000308
 8001a08:	be2e147b 	.word	0xbe2e147b
 8001a0c:	3e2e147b 	.word	0x3e2e147b
		}else{
			body_rotation[2] = 0.0;
 8001a10:	4b18      	ldr	r3, [pc, #96]	@ (8001a74 <Mainfunc+0x344>)
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
		//		if (pressed_button == A){
		//			while(pressed_button == A);
		//			HiWave();
		//		}

		if (pressed_button == B){
 8001a18:	4b17      	ldr	r3, [pc, #92]	@ (8001a78 <Mainfunc+0x348>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d125      	bne.n	8001a6c <Mainfunc+0x33c>


			//		HAL_UART_Transmit_IT(&huart1, data, strlen(data));
			while(pressed_button == B);
 8001a20:	bf00      	nop
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <Mainfunc+0x348>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d0fb      	beq.n	8001a22 <Mainfunc+0x2f2>
			if(mode == TROT){
 8001a2a:	4b14      	ldr	r3, [pc, #80]	@ (8001a7c <Mainfunc+0x34c>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d10c      	bne.n	8001a4c <Mainfunc+0x31c>
				mode = WALK;
 8001a32:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <Mainfunc+0x34c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
				ticks=0;
 8001a38:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <Mainfunc+0x350>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
				step_height = 0.035;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <Mainfunc+0x354>)
 8001a40:	4a11      	ldr	r2, [pc, #68]	@ (8001a88 <Mainfunc+0x358>)
 8001a42:	601a      	str	r2, [r3, #0]
				step_length = 0.0001;
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <Mainfunc+0x35c>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <Mainfunc+0x360>)
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	e00f      	b.n	8001a6c <Mainfunc+0x33c>
			}else if (mode == WALK){
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <Mainfunc+0x34c>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10b      	bne.n	8001a6c <Mainfunc+0x33c>
				mode = TROT;
 8001a54:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <Mainfunc+0x34c>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]
				step_height = 0.035;
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a84 <Mainfunc+0x354>)
 8001a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a88 <Mainfunc+0x358>)
 8001a5e:	601a      	str	r2, [r3, #0]
				ticks=0;
 8001a60:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <Mainfunc+0x350>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
				step_length = 0.00025;
 8001a66:	4b09      	ldr	r3, [pc, #36]	@ (8001a8c <Mainfunc+0x35c>)
 8001a68:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <Mainfunc+0x364>)
 8001a6a:	601a      	str	r2, [r3, #0]

			//			sprintf(data,"0 0 %d 0\r\n", mode);
			//			HAL_UART_Transmit_IT(&huart1, data, strlen(data));
		}

		HAL_Delay(200);
 8001a6c:	20c8      	movs	r0, #200	@ 0xc8
 8001a6e:	f003 fddd 	bl	800562c <HAL_Delay>
		X_setpoint = J1y * step_length;
 8001a72:	e66e      	b.n	8001752 <Mainfunc+0x22>
 8001a74:	200002a8 	.word	0x200002a8
 8001a78:	20000308 	.word	0x20000308
 8001a7c:	2000031c 	.word	0x2000031c
 8001a80:	20000309 	.word	0x20000309
 8001a84:	20000090 	.word	0x20000090
 8001a88:	3d0f5c29 	.word	0x3d0f5c29
 8001a8c:	20000094 	.word	0x20000094
 8001a90:	38d1b717 	.word	0x38d1b717
 8001a94:	3983126f 	.word	0x3983126f

08001a98 <CalcFunc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CalcFunc */
void CalcFunc(void *argument)
{
 8001a98:	b5b0      	push	{r4, r5, r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af04      	add	r7, sp, #16
 8001a9e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN CalcFunc */
	FL_offsets[0] = 0.21;
 8001aa0:	4ba1      	ldr	r3, [pc, #644]	@ (8001d28 <CalcFunc+0x290>)
 8001aa2:	4aa2      	ldr	r2, [pc, #648]	@ (8001d2c <CalcFunc+0x294>)
 8001aa4:	601a      	str	r2, [r3, #0]
	FL_offsets[1] = -0.10;
 8001aa6:	4ba0      	ldr	r3, [pc, #640]	@ (8001d28 <CalcFunc+0x290>)
 8001aa8:	4aa1      	ldr	r2, [pc, #644]	@ (8001d30 <CalcFunc+0x298>)
 8001aaa:	605a      	str	r2, [r3, #4]
	FL_offsets[2] = -0.26;
 8001aac:	4b9e      	ldr	r3, [pc, #632]	@ (8001d28 <CalcFunc+0x290>)
 8001aae:	4aa1      	ldr	r2, [pc, #644]	@ (8001d34 <CalcFunc+0x29c>)
 8001ab0:	609a      	str	r2, [r3, #8]
	FR_offsets[0] = -0.09;
 8001ab2:	4ba1      	ldr	r3, [pc, #644]	@ (8001d38 <CalcFunc+0x2a0>)
 8001ab4:	4aa1      	ldr	r2, [pc, #644]	@ (8001d3c <CalcFunc+0x2a4>)
 8001ab6:	601a      	str	r2, [r3, #0]
	FR_offsets[1] = 0.02;
 8001ab8:	4b9f      	ldr	r3, [pc, #636]	@ (8001d38 <CalcFunc+0x2a0>)
 8001aba:	4aa1      	ldr	r2, [pc, #644]	@ (8001d40 <CalcFunc+0x2a8>)
 8001abc:	605a      	str	r2, [r3, #4]
	FR_offsets[2] = -0.23;
 8001abe:	4b9e      	ldr	r3, [pc, #632]	@ (8001d38 <CalcFunc+0x2a0>)
 8001ac0:	4aa0      	ldr	r2, [pc, #640]	@ (8001d44 <CalcFunc+0x2ac>)
 8001ac2:	609a      	str	r2, [r3, #8]
	BL_offsets[0] = 0.09;
 8001ac4:	4ba0      	ldr	r3, [pc, #640]	@ (8001d48 <CalcFunc+0x2b0>)
 8001ac6:	4aa1      	ldr	r2, [pc, #644]	@ (8001d4c <CalcFunc+0x2b4>)
 8001ac8:	601a      	str	r2, [r3, #0]
	BL_offsets[1] = -0.08;
 8001aca:	4b9f      	ldr	r3, [pc, #636]	@ (8001d48 <CalcFunc+0x2b0>)
 8001acc:	4aa0      	ldr	r2, [pc, #640]	@ (8001d50 <CalcFunc+0x2b8>)
 8001ace:	605a      	str	r2, [r3, #4]
	BL_offsets[2] = -0.04;
 8001ad0:	4b9d      	ldr	r3, [pc, #628]	@ (8001d48 <CalcFunc+0x2b0>)
 8001ad2:	4aa0      	ldr	r2, [pc, #640]	@ (8001d54 <CalcFunc+0x2bc>)
 8001ad4:	609a      	str	r2, [r3, #8]
	BR_offsets[0] = -0.01;
 8001ad6:	4ba0      	ldr	r3, [pc, #640]	@ (8001d58 <CalcFunc+0x2c0>)
 8001ad8:	4aa0      	ldr	r2, [pc, #640]	@ (8001d5c <CalcFunc+0x2c4>)
 8001ada:	601a      	str	r2, [r3, #0]
	BR_offsets[1] = 0.15;
 8001adc:	4b9e      	ldr	r3, [pc, #632]	@ (8001d58 <CalcFunc+0x2c0>)
 8001ade:	4aa0      	ldr	r2, [pc, #640]	@ (8001d60 <CalcFunc+0x2c8>)
 8001ae0:	605a      	str	r2, [r3, #4]
	BR_offsets[2] = 0.38;
 8001ae2:	4b9d      	ldr	r3, [pc, #628]	@ (8001d58 <CalcFunc+0x2c0>)
 8001ae4:	4a9f      	ldr	r2, [pc, #636]	@ (8001d64 <CalcFunc+0x2cc>)
 8001ae6:	609a      	str	r2, [r3, #8]
	ServoDriverInit(&pca9865, &hi2c1, SERVO_DRIVER_ADDRESS);
 8001ae8:	2240      	movs	r2, #64	@ 0x40
 8001aea:	499f      	ldr	r1, [pc, #636]	@ (8001d68 <CalcFunc+0x2d0>)
 8001aec:	489f      	ldr	r0, [pc, #636]	@ (8001d6c <CalcFunc+0x2d4>)
 8001aee:	f7ff fc8b 	bl	8001408 <ServoDriverInit>
	HAL_Delay(300);
 8001af2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001af6:	f003 fd99 	bl	800562c <HAL_Delay>
	MPUInit(&mpu6050, &hi2c2, MPU6050_DataRate_2KHz, MPU6050_Accelerometer_2G, MPU6050_Gyroscope_250s, 0.005, 0.5);
 8001afa:	2300      	movs	r3, #0
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8001b02:	ed9f 0a9b 	vldr	s0, [pc, #620]	@ 8001d70 <CalcFunc+0x2d8>
 8001b06:	2300      	movs	r3, #0
 8001b08:	2203      	movs	r2, #3
 8001b0a:	499a      	ldr	r1, [pc, #616]	@ (8001d74 <CalcFunc+0x2dc>)
 8001b0c:	489a      	ldr	r0, [pc, #616]	@ (8001d78 <CalcFunc+0x2e0>)
 8001b0e:	f7ff f9e3 	bl	8000ed8 <MPUInit>
	MPUSetOffsets(&mpu6050, -944, -600, -590, 1130, 16, 923);
 8001b12:	f240 339b 	movw	r3, #923	@ 0x39b
 8001b16:	9302      	str	r3, [sp, #8]
 8001b18:	2310      	movs	r3, #16
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	f240 436a 	movw	r3, #1130	@ 0x46a
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	4b96      	ldr	r3, [pc, #600]	@ (8001d7c <CalcFunc+0x2e4>)
 8001b24:	4a96      	ldr	r2, [pc, #600]	@ (8001d80 <CalcFunc+0x2e8>)
 8001b26:	4997      	ldr	r1, [pc, #604]	@ (8001d84 <CalcFunc+0x2ec>)
 8001b28:	4893      	ldr	r0, [pc, #588]	@ (8001d78 <CalcFunc+0x2e0>)
 8001b2a:	f7ff fabf 	bl	80010ac <MPUSetOffsets>
	SPIDInit(&pid_pitch, &pitch_error, &pitch_output, 0.01, 1.0, 0.3, 0.21, 0.01, 0.004, 1.0/30.0, 0.2);
 8001b2e:	eddf 3a96 	vldr	s7, [pc, #600]	@ 8001d88 <CalcFunc+0x2f0>
 8001b32:	ed9f 3a96 	vldr	s6, [pc, #600]	@ 8001d8c <CalcFunc+0x2f4>
 8001b36:	eddf 2a96 	vldr	s5, [pc, #600]	@ 8001d90 <CalcFunc+0x2f8>
 8001b3a:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 8001d94 <CalcFunc+0x2fc>
 8001b3e:	eddf 1a96 	vldr	s3, [pc, #600]	@ 8001d98 <CalcFunc+0x300>
 8001b42:	ed9f 1a96 	vldr	s2, [pc, #600]	@ 8001d9c <CalcFunc+0x304>
 8001b46:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001b4a:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 8001d94 <CalcFunc+0x2fc>
 8001b4e:	4a94      	ldr	r2, [pc, #592]	@ (8001da0 <CalcFunc+0x308>)
 8001b50:	4994      	ldr	r1, [pc, #592]	@ (8001da4 <CalcFunc+0x30c>)
 8001b52:	4895      	ldr	r0, [pc, #596]	@ (8001da8 <CalcFunc+0x310>)
 8001b54:	f003 fad0 	bl	80050f8 <SPIDInit>
	SPIDInit(&pid_roll, &roll_error, &roll_output, 0.01, 1.0, 0.3, 0.21, 0.01, 0.004, 1.0/30.0, 0.2);
 8001b58:	eddf 3a8b 	vldr	s7, [pc, #556]	@ 8001d88 <CalcFunc+0x2f0>
 8001b5c:	ed9f 3a8b 	vldr	s6, [pc, #556]	@ 8001d8c <CalcFunc+0x2f4>
 8001b60:	eddf 2a8b 	vldr	s5, [pc, #556]	@ 8001d90 <CalcFunc+0x2f8>
 8001b64:	ed9f 2a8b 	vldr	s4, [pc, #556]	@ 8001d94 <CalcFunc+0x2fc>
 8001b68:	eddf 1a8b 	vldr	s3, [pc, #556]	@ 8001d98 <CalcFunc+0x300>
 8001b6c:	ed9f 1a8b 	vldr	s2, [pc, #556]	@ 8001d9c <CalcFunc+0x304>
 8001b70:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001b74:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 8001d94 <CalcFunc+0x2fc>
 8001b78:	4a8c      	ldr	r2, [pc, #560]	@ (8001dac <CalcFunc+0x314>)
 8001b7a:	498d      	ldr	r1, [pc, #564]	@ (8001db0 <CalcFunc+0x318>)
 8001b7c:	488d      	ldr	r0, [pc, #564]	@ (8001db4 <CalcFunc+0x31c>)
 8001b7e:	f003 fabb 	bl	80050f8 <SPIDInit>

	/* Infinite loop */
	for(;;)
	{
		//		osSemaphoreAcquire(sendSemaphoreHandle, osWaitForever);
		MPUReqAccGyro(&mpu6050);
 8001b82:	487d      	ldr	r0, [pc, #500]	@ (8001d78 <CalcFunc+0x2e0>)
 8001b84:	f7ff fab7 	bl	80010f6 <MPUReqAccGyro>
		CompPitchRoll(&mpu6050);
 8001b88:	487b      	ldr	r0, [pc, #492]	@ (8001d78 <CalcFunc+0x2e0>)
 8001b8a:	f7ff fb89 	bl	80012a0 <CompPitchRoll>
		pitch_error = req_body_rotation[0] - (-mpu6050.roll + 0.75);  // Increase to move back
 8001b8e:	4b8a      	ldr	r3, [pc, #552]	@ (8001db8 <CalcFunc+0x320>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fc88 	bl	80004a8 <__aeabi_f2d>
 8001b98:	4604      	mov	r4, r0
 8001b9a:	460d      	mov	r5, r1
 8001b9c:	4b76      	ldr	r3, [pc, #472]	@ (8001d78 <CalcFunc+0x2e0>)
 8001b9e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001ba2:	eef1 7a67 	vneg.f32	s15, s15
 8001ba6:	ee17 3a90 	vmov	r3, s15
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fc7c 	bl	80004a8 <__aeabi_f2d>
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b81      	ldr	r3, [pc, #516]	@ (8001dbc <CalcFunc+0x324>)
 8001bb6:	f7fe fb19 	bl	80001ec <__adddf3>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	f7fe fb11 	bl	80001e8 <__aeabi_dsub>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7fe ffbb 	bl	8000b48 <__aeabi_d2f>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a73      	ldr	r2, [pc, #460]	@ (8001da4 <CalcFunc+0x30c>)
 8001bd6:	6013      	str	r3, [r2, #0]
		roll_error = req_body_rotation[1] - (mpu6050.pitch - 11.0);  // decrease to tilt right
 8001bd8:	4b77      	ldr	r3, [pc, #476]	@ (8001db8 <CalcFunc+0x320>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fc63 	bl	80004a8 <__aeabi_f2d>
 8001be2:	4604      	mov	r4, r0
 8001be4:	460d      	mov	r5, r1
 8001be6:	4b64      	ldr	r3, [pc, #400]	@ (8001d78 <CalcFunc+0x2e0>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fc5c 	bl	80004a8 <__aeabi_f2d>
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4b72      	ldr	r3, [pc, #456]	@ (8001dc0 <CalcFunc+0x328>)
 8001bf6:	f7fe faf7 	bl	80001e8 <__aeabi_dsub>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe faf1 	bl	80001e8 <__aeabi_dsub>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe ff9b 	bl	8000b48 <__aeabi_d2f>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4a66      	ldr	r2, [pc, #408]	@ (8001db0 <CalcFunc+0x318>)
 8001c16:	6013      	str	r3, [r2, #0]
		SPIDLoop(&pid_pitch);
 8001c18:	4863      	ldr	r0, [pc, #396]	@ (8001da8 <CalcFunc+0x310>)
 8001c1a:	f003 fab3 	bl	8005184 <SPIDLoop>
		SPIDLoop(&pid_roll);
 8001c1e:	4865      	ldr	r0, [pc, #404]	@ (8001db4 <CalcFunc+0x31c>)
 8001c20:	f003 fab0 	bl	8005184 <SPIDLoop>
		pitch_sum+=pitch_output;
 8001c24:	4b67      	ldr	r3, [pc, #412]	@ (8001dc4 <CalcFunc+0x32c>)
 8001c26:	ed93 7a00 	vldr	s14, [r3]
 8001c2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001da0 <CalcFunc+0x308>)
 8001c2c:	edd3 7a00 	vldr	s15, [r3]
 8001c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c34:	4b63      	ldr	r3, [pc, #396]	@ (8001dc4 <CalcFunc+0x32c>)
 8001c36:	edc3 7a00 	vstr	s15, [r3]
		if (pitch_sum > 0.3) pitch_sum = 0.3;
 8001c3a:	4b62      	ldr	r3, [pc, #392]	@ (8001dc4 <CalcFunc+0x32c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc32 	bl	80004a8 <__aeabi_f2d>
 8001c44:	a334      	add	r3, pc, #208	@ (adr r3, 8001d18 <CalcFunc+0x280>)
 8001c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4a:	f7fe ff15 	bl	8000a78 <__aeabi_dcmpgt>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <CalcFunc+0x1c2>
 8001c54:	4b5b      	ldr	r3, [pc, #364]	@ (8001dc4 <CalcFunc+0x32c>)
 8001c56:	4a5c      	ldr	r2, [pc, #368]	@ (8001dc8 <CalcFunc+0x330>)
 8001c58:	601a      	str	r2, [r3, #0]
		if (pitch_sum < -0.3) pitch_sum = -0.3;
 8001c5a:	4b5a      	ldr	r3, [pc, #360]	@ (8001dc4 <CalcFunc+0x32c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc22 	bl	80004a8 <__aeabi_f2d>
 8001c64:	a32e      	add	r3, pc, #184	@ (adr r3, 8001d20 <CalcFunc+0x288>)
 8001c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6a:	f7fe fee7 	bl	8000a3c <__aeabi_dcmplt>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <CalcFunc+0x1e2>
 8001c74:	4b53      	ldr	r3, [pc, #332]	@ (8001dc4 <CalcFunc+0x32c>)
 8001c76:	4a55      	ldr	r2, [pc, #340]	@ (8001dcc <CalcFunc+0x334>)
 8001c78:	601a      	str	r2, [r3, #0]
		roll_sum+=roll_output;
 8001c7a:	4b55      	ldr	r3, [pc, #340]	@ (8001dd0 <CalcFunc+0x338>)
 8001c7c:	ed93 7a00 	vldr	s14, [r3]
 8001c80:	4b4a      	ldr	r3, [pc, #296]	@ (8001dac <CalcFunc+0x314>)
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8a:	4b51      	ldr	r3, [pc, #324]	@ (8001dd0 <CalcFunc+0x338>)
 8001c8c:	edc3 7a00 	vstr	s15, [r3]
		if (roll_sum > 0.3) roll_sum = 0.3;
 8001c90:	4b4f      	ldr	r3, [pc, #316]	@ (8001dd0 <CalcFunc+0x338>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc07 	bl	80004a8 <__aeabi_f2d>
 8001c9a:	a31f      	add	r3, pc, #124	@ (adr r3, 8001d18 <CalcFunc+0x280>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe feea 	bl	8000a78 <__aeabi_dcmpgt>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d002      	beq.n	8001cb0 <CalcFunc+0x218>
 8001caa:	4b49      	ldr	r3, [pc, #292]	@ (8001dd0 <CalcFunc+0x338>)
 8001cac:	4a46      	ldr	r2, [pc, #280]	@ (8001dc8 <CalcFunc+0x330>)
 8001cae:	601a      	str	r2, [r3, #0]
		if (roll_sum < -0.3) roll_sum = -0.3;
 8001cb0:	4b47      	ldr	r3, [pc, #284]	@ (8001dd0 <CalcFunc+0x338>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fbf7 	bl	80004a8 <__aeabi_f2d>
 8001cba:	a319      	add	r3, pc, #100	@ (adr r3, 8001d20 <CalcFunc+0x288>)
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f7fe febc 	bl	8000a3c <__aeabi_dcmplt>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <CalcFunc+0x238>
 8001cca:	4b41      	ldr	r3, [pc, #260]	@ (8001dd0 <CalcFunc+0x338>)
 8001ccc:	4a3f      	ldr	r2, [pc, #252]	@ (8001dcc <CalcFunc+0x334>)
 8001cce:	601a      	str	r2, [r3, #0]

		body_rotation[0]= pitch_sum;
 8001cd0:	4b3c      	ldr	r3, [pc, #240]	@ (8001dc4 <CalcFunc+0x32c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a3f      	ldr	r2, [pc, #252]	@ (8001dd4 <CalcFunc+0x33c>)
 8001cd6:	6013      	str	r3, [r2, #0]
		body_rotation[1]= roll_sum;
 8001cd8:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd0 <CalcFunc+0x338>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a3d      	ldr	r2, [pc, #244]	@ (8001dd4 <CalcFunc+0x33c>)
 8001cde:	6053      	str	r3, [r2, #4]

		//		sprintf(data," Pitch: %d  Roll: %d \r\n", (int)(-mpu6050.roll), (int)(mpu6050.pitch));
		//				sprintf(data," %d %d \r\n",(int)J1y, (int)J1x);
		//		HAL_UART_Transmit_IT(&huart1, data, strlen(data));

		inverse_kinematics_all(FL_position,FR_position,BL_position, BR_position, FL_body_angles, FR_body_angles, BL_body_angles, BR_body_angles);
 8001ce0:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd8 <CalcFunc+0x340>)
 8001ce2:	9303      	str	r3, [sp, #12]
 8001ce4:	4b3d      	ldr	r3, [pc, #244]	@ (8001ddc <CalcFunc+0x344>)
 8001ce6:	9302      	str	r3, [sp, #8]
 8001ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8001de0 <CalcFunc+0x348>)
 8001cea:	9301      	str	r3, [sp, #4]
 8001cec:	4b3d      	ldr	r3, [pc, #244]	@ (8001de4 <CalcFunc+0x34c>)
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	4b3d      	ldr	r3, [pc, #244]	@ (8001de8 <CalcFunc+0x350>)
 8001cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8001dec <CalcFunc+0x354>)
 8001cf4:	493e      	ldr	r1, [pc, #248]	@ (8001df0 <CalcFunc+0x358>)
 8001cf6:	483f      	ldr	r0, [pc, #252]	@ (8001df4 <CalcFunc+0x35c>)
 8001cf8:	f001 f83a 	bl	8002d70 <inverse_kinematics_all>
		load_angles();
 8001cfc:	f001 faca 	bl	8003294 <load_angles>
		ServoDriverSetOnOff_Multi(&pca9865,0,12,pulses);
 8001d00:	4b3d      	ldr	r3, [pc, #244]	@ (8001df8 <CalcFunc+0x360>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	2100      	movs	r1, #0
 8001d06:	4819      	ldr	r0, [pc, #100]	@ (8001d6c <CalcFunc+0x2d4>)
 8001d08:	f7ff fc6f 	bl	80015ea <ServoDriverSetOnOff_Multi>
		//		ServoDriverSetOnOff(&pca9865,1,0,pulses[1]);
		//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		HAL_Delay(10);
 8001d0c:	200a      	movs	r0, #10
 8001d0e:	f003 fc8d 	bl	800562c <HAL_Delay>
		MPUReqAccGyro(&mpu6050);
 8001d12:	e736      	b.n	8001b82 <CalcFunc+0xea>
 8001d14:	f3af 8000 	nop.w
 8001d18:	33333333 	.word	0x33333333
 8001d1c:	3fd33333 	.word	0x3fd33333
 8001d20:	33333333 	.word	0x33333333
 8001d24:	bfd33333 	.word	0xbfd33333
 8001d28:	20000218 	.word	0x20000218
 8001d2c:	3e570a3d 	.word	0x3e570a3d
 8001d30:	bdcccccd 	.word	0xbdcccccd
 8001d34:	be851eb8 	.word	0xbe851eb8
 8001d38:	20000224 	.word	0x20000224
 8001d3c:	bdb851ec 	.word	0xbdb851ec
 8001d40:	3ca3d70a 	.word	0x3ca3d70a
 8001d44:	be6b851f 	.word	0xbe6b851f
 8001d48:	20000230 	.word	0x20000230
 8001d4c:	3db851ec 	.word	0x3db851ec
 8001d50:	bda3d70a 	.word	0xbda3d70a
 8001d54:	bd23d70a 	.word	0xbd23d70a
 8001d58:	2000023c 	.word	0x2000023c
 8001d5c:	bc23d70a 	.word	0xbc23d70a
 8001d60:	3e19999a 	.word	0x3e19999a
 8001d64:	3ec28f5c 	.word	0x3ec28f5c
 8001d68:	20000328 	.word	0x20000328
 8001d6c:	2000012c 	.word	0x2000012c
 8001d70:	3ba3d70a 	.word	0x3ba3d70a
 8001d74:	2000037c 	.word	0x2000037c
 8001d78:	20000134 	.word	0x20000134
 8001d7c:	fffffdb2 	.word	0xfffffdb2
 8001d80:	fffffda8 	.word	0xfffffda8
 8001d84:	fffffc50 	.word	0xfffffc50
 8001d88:	3e4ccccd 	.word	0x3e4ccccd
 8001d8c:	3d088889 	.word	0x3d088889
 8001d90:	3b83126f 	.word	0x3b83126f
 8001d94:	3c23d70a 	.word	0x3c23d70a
 8001d98:	3e570a3d 	.word	0x3e570a3d
 8001d9c:	3e99999a 	.word	0x3e99999a
 8001da0:	200002c4 	.word	0x200002c4
 8001da4:	200002c0 	.word	0x200002c0
 8001da8:	20000190 	.word	0x20000190
 8001dac:	200002d0 	.word	0x200002d0
 8001db0:	200002cc 	.word	0x200002cc
 8001db4:	200001c8 	.word	0x200001c8
 8001db8:	200002b4 	.word	0x200002b4
 8001dbc:	3fe80000 	.word	0x3fe80000
 8001dc0:	40260000 	.word	0x40260000
 8001dc4:	200002c8 	.word	0x200002c8
 8001dc8:	3e99999a 	.word	0x3e99999a
 8001dcc:	be99999a 	.word	0xbe99999a
 8001dd0:	200002d4 	.word	0x200002d4
 8001dd4:	200002a8 	.word	0x200002a8
 8001dd8:	2000026c 	.word	0x2000026c
 8001ddc:	20000260 	.word	0x20000260
 8001de0:	20000254 	.word	0x20000254
 8001de4:	20000248 	.word	0x20000248
 8001de8:	20000024 	.word	0x20000024
 8001dec:	20000018 	.word	0x20000018
 8001df0:	2000000c 	.word	0x2000000c
 8001df4:	20000000 	.word	0x20000000
 8001df8:	20000200 	.word	0x20000200

08001dfc <HAL_UART_RxCpltCallback>:
	/* USER CODE END CalcFunc */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	if(rx != '\n'){
 8001e04:	4b9e      	ldr	r3, [pc, #632]	@ (8002080 <HAL_UART_RxCpltCallback+0x284>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b0a      	cmp	r3, #10
 8001e0a:	d00d      	beq.n	8001e28 <HAL_UART_RxCpltCallback+0x2c>
		data[rx_index] = rx;
 8001e0c:	4b9d      	ldr	r3, [pc, #628]	@ (8002084 <HAL_UART_RxCpltCallback+0x288>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b9b      	ldr	r3, [pc, #620]	@ (8002080 <HAL_UART_RxCpltCallback+0x284>)
 8001e14:	7819      	ldrb	r1, [r3, #0]
 8001e16:	4b9c      	ldr	r3, [pc, #624]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8001e18:	5499      	strb	r1, [r3, r2]
		rx_index +=1;
 8001e1a:	4b9a      	ldr	r3, [pc, #616]	@ (8002084 <HAL_UART_RxCpltCallback+0x288>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4b98      	ldr	r3, [pc, #608]	@ (8002084 <HAL_UART_RxCpltCallback+0x288>)
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	e15e      	b.n	80020e6 <HAL_UART_RxCpltCallback+0x2ea>
	}else{
		data[rx_index] = rx;
 8001e28:	4b96      	ldr	r3, [pc, #600]	@ (8002084 <HAL_UART_RxCpltCallback+0x288>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b94      	ldr	r3, [pc, #592]	@ (8002080 <HAL_UART_RxCpltCallback+0x284>)
 8001e30:	7819      	ldrb	r1, [r3, #0]
 8001e32:	4b95      	ldr	r3, [pc, #596]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8001e34:	5499      	strb	r1, [r3, r2]
		rx_index = 0;
 8001e36:	4b93      	ldr	r3, [pc, #588]	@ (8002084 <HAL_UART_RxCpltCallback+0x288>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]

		switch(data[0]){
 8001e3c:	4b92      	ldr	r3, [pc, #584]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	3b41      	subs	r3, #65	@ 0x41
 8001e42:	2b18      	cmp	r3, #24
 8001e44:	f200 814a 	bhi.w	80020dc <HAL_UART_RxCpltCallback+0x2e0>
 8001e48:	a201      	add	r2, pc, #4	@ (adr r2, 8001e50 <HAL_UART_RxCpltCallback+0x54>)
 8001e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4e:	bf00      	nop
 8001e50:	08001eb5 	.word	0x08001eb5
 8001e54:	08001ebd 	.word	0x08001ebd
 8001e58:	08001ec5 	.word	0x08001ec5
 8001e5c:	08001ecd 	.word	0x08001ecd
 8001e60:	080020dd 	.word	0x080020dd
 8001e64:	080020dd 	.word	0x080020dd
 8001e68:	080020dd 	.word	0x080020dd
 8001e6c:	080020dd 	.word	0x080020dd
 8001e70:	080020dd 	.word	0x080020dd
 8001e74:	08001f91 	.word	0x08001f91
 8001e78:	080020dd 	.word	0x080020dd
 8001e7c:	08001ee5 	.word	0x08001ee5
 8001e80:	080020dd 	.word	0x080020dd
 8001e84:	080020dd 	.word	0x080020dd
 8001e88:	080020dd 	.word	0x080020dd
 8001e8c:	080020dd 	.word	0x080020dd
 8001e90:	080020dd 	.word	0x080020dd
 8001e94:	08001eed 	.word	0x08001eed
 8001e98:	08001ef5 	.word	0x08001ef5
 8001e9c:	080020dd 	.word	0x080020dd
 8001ea0:	080020dd 	.word	0x080020dd
 8001ea4:	080020dd 	.word	0x080020dd
 8001ea8:	080020dd 	.word	0x080020dd
 8001eac:	08001ed5 	.word	0x08001ed5
 8001eb0:	08001edd 	.word	0x08001edd
		case 'A' :
			pressed_button = A;
 8001eb4:	4b75      	ldr	r3, [pc, #468]	@ (800208c <HAL_UART_RxCpltCallback+0x290>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	701a      	strb	r2, [r3, #0]
			break;
 8001eba:	e10f      	b.n	80020dc <HAL_UART_RxCpltCallback+0x2e0>
		case 'B' :
			pressed_button = B;
 8001ebc:	4b73      	ldr	r3, [pc, #460]	@ (800208c <HAL_UART_RxCpltCallback+0x290>)
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	701a      	strb	r2, [r3, #0]
			break;
 8001ec2:	e10b      	b.n	80020dc <HAL_UART_RxCpltCallback+0x2e0>
		case 'C' :
			pressed_button = C;
 8001ec4:	4b71      	ldr	r3, [pc, #452]	@ (800208c <HAL_UART_RxCpltCallback+0x290>)
 8001ec6:	2203      	movs	r2, #3
 8001ec8:	701a      	strb	r2, [r3, #0]
			break;
 8001eca:	e107      	b.n	80020dc <HAL_UART_RxCpltCallback+0x2e0>
		case 'D' :
			pressed_button = D;
 8001ecc:	4b6f      	ldr	r3, [pc, #444]	@ (800208c <HAL_UART_RxCpltCallback+0x290>)
 8001ece:	2204      	movs	r2, #4
 8001ed0:	701a      	strb	r2, [r3, #0]
			break;
 8001ed2:	e103      	b.n	80020dc <HAL_UART_RxCpltCallback+0x2e0>
		case 'X' :
			pressed_button = X;
 8001ed4:	4b6d      	ldr	r3, [pc, #436]	@ (800208c <HAL_UART_RxCpltCallback+0x290>)
 8001ed6:	2205      	movs	r2, #5
 8001ed8:	701a      	strb	r2, [r3, #0]
			break;
 8001eda:	e0ff      	b.n	80020dc <HAL_UART_RxCpltCallback+0x2e0>
		case 'Y' :
			pressed_button = Y;
 8001edc:	4b6b      	ldr	r3, [pc, #428]	@ (800208c <HAL_UART_RxCpltCallback+0x290>)
 8001ede:	2206      	movs	r2, #6
 8001ee0:	701a      	strb	r2, [r3, #0]
			break;
 8001ee2:	e0fb      	b.n	80020dc <HAL_UART_RxCpltCallback+0x2e0>
		case 'L' :
			pressed_button = L1;
 8001ee4:	4b69      	ldr	r3, [pc, #420]	@ (800208c <HAL_UART_RxCpltCallback+0x290>)
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	701a      	strb	r2, [r3, #0]
			break;
 8001eea:	e0f7      	b.n	80020dc <HAL_UART_RxCpltCallback+0x2e0>
		case 'R' :
			pressed_button = R1;
 8001eec:	4b67      	ldr	r3, [pc, #412]	@ (800208c <HAL_UART_RxCpltCallback+0x290>)
 8001eee:	2209      	movs	r2, #9
 8001ef0:	701a      	strb	r2, [r3, #0]
			break;
 8001ef2:	e0f3      	b.n	80020dc <HAL_UART_RxCpltCallback+0x2e0>
		case 'S' :
			if(data[1] == 'T'){
 8001ef4:	4b64      	ldr	r3, [pc, #400]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8001ef6:	785b      	ldrb	r3, [r3, #1]
 8001ef8:	2b54      	cmp	r3, #84	@ 0x54
 8001efa:	d103      	bne.n	8001f04 <HAL_UART_RxCpltCallback+0x108>
				pressed_button = START;
 8001efc:	4b63      	ldr	r3, [pc, #396]	@ (800208c <HAL_UART_RxCpltCallback+0x290>)
 8001efe:	2207      	movs	r2, #7
 8001f00:	701a      	strb	r2, [r3, #0]
				J1x = 0.0;
				J1y = 0.0;
				J2y = 0.0;
				J2x = 0.0;
			}
			break;
 8001f02:	e0eb      	b.n	80020dc <HAL_UART_RxCpltCallback+0x2e0>
			}else if(data[1] == '1'){
 8001f04:	4b60      	ldr	r3, [pc, #384]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8001f06:	785b      	ldrb	r3, [r3, #1]
 8001f08:	2b31      	cmp	r3, #49	@ 0x31
 8001f0a:	d116      	bne.n	8001f3a <HAL_UART_RxCpltCallback+0x13e>
				num_conv[0] = data[2];
 8001f0c:	4b5e      	ldr	r3, [pc, #376]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8001f0e:	789a      	ldrb	r2, [r3, #2]
 8001f10:	4b5f      	ldr	r3, [pc, #380]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8001f12:	701a      	strb	r2, [r3, #0]
				num_conv[1] = data[3];
 8001f14:	4b5c      	ldr	r3, [pc, #368]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8001f16:	78da      	ldrb	r2, [r3, #3]
 8001f18:	4b5d      	ldr	r3, [pc, #372]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8001f1a:	705a      	strb	r2, [r3, #1]
				num_conv[2] = data[4];
 8001f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8001f1e:	791a      	ldrb	r2, [r3, #4]
 8001f20:	4b5b      	ldr	r3, [pc, #364]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8001f22:	709a      	strb	r2, [r3, #2]
				num_conv[3] = '0';
 8001f24:	4b5a      	ldr	r3, [pc, #360]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8001f26:	2230      	movs	r2, #48	@ 0x30
 8001f28:	70da      	strb	r2, [r3, #3]
				slider_speed = (uint8_t)(atoi(num_conv));
 8001f2a:	4859      	ldr	r0, [pc, #356]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8001f2c:	f009 fce4 	bl	800b8f8 <atoi>
 8001f30:	4603      	mov	r3, r0
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	4b57      	ldr	r3, [pc, #348]	@ (8002094 <HAL_UART_RxCpltCallback+0x298>)
 8001f36:	701a      	strb	r2, [r3, #0]
			break;
 8001f38:	e0d0      	b.n	80020dc <HAL_UART_RxCpltCallback+0x2e0>
			}else if(data[1] == '2'){
 8001f3a:	4b53      	ldr	r3, [pc, #332]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8001f3c:	785b      	ldrb	r3, [r3, #1]
 8001f3e:	2b32      	cmp	r3, #50	@ 0x32
 8001f40:	d116      	bne.n	8001f70 <HAL_UART_RxCpltCallback+0x174>
				num_conv[0] = data[2];
 8001f42:	4b51      	ldr	r3, [pc, #324]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8001f44:	789a      	ldrb	r2, [r3, #2]
 8001f46:	4b52      	ldr	r3, [pc, #328]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8001f48:	701a      	strb	r2, [r3, #0]
				num_conv[1] = data[3];
 8001f4a:	4b4f      	ldr	r3, [pc, #316]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8001f4c:	78da      	ldrb	r2, [r3, #3]
 8001f4e:	4b50      	ldr	r3, [pc, #320]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8001f50:	705a      	strb	r2, [r3, #1]
				num_conv[2] = data[4];
 8001f52:	4b4d      	ldr	r3, [pc, #308]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8001f54:	791a      	ldrb	r2, [r3, #4]
 8001f56:	4b4e      	ldr	r3, [pc, #312]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8001f58:	709a      	strb	r2, [r3, #2]
				num_conv[3] = '0';
 8001f5a:	4b4d      	ldr	r3, [pc, #308]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8001f5c:	2230      	movs	r2, #48	@ 0x30
 8001f5e:	70da      	strb	r2, [r3, #3]
				slider_angle = (uint8_t)(atoi(num_conv));
 8001f60:	484b      	ldr	r0, [pc, #300]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8001f62:	f009 fcc9 	bl	800b8f8 <atoi>
 8001f66:	4603      	mov	r3, r0
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4b4b      	ldr	r3, [pc, #300]	@ (8002098 <HAL_UART_RxCpltCallback+0x29c>)
 8001f6c:	701a      	strb	r2, [r3, #0]
			break;
 8001f6e:	e0b5      	b.n	80020dc <HAL_UART_RxCpltCallback+0x2e0>
				pressed_button = STOP;
 8001f70:	4b46      	ldr	r3, [pc, #280]	@ (800208c <HAL_UART_RxCpltCallback+0x290>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
				J1x = 0.0;
 8001f76:	4b49      	ldr	r3, [pc, #292]	@ (800209c <HAL_UART_RxCpltCallback+0x2a0>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
				J1y = 0.0;
 8001f7c:	4b48      	ldr	r3, [pc, #288]	@ (80020a0 <HAL_UART_RxCpltCallback+0x2a4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
				J2y = 0.0;
 8001f82:	4b48      	ldr	r3, [pc, #288]	@ (80020a4 <HAL_UART_RxCpltCallback+0x2a8>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
				J2x = 0.0;
 8001f88:	4b47      	ldr	r3, [pc, #284]	@ (80020a8 <HAL_UART_RxCpltCallback+0x2ac>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
			break;
 8001f8e:	e0a5      	b.n	80020dc <HAL_UART_RxCpltCallback+0x2e0>
		case 'J':
			if(data[1] == '1'){
 8001f90:	4b3d      	ldr	r3, [pc, #244]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8001f92:	785b      	ldrb	r3, [r3, #1]
 8001f94:	2b31      	cmp	r3, #49	@ 0x31
 8001f96:	d143      	bne.n	8002020 <HAL_UART_RxCpltCallback+0x224>
				uint8_t joy_index = 2;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	73fb      	strb	r3, [r7, #15]
				uint8_t second_index = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	73bb      	strb	r3, [r7, #14]
				memset(num_conv,'_',6);
 8001fa0:	2206      	movs	r2, #6
 8001fa2:	215f      	movs	r1, #95	@ 0x5f
 8001fa4:	483a      	ldr	r0, [pc, #232]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8001fa6:	f009 fd2f 	bl	800ba08 <memset>

				while( data[joy_index] != ' '){
 8001faa:	e00b      	b.n	8001fc4 <HAL_UART_RxCpltCallback+0x1c8>
					num_conv[second_index] = data[joy_index];
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	7bbb      	ldrb	r3, [r7, #14]
 8001fb0:	4935      	ldr	r1, [pc, #212]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8001fb2:	5c89      	ldrb	r1, [r1, r2]
 8001fb4:	4a36      	ldr	r2, [pc, #216]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8001fb6:	54d1      	strb	r1, [r2, r3]
					joy_index+=1;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	73fb      	strb	r3, [r7, #15]
					second_index+=1;
 8001fbe:	7bbb      	ldrb	r3, [r7, #14]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	73bb      	strb	r3, [r7, #14]
				while( data[joy_index] != ' '){
 8001fc4:	7bfb      	ldrb	r3, [r7, #15]
 8001fc6:	4a30      	ldr	r2, [pc, #192]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8001fc8:	5cd3      	ldrb	r3, [r2, r3]
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	d1ee      	bne.n	8001fac <HAL_UART_RxCpltCallback+0x1b0>
				}

				J1x = (atoi(num_conv));
 8001fce:	4830      	ldr	r0, [pc, #192]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8001fd0:	f009 fc92 	bl	800b8f8 <atoi>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4a31      	ldr	r2, [pc, #196]	@ (800209c <HAL_UART_RxCpltCallback+0x2a0>)
 8001fd8:	6013      	str	r3, [r2, #0]
				//				if(J1x > 100) J1x = 100;
				//				if(J1x < -100) J1x = -100;

				memset(num_conv,'_',6);
 8001fda:	2206      	movs	r2, #6
 8001fdc:	215f      	movs	r1, #95	@ 0x5f
 8001fde:	482c      	ldr	r0, [pc, #176]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8001fe0:	f009 fd12 	bl	800ba08 <memset>

				second_index = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73bb      	strb	r3, [r7, #14]
				joy_index+=1;
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	3301      	adds	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]

				while( data[joy_index] != '\n'){
 8001fee:	e00b      	b.n	8002008 <HAL_UART_RxCpltCallback+0x20c>
					num_conv[second_index] = data[joy_index];
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	7bbb      	ldrb	r3, [r7, #14]
 8001ff4:	4924      	ldr	r1, [pc, #144]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8001ff6:	5c89      	ldrb	r1, [r1, r2]
 8001ff8:	4a25      	ldr	r2, [pc, #148]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8001ffa:	54d1      	strb	r1, [r2, r3]
					joy_index+=1;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	3301      	adds	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
					second_index+=1;
 8002002:	7bbb      	ldrb	r3, [r7, #14]
 8002004:	3301      	adds	r3, #1
 8002006:	73bb      	strb	r3, [r7, #14]
				while( data[joy_index] != '\n'){
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	4a1f      	ldr	r2, [pc, #124]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 800200c:	5cd3      	ldrb	r3, [r2, r3]
 800200e:	2b0a      	cmp	r3, #10
 8002010:	d1ee      	bne.n	8001ff0 <HAL_UART_RxCpltCallback+0x1f4>
				}
				J1y = (atoi(num_conv));
 8002012:	481f      	ldr	r0, [pc, #124]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8002014:	f009 fc70 	bl	800b8f8 <atoi>
 8002018:	4603      	mov	r3, r0
 800201a:	4a21      	ldr	r2, [pc, #132]	@ (80020a0 <HAL_UART_RxCpltCallback+0x2a4>)
 800201c:	6013      	str	r3, [r2, #0]
				}
				J2y = (atoi(num_conv));
				//				if(J2y > 100) J2y = 100;
				//				if(J2y < -100) J2y = -100;
			}
			break;
 800201e:	e05c      	b.n	80020da <HAL_UART_RxCpltCallback+0x2de>
			}else if(data[1] == '2'){
 8002020:	4b19      	ldr	r3, [pc, #100]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8002022:	785b      	ldrb	r3, [r3, #1]
 8002024:	2b32      	cmp	r3, #50	@ 0x32
 8002026:	d158      	bne.n	80020da <HAL_UART_RxCpltCallback+0x2de>
				uint8_t joy_index = 2;
 8002028:	2302      	movs	r3, #2
 800202a:	737b      	strb	r3, [r7, #13]
				uint8_t second_index = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	733b      	strb	r3, [r7, #12]
				memset(num_conv,'_',6);
 8002030:	2206      	movs	r2, #6
 8002032:	215f      	movs	r1, #95	@ 0x5f
 8002034:	4816      	ldr	r0, [pc, #88]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8002036:	f009 fce7 	bl	800ba08 <memset>
				while( data[joy_index] != ' '){
 800203a:	e00b      	b.n	8002054 <HAL_UART_RxCpltCallback+0x258>
					num_conv[second_index] = data[joy_index];
 800203c:	7b7a      	ldrb	r2, [r7, #13]
 800203e:	7b3b      	ldrb	r3, [r7, #12]
 8002040:	4911      	ldr	r1, [pc, #68]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8002042:	5c89      	ldrb	r1, [r1, r2]
 8002044:	4a12      	ldr	r2, [pc, #72]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8002046:	54d1      	strb	r1, [r2, r3]
					joy_index+=1;
 8002048:	7b7b      	ldrb	r3, [r7, #13]
 800204a:	3301      	adds	r3, #1
 800204c:	737b      	strb	r3, [r7, #13]
					second_index+=1;
 800204e:	7b3b      	ldrb	r3, [r7, #12]
 8002050:	3301      	adds	r3, #1
 8002052:	733b      	strb	r3, [r7, #12]
				while( data[joy_index] != ' '){
 8002054:	7b7b      	ldrb	r3, [r7, #13]
 8002056:	4a0c      	ldr	r2, [pc, #48]	@ (8002088 <HAL_UART_RxCpltCallback+0x28c>)
 8002058:	5cd3      	ldrb	r3, [r2, r3]
 800205a:	2b20      	cmp	r3, #32
 800205c:	d1ee      	bne.n	800203c <HAL_UART_RxCpltCallback+0x240>
				J2x = (atoi(num_conv));
 800205e:	480c      	ldr	r0, [pc, #48]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8002060:	f009 fc4a 	bl	800b8f8 <atoi>
 8002064:	4603      	mov	r3, r0
 8002066:	4a10      	ldr	r2, [pc, #64]	@ (80020a8 <HAL_UART_RxCpltCallback+0x2ac>)
 8002068:	6013      	str	r3, [r2, #0]
				memset(num_conv,'_',6);
 800206a:	2206      	movs	r2, #6
 800206c:	215f      	movs	r1, #95	@ 0x5f
 800206e:	4808      	ldr	r0, [pc, #32]	@ (8002090 <HAL_UART_RxCpltCallback+0x294>)
 8002070:	f009 fcca 	bl	800ba08 <memset>
				second_index = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	733b      	strb	r3, [r7, #12]
				joy_index+=1;
 8002078:	7b7b      	ldrb	r3, [r7, #13]
 800207a:	3301      	adds	r3, #1
 800207c:	737b      	strb	r3, [r7, #13]
				while( data[joy_index] != '\n'){
 800207e:	e021      	b.n	80020c4 <HAL_UART_RxCpltCallback+0x2c8>
 8002080:	20000306 	.word	0x20000306
 8002084:	20000307 	.word	0x20000307
 8002088:	200002e0 	.word	0x200002e0
 800208c:	20000308 	.word	0x20000308
 8002090:	20000300 	.word	0x20000300
 8002094:	2000030a 	.word	0x2000030a
 8002098:	2000030b 	.word	0x2000030b
 800209c:	2000030c 	.word	0x2000030c
 80020a0:	20000310 	.word	0x20000310
 80020a4:	20000318 	.word	0x20000318
 80020a8:	20000314 	.word	0x20000314
					num_conv[second_index] = data[joy_index];
 80020ac:	7b7a      	ldrb	r2, [r7, #13]
 80020ae:	7b3b      	ldrb	r3, [r7, #12]
 80020b0:	4911      	ldr	r1, [pc, #68]	@ (80020f8 <HAL_UART_RxCpltCallback+0x2fc>)
 80020b2:	5c89      	ldrb	r1, [r1, r2]
 80020b4:	4a11      	ldr	r2, [pc, #68]	@ (80020fc <HAL_UART_RxCpltCallback+0x300>)
 80020b6:	54d1      	strb	r1, [r2, r3]
					joy_index+=1;
 80020b8:	7b7b      	ldrb	r3, [r7, #13]
 80020ba:	3301      	adds	r3, #1
 80020bc:	737b      	strb	r3, [r7, #13]
					second_index+=1;
 80020be:	7b3b      	ldrb	r3, [r7, #12]
 80020c0:	3301      	adds	r3, #1
 80020c2:	733b      	strb	r3, [r7, #12]
				while( data[joy_index] != '\n'){
 80020c4:	7b7b      	ldrb	r3, [r7, #13]
 80020c6:	4a0c      	ldr	r2, [pc, #48]	@ (80020f8 <HAL_UART_RxCpltCallback+0x2fc>)
 80020c8:	5cd3      	ldrb	r3, [r2, r3]
 80020ca:	2b0a      	cmp	r3, #10
 80020cc:	d1ee      	bne.n	80020ac <HAL_UART_RxCpltCallback+0x2b0>
				J2y = (atoi(num_conv));
 80020ce:	480b      	ldr	r0, [pc, #44]	@ (80020fc <HAL_UART_RxCpltCallback+0x300>)
 80020d0:	f009 fc12 	bl	800b8f8 <atoi>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <HAL_UART_RxCpltCallback+0x304>)
 80020d8:	6013      	str	r3, [r2, #0]
			break;
 80020da:	bf00      	nop
		}
		memset(data,'0',20);
 80020dc:	2214      	movs	r2, #20
 80020de:	2130      	movs	r1, #48	@ 0x30
 80020e0:	4805      	ldr	r0, [pc, #20]	@ (80020f8 <HAL_UART_RxCpltCallback+0x2fc>)
 80020e2:	f009 fc91 	bl	800ba08 <memset>
	}

	HAL_UART_Receive_IT(&huart1, &rx, 1);
 80020e6:	2201      	movs	r2, #1
 80020e8:	4906      	ldr	r1, [pc, #24]	@ (8002104 <HAL_UART_RxCpltCallback+0x308>)
 80020ea:	4807      	ldr	r0, [pc, #28]	@ (8002108 <HAL_UART_RxCpltCallback+0x30c>)
 80020ec:	f005 ff50 	bl	8007f90 <HAL_UART_Receive_IT>

}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200002e0 	.word	0x200002e0
 80020fc:	20000300 	.word	0x20000300
 8002100:	20000318 	.word	0x20000318
 8002104:	20000306 	.word	0x20000306
 8002108:	200003d0 	.word	0x200003d0
 800210c:	00000000 	.word	0x00000000

08002110 <inverse_leg_kinematics>:

void inverse_leg_kinematics(float position[], float angles[], uint8_t leg_index, float rotation[]){
 8002110:	b5b0      	push	{r4, r5, r7, lr}
 8002112:	ed2d 8b02 	vpush	{d8}
 8002116:	b098      	sub	sp, #96	@ 0x60
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	603b      	str	r3, [r7, #0]
 8002120:	4613      	mov	r3, r2
 8002122:	71fb      	strb	r3, [r7, #7]

	if(position[0] == 0.0) position[0] = -0.00001;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800212e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002132:	d102      	bne.n	800213a <inverse_leg_kinematics+0x2a>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4a5e      	ldr	r2, [pc, #376]	@ (80022b0 <inverse_leg_kinematics+0x1a0>)
 8002138:	601a      	str	r2, [r3, #0]
	if(position[1] == 0.0) position[1] = -0.00001;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3304      	adds	r3, #4
 800213e:	edd3 7a00 	vldr	s15, [r3]
 8002142:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214a:	d103      	bne.n	8002154 <inverse_leg_kinematics+0x44>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	3304      	adds	r3, #4
 8002150:	4a57      	ldr	r2, [pc, #348]	@ (80022b0 <inverse_leg_kinematics+0x1a0>)
 8002152:	601a      	str	r2, [r3, #0]


	float pitch_offset = sin(rotation[0]) * (body_length/2);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f9a5 	bl	80004a8 <__aeabi_f2d>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	ec43 2b10 	vmov	d0, r2, r3
 8002166:	f00a f837 	bl	800c1d8 <sin>
 800216a:	ec51 0b10 	vmov	r0, r1, d0
 800216e:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002172:	4b50      	ldr	r3, [pc, #320]	@ (80022b4 <inverse_leg_kinematics+0x1a4>)
 8002174:	f7fe f9f0 	bl	8000558 <__aeabi_dmul>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	f7fe fce2 	bl	8000b48 <__aeabi_d2f>
 8002184:	4603      	mov	r3, r0
 8002186:	653b      	str	r3, [r7, #80]	@ 0x50
	float x_pitch_offset = ((position[2] - pitch_offset) * tan(rotation[0])  * 0.2);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3308      	adds	r3, #8
 800218c:	ed93 7a00 	vldr	s14, [r3]
 8002190:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002198:	ee17 0a90 	vmov	r0, s15
 800219c:	f7fe f984 	bl	80004a8 <__aeabi_f2d>
 80021a0:	4604      	mov	r4, r0
 80021a2:	460d      	mov	r5, r1
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f97d 	bl	80004a8 <__aeabi_f2d>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	ec43 2b10 	vmov	d0, r2, r3
 80021b6:	f00a f863 	bl	800c280 <tan>
 80021ba:	ec53 2b10 	vmov	r2, r3, d0
 80021be:	4620      	mov	r0, r4
 80021c0:	4629      	mov	r1, r5
 80021c2:	f7fe f9c9 	bl	8000558 <__aeabi_dmul>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	a334      	add	r3, pc, #208	@ (adr r3, 80022a0 <inverse_leg_kinematics+0x190>)
 80021d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d4:	f7fe f9c0 	bl	8000558 <__aeabi_dmul>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	f7fe fcb2 	bl	8000b48 <__aeabi_d2f>
 80021e4:	4603      	mov	r3, r0
 80021e6:	64fb      	str	r3, [r7, #76]	@ 0x4c

	float roll_offset = sin(rotation[1]) * (body_width/2);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	3304      	adds	r3, #4
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f95a 	bl	80004a8 <__aeabi_f2d>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	ec43 2b10 	vmov	d0, r2, r3
 80021fc:	f009 ffec 	bl	800c1d8 <sin>
 8002200:	ec51 0b10 	vmov	r0, r1, d0
 8002204:	a328      	add	r3, pc, #160	@ (adr r3, 80022a8 <inverse_leg_kinematics+0x198>)
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	f7fe f9a5 	bl	8000558 <__aeabi_dmul>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4610      	mov	r0, r2
 8002214:	4619      	mov	r1, r3
 8002216:	f7fe fc97 	bl	8000b48 <__aeabi_d2f>
 800221a:	4603      	mov	r3, r0
 800221c:	64bb      	str	r3, [r7, #72]	@ 0x48
	float y_roll_offset = ((position[2] - roll_offset) * tan(rotation[1]) * 0.2);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3308      	adds	r3, #8
 8002222:	ed93 7a00 	vldr	s14, [r3]
 8002226:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800222a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800222e:	ee17 0a90 	vmov	r0, s15
 8002232:	f7fe f939 	bl	80004a8 <__aeabi_f2d>
 8002236:	4604      	mov	r4, r0
 8002238:	460d      	mov	r5, r1
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	3304      	adds	r3, #4
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe f931 	bl	80004a8 <__aeabi_f2d>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	ec43 2b10 	vmov	d0, r2, r3
 800224e:	f00a f817 	bl	800c280 <tan>
 8002252:	ec53 2b10 	vmov	r2, r3, d0
 8002256:	4620      	mov	r0, r4
 8002258:	4629      	mov	r1, r5
 800225a:	f7fe f97d 	bl	8000558 <__aeabi_dmul>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4610      	mov	r0, r2
 8002264:	4619      	mov	r1, r3
 8002266:	a30e      	add	r3, pc, #56	@ (adr r3, 80022a0 <inverse_leg_kinematics+0x190>)
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	f7fe f974 	bl	8000558 <__aeabi_dmul>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f7fe fc66 	bl	8000b48 <__aeabi_d2f>
 800227c:	4603      	mov	r3, r0
 800227e:	647b      	str	r3, [r7, #68]	@ 0x44
	float current_yaw,new_width, new_length, H_leg, new_yaw,new_height,new_x,new_y,H1y,H2y,phi, phi2,theta,Hx,trident ;

	switch(leg_index){
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	3b01      	subs	r3, #1
 8002284:	2b03      	cmp	r3, #3
 8002286:	f200 8402 	bhi.w	8002a8e <inverse_leg_kinematics+0x97e>
 800228a:	a201      	add	r2, pc, #4	@ (adr r2, 8002290 <inverse_leg_kinematics+0x180>)
 800228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002290:	080022b9 	.word	0x080022b9
 8002294:	08002499 	.word	0x08002499
 8002298:	0800268d 	.word	0x0800268d
 800229c:	0800289d 	.word	0x0800289d
 80022a0:	9999999a 	.word	0x9999999a
 80022a4:	3fc99999 	.word	0x3fc99999
 80022a8:	9999999a 	.word	0x9999999a
 80022ac:	3fa99999 	.word	0x3fa99999
 80022b0:	b727c5ac 	.word	0xb727c5ac
 80022b4:	3fb33333 	.word	0x3fb33333
	case 1:
		new_height = position[2] - pitch_offset + roll_offset;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	3308      	adds	r3, #8
 80022bc:	ed93 7a00 	vldr	s14, [r3]
 80022c0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80022c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80022cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		new_y = -position[1] + y_roll_offset + Y_offset;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3304      	adds	r3, #4
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80022e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e4:	ee17 0a90 	vmov	r0, s15
 80022e8:	f7fe f8de 	bl	80004a8 <__aeabi_f2d>
 80022ec:	a3e2      	add	r3, pc, #904	@ (adr r3, 8002678 <inverse_leg_kinematics+0x568>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fd ff7b 	bl	80001ec <__adddf3>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	f7fe fc23 	bl	8000b48 <__aeabi_d2f>
 8002302:	4603      	mov	r3, r0
 8002304:	657b      	str	r3, [r7, #84]	@ 0x54
		new_x = position[0] - x_pitch_offset - X_offset;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	ed93 7a00 	vldr	s14, [r3]
 800230c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002314:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		H_leg = hypot(-body_width/2.0 + new_y,body_length/2.0 + new_x);
 8002318:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800231a:	f7fe f8c5 	bl	80004a8 <__aeabi_f2d>
 800231e:	a3d6      	add	r3, pc, #856	@ (adr r3, 8002678 <inverse_leg_kinematics+0x568>)
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	f7fd ff60 	bl	80001e8 <__aeabi_dsub>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	ec43 2b18 	vmov	d8, r2, r3
 8002330:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002332:	f7fe f8b9 	bl	80004a8 <__aeabi_f2d>
 8002336:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800233a:	4bd3      	ldr	r3, [pc, #844]	@ (8002688 <inverse_leg_kinematics+0x578>)
 800233c:	f7fd ff56 	bl	80001ec <__adddf3>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	ec43 2b17 	vmov	d7, r2, r3
 8002348:	eeb0 1a47 	vmov.f32	s2, s14
 800234c:	eef0 1a67 	vmov.f32	s3, s15
 8002350:	eeb0 0a48 	vmov.f32	s0, s16
 8002354:	eef0 0a68 	vmov.f32	s1, s17
 8002358:	f009 fc7a 	bl	800bc50 <hypot>
 800235c:	ec53 2b10 	vmov	r2, r3, d0
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f7fe fbf0 	bl	8000b48 <__aeabi_d2f>
 8002368:	4603      	mov	r3, r0
 800236a:	643b      	str	r3, [r7, #64]	@ 0x40
		current_yaw = atan2(body_length/2.0 + new_x, -body_width/2.0 + new_y);
 800236c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800236e:	f7fe f89b 	bl	80004a8 <__aeabi_f2d>
 8002372:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002376:	4bc4      	ldr	r3, [pc, #784]	@ (8002688 <inverse_leg_kinematics+0x578>)
 8002378:	f7fd ff38 	bl	80001ec <__adddf3>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	ec43 2b18 	vmov	d8, r2, r3
 8002384:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002386:	f7fe f88f 	bl	80004a8 <__aeabi_f2d>
 800238a:	a3bb      	add	r3, pc, #748	@ (adr r3, 8002678 <inverse_leg_kinematics+0x568>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fd ff2a 	bl	80001e8 <__aeabi_dsub>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	ec43 2b17 	vmov	d7, r2, r3
 800239c:	eeb0 1a47 	vmov.f32	s2, s14
 80023a0:	eef0 1a67 	vmov.f32	s3, s15
 80023a4:	eeb0 0a48 	vmov.f32	s0, s16
 80023a8:	eef0 0a68 	vmov.f32	s1, s17
 80023ac:	f009 fc4e 	bl	800bc4c <atan2>
 80023b0:	ec53 2b10 	vmov	r2, r3, d0
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	f7fe fbc6 	bl	8000b48 <__aeabi_d2f>
 80023bc:	4603      	mov	r3, r0
 80023be:	63fb      	str	r3, [r7, #60]	@ 0x3c
		new_yaw = current_yaw + rotation[2];
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	3308      	adds	r3, #8
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80023cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		new_width = cos(new_yaw) * H_leg;
 80023d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80023d6:	f7fe f867 	bl	80004a8 <__aeabi_f2d>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	ec43 2b10 	vmov	d0, r2, r3
 80023e2:	f009 fe9d 	bl	800c120 <cos>
 80023e6:	ec55 4b10 	vmov	r4, r5, d0
 80023ea:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80023ec:	f7fe f85c 	bl	80004a8 <__aeabi_f2d>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4620      	mov	r0, r4
 80023f6:	4629      	mov	r1, r5
 80023f8:	f7fe f8ae 	bl	8000558 <__aeabi_dmul>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe fba0 	bl	8000b48 <__aeabi_d2f>
 8002408:	4603      	mov	r3, r0
 800240a:	637b      	str	r3, [r7, #52]	@ 0x34
		new_length = sin(new_yaw) * H_leg;
 800240c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800240e:	f7fe f84b 	bl	80004a8 <__aeabi_f2d>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	ec43 2b10 	vmov	d0, r2, r3
 800241a:	f009 fedd 	bl	800c1d8 <sin>
 800241e:	ec55 4b10 	vmov	r4, r5, d0
 8002422:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002424:	f7fe f840 	bl	80004a8 <__aeabi_f2d>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4620      	mov	r0, r4
 800242e:	4629      	mov	r1, r5
 8002430:	f7fe f892 	bl	8000558 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	f7fe fb84 	bl	8000b48 <__aeabi_d2f>
 8002440:	4603      	mov	r3, r0
 8002442:	633b      	str	r3, [r7, #48]	@ 0x30
		new_x = new_length - body_length/2.0;
 8002444:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002446:	f7fe f82f 	bl	80004a8 <__aeabi_f2d>
 800244a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800244e:	4b8e      	ldr	r3, [pc, #568]	@ (8002688 <inverse_leg_kinematics+0x578>)
 8002450:	f7fd feca 	bl	80001e8 <__aeabi_dsub>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	f7fe fb74 	bl	8000b48 <__aeabi_d2f>
 8002460:	4603      	mov	r3, r0
 8002462:	65bb      	str	r3, [r7, #88]	@ 0x58
		new_y = new_width + body_width/2.0 - balance_offset;
 8002464:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002466:	f7fe f81f 	bl	80004a8 <__aeabi_f2d>
 800246a:	a383      	add	r3, pc, #524	@ (adr r3, 8002678 <inverse_leg_kinematics+0x568>)
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	f7fd febc 	bl	80001ec <__adddf3>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	a380      	add	r3, pc, #512	@ (adr r3, 8002680 <inverse_leg_kinematics+0x570>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	f7fd feb1 	bl	80001e8 <__aeabi_dsub>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f7fe fb5b 	bl	8000b48 <__aeabi_d2f>
 8002492:	4603      	mov	r3, r0
 8002494:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
 8002496:	e2fa      	b.n	8002a8e <inverse_leg_kinematics+0x97e>
	case 2:
		new_height = position[2] - pitch_offset - roll_offset;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	3308      	adds	r3, #8
 800249c:	ed93 7a00 	vldr	s14, [r3]
 80024a0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80024a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024a8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80024ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		new_y = position[1] - y_roll_offset + Y_offset;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3304      	adds	r3, #4
 80024b8:	ed93 7a00 	vldr	s14, [r3]
 80024bc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80024c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c4:	ee17 0a90 	vmov	r0, s15
 80024c8:	f7fd ffee 	bl	80004a8 <__aeabi_f2d>
 80024cc:	a36a      	add	r3, pc, #424	@ (adr r3, 8002678 <inverse_leg_kinematics+0x568>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	f7fd fe8b 	bl	80001ec <__adddf3>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4610      	mov	r0, r2
 80024dc:	4619      	mov	r1, r3
 80024de:	f7fe fb33 	bl	8000b48 <__aeabi_d2f>
 80024e2:	4603      	mov	r3, r0
 80024e4:	657b      	str	r3, [r7, #84]	@ 0x54
		new_x = position[0] - x_pitch_offset - X_offset;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	ed93 7a00 	vldr	s14, [r3]
 80024ec:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80024f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f4:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		H_leg = hypot(body_width/2.0 + new_y,body_length/2.0 + new_x);
 80024f8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80024fa:	f7fd ffd5 	bl	80004a8 <__aeabi_f2d>
 80024fe:	a35e      	add	r3, pc, #376	@ (adr r3, 8002678 <inverse_leg_kinematics+0x568>)
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	f7fd fe72 	bl	80001ec <__adddf3>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	ec43 2b18 	vmov	d8, r2, r3
 8002510:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002512:	f7fd ffc9 	bl	80004a8 <__aeabi_f2d>
 8002516:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800251a:	4b5b      	ldr	r3, [pc, #364]	@ (8002688 <inverse_leg_kinematics+0x578>)
 800251c:	f7fd fe66 	bl	80001ec <__adddf3>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	ec43 2b17 	vmov	d7, r2, r3
 8002528:	eeb0 1a47 	vmov.f32	s2, s14
 800252c:	eef0 1a67 	vmov.f32	s3, s15
 8002530:	eeb0 0a48 	vmov.f32	s0, s16
 8002534:	eef0 0a68 	vmov.f32	s1, s17
 8002538:	f009 fb8a 	bl	800bc50 <hypot>
 800253c:	ec53 2b10 	vmov	r2, r3, d0
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f7fe fb00 	bl	8000b48 <__aeabi_d2f>
 8002548:	4603      	mov	r3, r0
 800254a:	643b      	str	r3, [r7, #64]	@ 0x40
		current_yaw = atan2(body_length/2.0 + new_x, body_width/2.0 + new_y);
 800254c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800254e:	f7fd ffab 	bl	80004a8 <__aeabi_f2d>
 8002552:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002556:	4b4c      	ldr	r3, [pc, #304]	@ (8002688 <inverse_leg_kinematics+0x578>)
 8002558:	f7fd fe48 	bl	80001ec <__adddf3>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	ec43 2b18 	vmov	d8, r2, r3
 8002564:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002566:	f7fd ff9f 	bl	80004a8 <__aeabi_f2d>
 800256a:	a343      	add	r3, pc, #268	@ (adr r3, 8002678 <inverse_leg_kinematics+0x568>)
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f7fd fe3c 	bl	80001ec <__adddf3>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	ec43 2b17 	vmov	d7, r2, r3
 800257c:	eeb0 1a47 	vmov.f32	s2, s14
 8002580:	eef0 1a67 	vmov.f32	s3, s15
 8002584:	eeb0 0a48 	vmov.f32	s0, s16
 8002588:	eef0 0a68 	vmov.f32	s1, s17
 800258c:	f009 fb5e 	bl	800bc4c <atan2>
 8002590:	ec53 2b10 	vmov	r2, r3, d0
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	f7fe fad6 	bl	8000b48 <__aeabi_d2f>
 800259c:	4603      	mov	r3, r0
 800259e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		new_yaw = current_yaw - rotation[2];
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	3308      	adds	r3, #8
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80025ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b0:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		new_width = cos(new_yaw) * H_leg;
 80025b4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80025b6:	f7fd ff77 	bl	80004a8 <__aeabi_f2d>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	ec43 2b10 	vmov	d0, r2, r3
 80025c2:	f009 fdad 	bl	800c120 <cos>
 80025c6:	ec55 4b10 	vmov	r4, r5, d0
 80025ca:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80025cc:	f7fd ff6c 	bl	80004a8 <__aeabi_f2d>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4620      	mov	r0, r4
 80025d6:	4629      	mov	r1, r5
 80025d8:	f7fd ffbe 	bl	8000558 <__aeabi_dmul>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	f7fe fab0 	bl	8000b48 <__aeabi_d2f>
 80025e8:	4603      	mov	r3, r0
 80025ea:	637b      	str	r3, [r7, #52]	@ 0x34
		new_length = sin(new_yaw) * H_leg;
 80025ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80025ee:	f7fd ff5b 	bl	80004a8 <__aeabi_f2d>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	ec43 2b10 	vmov	d0, r2, r3
 80025fa:	f009 fded 	bl	800c1d8 <sin>
 80025fe:	ec55 4b10 	vmov	r4, r5, d0
 8002602:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002604:	f7fd ff50 	bl	80004a8 <__aeabi_f2d>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4620      	mov	r0, r4
 800260e:	4629      	mov	r1, r5
 8002610:	f7fd ffa2 	bl	8000558 <__aeabi_dmul>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	f7fe fa94 	bl	8000b48 <__aeabi_d2f>
 8002620:	4603      	mov	r3, r0
 8002622:	633b      	str	r3, [r7, #48]	@ 0x30
		new_x = new_length - body_length/2.0;
 8002624:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002626:	f7fd ff3f 	bl	80004a8 <__aeabi_f2d>
 800262a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800262e:	4b16      	ldr	r3, [pc, #88]	@ (8002688 <inverse_leg_kinematics+0x578>)
 8002630:	f7fd fdda 	bl	80001e8 <__aeabi_dsub>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f7fe fa84 	bl	8000b48 <__aeabi_d2f>
 8002640:	4603      	mov	r3, r0
 8002642:	65bb      	str	r3, [r7, #88]	@ 0x58
		new_y = new_width - body_width/2.0 - balance_offset;
 8002644:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002646:	f7fd ff2f 	bl	80004a8 <__aeabi_f2d>
 800264a:	a30b      	add	r3, pc, #44	@ (adr r3, 8002678 <inverse_leg_kinematics+0x568>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	f7fd fdca 	bl	80001e8 <__aeabi_dsub>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	a308      	add	r3, pc, #32	@ (adr r3, 8002680 <inverse_leg_kinematics+0x570>)
 800265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002662:	f7fd fdc1 	bl	80001e8 <__aeabi_dsub>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	f7fe fa6b 	bl	8000b48 <__aeabi_d2f>
 8002672:	4603      	mov	r3, r0
 8002674:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
 8002676:	e20a      	b.n	8002a8e <inverse_leg_kinematics+0x97e>
 8002678:	9999999a 	.word	0x9999999a
 800267c:	3fa99999 	.word	0x3fa99999
 8002680:	76c8b439 	.word	0x76c8b439
 8002684:	3f8a9fbe 	.word	0x3f8a9fbe
 8002688:	3fb33333 	.word	0x3fb33333
	case 3:
		new_height = position[2] + pitch_offset + roll_offset;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	3308      	adds	r3, #8
 8002690:	ed93 7a00 	vldr	s14, [r3]
 8002694:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800269c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80026a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a4:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		new_y = -position[1] + y_roll_offset + Y_offset;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3304      	adds	r3, #4
 80026ac:	edd3 7a00 	vldr	s15, [r3]
 80026b0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80026b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026b8:	ee17 0a90 	vmov	r0, s15
 80026bc:	f7fd fef4 	bl	80004a8 <__aeabi_f2d>
 80026c0:	a36f      	add	r3, pc, #444	@ (adr r3, 8002880 <inverse_leg_kinematics+0x770>)
 80026c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c6:	f7fd fd91 	bl	80001ec <__adddf3>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4610      	mov	r0, r2
 80026d0:	4619      	mov	r1, r3
 80026d2:	f7fe fa39 	bl	8000b48 <__aeabi_d2f>
 80026d6:	4603      	mov	r3, r0
 80026d8:	657b      	str	r3, [r7, #84]	@ 0x54
		new_x = position[0] - x_pitch_offset - X_offset;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	ed93 7a00 	vldr	s14, [r3]
 80026e0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80026e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e8:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		H_leg = hypot(-body_width/2.0 + new_y,-body_length/2.0 + new_x);
 80026ec:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80026ee:	f7fd fedb 	bl	80004a8 <__aeabi_f2d>
 80026f2:	a363      	add	r3, pc, #396	@ (adr r3, 8002880 <inverse_leg_kinematics+0x770>)
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	f7fd fd76 	bl	80001e8 <__aeabi_dsub>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	ec43 2b18 	vmov	d8, r2, r3
 8002704:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002706:	f7fd fecf 	bl	80004a8 <__aeabi_f2d>
 800270a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800270e:	4b62      	ldr	r3, [pc, #392]	@ (8002898 <inverse_leg_kinematics+0x788>)
 8002710:	f7fd fd6a 	bl	80001e8 <__aeabi_dsub>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	ec43 2b17 	vmov	d7, r2, r3
 800271c:	eeb0 1a47 	vmov.f32	s2, s14
 8002720:	eef0 1a67 	vmov.f32	s3, s15
 8002724:	eeb0 0a48 	vmov.f32	s0, s16
 8002728:	eef0 0a68 	vmov.f32	s1, s17
 800272c:	f009 fa90 	bl	800bc50 <hypot>
 8002730:	ec53 2b10 	vmov	r2, r3, d0
 8002734:	4610      	mov	r0, r2
 8002736:	4619      	mov	r1, r3
 8002738:	f7fe fa06 	bl	8000b48 <__aeabi_d2f>
 800273c:	4603      	mov	r3, r0
 800273e:	643b      	str	r3, [r7, #64]	@ 0x40
		current_yaw = atan2(-body_length/2.0 + new_x, -body_width/2.0 + new_y);
 8002740:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002742:	f7fd feb1 	bl	80004a8 <__aeabi_f2d>
 8002746:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800274a:	4b53      	ldr	r3, [pc, #332]	@ (8002898 <inverse_leg_kinematics+0x788>)
 800274c:	f7fd fd4c 	bl	80001e8 <__aeabi_dsub>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	ec43 2b18 	vmov	d8, r2, r3
 8002758:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800275a:	f7fd fea5 	bl	80004a8 <__aeabi_f2d>
 800275e:	a348      	add	r3, pc, #288	@ (adr r3, 8002880 <inverse_leg_kinematics+0x770>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	f7fd fd40 	bl	80001e8 <__aeabi_dsub>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	ec43 2b17 	vmov	d7, r2, r3
 8002770:	eeb0 1a47 	vmov.f32	s2, s14
 8002774:	eef0 1a67 	vmov.f32	s3, s15
 8002778:	eeb0 0a48 	vmov.f32	s0, s16
 800277c:	eef0 0a68 	vmov.f32	s1, s17
 8002780:	f009 fa64 	bl	800bc4c <atan2>
 8002784:	ec53 2b10 	vmov	r2, r3, d0
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	f7fe f9dc 	bl	8000b48 <__aeabi_d2f>
 8002790:	4603      	mov	r3, r0
 8002792:	63fb      	str	r3, [r7, #60]	@ 0x3c
		new_yaw = current_yaw + rotation[2];
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	3308      	adds	r3, #8
 8002798:	edd3 7a00 	vldr	s15, [r3]
 800279c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80027a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		new_width = cos(new_yaw) * H_leg;
 80027a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80027aa:	f7fd fe7d 	bl	80004a8 <__aeabi_f2d>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	ec43 2b10 	vmov	d0, r2, r3
 80027b6:	f009 fcb3 	bl	800c120 <cos>
 80027ba:	ec55 4b10 	vmov	r4, r5, d0
 80027be:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80027c0:	f7fd fe72 	bl	80004a8 <__aeabi_f2d>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4620      	mov	r0, r4
 80027ca:	4629      	mov	r1, r5
 80027cc:	f7fd fec4 	bl	8000558 <__aeabi_dmul>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	f7fe f9b6 	bl	8000b48 <__aeabi_d2f>
 80027dc:	4603      	mov	r3, r0
 80027de:	637b      	str	r3, [r7, #52]	@ 0x34
		new_length = sin(new_yaw) * H_leg;
 80027e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80027e2:	f7fd fe61 	bl	80004a8 <__aeabi_f2d>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	ec43 2b10 	vmov	d0, r2, r3
 80027ee:	f009 fcf3 	bl	800c1d8 <sin>
 80027f2:	ec55 4b10 	vmov	r4, r5, d0
 80027f6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80027f8:	f7fd fe56 	bl	80004a8 <__aeabi_f2d>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4620      	mov	r0, r4
 8002802:	4629      	mov	r1, r5
 8002804:	f7fd fea8 	bl	8000558 <__aeabi_dmul>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	f7fe f99a 	bl	8000b48 <__aeabi_d2f>
 8002814:	4603      	mov	r3, r0
 8002816:	633b      	str	r3, [r7, #48]	@ 0x30
		new_x = new_length + body_length/2.0  - hind_lef_offest;
 8002818:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800281a:	f7fd fe45 	bl	80004a8 <__aeabi_f2d>
 800281e:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002822:	4b1d      	ldr	r3, [pc, #116]	@ (8002898 <inverse_leg_kinematics+0x788>)
 8002824:	f7fd fce2 	bl	80001ec <__adddf3>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	a315      	add	r3, pc, #84	@ (adr r3, 8002888 <inverse_leg_kinematics+0x778>)
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	f7fd fcd7 	bl	80001e8 <__aeabi_dsub>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f7fe f981 	bl	8000b48 <__aeabi_d2f>
 8002846:	4603      	mov	r3, r0
 8002848:	65bb      	str	r3, [r7, #88]	@ 0x58
		new_y = new_width + body_width/2.0 - balance_offset;
 800284a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800284c:	f7fd fe2c 	bl	80004a8 <__aeabi_f2d>
 8002850:	a30b      	add	r3, pc, #44	@ (adr r3, 8002880 <inverse_leg_kinematics+0x770>)
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	f7fd fcc9 	bl	80001ec <__adddf3>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	a30b      	add	r3, pc, #44	@ (adr r3, 8002890 <inverse_leg_kinematics+0x780>)
 8002864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002868:	f7fd fcbe 	bl	80001e8 <__aeabi_dsub>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	f7fe f968 	bl	8000b48 <__aeabi_d2f>
 8002878:	4603      	mov	r3, r0
 800287a:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
 800287c:	e107      	b.n	8002a8e <inverse_leg_kinematics+0x97e>
 800287e:	bf00      	nop
 8002880:	9999999a 	.word	0x9999999a
 8002884:	3fa99999 	.word	0x3fa99999
 8002888:	47ae147b 	.word	0x47ae147b
 800288c:	3f947ae1 	.word	0x3f947ae1
 8002890:	76c8b439 	.word	0x76c8b439
 8002894:	3f8a9fbe 	.word	0x3f8a9fbe
 8002898:	3fb33333 	.word	0x3fb33333
	case 4:
		new_height = position[2] + pitch_offset - roll_offset;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3308      	adds	r3, #8
 80028a0:	ed93 7a00 	vldr	s14, [r3]
 80028a4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80028a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ac:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80028b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b4:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		new_y = position[1] - y_roll_offset + Y_offset;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	3304      	adds	r3, #4
 80028bc:	ed93 7a00 	vldr	s14, [r3]
 80028c0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80028c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c8:	ee17 0a90 	vmov	r0, s15
 80028cc:	f7fd fdec 	bl	80004a8 <__aeabi_f2d>
 80028d0:	a3e5      	add	r3, pc, #916	@ (adr r3, 8002c68 <inverse_leg_kinematics+0xb58>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd fc89 	bl	80001ec <__adddf3>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7fe f931 	bl	8000b48 <__aeabi_d2f>
 80028e6:	4603      	mov	r3, r0
 80028e8:	657b      	str	r3, [r7, #84]	@ 0x54
		new_x = position[0] - x_pitch_offset - X_offset;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	ed93 7a00 	vldr	s14, [r3]
 80028f0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80028f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f8:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		H_leg = hypot(body_width/2.0 + new_y,-body_length/2.0 + new_x);
 80028fc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80028fe:	f7fd fdd3 	bl	80004a8 <__aeabi_f2d>
 8002902:	a3d9      	add	r3, pc, #868	@ (adr r3, 8002c68 <inverse_leg_kinematics+0xb58>)
 8002904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002908:	f7fd fc70 	bl	80001ec <__adddf3>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	ec43 2b18 	vmov	d8, r2, r3
 8002914:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002916:	f7fd fdc7 	bl	80004a8 <__aeabi_f2d>
 800291a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800291e:	4be2      	ldr	r3, [pc, #904]	@ (8002ca8 <inverse_leg_kinematics+0xb98>)
 8002920:	f7fd fc62 	bl	80001e8 <__aeabi_dsub>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	ec43 2b17 	vmov	d7, r2, r3
 800292c:	eeb0 1a47 	vmov.f32	s2, s14
 8002930:	eef0 1a67 	vmov.f32	s3, s15
 8002934:	eeb0 0a48 	vmov.f32	s0, s16
 8002938:	eef0 0a68 	vmov.f32	s1, s17
 800293c:	f009 f988 	bl	800bc50 <hypot>
 8002940:	ec53 2b10 	vmov	r2, r3, d0
 8002944:	4610      	mov	r0, r2
 8002946:	4619      	mov	r1, r3
 8002948:	f7fe f8fe 	bl	8000b48 <__aeabi_d2f>
 800294c:	4603      	mov	r3, r0
 800294e:	643b      	str	r3, [r7, #64]	@ 0x40
		current_yaw = atan2(-body_length/2.0 + new_x, body_width/2.0 + new_y);
 8002950:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002952:	f7fd fda9 	bl	80004a8 <__aeabi_f2d>
 8002956:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800295a:	4bd3      	ldr	r3, [pc, #844]	@ (8002ca8 <inverse_leg_kinematics+0xb98>)
 800295c:	f7fd fc44 	bl	80001e8 <__aeabi_dsub>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	ec43 2b18 	vmov	d8, r2, r3
 8002968:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800296a:	f7fd fd9d 	bl	80004a8 <__aeabi_f2d>
 800296e:	a3be      	add	r3, pc, #760	@ (adr r3, 8002c68 <inverse_leg_kinematics+0xb58>)
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	f7fd fc3a 	bl	80001ec <__adddf3>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	ec43 2b17 	vmov	d7, r2, r3
 8002980:	eeb0 1a47 	vmov.f32	s2, s14
 8002984:	eef0 1a67 	vmov.f32	s3, s15
 8002988:	eeb0 0a48 	vmov.f32	s0, s16
 800298c:	eef0 0a68 	vmov.f32	s1, s17
 8002990:	f009 f95c 	bl	800bc4c <atan2>
 8002994:	ec53 2b10 	vmov	r2, r3, d0
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	f7fe f8d4 	bl	8000b48 <__aeabi_d2f>
 80029a0:	4603      	mov	r3, r0
 80029a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		new_yaw = current_yaw - rotation[2];
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	3308      	adds	r3, #8
 80029a8:	edd3 7a00 	vldr	s15, [r3]
 80029ac:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80029b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		new_width = cos(new_yaw) * H_leg;
 80029b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80029ba:	f7fd fd75 	bl	80004a8 <__aeabi_f2d>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	ec43 2b10 	vmov	d0, r2, r3
 80029c6:	f009 fbab 	bl	800c120 <cos>
 80029ca:	ec55 4b10 	vmov	r4, r5, d0
 80029ce:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80029d0:	f7fd fd6a 	bl	80004a8 <__aeabi_f2d>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4620      	mov	r0, r4
 80029da:	4629      	mov	r1, r5
 80029dc:	f7fd fdbc 	bl	8000558 <__aeabi_dmul>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	f7fe f8ae 	bl	8000b48 <__aeabi_d2f>
 80029ec:	4603      	mov	r3, r0
 80029ee:	637b      	str	r3, [r7, #52]	@ 0x34
		new_length = sin(new_yaw) * H_leg;
 80029f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80029f2:	f7fd fd59 	bl	80004a8 <__aeabi_f2d>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	ec43 2b10 	vmov	d0, r2, r3
 80029fe:	f009 fbeb 	bl	800c1d8 <sin>
 8002a02:	ec55 4b10 	vmov	r4, r5, d0
 8002a06:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002a08:	f7fd fd4e 	bl	80004a8 <__aeabi_f2d>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4620      	mov	r0, r4
 8002a12:	4629      	mov	r1, r5
 8002a14:	f7fd fda0 	bl	8000558 <__aeabi_dmul>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	f7fe f892 	bl	8000b48 <__aeabi_d2f>
 8002a24:	4603      	mov	r3, r0
 8002a26:	633b      	str	r3, [r7, #48]	@ 0x30
		new_x = new_length + body_length/2.0 - hind_lef_offest;
 8002a28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a2a:	f7fd fd3d 	bl	80004a8 <__aeabi_f2d>
 8002a2e:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002a32:	4b9d      	ldr	r3, [pc, #628]	@ (8002ca8 <inverse_leg_kinematics+0xb98>)
 8002a34:	f7fd fbda 	bl	80001ec <__adddf3>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	a38b      	add	r3, pc, #556	@ (adr r3, 8002c70 <inverse_leg_kinematics+0xb60>)
 8002a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a46:	f7fd fbcf 	bl	80001e8 <__aeabi_dsub>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	f7fe f879 	bl	8000b48 <__aeabi_d2f>
 8002a56:	4603      	mov	r3, r0
 8002a58:	65bb      	str	r3, [r7, #88]	@ 0x58
		new_y = new_width - body_width/2.0 - balance_offset;
 8002a5a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002a5c:	f7fd fd24 	bl	80004a8 <__aeabi_f2d>
 8002a60:	a381      	add	r3, pc, #516	@ (adr r3, 8002c68 <inverse_leg_kinematics+0xb58>)
 8002a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a66:	f7fd fbbf 	bl	80001e8 <__aeabi_dsub>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4610      	mov	r0, r2
 8002a70:	4619      	mov	r1, r3
 8002a72:	a381      	add	r3, pc, #516	@ (adr r3, 8002c78 <inverse_leg_kinematics+0xb68>)
 8002a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a78:	f7fd fbb6 	bl	80001e8 <__aeabi_dsub>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	f7fe f860 	bl	8000b48 <__aeabi_d2f>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
 8002a8c:	bf00      	nop
	}

	H1y = hypot(new_y,new_height);
 8002a8e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002a90:	f7fd fd0a 	bl	80004a8 <__aeabi_f2d>
 8002a94:	4604      	mov	r4, r0
 8002a96:	460d      	mov	r5, r1
 8002a98:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002a9a:	f7fd fd05 	bl	80004a8 <__aeabi_f2d>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	ec43 2b11 	vmov	d1, r2, r3
 8002aa6:	ec45 4b10 	vmov	d0, r4, r5
 8002aaa:	f009 f8d1 	bl	800bc50 <hypot>
 8002aae:	ec53 2b10 	vmov	r2, r3, d0
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f7fe f847 	bl	8000b48 <__aeabi_d2f>
 8002aba:	4603      	mov	r3, r0
 8002abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	H2y = sqrt(pow(H1y,2)- pow(Y_offset,2));
 8002abe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ac0:	f7fd fcf2 	bl	80004a8 <__aeabi_f2d>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	ed9f 1b6d 	vldr	d1, [pc, #436]	@ 8002c80 <inverse_leg_kinematics+0xb70>
 8002acc:	ec43 2b10 	vmov	d0, r2, r3
 8002ad0:	f009 f8f2 	bl	800bcb8 <pow>
 8002ad4:	ec51 0b10 	vmov	r0, r1, d0
 8002ad8:	a36b      	add	r3, pc, #428	@ (adr r3, 8002c88 <inverse_leg_kinematics+0xb78>)
 8002ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ade:	f7fd fb83 	bl	80001e8 <__aeabi_dsub>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	ec43 2b17 	vmov	d7, r2, r3
 8002aea:	eeb0 0a47 	vmov.f32	s0, s14
 8002aee:	eef0 0a67 	vmov.f32	s1, s15
 8002af2:	f009 f951 	bl	800bd98 <sqrt>
 8002af6:	ec53 2b10 	vmov	r2, r3, d0
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f7fe f823 	bl	8000b48 <__aeabi_d2f>
 8002b02:	4603      	mov	r3, r0
 8002b04:	62bb      	str	r3, [r7, #40]	@ 0x28
	phi = atan2(new_y,new_height);
 8002b06:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002b08:	f7fd fcce 	bl	80004a8 <__aeabi_f2d>
 8002b0c:	4604      	mov	r4, r0
 8002b0e:	460d      	mov	r5, r1
 8002b10:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002b12:	f7fd fcc9 	bl	80004a8 <__aeabi_f2d>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	ec43 2b11 	vmov	d1, r2, r3
 8002b1e:	ec45 4b10 	vmov	d0, r4, r5
 8002b22:	f009 f893 	bl	800bc4c <atan2>
 8002b26:	ec53 2b10 	vmov	r2, r3, d0
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f7fe f80b 	bl	8000b48 <__aeabi_d2f>
 8002b32:	4603      	mov	r3, r0
 8002b34:	627b      	str	r3, [r7, #36]	@ 0x24
	phi2 = acos(Y_offset/H2y);
 8002b36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b38:	f7fd fcb6 	bl	80004a8 <__aeabi_f2d>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	a149      	add	r1, pc, #292	@ (adr r1, 8002c68 <inverse_leg_kinematics+0xb58>)
 8002b42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b46:	f7fd fe31 	bl	80007ac <__aeabi_ddiv>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	ec43 2b17 	vmov	d7, r2, r3
 8002b52:	eeb0 0a47 	vmov.f32	s0, s14
 8002b56:	eef0 0a67 	vmov.f32	s1, s15
 8002b5a:	f009 f843 	bl	800bbe4 <acos>
 8002b5e:	ec53 2b10 	vmov	r2, r3, d0
 8002b62:	4610      	mov	r0, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	f7fd ffef 	bl	8000b48 <__aeabi_d2f>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	623b      	str	r3, [r7, #32]
	angles[0] = phi  + phi2;
 8002b6e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002b72:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	edc3 7a00 	vstr	s15, [r3]

	theta = atan2(new_x,H2y);
 8002b80:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002b82:	f7fd fc91 	bl	80004a8 <__aeabi_f2d>
 8002b86:	4604      	mov	r4, r0
 8002b88:	460d      	mov	r5, r1
 8002b8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b8c:	f7fd fc8c 	bl	80004a8 <__aeabi_f2d>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	ec43 2b11 	vmov	d1, r2, r3
 8002b98:	ec45 4b10 	vmov	d0, r4, r5
 8002b9c:	f009 f856 	bl	800bc4c <atan2>
 8002ba0:	ec53 2b10 	vmov	r2, r3, d0
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	f7fd ffce 	bl	8000b48 <__aeabi_d2f>
 8002bac:	4603      	mov	r3, r0
 8002bae:	61fb      	str	r3, [r7, #28]
	Hx = hypot(new_x,H2y);
 8002bb0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002bb2:	f7fd fc79 	bl	80004a8 <__aeabi_f2d>
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	460d      	mov	r5, r1
 8002bba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bbc:	f7fd fc74 	bl	80004a8 <__aeabi_f2d>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	ec43 2b11 	vmov	d1, r2, r3
 8002bc8:	ec45 4b10 	vmov	d0, r4, r5
 8002bcc:	f009 f840 	bl	800bc50 <hypot>
 8002bd0:	ec53 2b10 	vmov	r2, r3, d0
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f7fd ffb6 	bl	8000b48 <__aeabi_d2f>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	61bb      	str	r3, [r7, #24]
	trident =  acos( (pow(Hx,2) + pow(upper_leg_len,2) - pow(lower_leg_len,2)) / (2 * Hx * upper_leg_len) );
 8002be0:	69b8      	ldr	r0, [r7, #24]
 8002be2:	f7fd fc61 	bl	80004a8 <__aeabi_f2d>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	ed9f 1b25 	vldr	d1, [pc, #148]	@ 8002c80 <inverse_leg_kinematics+0xb70>
 8002bee:	ec43 2b10 	vmov	d0, r2, r3
 8002bf2:	f009 f861 	bl	800bcb8 <pow>
 8002bf6:	ec51 0b10 	vmov	r0, r1, d0
 8002bfa:	a325      	add	r3, pc, #148	@ (adr r3, 8002c90 <inverse_leg_kinematics+0xb80>)
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	f7fd faf4 	bl	80001ec <__adddf3>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4610      	mov	r0, r2
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	a322      	add	r3, pc, #136	@ (adr r3, 8002c98 <inverse_leg_kinematics+0xb88>)
 8002c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c12:	f7fd fae9 	bl	80001e8 <__aeabi_dsub>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4614      	mov	r4, r2
 8002c1c:	461d      	mov	r5, r3
 8002c1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c26:	ee17 0a90 	vmov	r0, s15
 8002c2a:	f7fd fc3d 	bl	80004a8 <__aeabi_f2d>
 8002c2e:	a31c      	add	r3, pc, #112	@ (adr r3, 8002ca0 <inverse_leg_kinematics+0xb90>)
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	f7fd fc90 	bl	8000558 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	4629      	mov	r1, r5
 8002c40:	f7fd fdb4 	bl	80007ac <__aeabi_ddiv>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	ec43 2b17 	vmov	d7, r2, r3
 8002c4c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c50:	eef0 0a67 	vmov.f32	s1, s15
 8002c54:	f008 ffc6 	bl	800bbe4 <acos>
 8002c58:	ec53 2b10 	vmov	r2, r3, d0
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	e024      	b.n	8002cac <inverse_leg_kinematics+0xb9c>
 8002c62:	bf00      	nop
 8002c64:	f3af 8000 	nop.w
 8002c68:	9999999a 	.word	0x9999999a
 8002c6c:	3fa99999 	.word	0x3fa99999
 8002c70:	47ae147b 	.word	0x47ae147b
 8002c74:	3f947ae1 	.word	0x3f947ae1
 8002c78:	76c8b439 	.word	0x76c8b439
 8002c7c:	3f8a9fbe 	.word	0x3f8a9fbe
 8002c80:	00000000 	.word	0x00000000
 8002c84:	40000000 	.word	0x40000000
 8002c88:	47ae147c 	.word	0x47ae147c
 8002c8c:	3f647ae1 	.word	0x3f647ae1
 8002c90:	cd35a859 	.word	0xcd35a859
 8002c94:	3f914e3b 	.word	0x3f914e3b
 8002c98:	73eab368 	.word	0x73eab368
 8002c9c:	3f8b15b5 	.word	0x3f8b15b5
 8002ca0:	0a3d70a4 	.word	0x0a3d70a4
 8002ca4:	3fc0a3d7 	.word	0x3fc0a3d7
 8002ca8:	3fb33333 	.word	0x3fb33333
 8002cac:	f7fd ff4c 	bl	8000b48 <__aeabi_d2f>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	617b      	str	r3, [r7, #20]
	angles[1] = trident - theta + 1.5707;
 8002cb4:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cb8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc0:	ee17 0a90 	vmov	r0, s15
 8002cc4:	f7fd fbf0 	bl	80004a8 <__aeabi_f2d>
 8002cc8:	a323      	add	r3, pc, #140	@ (adr r3, 8002d58 <inverse_leg_kinematics+0xc48>)
 8002cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cce:	f7fd fa8d 	bl	80001ec <__adddf3>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	1d1c      	adds	r4, r3, #4
 8002cde:	f7fd ff33 	bl	8000b48 <__aeabi_d2f>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	6023      	str	r3, [r4, #0]
	angles[2] = acos( (pow(lower_leg_len,2) + pow(upper_leg_len,2) - pow(Hx,2)) / (2 * lower_leg_len * upper_leg_len) );
 8002ce6:	69b8      	ldr	r0, [r7, #24]
 8002ce8:	f7fd fbde 	bl	80004a8 <__aeabi_f2d>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 8002d50 <inverse_leg_kinematics+0xc40>
 8002cf4:	ec43 2b10 	vmov	d0, r2, r3
 8002cf8:	f008 ffde 	bl	800bcb8 <pow>
 8002cfc:	ec53 2b10 	vmov	r2, r3, d0
 8002d00:	a117      	add	r1, pc, #92	@ (adr r1, 8002d60 <inverse_leg_kinematics+0xc50>)
 8002d02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d06:	f7fd fa6f 	bl	80001e8 <__aeabi_dsub>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	a315      	add	r3, pc, #84	@ (adr r3, 8002d68 <inverse_leg_kinematics+0xc58>)
 8002d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d18:	f7fd fd48 	bl	80007ac <__aeabi_ddiv>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	ec43 2b17 	vmov	d7, r2, r3
 8002d24:	eeb0 0a47 	vmov.f32	s0, s14
 8002d28:	eef0 0a67 	vmov.f32	s1, s15
 8002d2c:	f008 ff5a 	bl	800bbe4 <acos>
 8002d30:	ec51 0b10 	vmov	r0, r1, d0
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f103 0408 	add.w	r4, r3, #8
 8002d3a:	f7fd ff05 	bl	8000b48 <__aeabi_d2f>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	6023      	str	r3, [r4, #0]
	//	adjust_servo_angles(angles,leg_index);

}
 8002d42:	bf00      	nop
 8002d44:	3760      	adds	r7, #96	@ 0x60
 8002d46:	46bd      	mov	sp, r7
 8002d48:	ecbd 8b02 	vpop	{d8}
 8002d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	00000000 	.word	0x00000000
 8002d54:	40000000 	.word	0x40000000
 8002d58:	52bd3c36 	.word	0x52bd3c36
 8002d5c:	3ff92196 	.word	0x3ff92196
 8002d60:	872b020d 	.word	0x872b020d
 8002d64:	3f9ed916 	.word	0x3f9ed916
 8002d68:	089a0276 	.word	0x089a0276
 8002d6c:	3f9e9e1b 	.word	0x3f9e9e1b

08002d70 <inverse_kinematics_all>:


void inverse_kinematics_all(float FL_position[], float FR_position[], float BL_position[], float BR_position[], float FL_rotation[], float FR_rotation[], float BL_rotation[], float BR_rotation[]){
 8002d70:	b5b0      	push	{r4, r5, r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]

	smoothed_FL_position[0] = (FL_position[0] * smoothing_var) + (prev_FL_position[0] * (1.0-smoothing_var));
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd fb90 	bl	80004a8 <__aeabi_f2d>
 8002d88:	a3c1      	add	r3, pc, #772	@ (adr r3, 8003090 <inverse_kinematics_all+0x320>)
 8002d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8e:	f7fd fbe3 	bl	8000558 <__aeabi_dmul>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4614      	mov	r4, r2
 8002d98:	461d      	mov	r5, r3
 8002d9a:	4bbf      	ldr	r3, [pc, #764]	@ (8003098 <inverse_kinematics_all+0x328>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fb82 	bl	80004a8 <__aeabi_f2d>
 8002da4:	a3b8      	add	r3, pc, #736	@ (adr r3, 8003088 <inverse_kinematics_all+0x318>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	f7fd fbd5 	bl	8000558 <__aeabi_dmul>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4620      	mov	r0, r4
 8002db4:	4629      	mov	r1, r5
 8002db6:	f7fd fa19 	bl	80001ec <__adddf3>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f7fd fec1 	bl	8000b48 <__aeabi_d2f>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4ab4      	ldr	r2, [pc, #720]	@ (800309c <inverse_kinematics_all+0x32c>)
 8002dca:	6013      	str	r3, [r2, #0]
	prev_FL_position[0] = smoothed_FL_position[0];
 8002dcc:	4bb3      	ldr	r3, [pc, #716]	@ (800309c <inverse_kinematics_all+0x32c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4ab1      	ldr	r2, [pc, #708]	@ (8003098 <inverse_kinematics_all+0x328>)
 8002dd2:	6013      	str	r3, [r2, #0]

	smoothed_FL_position[1] = FL_position[1] * smoothing_var + prev_FL_position[1] * (1.0-smoothing_var);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fd fb64 	bl	80004a8 <__aeabi_f2d>
 8002de0:	a3ab      	add	r3, pc, #684	@ (adr r3, 8003090 <inverse_kinematics_all+0x320>)
 8002de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de6:	f7fd fbb7 	bl	8000558 <__aeabi_dmul>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4614      	mov	r4, r2
 8002df0:	461d      	mov	r5, r3
 8002df2:	4ba9      	ldr	r3, [pc, #676]	@ (8003098 <inverse_kinematics_all+0x328>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fd fb56 	bl	80004a8 <__aeabi_f2d>
 8002dfc:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003088 <inverse_kinematics_all+0x318>)
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	f7fd fba9 	bl	8000558 <__aeabi_dmul>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	4629      	mov	r1, r5
 8002e0e:	f7fd f9ed 	bl	80001ec <__adddf3>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f7fd fe95 	bl	8000b48 <__aeabi_d2f>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4a9e      	ldr	r2, [pc, #632]	@ (800309c <inverse_kinematics_all+0x32c>)
 8002e22:	6053      	str	r3, [r2, #4]
	prev_FL_position[1] = smoothed_FL_position[1];
 8002e24:	4b9d      	ldr	r3, [pc, #628]	@ (800309c <inverse_kinematics_all+0x32c>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a9b      	ldr	r2, [pc, #620]	@ (8003098 <inverse_kinematics_all+0x328>)
 8002e2a:	6053      	str	r3, [r2, #4]

	smoothed_FL_position[2] = FL_position[2] * smoothing_var + prev_FL_position[2] * (1.0-smoothing_var);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3308      	adds	r3, #8
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd fb38 	bl	80004a8 <__aeabi_f2d>
 8002e38:	a395      	add	r3, pc, #596	@ (adr r3, 8003090 <inverse_kinematics_all+0x320>)
 8002e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3e:	f7fd fb8b 	bl	8000558 <__aeabi_dmul>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4614      	mov	r4, r2
 8002e48:	461d      	mov	r5, r3
 8002e4a:	4b93      	ldr	r3, [pc, #588]	@ (8003098 <inverse_kinematics_all+0x328>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd fb2a 	bl	80004a8 <__aeabi_f2d>
 8002e54:	a38c      	add	r3, pc, #560	@ (adr r3, 8003088 <inverse_kinematics_all+0x318>)
 8002e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5a:	f7fd fb7d 	bl	8000558 <__aeabi_dmul>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4620      	mov	r0, r4
 8002e64:	4629      	mov	r1, r5
 8002e66:	f7fd f9c1 	bl	80001ec <__adddf3>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	f7fd fe69 	bl	8000b48 <__aeabi_d2f>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4a88      	ldr	r2, [pc, #544]	@ (800309c <inverse_kinematics_all+0x32c>)
 8002e7a:	6093      	str	r3, [r2, #8]
	prev_FL_position[2] = smoothed_FL_position[2];
 8002e7c:	4b87      	ldr	r3, [pc, #540]	@ (800309c <inverse_kinematics_all+0x32c>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4a85      	ldr	r2, [pc, #532]	@ (8003098 <inverse_kinematics_all+0x328>)
 8002e82:	6093      	str	r3, [r2, #8]

	smoothed_FR_position[0] = FR_position[0] * smoothing_var + prev_FR_position[0] * (1.0-smoothing_var);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd fb0d 	bl	80004a8 <__aeabi_f2d>
 8002e8e:	a380      	add	r3, pc, #512	@ (adr r3, 8003090 <inverse_kinematics_all+0x320>)
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f7fd fb60 	bl	8000558 <__aeabi_dmul>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4614      	mov	r4, r2
 8002e9e:	461d      	mov	r5, r3
 8002ea0:	4b7f      	ldr	r3, [pc, #508]	@ (80030a0 <inverse_kinematics_all+0x330>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd faff 	bl	80004a8 <__aeabi_f2d>
 8002eaa:	a377      	add	r3, pc, #476	@ (adr r3, 8003088 <inverse_kinematics_all+0x318>)
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f7fd fb52 	bl	8000558 <__aeabi_dmul>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4620      	mov	r0, r4
 8002eba:	4629      	mov	r1, r5
 8002ebc:	f7fd f996 	bl	80001ec <__adddf3>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fe3e 	bl	8000b48 <__aeabi_d2f>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4a75      	ldr	r2, [pc, #468]	@ (80030a4 <inverse_kinematics_all+0x334>)
 8002ed0:	6013      	str	r3, [r2, #0]
	prev_FR_position[0] = smoothed_FR_position[0];
 8002ed2:	4b74      	ldr	r3, [pc, #464]	@ (80030a4 <inverse_kinematics_all+0x334>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a72      	ldr	r2, [pc, #456]	@ (80030a0 <inverse_kinematics_all+0x330>)
 8002ed8:	6013      	str	r3, [r2, #0]

	smoothed_FR_position[1] = FR_position[1] * smoothing_var + prev_FR_position[1] * (1.0-smoothing_var);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	3304      	adds	r3, #4
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fd fae1 	bl	80004a8 <__aeabi_f2d>
 8002ee6:	a36a      	add	r3, pc, #424	@ (adr r3, 8003090 <inverse_kinematics_all+0x320>)
 8002ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eec:	f7fd fb34 	bl	8000558 <__aeabi_dmul>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4614      	mov	r4, r2
 8002ef6:	461d      	mov	r5, r3
 8002ef8:	4b69      	ldr	r3, [pc, #420]	@ (80030a0 <inverse_kinematics_all+0x330>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fad3 	bl	80004a8 <__aeabi_f2d>
 8002f02:	a361      	add	r3, pc, #388	@ (adr r3, 8003088 <inverse_kinematics_all+0x318>)
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	f7fd fb26 	bl	8000558 <__aeabi_dmul>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4620      	mov	r0, r4
 8002f12:	4629      	mov	r1, r5
 8002f14:	f7fd f96a 	bl	80001ec <__adddf3>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f7fd fe12 	bl	8000b48 <__aeabi_d2f>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4a5f      	ldr	r2, [pc, #380]	@ (80030a4 <inverse_kinematics_all+0x334>)
 8002f28:	6053      	str	r3, [r2, #4]
	prev_FR_position[1] = smoothed_FR_position[1];
 8002f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80030a4 <inverse_kinematics_all+0x334>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4a5c      	ldr	r2, [pc, #368]	@ (80030a0 <inverse_kinematics_all+0x330>)
 8002f30:	6053      	str	r3, [r2, #4]

	smoothed_FR_position[2] = FR_position[2] * smoothing_var + prev_FR_position[2] * (1.0-smoothing_var);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3308      	adds	r3, #8
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fd fab5 	bl	80004a8 <__aeabi_f2d>
 8002f3e:	a354      	add	r3, pc, #336	@ (adr r3, 8003090 <inverse_kinematics_all+0x320>)
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f7fd fb08 	bl	8000558 <__aeabi_dmul>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	461d      	mov	r5, r3
 8002f50:	4b53      	ldr	r3, [pc, #332]	@ (80030a0 <inverse_kinematics_all+0x330>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd faa7 	bl	80004a8 <__aeabi_f2d>
 8002f5a:	a34b      	add	r3, pc, #300	@ (adr r3, 8003088 <inverse_kinematics_all+0x318>)
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f7fd fafa 	bl	8000558 <__aeabi_dmul>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4620      	mov	r0, r4
 8002f6a:	4629      	mov	r1, r5
 8002f6c:	f7fd f93e 	bl	80001ec <__adddf3>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	f7fd fde6 	bl	8000b48 <__aeabi_d2f>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4a49      	ldr	r2, [pc, #292]	@ (80030a4 <inverse_kinematics_all+0x334>)
 8002f80:	6093      	str	r3, [r2, #8]
	prev_FR_position[2] = smoothed_FR_position[2];
 8002f82:	4b48      	ldr	r3, [pc, #288]	@ (80030a4 <inverse_kinematics_all+0x334>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	4a46      	ldr	r2, [pc, #280]	@ (80030a0 <inverse_kinematics_all+0x330>)
 8002f88:	6093      	str	r3, [r2, #8]

	smoothed_BL_position[0] = BL_position[0] * smoothing_var + prev_BL_position[0] * (1.0-smoothing_var);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fd fa8a 	bl	80004a8 <__aeabi_f2d>
 8002f94:	a33e      	add	r3, pc, #248	@ (adr r3, 8003090 <inverse_kinematics_all+0x320>)
 8002f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9a:	f7fd fadd 	bl	8000558 <__aeabi_dmul>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4614      	mov	r4, r2
 8002fa4:	461d      	mov	r5, r3
 8002fa6:	4b40      	ldr	r3, [pc, #256]	@ (80030a8 <inverse_kinematics_all+0x338>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd fa7c 	bl	80004a8 <__aeabi_f2d>
 8002fb0:	a335      	add	r3, pc, #212	@ (adr r3, 8003088 <inverse_kinematics_all+0x318>)
 8002fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb6:	f7fd facf 	bl	8000558 <__aeabi_dmul>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	f7fd f913 	bl	80001ec <__adddf3>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f7fd fdbb 	bl	8000b48 <__aeabi_d2f>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4a35      	ldr	r2, [pc, #212]	@ (80030ac <inverse_kinematics_all+0x33c>)
 8002fd6:	6013      	str	r3, [r2, #0]
	prev_BL_position[0] = smoothed_BL_position[0];
 8002fd8:	4b34      	ldr	r3, [pc, #208]	@ (80030ac <inverse_kinematics_all+0x33c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a32      	ldr	r2, [pc, #200]	@ (80030a8 <inverse_kinematics_all+0x338>)
 8002fde:	6013      	str	r3, [r2, #0]

	smoothed_BL_position[1] = BL_position[1] * smoothing_var + prev_BL_position[1] * (1.0-smoothing_var);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd fa5e 	bl	80004a8 <__aeabi_f2d>
 8002fec:	a328      	add	r3, pc, #160	@ (adr r3, 8003090 <inverse_kinematics_all+0x320>)
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	f7fd fab1 	bl	8000558 <__aeabi_dmul>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4614      	mov	r4, r2
 8002ffc:	461d      	mov	r5, r3
 8002ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80030a8 <inverse_kinematics_all+0x338>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd fa50 	bl	80004a8 <__aeabi_f2d>
 8003008:	a31f      	add	r3, pc, #124	@ (adr r3, 8003088 <inverse_kinematics_all+0x318>)
 800300a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300e:	f7fd faa3 	bl	8000558 <__aeabi_dmul>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4620      	mov	r0, r4
 8003018:	4629      	mov	r1, r5
 800301a:	f7fd f8e7 	bl	80001ec <__adddf3>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4610      	mov	r0, r2
 8003024:	4619      	mov	r1, r3
 8003026:	f7fd fd8f 	bl	8000b48 <__aeabi_d2f>
 800302a:	4603      	mov	r3, r0
 800302c:	4a1f      	ldr	r2, [pc, #124]	@ (80030ac <inverse_kinematics_all+0x33c>)
 800302e:	6053      	str	r3, [r2, #4]
	prev_BL_position[1] = smoothed_BL_position[1];
 8003030:	4b1e      	ldr	r3, [pc, #120]	@ (80030ac <inverse_kinematics_all+0x33c>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4a1c      	ldr	r2, [pc, #112]	@ (80030a8 <inverse_kinematics_all+0x338>)
 8003036:	6053      	str	r3, [r2, #4]

	smoothed_BL_position[2] = BL_position[2] * smoothing_var + prev_BL_position[2] * (1.0-smoothing_var);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3308      	adds	r3, #8
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fd fa32 	bl	80004a8 <__aeabi_f2d>
 8003044:	a312      	add	r3, pc, #72	@ (adr r3, 8003090 <inverse_kinematics_all+0x320>)
 8003046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304a:	f7fd fa85 	bl	8000558 <__aeabi_dmul>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4614      	mov	r4, r2
 8003054:	461d      	mov	r5, r3
 8003056:	4b14      	ldr	r3, [pc, #80]	@ (80030a8 <inverse_kinematics_all+0x338>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fa24 	bl	80004a8 <__aeabi_f2d>
 8003060:	a309      	add	r3, pc, #36	@ (adr r3, 8003088 <inverse_kinematics_all+0x318>)
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	f7fd fa77 	bl	8000558 <__aeabi_dmul>
 800306a:	4602      	mov	r2, r0
 800306c:	460b      	mov	r3, r1
 800306e:	4620      	mov	r0, r4
 8003070:	4629      	mov	r1, r5
 8003072:	f7fd f8bb 	bl	80001ec <__adddf3>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fd63 	bl	8000b48 <__aeabi_d2f>
 8003082:	4603      	mov	r3, r0
 8003084:	e014      	b.n	80030b0 <inverse_kinematics_all+0x340>
 8003086:	bf00      	nop
 8003088:	cccccccd 	.word	0xcccccccd
 800308c:	3feccccc 	.word	0x3feccccc
 8003090:	9999999a 	.word	0x9999999a
 8003094:	3fb99999 	.word	0x3fb99999
 8003098:	20000060 	.word	0x20000060
 800309c:	20000030 	.word	0x20000030
 80030a0:	2000006c 	.word	0x2000006c
 80030a4:	2000003c 	.word	0x2000003c
 80030a8:	20000078 	.word	0x20000078
 80030ac:	20000048 	.word	0x20000048
 80030b0:	4a57      	ldr	r2, [pc, #348]	@ (8003210 <inverse_kinematics_all+0x4a0>)
 80030b2:	6093      	str	r3, [r2, #8]
	prev_BL_position[2] = smoothed_BL_position[2];
 80030b4:	4b56      	ldr	r3, [pc, #344]	@ (8003210 <inverse_kinematics_all+0x4a0>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4a56      	ldr	r2, [pc, #344]	@ (8003214 <inverse_kinematics_all+0x4a4>)
 80030ba:	6093      	str	r3, [r2, #8]

	smoothed_BR_position[0] = BR_position[0] * smoothing_var + prev_BR_position[0] * (1.0-smoothing_var);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fd f9f1 	bl	80004a8 <__aeabi_f2d>
 80030c6:	a34e      	add	r3, pc, #312	@ (adr r3, 8003200 <inverse_kinematics_all+0x490>)
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	f7fd fa44 	bl	8000558 <__aeabi_dmul>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4614      	mov	r4, r2
 80030d6:	461d      	mov	r5, r3
 80030d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003218 <inverse_kinematics_all+0x4a8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fd f9e3 	bl	80004a8 <__aeabi_f2d>
 80030e2:	a349      	add	r3, pc, #292	@ (adr r3, 8003208 <inverse_kinematics_all+0x498>)
 80030e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e8:	f7fd fa36 	bl	8000558 <__aeabi_dmul>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4620      	mov	r0, r4
 80030f2:	4629      	mov	r1, r5
 80030f4:	f7fd f87a 	bl	80001ec <__adddf3>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4610      	mov	r0, r2
 80030fe:	4619      	mov	r1, r3
 8003100:	f7fd fd22 	bl	8000b48 <__aeabi_d2f>
 8003104:	4603      	mov	r3, r0
 8003106:	4a45      	ldr	r2, [pc, #276]	@ (800321c <inverse_kinematics_all+0x4ac>)
 8003108:	6013      	str	r3, [r2, #0]
	prev_BR_position[0] = smoothed_BR_position[0];
 800310a:	4b44      	ldr	r3, [pc, #272]	@ (800321c <inverse_kinematics_all+0x4ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a42      	ldr	r2, [pc, #264]	@ (8003218 <inverse_kinematics_all+0x4a8>)
 8003110:	6013      	str	r3, [r2, #0]

	smoothed_BR_position[1] = BR_position[1] * smoothing_var + prev_BR_position[1] * (1.0-smoothing_var);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	3304      	adds	r3, #4
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7fd f9c5 	bl	80004a8 <__aeabi_f2d>
 800311e:	a338      	add	r3, pc, #224	@ (adr r3, 8003200 <inverse_kinematics_all+0x490>)
 8003120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003124:	f7fd fa18 	bl	8000558 <__aeabi_dmul>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4614      	mov	r4, r2
 800312e:	461d      	mov	r5, r3
 8003130:	4b39      	ldr	r3, [pc, #228]	@ (8003218 <inverse_kinematics_all+0x4a8>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd f9b7 	bl	80004a8 <__aeabi_f2d>
 800313a:	a333      	add	r3, pc, #204	@ (adr r3, 8003208 <inverse_kinematics_all+0x498>)
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	f7fd fa0a 	bl	8000558 <__aeabi_dmul>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd f84e 	bl	80001ec <__adddf3>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4610      	mov	r0, r2
 8003156:	4619      	mov	r1, r3
 8003158:	f7fd fcf6 	bl	8000b48 <__aeabi_d2f>
 800315c:	4603      	mov	r3, r0
 800315e:	4a2f      	ldr	r2, [pc, #188]	@ (800321c <inverse_kinematics_all+0x4ac>)
 8003160:	6053      	str	r3, [r2, #4]
	prev_BR_position[1] = smoothed_BR_position[1];
 8003162:	4b2e      	ldr	r3, [pc, #184]	@ (800321c <inverse_kinematics_all+0x4ac>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4a2c      	ldr	r2, [pc, #176]	@ (8003218 <inverse_kinematics_all+0x4a8>)
 8003168:	6053      	str	r3, [r2, #4]

	smoothed_BR_position[2] = BR_position[2] * smoothing_var + prev_BR_position[2] * (1.0-smoothing_var);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	3308      	adds	r3, #8
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd f999 	bl	80004a8 <__aeabi_f2d>
 8003176:	a322      	add	r3, pc, #136	@ (adr r3, 8003200 <inverse_kinematics_all+0x490>)
 8003178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317c:	f7fd f9ec 	bl	8000558 <__aeabi_dmul>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4614      	mov	r4, r2
 8003186:	461d      	mov	r5, r3
 8003188:	4b23      	ldr	r3, [pc, #140]	@ (8003218 <inverse_kinematics_all+0x4a8>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd f98b 	bl	80004a8 <__aeabi_f2d>
 8003192:	a31d      	add	r3, pc, #116	@ (adr r3, 8003208 <inverse_kinematics_all+0x498>)
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	f7fd f9de 	bl	8000558 <__aeabi_dmul>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4620      	mov	r0, r4
 80031a2:	4629      	mov	r1, r5
 80031a4:	f7fd f822 	bl	80001ec <__adddf3>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4610      	mov	r0, r2
 80031ae:	4619      	mov	r1, r3
 80031b0:	f7fd fcca 	bl	8000b48 <__aeabi_d2f>
 80031b4:	4603      	mov	r3, r0
 80031b6:	4a19      	ldr	r2, [pc, #100]	@ (800321c <inverse_kinematics_all+0x4ac>)
 80031b8:	6093      	str	r3, [r2, #8]
	prev_BR_position[2] = smoothed_BR_position[2];
 80031ba:	4b18      	ldr	r3, [pc, #96]	@ (800321c <inverse_kinematics_all+0x4ac>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	4a16      	ldr	r2, [pc, #88]	@ (8003218 <inverse_kinematics_all+0x4a8>)
 80031c0:	6093      	str	r3, [r2, #8]

	inverse_leg_kinematics(smoothed_FL_position, FL_angles, 1, FL_rotation);
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	2201      	movs	r2, #1
 80031c6:	4916      	ldr	r1, [pc, #88]	@ (8003220 <inverse_kinematics_all+0x4b0>)
 80031c8:	4816      	ldr	r0, [pc, #88]	@ (8003224 <inverse_kinematics_all+0x4b4>)
 80031ca:	f7fe ffa1 	bl	8002110 <inverse_leg_kinematics>
	inverse_leg_kinematics(smoothed_FR_position, FR_angles, 2, FR_rotation);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	2202      	movs	r2, #2
 80031d2:	4915      	ldr	r1, [pc, #84]	@ (8003228 <inverse_kinematics_all+0x4b8>)
 80031d4:	4815      	ldr	r0, [pc, #84]	@ (800322c <inverse_kinematics_all+0x4bc>)
 80031d6:	f7fe ff9b 	bl	8002110 <inverse_leg_kinematics>
	inverse_leg_kinematics(smoothed_BL_position, BL_angles, 3, BL_rotation);
 80031da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031dc:	2203      	movs	r2, #3
 80031de:	4914      	ldr	r1, [pc, #80]	@ (8003230 <inverse_kinematics_all+0x4c0>)
 80031e0:	480b      	ldr	r0, [pc, #44]	@ (8003210 <inverse_kinematics_all+0x4a0>)
 80031e2:	f7fe ff95 	bl	8002110 <inverse_leg_kinematics>
	inverse_leg_kinematics(smoothed_BR_position, BR_angles, 4, BR_rotation);
 80031e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e8:	2204      	movs	r2, #4
 80031ea:	4912      	ldr	r1, [pc, #72]	@ (8003234 <inverse_kinematics_all+0x4c4>)
 80031ec:	480b      	ldr	r0, [pc, #44]	@ (800321c <inverse_kinematics_all+0x4ac>)
 80031ee:	f7fe ff8f 	bl	8002110 <inverse_leg_kinematics>

}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bdb0      	pop	{r4, r5, r7, pc}
 80031fa:	bf00      	nop
 80031fc:	f3af 8000 	nop.w
 8003200:	9999999a 	.word	0x9999999a
 8003204:	3fb99999 	.word	0x3fb99999
 8003208:	cccccccd 	.word	0xcccccccd
 800320c:	3feccccc 	.word	0x3feccccc
 8003210:	20000048 	.word	0x20000048
 8003214:	20000078 	.word	0x20000078
 8003218:	20000084 	.word	0x20000084
 800321c:	20000054 	.word	0x20000054
 8003220:	20000278 	.word	0x20000278
 8003224:	20000030 	.word	0x20000030
 8003228:	20000284 	.word	0x20000284
 800322c:	2000003c 	.word	0x2000003c
 8003230:	20000290 	.word	0x20000290
 8003234:	2000029c 	.word	0x2000029c

08003238 <load_leg_position>:

void load_leg_position(float positions[], float x, float y, float z, float angles[], float p, float r, float yaw){
 8003238:	b480      	push	{r7}
 800323a:	b089      	sub	sp, #36	@ 0x24
 800323c:	af00      	add	r7, sp, #0
 800323e:	61f8      	str	r0, [r7, #28]
 8003240:	ed87 0a06 	vstr	s0, [r7, #24]
 8003244:	edc7 0a05 	vstr	s1, [r7, #20]
 8003248:	ed87 1a04 	vstr	s2, [r7, #16]
 800324c:	60f9      	str	r1, [r7, #12]
 800324e:	edc7 1a02 	vstr	s3, [r7, #8]
 8003252:	ed87 2a01 	vstr	s4, [r7, #4]
 8003256:	edc7 2a00 	vstr	s5, [r7]
	positions[0] = x;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	601a      	str	r2, [r3, #0]
	positions[1] = y;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	3304      	adds	r3, #4
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	601a      	str	r2, [r3, #0]
	positions[2] = z;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	3308      	adds	r3, #8
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	601a      	str	r2, [r3, #0]

	angles[0] = p;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	601a      	str	r2, [r3, #0]
	angles[1] = r;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3304      	adds	r3, #4
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	601a      	str	r2, [r3, #0]
	angles[2] = yaw;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	3308      	adds	r3, #8
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	601a      	str	r2, [r3, #0]
}
 8003286:	bf00      	nop
 8003288:	3724      	adds	r7, #36	@ 0x24
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <load_angles>:

void load_angles(){
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0

	pulses[0] = (650 - angle_to_pulse(FL_angles[0] + FL_offsets[0])); //650
 8003298:	4b6c      	ldr	r3, [pc, #432]	@ (800344c <load_angles+0x1b8>)
 800329a:	ed93 7a00 	vldr	s14, [r3]
 800329e:	4b6c      	ldr	r3, [pc, #432]	@ (8003450 <load_angles+0x1bc>)
 80032a0:	edd3 7a00 	vldr	s15, [r3]
 80032a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a8:	eeb0 0a67 	vmov.f32	s0, s15
 80032ac:	f001 fcdc 	bl	8004c68 <angle_to_pulse>
 80032b0:	4603      	mov	r3, r0
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	f5c3 7322 	rsb	r3, r3, #648	@ 0x288
 80032b8:	3302      	adds	r3, #2
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	4b65      	ldr	r3, [pc, #404]	@ (8003454 <load_angles+0x1c0>)
 80032be:	801a      	strh	r2, [r3, #0]

	pulses[1] = (650 - angle_to_pulse(FL_angles[1] + FL_offsets[1]));
 80032c0:	4b62      	ldr	r3, [pc, #392]	@ (800344c <load_angles+0x1b8>)
 80032c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80032c6:	4b62      	ldr	r3, [pc, #392]	@ (8003450 <load_angles+0x1bc>)
 80032c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80032cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d0:	eeb0 0a67 	vmov.f32	s0, s15
 80032d4:	f001 fcc8 	bl	8004c68 <angle_to_pulse>
 80032d8:	4603      	mov	r3, r0
 80032da:	b29b      	uxth	r3, r3
 80032dc:	f5c3 7322 	rsb	r3, r3, #648	@ 0x288
 80032e0:	3302      	adds	r3, #2
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	4b5b      	ldr	r3, [pc, #364]	@ (8003454 <load_angles+0x1c0>)
 80032e6:	805a      	strh	r2, [r3, #2]

	pulses[2] = angle_to_pulse(FL_angles[2] + FL_offsets[2]);
 80032e8:	4b58      	ldr	r3, [pc, #352]	@ (800344c <load_angles+0x1b8>)
 80032ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80032ee:	4b58      	ldr	r3, [pc, #352]	@ (8003450 <load_angles+0x1bc>)
 80032f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80032f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f8:	eeb0 0a67 	vmov.f32	s0, s15
 80032fc:	f001 fcb4 	bl	8004c68 <angle_to_pulse>
 8003300:	4603      	mov	r3, r0
 8003302:	b29a      	uxth	r2, r3
 8003304:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <load_angles+0x1c0>)
 8003306:	809a      	strh	r2, [r3, #4]

	pulses[3] = angle_to_pulse(FR_angles[0] + FR_offsets[0]);
 8003308:	4b53      	ldr	r3, [pc, #332]	@ (8003458 <load_angles+0x1c4>)
 800330a:	ed93 7a00 	vldr	s14, [r3]
 800330e:	4b53      	ldr	r3, [pc, #332]	@ (800345c <load_angles+0x1c8>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003318:	eeb0 0a67 	vmov.f32	s0, s15
 800331c:	f001 fca4 	bl	8004c68 <angle_to_pulse>
 8003320:	4603      	mov	r3, r0
 8003322:	b29a      	uxth	r2, r3
 8003324:	4b4b      	ldr	r3, [pc, #300]	@ (8003454 <load_angles+0x1c0>)
 8003326:	80da      	strh	r2, [r3, #6]

	pulses[4] = angle_to_pulse(FR_angles[1] + FR_offsets[1]) ;
 8003328:	4b4b      	ldr	r3, [pc, #300]	@ (8003458 <load_angles+0x1c4>)
 800332a:	ed93 7a01 	vldr	s14, [r3, #4]
 800332e:	4b4b      	ldr	r3, [pc, #300]	@ (800345c <load_angles+0x1c8>)
 8003330:	edd3 7a01 	vldr	s15, [r3, #4]
 8003334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003338:	eeb0 0a67 	vmov.f32	s0, s15
 800333c:	f001 fc94 	bl	8004c68 <angle_to_pulse>
 8003340:	4603      	mov	r3, r0
 8003342:	b29a      	uxth	r2, r3
 8003344:	4b43      	ldr	r3, [pc, #268]	@ (8003454 <load_angles+0x1c0>)
 8003346:	811a      	strh	r2, [r3, #8]

	pulses[5] = (650 - angle_to_pulse(FR_angles[2] + FR_offsets[2]));
 8003348:	4b43      	ldr	r3, [pc, #268]	@ (8003458 <load_angles+0x1c4>)
 800334a:	ed93 7a02 	vldr	s14, [r3, #8]
 800334e:	4b43      	ldr	r3, [pc, #268]	@ (800345c <load_angles+0x1c8>)
 8003350:	edd3 7a02 	vldr	s15, [r3, #8]
 8003354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003358:	eeb0 0a67 	vmov.f32	s0, s15
 800335c:	f001 fc84 	bl	8004c68 <angle_to_pulse>
 8003360:	4603      	mov	r3, r0
 8003362:	b29b      	uxth	r3, r3
 8003364:	f5c3 7322 	rsb	r3, r3, #648	@ 0x288
 8003368:	3302      	adds	r3, #2
 800336a:	b29a      	uxth	r2, r3
 800336c:	4b39      	ldr	r3, [pc, #228]	@ (8003454 <load_angles+0x1c0>)
 800336e:	815a      	strh	r2, [r3, #10]

	pulses[6] = angle_to_pulse(BL_angles[0] + BL_offsets[0]);
 8003370:	4b3b      	ldr	r3, [pc, #236]	@ (8003460 <load_angles+0x1cc>)
 8003372:	ed93 7a00 	vldr	s14, [r3]
 8003376:	4b3b      	ldr	r3, [pc, #236]	@ (8003464 <load_angles+0x1d0>)
 8003378:	edd3 7a00 	vldr	s15, [r3]
 800337c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003380:	eeb0 0a67 	vmov.f32	s0, s15
 8003384:	f001 fc70 	bl	8004c68 <angle_to_pulse>
 8003388:	4603      	mov	r3, r0
 800338a:	b29a      	uxth	r2, r3
 800338c:	4b31      	ldr	r3, [pc, #196]	@ (8003454 <load_angles+0x1c0>)
 800338e:	819a      	strh	r2, [r3, #12]

	pulses[7] = (650 - angle_to_pulse(BL_angles[1] + BL_offsets[1]));
 8003390:	4b33      	ldr	r3, [pc, #204]	@ (8003460 <load_angles+0x1cc>)
 8003392:	ed93 7a01 	vldr	s14, [r3, #4]
 8003396:	4b33      	ldr	r3, [pc, #204]	@ (8003464 <load_angles+0x1d0>)
 8003398:	edd3 7a01 	vldr	s15, [r3, #4]
 800339c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a0:	eeb0 0a67 	vmov.f32	s0, s15
 80033a4:	f001 fc60 	bl	8004c68 <angle_to_pulse>
 80033a8:	4603      	mov	r3, r0
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f5c3 7322 	rsb	r3, r3, #648	@ 0x288
 80033b0:	3302      	adds	r3, #2
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	4b27      	ldr	r3, [pc, #156]	@ (8003454 <load_angles+0x1c0>)
 80033b6:	81da      	strh	r2, [r3, #14]

	pulses[8] = angle_to_pulse(BL_angles[2] + BL_offsets[2]);
 80033b8:	4b29      	ldr	r3, [pc, #164]	@ (8003460 <load_angles+0x1cc>)
 80033ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80033be:	4b29      	ldr	r3, [pc, #164]	@ (8003464 <load_angles+0x1d0>)
 80033c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80033c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c8:	eeb0 0a67 	vmov.f32	s0, s15
 80033cc:	f001 fc4c 	bl	8004c68 <angle_to_pulse>
 80033d0:	4603      	mov	r3, r0
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003454 <load_angles+0x1c0>)
 80033d6:	821a      	strh	r2, [r3, #16]

	pulses[9] = (650 - angle_to_pulse(BR_angles[0] + BR_offsets[0]));
 80033d8:	4b23      	ldr	r3, [pc, #140]	@ (8003468 <load_angles+0x1d4>)
 80033da:	ed93 7a00 	vldr	s14, [r3]
 80033de:	4b23      	ldr	r3, [pc, #140]	@ (800346c <load_angles+0x1d8>)
 80033e0:	edd3 7a00 	vldr	s15, [r3]
 80033e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e8:	eeb0 0a67 	vmov.f32	s0, s15
 80033ec:	f001 fc3c 	bl	8004c68 <angle_to_pulse>
 80033f0:	4603      	mov	r3, r0
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	f5c3 7322 	rsb	r3, r3, #648	@ 0x288
 80033f8:	3302      	adds	r3, #2
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	4b15      	ldr	r3, [pc, #84]	@ (8003454 <load_angles+0x1c0>)
 80033fe:	825a      	strh	r2, [r3, #18]

	pulses[10] = angle_to_pulse(BR_angles[1] + BR_offsets[1]) ;
 8003400:	4b19      	ldr	r3, [pc, #100]	@ (8003468 <load_angles+0x1d4>)
 8003402:	ed93 7a01 	vldr	s14, [r3, #4]
 8003406:	4b19      	ldr	r3, [pc, #100]	@ (800346c <load_angles+0x1d8>)
 8003408:	edd3 7a01 	vldr	s15, [r3, #4]
 800340c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003410:	eeb0 0a67 	vmov.f32	s0, s15
 8003414:	f001 fc28 	bl	8004c68 <angle_to_pulse>
 8003418:	4603      	mov	r3, r0
 800341a:	b29a      	uxth	r2, r3
 800341c:	4b0d      	ldr	r3, [pc, #52]	@ (8003454 <load_angles+0x1c0>)
 800341e:	829a      	strh	r2, [r3, #20]

	pulses[11] = (650 - angle_to_pulse(BR_angles[2] + BR_offsets[2]));
 8003420:	4b11      	ldr	r3, [pc, #68]	@ (8003468 <load_angles+0x1d4>)
 8003422:	ed93 7a02 	vldr	s14, [r3, #8]
 8003426:	4b11      	ldr	r3, [pc, #68]	@ (800346c <load_angles+0x1d8>)
 8003428:	edd3 7a02 	vldr	s15, [r3, #8]
 800342c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003430:	eeb0 0a67 	vmov.f32	s0, s15
 8003434:	f001 fc18 	bl	8004c68 <angle_to_pulse>
 8003438:	4603      	mov	r3, r0
 800343a:	b29b      	uxth	r3, r3
 800343c:	f5c3 7322 	rsb	r3, r3, #648	@ 0x288
 8003440:	3302      	adds	r3, #2
 8003442:	b29a      	uxth	r2, r3
 8003444:	4b03      	ldr	r3, [pc, #12]	@ (8003454 <load_angles+0x1c0>)
 8003446:	82da      	strh	r2, [r3, #22]


}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000278 	.word	0x20000278
 8003450:	20000218 	.word	0x20000218
 8003454:	20000200 	.word	0x20000200
 8003458:	20000284 	.word	0x20000284
 800345c:	20000224 	.word	0x20000224
 8003460:	20000290 	.word	0x20000290
 8003464:	20000230 	.word	0x20000230
 8003468:	2000029c 	.word	0x2000029c
 800346c:	2000023c 	.word	0x2000023c

08003470 <Stand>:

void Stand(){
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
	load_leg_position(FL_position,0.0,0.0,body_height, FL_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8003474:	4b38      	ldr	r3, [pc, #224]	@ (8003558 <Stand+0xe8>)
 8003476:	edd3 7a00 	vldr	s15, [r3]
 800347a:	4b38      	ldr	r3, [pc, #224]	@ (800355c <Stand+0xec>)
 800347c:	ed93 7a00 	vldr	s14, [r3]
 8003480:	4b36      	ldr	r3, [pc, #216]	@ (800355c <Stand+0xec>)
 8003482:	edd3 6a01 	vldr	s13, [r3, #4]
 8003486:	4b35      	ldr	r3, [pc, #212]	@ (800355c <Stand+0xec>)
 8003488:	ed93 6a02 	vldr	s12, [r3, #8]
 800348c:	eef0 2a46 	vmov.f32	s5, s12
 8003490:	eeb0 2a66 	vmov.f32	s4, s13
 8003494:	eef0 1a47 	vmov.f32	s3, s14
 8003498:	4931      	ldr	r1, [pc, #196]	@ (8003560 <Stand+0xf0>)
 800349a:	eeb0 1a67 	vmov.f32	s2, s15
 800349e:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8003564 <Stand+0xf4>
 80034a2:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8003564 <Stand+0xf4>
 80034a6:	4830      	ldr	r0, [pc, #192]	@ (8003568 <Stand+0xf8>)
 80034a8:	f7ff fec6 	bl	8003238 <load_leg_position>
	load_leg_position(FR_position,0.0,0.0,body_height, FR_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 80034ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003558 <Stand+0xe8>)
 80034ae:	edd3 7a00 	vldr	s15, [r3]
 80034b2:	4b2a      	ldr	r3, [pc, #168]	@ (800355c <Stand+0xec>)
 80034b4:	ed93 7a00 	vldr	s14, [r3]
 80034b8:	4b28      	ldr	r3, [pc, #160]	@ (800355c <Stand+0xec>)
 80034ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80034be:	4b27      	ldr	r3, [pc, #156]	@ (800355c <Stand+0xec>)
 80034c0:	ed93 6a02 	vldr	s12, [r3, #8]
 80034c4:	eef0 2a46 	vmov.f32	s5, s12
 80034c8:	eeb0 2a66 	vmov.f32	s4, s13
 80034cc:	eef0 1a47 	vmov.f32	s3, s14
 80034d0:	4926      	ldr	r1, [pc, #152]	@ (800356c <Stand+0xfc>)
 80034d2:	eeb0 1a67 	vmov.f32	s2, s15
 80034d6:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8003564 <Stand+0xf4>
 80034da:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8003564 <Stand+0xf4>
 80034de:	4824      	ldr	r0, [pc, #144]	@ (8003570 <Stand+0x100>)
 80034e0:	f7ff feaa 	bl	8003238 <load_leg_position>
	load_leg_position(BL_position,0.0,0.0,body_height, BL_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 80034e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003558 <Stand+0xe8>)
 80034e6:	edd3 7a00 	vldr	s15, [r3]
 80034ea:	4b1c      	ldr	r3, [pc, #112]	@ (800355c <Stand+0xec>)
 80034ec:	ed93 7a00 	vldr	s14, [r3]
 80034f0:	4b1a      	ldr	r3, [pc, #104]	@ (800355c <Stand+0xec>)
 80034f2:	edd3 6a01 	vldr	s13, [r3, #4]
 80034f6:	4b19      	ldr	r3, [pc, #100]	@ (800355c <Stand+0xec>)
 80034f8:	ed93 6a02 	vldr	s12, [r3, #8]
 80034fc:	eef0 2a46 	vmov.f32	s5, s12
 8003500:	eeb0 2a66 	vmov.f32	s4, s13
 8003504:	eef0 1a47 	vmov.f32	s3, s14
 8003508:	491a      	ldr	r1, [pc, #104]	@ (8003574 <Stand+0x104>)
 800350a:	eeb0 1a67 	vmov.f32	s2, s15
 800350e:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8003564 <Stand+0xf4>
 8003512:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8003564 <Stand+0xf4>
 8003516:	4818      	ldr	r0, [pc, #96]	@ (8003578 <Stand+0x108>)
 8003518:	f7ff fe8e 	bl	8003238 <load_leg_position>
	load_leg_position(BR_position,0.0,0.0,body_height, BR_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 800351c:	4b0e      	ldr	r3, [pc, #56]	@ (8003558 <Stand+0xe8>)
 800351e:	edd3 7a00 	vldr	s15, [r3]
 8003522:	4b0e      	ldr	r3, [pc, #56]	@ (800355c <Stand+0xec>)
 8003524:	ed93 7a00 	vldr	s14, [r3]
 8003528:	4b0c      	ldr	r3, [pc, #48]	@ (800355c <Stand+0xec>)
 800352a:	edd3 6a01 	vldr	s13, [r3, #4]
 800352e:	4b0b      	ldr	r3, [pc, #44]	@ (800355c <Stand+0xec>)
 8003530:	ed93 6a02 	vldr	s12, [r3, #8]
 8003534:	eef0 2a46 	vmov.f32	s5, s12
 8003538:	eeb0 2a66 	vmov.f32	s4, s13
 800353c:	eef0 1a47 	vmov.f32	s3, s14
 8003540:	490e      	ldr	r1, [pc, #56]	@ (800357c <Stand+0x10c>)
 8003542:	eeb0 1a67 	vmov.f32	s2, s15
 8003546:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8003564 <Stand+0xf4>
 800354a:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8003564 <Stand+0xf4>
 800354e:	480c      	ldr	r0, [pc, #48]	@ (8003580 <Stand+0x110>)
 8003550:	f7ff fe72 	bl	8003238 <load_leg_position>
}
 8003554:	bf00      	nop
 8003556:	bd80      	pop	{r7, pc}
 8003558:	2000009c 	.word	0x2000009c
 800355c:	200002a8 	.word	0x200002a8
 8003560:	20000248 	.word	0x20000248
 8003564:	00000000 	.word	0x00000000
 8003568:	20000000 	.word	0x20000000
 800356c:	20000254 	.word	0x20000254
 8003570:	2000000c 	.word	0x2000000c
 8003574:	20000260 	.word	0x20000260
 8003578:	20000018 	.word	0x20000018
 800357c:	2000026c 	.word	0x2000026c
 8003580:	20000024 	.word	0x20000024

08003584 <Gait_controller>:

void Gait_controller (uint8_t ticks, float x_setpoint, float y_setpoint){
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003590:	edc7 0a01 	vstr	s1, [r7, #4]
 8003594:	73fb      	strb	r3, [r7, #15]

	if(mode == WALK){
 8003596:	4ba9      	ldr	r3, [pc, #676]	@ (800383c <Gait_controller+0x2b8>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 87b7 	bne.w	800450e <Gait_controller+0xf8a>

		switch(ticks){
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	2b0b      	cmp	r3, #11
 80035a4:	f201 8345 	bhi.w	8004c32 <Gait_controller+0x16ae>
 80035a8:	a201      	add	r2, pc, #4	@ (adr r2, 80035b0 <Gait_controller+0x2c>)
 80035aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ae:	bf00      	nop
 80035b0:	080035e1 	.word	0x080035e1
 80035b4:	08003711 	.word	0x08003711
 80035b8:	08003875 	.word	0x08003875
 80035bc:	0800399f 	.word	0x0800399f
 80035c0:	08003b01 	.word	0x08003b01
 80035c4:	08003c2b 	.word	0x08003c2b
 80035c8:	08003d89 	.word	0x08003d89
 80035cc:	08003eb5 	.word	0x08003eb5
 80035d0:	0800401d 	.word	0x0800401d
 80035d4:	0800414b 	.word	0x0800414b
 80035d8:	080042b1 	.word	0x080042b1
 80035dc:	080043e3 	.word	0x080043e3

		case 0:
			load_leg_position(FL_position,-2*x_setpoint,-2*y_setpoint - y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 80035e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80035e4:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80035e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80035ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80035f0:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80035f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035f8:	4b91      	ldr	r3, [pc, #580]	@ (8003840 <Gait_controller+0x2bc>)
 80035fa:	edd3 7a00 	vldr	s15, [r3]
 80035fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003602:	4b90      	ldr	r3, [pc, #576]	@ (8003844 <Gait_controller+0x2c0>)
 8003604:	ed93 7a00 	vldr	s14, [r3]
 8003608:	4b8f      	ldr	r3, [pc, #572]	@ (8003848 <Gait_controller+0x2c4>)
 800360a:	ed93 6a00 	vldr	s12, [r3]
 800360e:	4b8e      	ldr	r3, [pc, #568]	@ (8003848 <Gait_controller+0x2c4>)
 8003610:	edd3 5a01 	vldr	s11, [r3, #4]
 8003614:	eddf 2a8d 	vldr	s5, [pc, #564]	@ 800384c <Gait_controller+0x2c8>
 8003618:	eeb0 2a65 	vmov.f32	s4, s11
 800361c:	eef0 1a46 	vmov.f32	s3, s12
 8003620:	498b      	ldr	r1, [pc, #556]	@ (8003850 <Gait_controller+0x2cc>)
 8003622:	eeb0 1a47 	vmov.f32	s2, s14
 8003626:	eef0 0a67 	vmov.f32	s1, s15
 800362a:	eeb0 0a66 	vmov.f32	s0, s13
 800362e:	4889      	ldr	r0, [pc, #548]	@ (8003854 <Gait_controller+0x2d0>)
 8003630:	f7ff fe02 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,x_setpoint,y_setpoint - y_translation,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003634:	4b82      	ldr	r3, [pc, #520]	@ (8003840 <Gait_controller+0x2bc>)
 8003636:	edd3 7a00 	vldr	s15, [r3]
 800363a:	ed97 7a01 	vldr	s14, [r7, #4]
 800363e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003642:	4b80      	ldr	r3, [pc, #512]	@ (8003844 <Gait_controller+0x2c0>)
 8003644:	ed93 7a00 	vldr	s14, [r3]
 8003648:	4b7f      	ldr	r3, [pc, #508]	@ (8003848 <Gait_controller+0x2c4>)
 800364a:	edd3 6a00 	vldr	s13, [r3]
 800364e:	4b7e      	ldr	r3, [pc, #504]	@ (8003848 <Gait_controller+0x2c4>)
 8003650:	ed93 6a01 	vldr	s12, [r3, #4]
 8003654:	eddf 2a7d 	vldr	s5, [pc, #500]	@ 800384c <Gait_controller+0x2c8>
 8003658:	eeb0 2a46 	vmov.f32	s4, s12
 800365c:	eef0 1a66 	vmov.f32	s3, s13
 8003660:	497d      	ldr	r1, [pc, #500]	@ (8003858 <Gait_controller+0x2d4>)
 8003662:	eeb0 1a47 	vmov.f32	s2, s14
 8003666:	eef0 0a67 	vmov.f32	s1, s15
 800366a:	ed97 0a02 	vldr	s0, [r7, #8]
 800366e:	487b      	ldr	r0, [pc, #492]	@ (800385c <Gait_controller+0x2d8>)
 8003670:	f7ff fde2 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,-x_setpoint,-y_setpoint - y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003674:	edd7 7a02 	vldr	s15, [r7, #8]
 8003678:	eef1 6a67 	vneg.f32	s13, s15
 800367c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003680:	eeb1 7a67 	vneg.f32	s14, s15
 8003684:	4b6e      	ldr	r3, [pc, #440]	@ (8003840 <Gait_controller+0x2bc>)
 8003686:	edd3 7a00 	vldr	s15, [r3]
 800368a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800368e:	4b6d      	ldr	r3, [pc, #436]	@ (8003844 <Gait_controller+0x2c0>)
 8003690:	ed93 7a00 	vldr	s14, [r3]
 8003694:	4b6c      	ldr	r3, [pc, #432]	@ (8003848 <Gait_controller+0x2c4>)
 8003696:	ed93 6a00 	vldr	s12, [r3]
 800369a:	4b6b      	ldr	r3, [pc, #428]	@ (8003848 <Gait_controller+0x2c4>)
 800369c:	edd3 5a01 	vldr	s11, [r3, #4]
 80036a0:	eddf 2a6a 	vldr	s5, [pc, #424]	@ 800384c <Gait_controller+0x2c8>
 80036a4:	eeb0 2a65 	vmov.f32	s4, s11
 80036a8:	eef0 1a46 	vmov.f32	s3, s12
 80036ac:	496c      	ldr	r1, [pc, #432]	@ (8003860 <Gait_controller+0x2dc>)
 80036ae:	eeb0 1a47 	vmov.f32	s2, s14
 80036b2:	eef0 0a67 	vmov.f32	s1, s15
 80036b6:	eeb0 0a66 	vmov.f32	s0, s13
 80036ba:	486a      	ldr	r0, [pc, #424]	@ (8003864 <Gait_controller+0x2e0>)
 80036bc:	f7ff fdbc 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,2*x_setpoint,2*y_setpoint - y_translation,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 80036c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80036c4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80036c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80036cc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80036d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003840 <Gait_controller+0x2bc>)
 80036d2:	edd3 7a00 	vldr	s15, [r3]
 80036d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036da:	4b5a      	ldr	r3, [pc, #360]	@ (8003844 <Gait_controller+0x2c0>)
 80036dc:	ed93 7a00 	vldr	s14, [r3]
 80036e0:	4b59      	ldr	r3, [pc, #356]	@ (8003848 <Gait_controller+0x2c4>)
 80036e2:	ed93 6a00 	vldr	s12, [r3]
 80036e6:	4b58      	ldr	r3, [pc, #352]	@ (8003848 <Gait_controller+0x2c4>)
 80036e8:	edd3 5a01 	vldr	s11, [r3, #4]
 80036ec:	eddf 2a57 	vldr	s5, [pc, #348]	@ 800384c <Gait_controller+0x2c8>
 80036f0:	eeb0 2a65 	vmov.f32	s4, s11
 80036f4:	eef0 1a46 	vmov.f32	s3, s12
 80036f8:	495b      	ldr	r1, [pc, #364]	@ (8003868 <Gait_controller+0x2e4>)
 80036fa:	eeb0 1a47 	vmov.f32	s2, s14
 80036fe:	eef0 0a67 	vmov.f32	s1, s15
 8003702:	eeb0 0a66 	vmov.f32	s0, s13
 8003706:	4859      	ldr	r0, [pc, #356]	@ (800386c <Gait_controller+0x2e8>)
 8003708:	f7ff fd96 	bl	8003238 <load_leg_position>
			break;
 800370c:	f001 ba91 	b.w	8004c32 <Gait_controller+0x16ae>
		case 1:
			load_leg_position(FL_position,-x_setpoint,-y_setpoint + y_translation,body_height - step_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003710:	edd7 7a02 	vldr	s15, [r7, #8]
 8003714:	eef1 6a67 	vneg.f32	s13, s15
 8003718:	4b49      	ldr	r3, [pc, #292]	@ (8003840 <Gait_controller+0x2bc>)
 800371a:	ed93 7a00 	vldr	s14, [r3]
 800371e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003722:	ee37 6a67 	vsub.f32	s12, s14, s15
 8003726:	4b47      	ldr	r3, [pc, #284]	@ (8003844 <Gait_controller+0x2c0>)
 8003728:	ed93 7a00 	vldr	s14, [r3]
 800372c:	4b50      	ldr	r3, [pc, #320]	@ (8003870 <Gait_controller+0x2ec>)
 800372e:	edd3 7a00 	vldr	s15, [r3]
 8003732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003736:	4b44      	ldr	r3, [pc, #272]	@ (8003848 <Gait_controller+0x2c4>)
 8003738:	ed93 7a00 	vldr	s14, [r3]
 800373c:	4b42      	ldr	r3, [pc, #264]	@ (8003848 <Gait_controller+0x2c4>)
 800373e:	edd3 5a01 	vldr	s11, [r3, #4]
 8003742:	eddf 2a42 	vldr	s5, [pc, #264]	@ 800384c <Gait_controller+0x2c8>
 8003746:	eeb0 2a65 	vmov.f32	s4, s11
 800374a:	eef0 1a47 	vmov.f32	s3, s14
 800374e:	4940      	ldr	r1, [pc, #256]	@ (8003850 <Gait_controller+0x2cc>)
 8003750:	eeb0 1a67 	vmov.f32	s2, s15
 8003754:	eef0 0a46 	vmov.f32	s1, s12
 8003758:	eeb0 0a66 	vmov.f32	s0, s13
 800375c:	483d      	ldr	r0, [pc, #244]	@ (8003854 <Gait_controller+0x2d0>)
 800375e:	f7ff fd6b 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,x_setpoint,y_setpoint + y_translation,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003762:	4b37      	ldr	r3, [pc, #220]	@ (8003840 <Gait_controller+0x2bc>)
 8003764:	ed93 7a00 	vldr	s14, [r3]
 8003768:	edd7 7a01 	vldr	s15, [r7, #4]
 800376c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003770:	4b34      	ldr	r3, [pc, #208]	@ (8003844 <Gait_controller+0x2c0>)
 8003772:	ed93 7a00 	vldr	s14, [r3]
 8003776:	4b34      	ldr	r3, [pc, #208]	@ (8003848 <Gait_controller+0x2c4>)
 8003778:	edd3 6a00 	vldr	s13, [r3]
 800377c:	4b32      	ldr	r3, [pc, #200]	@ (8003848 <Gait_controller+0x2c4>)
 800377e:	ed93 6a01 	vldr	s12, [r3, #4]
 8003782:	eddf 2a32 	vldr	s5, [pc, #200]	@ 800384c <Gait_controller+0x2c8>
 8003786:	eeb0 2a46 	vmov.f32	s4, s12
 800378a:	eef0 1a66 	vmov.f32	s3, s13
 800378e:	4932      	ldr	r1, [pc, #200]	@ (8003858 <Gait_controller+0x2d4>)
 8003790:	eeb0 1a47 	vmov.f32	s2, s14
 8003794:	eef0 0a67 	vmov.f32	s1, s15
 8003798:	ed97 0a02 	vldr	s0, [r7, #8]
 800379c:	482f      	ldr	r0, [pc, #188]	@ (800385c <Gait_controller+0x2d8>)
 800379e:	f7ff fd4b 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,-x_setpoint,-y_setpoint + y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 80037a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80037a6:	eef1 6a67 	vneg.f32	s13, s15
 80037aa:	4b25      	ldr	r3, [pc, #148]	@ (8003840 <Gait_controller+0x2bc>)
 80037ac:	ed93 7a00 	vldr	s14, [r3]
 80037b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80037b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037b8:	4b22      	ldr	r3, [pc, #136]	@ (8003844 <Gait_controller+0x2c0>)
 80037ba:	ed93 7a00 	vldr	s14, [r3]
 80037be:	4b22      	ldr	r3, [pc, #136]	@ (8003848 <Gait_controller+0x2c4>)
 80037c0:	ed93 6a00 	vldr	s12, [r3]
 80037c4:	4b20      	ldr	r3, [pc, #128]	@ (8003848 <Gait_controller+0x2c4>)
 80037c6:	edd3 5a01 	vldr	s11, [r3, #4]
 80037ca:	eddf 2a20 	vldr	s5, [pc, #128]	@ 800384c <Gait_controller+0x2c8>
 80037ce:	eeb0 2a65 	vmov.f32	s4, s11
 80037d2:	eef0 1a46 	vmov.f32	s3, s12
 80037d6:	4922      	ldr	r1, [pc, #136]	@ (8003860 <Gait_controller+0x2dc>)
 80037d8:	eeb0 1a47 	vmov.f32	s2, s14
 80037dc:	eef0 0a67 	vmov.f32	s1, s15
 80037e0:	eeb0 0a66 	vmov.f32	s0, s13
 80037e4:	481f      	ldr	r0, [pc, #124]	@ (8003864 <Gait_controller+0x2e0>)
 80037e6:	f7ff fd27 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,2*x_setpoint,2*y_setpoint + y_translation,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 80037ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ee:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80037f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80037f6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80037fa:	4b11      	ldr	r3, [pc, #68]	@ (8003840 <Gait_controller+0x2bc>)
 80037fc:	edd3 7a00 	vldr	s15, [r3]
 8003800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003804:	4b0f      	ldr	r3, [pc, #60]	@ (8003844 <Gait_controller+0x2c0>)
 8003806:	ed93 7a00 	vldr	s14, [r3]
 800380a:	4b0f      	ldr	r3, [pc, #60]	@ (8003848 <Gait_controller+0x2c4>)
 800380c:	ed93 6a00 	vldr	s12, [r3]
 8003810:	4b0d      	ldr	r3, [pc, #52]	@ (8003848 <Gait_controller+0x2c4>)
 8003812:	edd3 5a01 	vldr	s11, [r3, #4]
 8003816:	eddf 2a0d 	vldr	s5, [pc, #52]	@ 800384c <Gait_controller+0x2c8>
 800381a:	eeb0 2a65 	vmov.f32	s4, s11
 800381e:	eef0 1a46 	vmov.f32	s3, s12
 8003822:	4911      	ldr	r1, [pc, #68]	@ (8003868 <Gait_controller+0x2e4>)
 8003824:	eeb0 1a47 	vmov.f32	s2, s14
 8003828:	eef0 0a67 	vmov.f32	s1, s15
 800382c:	eeb0 0a66 	vmov.f32	s0, s13
 8003830:	480e      	ldr	r0, [pc, #56]	@ (800386c <Gait_controller+0x2e8>)
 8003832:	f7ff fd01 	bl	8003238 <load_leg_position>
			break;
 8003836:	f001 b9fc 	b.w	8004c32 <Gait_controller+0x16ae>
 800383a:	bf00      	nop
 800383c:	2000031c 	.word	0x2000031c
 8003840:	20000098 	.word	0x20000098
 8003844:	2000009c 	.word	0x2000009c
 8003848:	200002a8 	.word	0x200002a8
 800384c:	00000000 	.word	0x00000000
 8003850:	20000248 	.word	0x20000248
 8003854:	20000000 	.word	0x20000000
 8003858:	20000254 	.word	0x20000254
 800385c:	2000000c 	.word	0x2000000c
 8003860:	20000260 	.word	0x20000260
 8003864:	20000018 	.word	0x20000018
 8003868:	2000026c 	.word	0x2000026c
 800386c:	20000024 	.word	0x20000024
 8003870:	20000090 	.word	0x20000090
		case 2:
			load_leg_position(FL_position,x_setpoint,y_setpoint + y_translation,body_height - step_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003874:	4b95      	ldr	r3, [pc, #596]	@ (8003acc <Gait_controller+0x548>)
 8003876:	ed93 7a00 	vldr	s14, [r3]
 800387a:	edd7 7a01 	vldr	s15, [r7, #4]
 800387e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003882:	4b93      	ldr	r3, [pc, #588]	@ (8003ad0 <Gait_controller+0x54c>)
 8003884:	ed93 7a00 	vldr	s14, [r3]
 8003888:	4b92      	ldr	r3, [pc, #584]	@ (8003ad4 <Gait_controller+0x550>)
 800388a:	edd3 7a00 	vldr	s15, [r3]
 800388e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003892:	4b91      	ldr	r3, [pc, #580]	@ (8003ad8 <Gait_controller+0x554>)
 8003894:	ed93 7a00 	vldr	s14, [r3]
 8003898:	4b8f      	ldr	r3, [pc, #572]	@ (8003ad8 <Gait_controller+0x554>)
 800389a:	ed93 6a01 	vldr	s12, [r3, #4]
 800389e:	eddf 2a8f 	vldr	s5, [pc, #572]	@ 8003adc <Gait_controller+0x558>
 80038a2:	eeb0 2a46 	vmov.f32	s4, s12
 80038a6:	eef0 1a47 	vmov.f32	s3, s14
 80038aa:	498d      	ldr	r1, [pc, #564]	@ (8003ae0 <Gait_controller+0x55c>)
 80038ac:	eeb0 1a67 	vmov.f32	s2, s15
 80038b0:	eef0 0a66 	vmov.f32	s1, s13
 80038b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80038b8:	488a      	ldr	r0, [pc, #552]	@ (8003ae4 <Gait_controller+0x560>)
 80038ba:	f7ff fcbd 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,-x_setpoint,-y_setpoint + y_translation,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 80038be:	edd7 7a02 	vldr	s15, [r7, #8]
 80038c2:	eef1 6a67 	vneg.f32	s13, s15
 80038c6:	4b81      	ldr	r3, [pc, #516]	@ (8003acc <Gait_controller+0x548>)
 80038c8:	ed93 7a00 	vldr	s14, [r3]
 80038cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80038d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038d4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ad0 <Gait_controller+0x54c>)
 80038d6:	ed93 7a00 	vldr	s14, [r3]
 80038da:	4b7f      	ldr	r3, [pc, #508]	@ (8003ad8 <Gait_controller+0x554>)
 80038dc:	ed93 6a00 	vldr	s12, [r3]
 80038e0:	4b7d      	ldr	r3, [pc, #500]	@ (8003ad8 <Gait_controller+0x554>)
 80038e2:	edd3 5a01 	vldr	s11, [r3, #4]
 80038e6:	eddf 2a7d 	vldr	s5, [pc, #500]	@ 8003adc <Gait_controller+0x558>
 80038ea:	eeb0 2a65 	vmov.f32	s4, s11
 80038ee:	eef0 1a46 	vmov.f32	s3, s12
 80038f2:	497d      	ldr	r1, [pc, #500]	@ (8003ae8 <Gait_controller+0x564>)
 80038f4:	eeb0 1a47 	vmov.f32	s2, s14
 80038f8:	eef0 0a67 	vmov.f32	s1, s15
 80038fc:	eeb0 0a66 	vmov.f32	s0, s13
 8003900:	487a      	ldr	r0, [pc, #488]	@ (8003aec <Gait_controller+0x568>)
 8003902:	f7ff fc99 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,-2*x_setpoint,-2*y_setpoint + y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003906:	edd7 7a02 	vldr	s15, [r7, #8]
 800390a:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800390e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003912:	edd7 7a01 	vldr	s15, [r7, #4]
 8003916:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800391a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800391e:	4b6b      	ldr	r3, [pc, #428]	@ (8003acc <Gait_controller+0x548>)
 8003920:	edd3 7a00 	vldr	s15, [r3]
 8003924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003928:	4b69      	ldr	r3, [pc, #420]	@ (8003ad0 <Gait_controller+0x54c>)
 800392a:	ed93 7a00 	vldr	s14, [r3]
 800392e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad8 <Gait_controller+0x554>)
 8003930:	ed93 6a00 	vldr	s12, [r3]
 8003934:	4b68      	ldr	r3, [pc, #416]	@ (8003ad8 <Gait_controller+0x554>)
 8003936:	edd3 5a01 	vldr	s11, [r3, #4]
 800393a:	eddf 2a68 	vldr	s5, [pc, #416]	@ 8003adc <Gait_controller+0x558>
 800393e:	eeb0 2a65 	vmov.f32	s4, s11
 8003942:	eef0 1a46 	vmov.f32	s3, s12
 8003946:	496a      	ldr	r1, [pc, #424]	@ (8003af0 <Gait_controller+0x56c>)
 8003948:	eeb0 1a47 	vmov.f32	s2, s14
 800394c:	eef0 0a67 	vmov.f32	s1, s15
 8003950:	eeb0 0a66 	vmov.f32	s0, s13
 8003954:	4867      	ldr	r0, [pc, #412]	@ (8003af4 <Gait_controller+0x570>)
 8003956:	f7ff fc6f 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,x_setpoint,y_setpoint + y_translation,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 800395a:	4b5c      	ldr	r3, [pc, #368]	@ (8003acc <Gait_controller+0x548>)
 800395c:	ed93 7a00 	vldr	s14, [r3]
 8003960:	edd7 7a01 	vldr	s15, [r7, #4]
 8003964:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003968:	4b59      	ldr	r3, [pc, #356]	@ (8003ad0 <Gait_controller+0x54c>)
 800396a:	ed93 7a00 	vldr	s14, [r3]
 800396e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ad8 <Gait_controller+0x554>)
 8003970:	edd3 6a00 	vldr	s13, [r3]
 8003974:	4b58      	ldr	r3, [pc, #352]	@ (8003ad8 <Gait_controller+0x554>)
 8003976:	ed93 6a01 	vldr	s12, [r3, #4]
 800397a:	eddf 2a58 	vldr	s5, [pc, #352]	@ 8003adc <Gait_controller+0x558>
 800397e:	eeb0 2a46 	vmov.f32	s4, s12
 8003982:	eef0 1a66 	vmov.f32	s3, s13
 8003986:	495c      	ldr	r1, [pc, #368]	@ (8003af8 <Gait_controller+0x574>)
 8003988:	eeb0 1a47 	vmov.f32	s2, s14
 800398c:	eef0 0a67 	vmov.f32	s1, s15
 8003990:	ed97 0a02 	vldr	s0, [r7, #8]
 8003994:	4859      	ldr	r0, [pc, #356]	@ (8003afc <Gait_controller+0x578>)
 8003996:	f7ff fc4f 	bl	8003238 <load_leg_position>
			break;
 800399a:	f001 b94a 	b.w	8004c32 <Gait_controller+0x16ae>
		case 3:
			load_leg_position(FL_position,2*x_setpoint,2*y_setpoint + y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 800399e:	edd7 7a02 	vldr	s15, [r7, #8]
 80039a2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80039a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80039aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80039ae:	4b47      	ldr	r3, [pc, #284]	@ (8003acc <Gait_controller+0x548>)
 80039b0:	edd3 7a00 	vldr	s15, [r3]
 80039b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039b8:	4b45      	ldr	r3, [pc, #276]	@ (8003ad0 <Gait_controller+0x54c>)
 80039ba:	ed93 7a00 	vldr	s14, [r3]
 80039be:	4b46      	ldr	r3, [pc, #280]	@ (8003ad8 <Gait_controller+0x554>)
 80039c0:	ed93 6a00 	vldr	s12, [r3]
 80039c4:	4b44      	ldr	r3, [pc, #272]	@ (8003ad8 <Gait_controller+0x554>)
 80039c6:	edd3 5a01 	vldr	s11, [r3, #4]
 80039ca:	eddf 2a44 	vldr	s5, [pc, #272]	@ 8003adc <Gait_controller+0x558>
 80039ce:	eeb0 2a65 	vmov.f32	s4, s11
 80039d2:	eef0 1a46 	vmov.f32	s3, s12
 80039d6:	4942      	ldr	r1, [pc, #264]	@ (8003ae0 <Gait_controller+0x55c>)
 80039d8:	eeb0 1a47 	vmov.f32	s2, s14
 80039dc:	eef0 0a67 	vmov.f32	s1, s15
 80039e0:	eeb0 0a66 	vmov.f32	s0, s13
 80039e4:	483f      	ldr	r0, [pc, #252]	@ (8003ae4 <Gait_controller+0x560>)
 80039e6:	f7ff fc27 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,-x_setpoint,-y_setpoint + y_translation,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 80039ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80039ee:	eef1 6a67 	vneg.f32	s13, s15
 80039f2:	4b36      	ldr	r3, [pc, #216]	@ (8003acc <Gait_controller+0x548>)
 80039f4:	ed93 7a00 	vldr	s14, [r3]
 80039f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80039fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a00:	4b33      	ldr	r3, [pc, #204]	@ (8003ad0 <Gait_controller+0x54c>)
 8003a02:	ed93 7a00 	vldr	s14, [r3]
 8003a06:	4b34      	ldr	r3, [pc, #208]	@ (8003ad8 <Gait_controller+0x554>)
 8003a08:	ed93 6a00 	vldr	s12, [r3]
 8003a0c:	4b32      	ldr	r3, [pc, #200]	@ (8003ad8 <Gait_controller+0x554>)
 8003a0e:	edd3 5a01 	vldr	s11, [r3, #4]
 8003a12:	eddf 2a32 	vldr	s5, [pc, #200]	@ 8003adc <Gait_controller+0x558>
 8003a16:	eeb0 2a65 	vmov.f32	s4, s11
 8003a1a:	eef0 1a46 	vmov.f32	s3, s12
 8003a1e:	4932      	ldr	r1, [pc, #200]	@ (8003ae8 <Gait_controller+0x564>)
 8003a20:	eeb0 1a47 	vmov.f32	s2, s14
 8003a24:	eef0 0a67 	vmov.f32	s1, s15
 8003a28:	eeb0 0a66 	vmov.f32	s0, s13
 8003a2c:	482f      	ldr	r0, [pc, #188]	@ (8003aec <Gait_controller+0x568>)
 8003a2e:	f7ff fc03 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,-2*x_setpoint,-2*y_setpoint + y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003a32:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a36:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003a3a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003a3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a42:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003a46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a4a:	4b20      	ldr	r3, [pc, #128]	@ (8003acc <Gait_controller+0x548>)
 8003a4c:	edd3 7a00 	vldr	s15, [r3]
 8003a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a54:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad0 <Gait_controller+0x54c>)
 8003a56:	ed93 7a00 	vldr	s14, [r3]
 8003a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad8 <Gait_controller+0x554>)
 8003a5c:	ed93 6a00 	vldr	s12, [r3]
 8003a60:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad8 <Gait_controller+0x554>)
 8003a62:	edd3 5a01 	vldr	s11, [r3, #4]
 8003a66:	eddf 2a1d 	vldr	s5, [pc, #116]	@ 8003adc <Gait_controller+0x558>
 8003a6a:	eeb0 2a65 	vmov.f32	s4, s11
 8003a6e:	eef0 1a46 	vmov.f32	s3, s12
 8003a72:	491f      	ldr	r1, [pc, #124]	@ (8003af0 <Gait_controller+0x56c>)
 8003a74:	eeb0 1a47 	vmov.f32	s2, s14
 8003a78:	eef0 0a67 	vmov.f32	s1, s15
 8003a7c:	eeb0 0a66 	vmov.f32	s0, s13
 8003a80:	481c      	ldr	r0, [pc, #112]	@ (8003af4 <Gait_controller+0x570>)
 8003a82:	f7ff fbd9 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,x_setpoint,y_setpoint + y_translation,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003a86:	4b11      	ldr	r3, [pc, #68]	@ (8003acc <Gait_controller+0x548>)
 8003a88:	ed93 7a00 	vldr	s14, [r3]
 8003a8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a94:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad0 <Gait_controller+0x54c>)
 8003a96:	ed93 7a00 	vldr	s14, [r3]
 8003a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad8 <Gait_controller+0x554>)
 8003a9c:	edd3 6a00 	vldr	s13, [r3]
 8003aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad8 <Gait_controller+0x554>)
 8003aa2:	ed93 6a01 	vldr	s12, [r3, #4]
 8003aa6:	eddf 2a0d 	vldr	s5, [pc, #52]	@ 8003adc <Gait_controller+0x558>
 8003aaa:	eeb0 2a46 	vmov.f32	s4, s12
 8003aae:	eef0 1a66 	vmov.f32	s3, s13
 8003ab2:	4911      	ldr	r1, [pc, #68]	@ (8003af8 <Gait_controller+0x574>)
 8003ab4:	eeb0 1a47 	vmov.f32	s2, s14
 8003ab8:	eef0 0a67 	vmov.f32	s1, s15
 8003abc:	ed97 0a02 	vldr	s0, [r7, #8]
 8003ac0:	480e      	ldr	r0, [pc, #56]	@ (8003afc <Gait_controller+0x578>)
 8003ac2:	f7ff fbb9 	bl	8003238 <load_leg_position>
			break;
 8003ac6:	f001 b8b4 	b.w	8004c32 <Gait_controller+0x16ae>
 8003aca:	bf00      	nop
 8003acc:	20000098 	.word	0x20000098
 8003ad0:	2000009c 	.word	0x2000009c
 8003ad4:	20000090 	.word	0x20000090
 8003ad8:	200002a8 	.word	0x200002a8
 8003adc:	00000000 	.word	0x00000000
 8003ae0:	20000248 	.word	0x20000248
 8003ae4:	20000000 	.word	0x20000000
 8003ae8:	20000254 	.word	0x20000254
 8003aec:	2000000c 	.word	0x2000000c
 8003af0:	20000260 	.word	0x20000260
 8003af4:	20000018 	.word	0x20000018
 8003af8:	2000026c 	.word	0x2000026c
 8003afc:	20000024 	.word	0x20000024
		case 4:
			load_leg_position(FL_position,2*x_setpoint,2*y_setpoint + y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003b00:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b04:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003b08:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b0c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003b10:	4b90      	ldr	r3, [pc, #576]	@ (8003d54 <Gait_controller+0x7d0>)
 8003b12:	edd3 7a00 	vldr	s15, [r3]
 8003b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b1a:	4b8f      	ldr	r3, [pc, #572]	@ (8003d58 <Gait_controller+0x7d4>)
 8003b1c:	ed93 7a00 	vldr	s14, [r3]
 8003b20:	4b8e      	ldr	r3, [pc, #568]	@ (8003d5c <Gait_controller+0x7d8>)
 8003b22:	ed93 6a00 	vldr	s12, [r3]
 8003b26:	4b8d      	ldr	r3, [pc, #564]	@ (8003d5c <Gait_controller+0x7d8>)
 8003b28:	edd3 5a01 	vldr	s11, [r3, #4]
 8003b2c:	eddf 2a8c 	vldr	s5, [pc, #560]	@ 8003d60 <Gait_controller+0x7dc>
 8003b30:	eeb0 2a65 	vmov.f32	s4, s11
 8003b34:	eef0 1a46 	vmov.f32	s3, s12
 8003b38:	498a      	ldr	r1, [pc, #552]	@ (8003d64 <Gait_controller+0x7e0>)
 8003b3a:	eeb0 1a47 	vmov.f32	s2, s14
 8003b3e:	eef0 0a67 	vmov.f32	s1, s15
 8003b42:	eeb0 0a66 	vmov.f32	s0, s13
 8003b46:	4888      	ldr	r0, [pc, #544]	@ (8003d68 <Gait_controller+0x7e4>)
 8003b48:	f7ff fb76 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,-x_setpoint,-y_setpoint + y_translation,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003b4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b50:	eef1 6a67 	vneg.f32	s13, s15
 8003b54:	4b7f      	ldr	r3, [pc, #508]	@ (8003d54 <Gait_controller+0x7d0>)
 8003b56:	ed93 7a00 	vldr	s14, [r3]
 8003b5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b62:	4b7d      	ldr	r3, [pc, #500]	@ (8003d58 <Gait_controller+0x7d4>)
 8003b64:	ed93 7a00 	vldr	s14, [r3]
 8003b68:	4b7c      	ldr	r3, [pc, #496]	@ (8003d5c <Gait_controller+0x7d8>)
 8003b6a:	ed93 6a00 	vldr	s12, [r3]
 8003b6e:	4b7b      	ldr	r3, [pc, #492]	@ (8003d5c <Gait_controller+0x7d8>)
 8003b70:	edd3 5a01 	vldr	s11, [r3, #4]
 8003b74:	eddf 2a7a 	vldr	s5, [pc, #488]	@ 8003d60 <Gait_controller+0x7dc>
 8003b78:	eeb0 2a65 	vmov.f32	s4, s11
 8003b7c:	eef0 1a46 	vmov.f32	s3, s12
 8003b80:	497a      	ldr	r1, [pc, #488]	@ (8003d6c <Gait_controller+0x7e8>)
 8003b82:	eeb0 1a47 	vmov.f32	s2, s14
 8003b86:	eef0 0a67 	vmov.f32	s1, s15
 8003b8a:	eeb0 0a66 	vmov.f32	s0, s13
 8003b8e:	4878      	ldr	r0, [pc, #480]	@ (8003d70 <Gait_controller+0x7ec>)
 8003b90:	f7ff fb52 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,-x_setpoint,-y_setpoint + y_translation,body_height - step_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003b94:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b98:	eef1 6a67 	vneg.f32	s13, s15
 8003b9c:	4b6d      	ldr	r3, [pc, #436]	@ (8003d54 <Gait_controller+0x7d0>)
 8003b9e:	ed93 7a00 	vldr	s14, [r3]
 8003ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ba6:	ee37 6a67 	vsub.f32	s12, s14, s15
 8003baa:	4b6b      	ldr	r3, [pc, #428]	@ (8003d58 <Gait_controller+0x7d4>)
 8003bac:	ed93 7a00 	vldr	s14, [r3]
 8003bb0:	4b70      	ldr	r3, [pc, #448]	@ (8003d74 <Gait_controller+0x7f0>)
 8003bb2:	edd3 7a00 	vldr	s15, [r3]
 8003bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bba:	4b68      	ldr	r3, [pc, #416]	@ (8003d5c <Gait_controller+0x7d8>)
 8003bbc:	ed93 7a00 	vldr	s14, [r3]
 8003bc0:	4b66      	ldr	r3, [pc, #408]	@ (8003d5c <Gait_controller+0x7d8>)
 8003bc2:	edd3 5a01 	vldr	s11, [r3, #4]
 8003bc6:	eddf 2a66 	vldr	s5, [pc, #408]	@ 8003d60 <Gait_controller+0x7dc>
 8003bca:	eeb0 2a65 	vmov.f32	s4, s11
 8003bce:	eef0 1a47 	vmov.f32	s3, s14
 8003bd2:	4969      	ldr	r1, [pc, #420]	@ (8003d78 <Gait_controller+0x7f4>)
 8003bd4:	eeb0 1a67 	vmov.f32	s2, s15
 8003bd8:	eef0 0a46 	vmov.f32	s1, s12
 8003bdc:	eeb0 0a66 	vmov.f32	s0, s13
 8003be0:	4866      	ldr	r0, [pc, #408]	@ (8003d7c <Gait_controller+0x7f8>)
 8003be2:	f7ff fb29 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,x_setpoint,y_setpoint + y_translation,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003be6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d54 <Gait_controller+0x7d0>)
 8003be8:	ed93 7a00 	vldr	s14, [r3]
 8003bec:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bf4:	4b58      	ldr	r3, [pc, #352]	@ (8003d58 <Gait_controller+0x7d4>)
 8003bf6:	ed93 7a00 	vldr	s14, [r3]
 8003bfa:	4b58      	ldr	r3, [pc, #352]	@ (8003d5c <Gait_controller+0x7d8>)
 8003bfc:	edd3 6a00 	vldr	s13, [r3]
 8003c00:	4b56      	ldr	r3, [pc, #344]	@ (8003d5c <Gait_controller+0x7d8>)
 8003c02:	ed93 6a01 	vldr	s12, [r3, #4]
 8003c06:	eddf 2a56 	vldr	s5, [pc, #344]	@ 8003d60 <Gait_controller+0x7dc>
 8003c0a:	eeb0 2a46 	vmov.f32	s4, s12
 8003c0e:	eef0 1a66 	vmov.f32	s3, s13
 8003c12:	495b      	ldr	r1, [pc, #364]	@ (8003d80 <Gait_controller+0x7fc>)
 8003c14:	eeb0 1a47 	vmov.f32	s2, s14
 8003c18:	eef0 0a67 	vmov.f32	s1, s15
 8003c1c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003c20:	4858      	ldr	r0, [pc, #352]	@ (8003d84 <Gait_controller+0x800>)
 8003c22:	f7ff fb09 	bl	8003238 <load_leg_position>
			break;
 8003c26:	f001 b804 	b.w	8004c32 <Gait_controller+0x16ae>
		case 5:
			load_leg_position(FL_position,x_setpoint,y_setpoint + y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d54 <Gait_controller+0x7d0>)
 8003c2c:	ed93 7a00 	vldr	s14, [r3]
 8003c30:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c38:	4b47      	ldr	r3, [pc, #284]	@ (8003d58 <Gait_controller+0x7d4>)
 8003c3a:	ed93 7a00 	vldr	s14, [r3]
 8003c3e:	4b47      	ldr	r3, [pc, #284]	@ (8003d5c <Gait_controller+0x7d8>)
 8003c40:	edd3 6a00 	vldr	s13, [r3]
 8003c44:	4b45      	ldr	r3, [pc, #276]	@ (8003d5c <Gait_controller+0x7d8>)
 8003c46:	ed93 6a01 	vldr	s12, [r3, #4]
 8003c4a:	eddf 2a45 	vldr	s5, [pc, #276]	@ 8003d60 <Gait_controller+0x7dc>
 8003c4e:	eeb0 2a46 	vmov.f32	s4, s12
 8003c52:	eef0 1a66 	vmov.f32	s3, s13
 8003c56:	4943      	ldr	r1, [pc, #268]	@ (8003d64 <Gait_controller+0x7e0>)
 8003c58:	eeb0 1a47 	vmov.f32	s2, s14
 8003c5c:	eef0 0a67 	vmov.f32	s1, s15
 8003c60:	ed97 0a02 	vldr	s0, [r7, #8]
 8003c64:	4840      	ldr	r0, [pc, #256]	@ (8003d68 <Gait_controller+0x7e4>)
 8003c66:	f7ff fae7 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,-2*x_setpoint,-2*y_setpoint + y_translation,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003c6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c6e:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003c72:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003c76:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c7a:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003c7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c82:	4b34      	ldr	r3, [pc, #208]	@ (8003d54 <Gait_controller+0x7d0>)
 8003c84:	edd3 7a00 	vldr	s15, [r3]
 8003c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c8c:	4b32      	ldr	r3, [pc, #200]	@ (8003d58 <Gait_controller+0x7d4>)
 8003c8e:	ed93 7a00 	vldr	s14, [r3]
 8003c92:	4b32      	ldr	r3, [pc, #200]	@ (8003d5c <Gait_controller+0x7d8>)
 8003c94:	ed93 6a00 	vldr	s12, [r3]
 8003c98:	4b30      	ldr	r3, [pc, #192]	@ (8003d5c <Gait_controller+0x7d8>)
 8003c9a:	edd3 5a01 	vldr	s11, [r3, #4]
 8003c9e:	eddf 2a30 	vldr	s5, [pc, #192]	@ 8003d60 <Gait_controller+0x7dc>
 8003ca2:	eeb0 2a65 	vmov.f32	s4, s11
 8003ca6:	eef0 1a46 	vmov.f32	s3, s12
 8003caa:	4930      	ldr	r1, [pc, #192]	@ (8003d6c <Gait_controller+0x7e8>)
 8003cac:	eeb0 1a47 	vmov.f32	s2, s14
 8003cb0:	eef0 0a67 	vmov.f32	s1, s15
 8003cb4:	eeb0 0a66 	vmov.f32	s0, s13
 8003cb8:	482d      	ldr	r0, [pc, #180]	@ (8003d70 <Gait_controller+0x7ec>)
 8003cba:	f7ff fabd 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,x_setpoint,y_setpoint + y_translation,body_height - step_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003cbe:	4b25      	ldr	r3, [pc, #148]	@ (8003d54 <Gait_controller+0x7d0>)
 8003cc0:	ed93 7a00 	vldr	s14, [r3]
 8003cc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cc8:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003ccc:	4b22      	ldr	r3, [pc, #136]	@ (8003d58 <Gait_controller+0x7d4>)
 8003cce:	ed93 7a00 	vldr	s14, [r3]
 8003cd2:	4b28      	ldr	r3, [pc, #160]	@ (8003d74 <Gait_controller+0x7f0>)
 8003cd4:	edd3 7a00 	vldr	s15, [r3]
 8003cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8003d5c <Gait_controller+0x7d8>)
 8003cde:	ed93 7a00 	vldr	s14, [r3]
 8003ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d5c <Gait_controller+0x7d8>)
 8003ce4:	ed93 6a01 	vldr	s12, [r3, #4]
 8003ce8:	eddf 2a1d 	vldr	s5, [pc, #116]	@ 8003d60 <Gait_controller+0x7dc>
 8003cec:	eeb0 2a46 	vmov.f32	s4, s12
 8003cf0:	eef0 1a47 	vmov.f32	s3, s14
 8003cf4:	4920      	ldr	r1, [pc, #128]	@ (8003d78 <Gait_controller+0x7f4>)
 8003cf6:	eeb0 1a67 	vmov.f32	s2, s15
 8003cfa:	eef0 0a66 	vmov.f32	s1, s13
 8003cfe:	ed97 0a02 	vldr	s0, [r7, #8]
 8003d02:	481e      	ldr	r0, [pc, #120]	@ (8003d7c <Gait_controller+0x7f8>)
 8003d04:	f7ff fa98 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,-x_setpoint,-y_setpoint + y_translation,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003d08:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d0c:	eef1 6a67 	vneg.f32	s13, s15
 8003d10:	4b10      	ldr	r3, [pc, #64]	@ (8003d54 <Gait_controller+0x7d0>)
 8003d12:	ed93 7a00 	vldr	s14, [r3]
 8003d16:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d58 <Gait_controller+0x7d4>)
 8003d20:	ed93 7a00 	vldr	s14, [r3]
 8003d24:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <Gait_controller+0x7d8>)
 8003d26:	ed93 6a00 	vldr	s12, [r3]
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <Gait_controller+0x7d8>)
 8003d2c:	edd3 5a01 	vldr	s11, [r3, #4]
 8003d30:	eddf 2a0b 	vldr	s5, [pc, #44]	@ 8003d60 <Gait_controller+0x7dc>
 8003d34:	eeb0 2a65 	vmov.f32	s4, s11
 8003d38:	eef0 1a46 	vmov.f32	s3, s12
 8003d3c:	4910      	ldr	r1, [pc, #64]	@ (8003d80 <Gait_controller+0x7fc>)
 8003d3e:	eeb0 1a47 	vmov.f32	s2, s14
 8003d42:	eef0 0a67 	vmov.f32	s1, s15
 8003d46:	eeb0 0a66 	vmov.f32	s0, s13
 8003d4a:	480e      	ldr	r0, [pc, #56]	@ (8003d84 <Gait_controller+0x800>)
 8003d4c:	f7ff fa74 	bl	8003238 <load_leg_position>
			break;
 8003d50:	f000 bf6f 	b.w	8004c32 <Gait_controller+0x16ae>
 8003d54:	20000098 	.word	0x20000098
 8003d58:	2000009c 	.word	0x2000009c
 8003d5c:	200002a8 	.word	0x200002a8
 8003d60:	00000000 	.word	0x00000000
 8003d64:	20000248 	.word	0x20000248
 8003d68:	20000000 	.word	0x20000000
 8003d6c:	20000254 	.word	0x20000254
 8003d70:	2000000c 	.word	0x2000000c
 8003d74:	20000090 	.word	0x20000090
 8003d78:	20000260 	.word	0x20000260
 8003d7c:	20000018 	.word	0x20000018
 8003d80:	2000026c 	.word	0x2000026c
 8003d84:	20000024 	.word	0x20000024
		case 6:
			load_leg_position(FL_position,x_setpoint,y_setpoint + y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003d88:	4b97      	ldr	r3, [pc, #604]	@ (8003fe8 <Gait_controller+0xa64>)
 8003d8a:	ed93 7a00 	vldr	s14, [r3]
 8003d8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d96:	4b95      	ldr	r3, [pc, #596]	@ (8003fec <Gait_controller+0xa68>)
 8003d98:	ed93 7a00 	vldr	s14, [r3]
 8003d9c:	4b94      	ldr	r3, [pc, #592]	@ (8003ff0 <Gait_controller+0xa6c>)
 8003d9e:	edd3 6a00 	vldr	s13, [r3]
 8003da2:	4b93      	ldr	r3, [pc, #588]	@ (8003ff0 <Gait_controller+0xa6c>)
 8003da4:	ed93 6a01 	vldr	s12, [r3, #4]
 8003da8:	eddf 2a92 	vldr	s5, [pc, #584]	@ 8003ff4 <Gait_controller+0xa70>
 8003dac:	eeb0 2a46 	vmov.f32	s4, s12
 8003db0:	eef0 1a66 	vmov.f32	s3, s13
 8003db4:	4990      	ldr	r1, [pc, #576]	@ (8003ff8 <Gait_controller+0xa74>)
 8003db6:	eeb0 1a47 	vmov.f32	s2, s14
 8003dba:	eef0 0a67 	vmov.f32	s1, s15
 8003dbe:	ed97 0a02 	vldr	s0, [r7, #8]
 8003dc2:	488e      	ldr	r0, [pc, #568]	@ (8003ffc <Gait_controller+0xa78>)
 8003dc4:	f7ff fa38 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,-2*x_setpoint,-2*y_setpoint + y_translation,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003dc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dcc:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003dd0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003dd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dd8:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003ddc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003de0:	4b81      	ldr	r3, [pc, #516]	@ (8003fe8 <Gait_controller+0xa64>)
 8003de2:	edd3 7a00 	vldr	s15, [r3]
 8003de6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dea:	4b80      	ldr	r3, [pc, #512]	@ (8003fec <Gait_controller+0xa68>)
 8003dec:	ed93 7a00 	vldr	s14, [r3]
 8003df0:	4b7f      	ldr	r3, [pc, #508]	@ (8003ff0 <Gait_controller+0xa6c>)
 8003df2:	ed93 6a00 	vldr	s12, [r3]
 8003df6:	4b7e      	ldr	r3, [pc, #504]	@ (8003ff0 <Gait_controller+0xa6c>)
 8003df8:	edd3 5a01 	vldr	s11, [r3, #4]
 8003dfc:	eddf 2a7d 	vldr	s5, [pc, #500]	@ 8003ff4 <Gait_controller+0xa70>
 8003e00:	eeb0 2a65 	vmov.f32	s4, s11
 8003e04:	eef0 1a46 	vmov.f32	s3, s12
 8003e08:	497d      	ldr	r1, [pc, #500]	@ (8004000 <Gait_controller+0xa7c>)
 8003e0a:	eeb0 1a47 	vmov.f32	s2, s14
 8003e0e:	eef0 0a67 	vmov.f32	s1, s15
 8003e12:	eeb0 0a66 	vmov.f32	s0, s13
 8003e16:	487b      	ldr	r0, [pc, #492]	@ (8004004 <Gait_controller+0xa80>)
 8003e18:	f7ff fa0e 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,2*x_setpoint,2*y_setpoint + y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003e1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e20:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003e24:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e28:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003e2c:	4b6e      	ldr	r3, [pc, #440]	@ (8003fe8 <Gait_controller+0xa64>)
 8003e2e:	edd3 7a00 	vldr	s15, [r3]
 8003e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e36:	4b6d      	ldr	r3, [pc, #436]	@ (8003fec <Gait_controller+0xa68>)
 8003e38:	ed93 7a00 	vldr	s14, [r3]
 8003e3c:	4b6c      	ldr	r3, [pc, #432]	@ (8003ff0 <Gait_controller+0xa6c>)
 8003e3e:	ed93 6a00 	vldr	s12, [r3]
 8003e42:	4b6b      	ldr	r3, [pc, #428]	@ (8003ff0 <Gait_controller+0xa6c>)
 8003e44:	edd3 5a01 	vldr	s11, [r3, #4]
 8003e48:	eddf 2a6a 	vldr	s5, [pc, #424]	@ 8003ff4 <Gait_controller+0xa70>
 8003e4c:	eeb0 2a65 	vmov.f32	s4, s11
 8003e50:	eef0 1a46 	vmov.f32	s3, s12
 8003e54:	496c      	ldr	r1, [pc, #432]	@ (8004008 <Gait_controller+0xa84>)
 8003e56:	eeb0 1a47 	vmov.f32	s2, s14
 8003e5a:	eef0 0a67 	vmov.f32	s1, s15
 8003e5e:	eeb0 0a66 	vmov.f32	s0, s13
 8003e62:	486a      	ldr	r0, [pc, #424]	@ (800400c <Gait_controller+0xa88>)
 8003e64:	f7ff f9e8 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,-x_setpoint,-y_setpoint + y_translation,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003e68:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e6c:	eef1 6a67 	vneg.f32	s13, s15
 8003e70:	4b5d      	ldr	r3, [pc, #372]	@ (8003fe8 <Gait_controller+0xa64>)
 8003e72:	ed93 7a00 	vldr	s14, [r3]
 8003e76:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8003fec <Gait_controller+0xa68>)
 8003e80:	ed93 7a00 	vldr	s14, [r3]
 8003e84:	4b5a      	ldr	r3, [pc, #360]	@ (8003ff0 <Gait_controller+0xa6c>)
 8003e86:	ed93 6a00 	vldr	s12, [r3]
 8003e8a:	4b59      	ldr	r3, [pc, #356]	@ (8003ff0 <Gait_controller+0xa6c>)
 8003e8c:	edd3 5a01 	vldr	s11, [r3, #4]
 8003e90:	eddf 2a58 	vldr	s5, [pc, #352]	@ 8003ff4 <Gait_controller+0xa70>
 8003e94:	eeb0 2a65 	vmov.f32	s4, s11
 8003e98:	eef0 1a46 	vmov.f32	s3, s12
 8003e9c:	495c      	ldr	r1, [pc, #368]	@ (8004010 <Gait_controller+0xa8c>)
 8003e9e:	eeb0 1a47 	vmov.f32	s2, s14
 8003ea2:	eef0 0a67 	vmov.f32	s1, s15
 8003ea6:	eeb0 0a66 	vmov.f32	s0, s13
 8003eaa:	485a      	ldr	r0, [pc, #360]	@ (8004014 <Gait_controller+0xa90>)
 8003eac:	f7ff f9c4 	bl	8003238 <load_leg_position>
			break;
 8003eb0:	f000 bebf 	b.w	8004c32 <Gait_controller+0x16ae>
		case 7:
			load_leg_position(FL_position,x_setpoint,y_setpoint - y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003eb4:	4b4c      	ldr	r3, [pc, #304]	@ (8003fe8 <Gait_controller+0xa64>)
 8003eb6:	edd3 7a00 	vldr	s15, [r3]
 8003eba:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8003fec <Gait_controller+0xa68>)
 8003ec4:	ed93 7a00 	vldr	s14, [r3]
 8003ec8:	4b49      	ldr	r3, [pc, #292]	@ (8003ff0 <Gait_controller+0xa6c>)
 8003eca:	edd3 6a00 	vldr	s13, [r3]
 8003ece:	4b48      	ldr	r3, [pc, #288]	@ (8003ff0 <Gait_controller+0xa6c>)
 8003ed0:	ed93 6a01 	vldr	s12, [r3, #4]
 8003ed4:	eddf 2a47 	vldr	s5, [pc, #284]	@ 8003ff4 <Gait_controller+0xa70>
 8003ed8:	eeb0 2a46 	vmov.f32	s4, s12
 8003edc:	eef0 1a66 	vmov.f32	s3, s13
 8003ee0:	4945      	ldr	r1, [pc, #276]	@ (8003ff8 <Gait_controller+0xa74>)
 8003ee2:	eeb0 1a47 	vmov.f32	s2, s14
 8003ee6:	eef0 0a67 	vmov.f32	s1, s15
 8003eea:	ed97 0a02 	vldr	s0, [r7, #8]
 8003eee:	4843      	ldr	r0, [pc, #268]	@ (8003ffc <Gait_controller+0xa78>)
 8003ef0:	f7ff f9a2 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,-x_setpoint,-y_setpoint - y_translation,body_height - step_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003ef4:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ef8:	eef1 6a67 	vneg.f32	s13, s15
 8003efc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f00:	eeb1 7a67 	vneg.f32	s14, s15
 8003f04:	4b38      	ldr	r3, [pc, #224]	@ (8003fe8 <Gait_controller+0xa64>)
 8003f06:	edd3 7a00 	vldr	s15, [r3]
 8003f0a:	ee37 6a67 	vsub.f32	s12, s14, s15
 8003f0e:	4b37      	ldr	r3, [pc, #220]	@ (8003fec <Gait_controller+0xa68>)
 8003f10:	ed93 7a00 	vldr	s14, [r3]
 8003f14:	4b40      	ldr	r3, [pc, #256]	@ (8004018 <Gait_controller+0xa94>)
 8003f16:	edd3 7a00 	vldr	s15, [r3]
 8003f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f1e:	4b34      	ldr	r3, [pc, #208]	@ (8003ff0 <Gait_controller+0xa6c>)
 8003f20:	ed93 7a00 	vldr	s14, [r3]
 8003f24:	4b32      	ldr	r3, [pc, #200]	@ (8003ff0 <Gait_controller+0xa6c>)
 8003f26:	edd3 5a01 	vldr	s11, [r3, #4]
 8003f2a:	eddf 2a32 	vldr	s5, [pc, #200]	@ 8003ff4 <Gait_controller+0xa70>
 8003f2e:	eeb0 2a65 	vmov.f32	s4, s11
 8003f32:	eef0 1a47 	vmov.f32	s3, s14
 8003f36:	4932      	ldr	r1, [pc, #200]	@ (8004000 <Gait_controller+0xa7c>)
 8003f38:	eeb0 1a67 	vmov.f32	s2, s15
 8003f3c:	eef0 0a46 	vmov.f32	s1, s12
 8003f40:	eeb0 0a66 	vmov.f32	s0, s13
 8003f44:	482f      	ldr	r0, [pc, #188]	@ (8004004 <Gait_controller+0xa80>)
 8003f46:	f7ff f977 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,2*x_setpoint,2*y_setpoint - y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003f4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f4e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f56:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003f5a:	4b23      	ldr	r3, [pc, #140]	@ (8003fe8 <Gait_controller+0xa64>)
 8003f5c:	edd3 7a00 	vldr	s15, [r3]
 8003f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f64:	4b21      	ldr	r3, [pc, #132]	@ (8003fec <Gait_controller+0xa68>)
 8003f66:	ed93 7a00 	vldr	s14, [r3]
 8003f6a:	4b21      	ldr	r3, [pc, #132]	@ (8003ff0 <Gait_controller+0xa6c>)
 8003f6c:	ed93 6a00 	vldr	s12, [r3]
 8003f70:	4b1f      	ldr	r3, [pc, #124]	@ (8003ff0 <Gait_controller+0xa6c>)
 8003f72:	edd3 5a01 	vldr	s11, [r3, #4]
 8003f76:	eddf 2a1f 	vldr	s5, [pc, #124]	@ 8003ff4 <Gait_controller+0xa70>
 8003f7a:	eeb0 2a65 	vmov.f32	s4, s11
 8003f7e:	eef0 1a46 	vmov.f32	s3, s12
 8003f82:	4921      	ldr	r1, [pc, #132]	@ (8004008 <Gait_controller+0xa84>)
 8003f84:	eeb0 1a47 	vmov.f32	s2, s14
 8003f88:	eef0 0a67 	vmov.f32	s1, s15
 8003f8c:	eeb0 0a66 	vmov.f32	s0, s13
 8003f90:	481e      	ldr	r0, [pc, #120]	@ (800400c <Gait_controller+0xa88>)
 8003f92:	f7ff f951 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,-x_setpoint,-y_setpoint - y_translation,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003f96:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f9a:	eef1 6a67 	vneg.f32	s13, s15
 8003f9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fa2:	eeb1 7a67 	vneg.f32	s14, s15
 8003fa6:	4b10      	ldr	r3, [pc, #64]	@ (8003fe8 <Gait_controller+0xa64>)
 8003fa8:	edd3 7a00 	vldr	s15, [r3]
 8003fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8003fec <Gait_controller+0xa68>)
 8003fb2:	ed93 7a00 	vldr	s14, [r3]
 8003fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff0 <Gait_controller+0xa6c>)
 8003fb8:	ed93 6a00 	vldr	s12, [r3]
 8003fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff0 <Gait_controller+0xa6c>)
 8003fbe:	edd3 5a01 	vldr	s11, [r3, #4]
 8003fc2:	eddf 2a0c 	vldr	s5, [pc, #48]	@ 8003ff4 <Gait_controller+0xa70>
 8003fc6:	eeb0 2a65 	vmov.f32	s4, s11
 8003fca:	eef0 1a46 	vmov.f32	s3, s12
 8003fce:	4910      	ldr	r1, [pc, #64]	@ (8004010 <Gait_controller+0xa8c>)
 8003fd0:	eeb0 1a47 	vmov.f32	s2, s14
 8003fd4:	eef0 0a67 	vmov.f32	s1, s15
 8003fd8:	eeb0 0a66 	vmov.f32	s0, s13
 8003fdc:	480d      	ldr	r0, [pc, #52]	@ (8004014 <Gait_controller+0xa90>)
 8003fde:	f7ff f92b 	bl	8003238 <load_leg_position>
			break;
 8003fe2:	f000 be26 	b.w	8004c32 <Gait_controller+0x16ae>
 8003fe6:	bf00      	nop
 8003fe8:	20000098 	.word	0x20000098
 8003fec:	2000009c 	.word	0x2000009c
 8003ff0:	200002a8 	.word	0x200002a8
 8003ff4:	00000000 	.word	0x00000000
 8003ff8:	20000248 	.word	0x20000248
 8003ffc:	20000000 	.word	0x20000000
 8004000:	20000254 	.word	0x20000254
 8004004:	2000000c 	.word	0x2000000c
 8004008:	20000260 	.word	0x20000260
 800400c:	20000018 	.word	0x20000018
 8004010:	2000026c 	.word	0x2000026c
 8004014:	20000024 	.word	0x20000024
 8004018:	20000090 	.word	0x20000090
		case 8:
			load_leg_position(FL_position,-x_setpoint,-y_setpoint - y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 800401c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004020:	eef1 6a67 	vneg.f32	s13, s15
 8004024:	edd7 7a01 	vldr	s15, [r7, #4]
 8004028:	eeb1 7a67 	vneg.f32	s14, s15
 800402c:	4b93      	ldr	r3, [pc, #588]	@ (800427c <Gait_controller+0xcf8>)
 800402e:	edd3 7a00 	vldr	s15, [r3]
 8004032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004036:	4b92      	ldr	r3, [pc, #584]	@ (8004280 <Gait_controller+0xcfc>)
 8004038:	ed93 7a00 	vldr	s14, [r3]
 800403c:	4b91      	ldr	r3, [pc, #580]	@ (8004284 <Gait_controller+0xd00>)
 800403e:	ed93 6a00 	vldr	s12, [r3]
 8004042:	4b90      	ldr	r3, [pc, #576]	@ (8004284 <Gait_controller+0xd00>)
 8004044:	edd3 5a01 	vldr	s11, [r3, #4]
 8004048:	eddf 2a8f 	vldr	s5, [pc, #572]	@ 8004288 <Gait_controller+0xd04>
 800404c:	eeb0 2a65 	vmov.f32	s4, s11
 8004050:	eef0 1a46 	vmov.f32	s3, s12
 8004054:	498d      	ldr	r1, [pc, #564]	@ (800428c <Gait_controller+0xd08>)
 8004056:	eeb0 1a47 	vmov.f32	s2, s14
 800405a:	eef0 0a67 	vmov.f32	s1, s15
 800405e:	eeb0 0a66 	vmov.f32	s0, s13
 8004062:	488b      	ldr	r0, [pc, #556]	@ (8004290 <Gait_controller+0xd0c>)
 8004064:	f7ff f8e8 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,x_setpoint,y_setpoint - y_translation,body_height - step_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 8004068:	4b84      	ldr	r3, [pc, #528]	@ (800427c <Gait_controller+0xcf8>)
 800406a:	edd3 7a00 	vldr	s15, [r3]
 800406e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004072:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004076:	4b82      	ldr	r3, [pc, #520]	@ (8004280 <Gait_controller+0xcfc>)
 8004078:	ed93 7a00 	vldr	s14, [r3]
 800407c:	4b85      	ldr	r3, [pc, #532]	@ (8004294 <Gait_controller+0xd10>)
 800407e:	edd3 7a00 	vldr	s15, [r3]
 8004082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004086:	4b7f      	ldr	r3, [pc, #508]	@ (8004284 <Gait_controller+0xd00>)
 8004088:	ed93 7a00 	vldr	s14, [r3]
 800408c:	4b7d      	ldr	r3, [pc, #500]	@ (8004284 <Gait_controller+0xd00>)
 800408e:	ed93 6a01 	vldr	s12, [r3, #4]
 8004092:	eddf 2a7d 	vldr	s5, [pc, #500]	@ 8004288 <Gait_controller+0xd04>
 8004096:	eeb0 2a46 	vmov.f32	s4, s12
 800409a:	eef0 1a47 	vmov.f32	s3, s14
 800409e:	497e      	ldr	r1, [pc, #504]	@ (8004298 <Gait_controller+0xd14>)
 80040a0:	eeb0 1a67 	vmov.f32	s2, s15
 80040a4:	eef0 0a66 	vmov.f32	s1, s13
 80040a8:	ed97 0a02 	vldr	s0, [r7, #8]
 80040ac:	487b      	ldr	r0, [pc, #492]	@ (800429c <Gait_controller+0xd18>)
 80040ae:	f7ff f8c3 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,x_setpoint,y_setpoint - y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 80040b2:	4b72      	ldr	r3, [pc, #456]	@ (800427c <Gait_controller+0xcf8>)
 80040b4:	edd3 7a00 	vldr	s15, [r3]
 80040b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80040bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004280 <Gait_controller+0xcfc>)
 80040c2:	ed93 7a00 	vldr	s14, [r3]
 80040c6:	4b6f      	ldr	r3, [pc, #444]	@ (8004284 <Gait_controller+0xd00>)
 80040c8:	edd3 6a00 	vldr	s13, [r3]
 80040cc:	4b6d      	ldr	r3, [pc, #436]	@ (8004284 <Gait_controller+0xd00>)
 80040ce:	ed93 6a01 	vldr	s12, [r3, #4]
 80040d2:	eddf 2a6d 	vldr	s5, [pc, #436]	@ 8004288 <Gait_controller+0xd04>
 80040d6:	eeb0 2a46 	vmov.f32	s4, s12
 80040da:	eef0 1a66 	vmov.f32	s3, s13
 80040de:	4970      	ldr	r1, [pc, #448]	@ (80042a0 <Gait_controller+0xd1c>)
 80040e0:	eeb0 1a47 	vmov.f32	s2, s14
 80040e4:	eef0 0a67 	vmov.f32	s1, s15
 80040e8:	ed97 0a02 	vldr	s0, [r7, #8]
 80040ec:	486d      	ldr	r0, [pc, #436]	@ (80042a4 <Gait_controller+0xd20>)
 80040ee:	f7ff f8a3 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,-2*x_setpoint,-2*y_setpoint - y_translation,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 80040f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80040f6:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80040fa:	ee67 6a87 	vmul.f32	s13, s15, s14
 80040fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8004102:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8004106:	ee27 7a87 	vmul.f32	s14, s15, s14
 800410a:	4b5c      	ldr	r3, [pc, #368]	@ (800427c <Gait_controller+0xcf8>)
 800410c:	edd3 7a00 	vldr	s15, [r3]
 8004110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004114:	4b5a      	ldr	r3, [pc, #360]	@ (8004280 <Gait_controller+0xcfc>)
 8004116:	ed93 7a00 	vldr	s14, [r3]
 800411a:	4b5a      	ldr	r3, [pc, #360]	@ (8004284 <Gait_controller+0xd00>)
 800411c:	ed93 6a00 	vldr	s12, [r3]
 8004120:	4b58      	ldr	r3, [pc, #352]	@ (8004284 <Gait_controller+0xd00>)
 8004122:	edd3 5a01 	vldr	s11, [r3, #4]
 8004126:	eddf 2a58 	vldr	s5, [pc, #352]	@ 8004288 <Gait_controller+0xd04>
 800412a:	eeb0 2a65 	vmov.f32	s4, s11
 800412e:	eef0 1a46 	vmov.f32	s3, s12
 8004132:	495d      	ldr	r1, [pc, #372]	@ (80042a8 <Gait_controller+0xd24>)
 8004134:	eeb0 1a47 	vmov.f32	s2, s14
 8004138:	eef0 0a67 	vmov.f32	s1, s15
 800413c:	eeb0 0a66 	vmov.f32	s0, s13
 8004140:	485a      	ldr	r0, [pc, #360]	@ (80042ac <Gait_controller+0xd28>)
 8004142:	f7ff f879 	bl	8003238 <load_leg_position>
			break;
 8004146:	f000 bd74 	b.w	8004c32 <Gait_controller+0x16ae>
		case 9:
			load_leg_position(FL_position,-x_setpoint,-y_setpoint - y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 800414a:	edd7 7a02 	vldr	s15, [r7, #8]
 800414e:	eef1 6a67 	vneg.f32	s13, s15
 8004152:	edd7 7a01 	vldr	s15, [r7, #4]
 8004156:	eeb1 7a67 	vneg.f32	s14, s15
 800415a:	4b48      	ldr	r3, [pc, #288]	@ (800427c <Gait_controller+0xcf8>)
 800415c:	edd3 7a00 	vldr	s15, [r3]
 8004160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004164:	4b46      	ldr	r3, [pc, #280]	@ (8004280 <Gait_controller+0xcfc>)
 8004166:	ed93 7a00 	vldr	s14, [r3]
 800416a:	4b46      	ldr	r3, [pc, #280]	@ (8004284 <Gait_controller+0xd00>)
 800416c:	ed93 6a00 	vldr	s12, [r3]
 8004170:	4b44      	ldr	r3, [pc, #272]	@ (8004284 <Gait_controller+0xd00>)
 8004172:	edd3 5a01 	vldr	s11, [r3, #4]
 8004176:	eddf 2a44 	vldr	s5, [pc, #272]	@ 8004288 <Gait_controller+0xd04>
 800417a:	eeb0 2a65 	vmov.f32	s4, s11
 800417e:	eef0 1a46 	vmov.f32	s3, s12
 8004182:	4942      	ldr	r1, [pc, #264]	@ (800428c <Gait_controller+0xd08>)
 8004184:	eeb0 1a47 	vmov.f32	s2, s14
 8004188:	eef0 0a67 	vmov.f32	s1, s15
 800418c:	eeb0 0a66 	vmov.f32	s0, s13
 8004190:	483f      	ldr	r0, [pc, #252]	@ (8004290 <Gait_controller+0xd0c>)
 8004192:	f7ff f851 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,2*x_setpoint,2*y_setpoint - y_translation,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 8004196:	edd7 7a02 	vldr	s15, [r7, #8]
 800419a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800419e:	edd7 7a01 	vldr	s15, [r7, #4]
 80041a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80041a6:	4b35      	ldr	r3, [pc, #212]	@ (800427c <Gait_controller+0xcf8>)
 80041a8:	edd3 7a00 	vldr	s15, [r3]
 80041ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041b0:	4b33      	ldr	r3, [pc, #204]	@ (8004280 <Gait_controller+0xcfc>)
 80041b2:	ed93 7a00 	vldr	s14, [r3]
 80041b6:	4b33      	ldr	r3, [pc, #204]	@ (8004284 <Gait_controller+0xd00>)
 80041b8:	ed93 6a00 	vldr	s12, [r3]
 80041bc:	4b31      	ldr	r3, [pc, #196]	@ (8004284 <Gait_controller+0xd00>)
 80041be:	edd3 5a01 	vldr	s11, [r3, #4]
 80041c2:	eddf 2a31 	vldr	s5, [pc, #196]	@ 8004288 <Gait_controller+0xd04>
 80041c6:	eeb0 2a65 	vmov.f32	s4, s11
 80041ca:	eef0 1a46 	vmov.f32	s3, s12
 80041ce:	4932      	ldr	r1, [pc, #200]	@ (8004298 <Gait_controller+0xd14>)
 80041d0:	eeb0 1a47 	vmov.f32	s2, s14
 80041d4:	eef0 0a67 	vmov.f32	s1, s15
 80041d8:	eeb0 0a66 	vmov.f32	s0, s13
 80041dc:	482f      	ldr	r0, [pc, #188]	@ (800429c <Gait_controller+0xd18>)
 80041de:	f7ff f82b 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,x_setpoint,y_setpoint - y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 80041e2:	4b26      	ldr	r3, [pc, #152]	@ (800427c <Gait_controller+0xcf8>)
 80041e4:	edd3 7a00 	vldr	s15, [r3]
 80041e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80041ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041f0:	4b23      	ldr	r3, [pc, #140]	@ (8004280 <Gait_controller+0xcfc>)
 80041f2:	ed93 7a00 	vldr	s14, [r3]
 80041f6:	4b23      	ldr	r3, [pc, #140]	@ (8004284 <Gait_controller+0xd00>)
 80041f8:	edd3 6a00 	vldr	s13, [r3]
 80041fc:	4b21      	ldr	r3, [pc, #132]	@ (8004284 <Gait_controller+0xd00>)
 80041fe:	ed93 6a01 	vldr	s12, [r3, #4]
 8004202:	eddf 2a21 	vldr	s5, [pc, #132]	@ 8004288 <Gait_controller+0xd04>
 8004206:	eeb0 2a46 	vmov.f32	s4, s12
 800420a:	eef0 1a66 	vmov.f32	s3, s13
 800420e:	4924      	ldr	r1, [pc, #144]	@ (80042a0 <Gait_controller+0xd1c>)
 8004210:	eeb0 1a47 	vmov.f32	s2, s14
 8004214:	eef0 0a67 	vmov.f32	s1, s15
 8004218:	ed97 0a02 	vldr	s0, [r7, #8]
 800421c:	4821      	ldr	r0, [pc, #132]	@ (80042a4 <Gait_controller+0xd20>)
 800421e:	f7ff f80b 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,-2*x_setpoint,-2*y_setpoint - y_translation,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 8004222:	edd7 7a02 	vldr	s15, [r7, #8]
 8004226:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800422a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800422e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004232:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8004236:	ee27 7a87 	vmul.f32	s14, s15, s14
 800423a:	4b10      	ldr	r3, [pc, #64]	@ (800427c <Gait_controller+0xcf8>)
 800423c:	edd3 7a00 	vldr	s15, [r3]
 8004240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004244:	4b0e      	ldr	r3, [pc, #56]	@ (8004280 <Gait_controller+0xcfc>)
 8004246:	ed93 7a00 	vldr	s14, [r3]
 800424a:	4b0e      	ldr	r3, [pc, #56]	@ (8004284 <Gait_controller+0xd00>)
 800424c:	ed93 6a00 	vldr	s12, [r3]
 8004250:	4b0c      	ldr	r3, [pc, #48]	@ (8004284 <Gait_controller+0xd00>)
 8004252:	edd3 5a01 	vldr	s11, [r3, #4]
 8004256:	eddf 2a0c 	vldr	s5, [pc, #48]	@ 8004288 <Gait_controller+0xd04>
 800425a:	eeb0 2a65 	vmov.f32	s4, s11
 800425e:	eef0 1a46 	vmov.f32	s3, s12
 8004262:	4911      	ldr	r1, [pc, #68]	@ (80042a8 <Gait_controller+0xd24>)
 8004264:	eeb0 1a47 	vmov.f32	s2, s14
 8004268:	eef0 0a67 	vmov.f32	s1, s15
 800426c:	eeb0 0a66 	vmov.f32	s0, s13
 8004270:	480e      	ldr	r0, [pc, #56]	@ (80042ac <Gait_controller+0xd28>)
 8004272:	f7fe ffe1 	bl	8003238 <load_leg_position>
			break;
 8004276:	f000 bcdc 	b.w	8004c32 <Gait_controller+0x16ae>
 800427a:	bf00      	nop
 800427c:	20000098 	.word	0x20000098
 8004280:	2000009c 	.word	0x2000009c
 8004284:	200002a8 	.word	0x200002a8
 8004288:	00000000 	.word	0x00000000
 800428c:	20000248 	.word	0x20000248
 8004290:	20000000 	.word	0x20000000
 8004294:	20000090 	.word	0x20000090
 8004298:	20000254 	.word	0x20000254
 800429c:	2000000c 	.word	0x2000000c
 80042a0:	20000260 	.word	0x20000260
 80042a4:	20000018 	.word	0x20000018
 80042a8:	2000026c 	.word	0x2000026c
 80042ac:	20000024 	.word	0x20000024

		case 10:
			load_leg_position(FL_position,-x_setpoint,-y_setpoint - y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 80042b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80042b4:	eef1 6a67 	vneg.f32	s13, s15
 80042b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80042bc:	eeb1 7a67 	vneg.f32	s14, s15
 80042c0:	4b9f      	ldr	r3, [pc, #636]	@ (8004540 <Gait_controller+0xfbc>)
 80042c2:	edd3 7a00 	vldr	s15, [r3]
 80042c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ca:	4b9e      	ldr	r3, [pc, #632]	@ (8004544 <Gait_controller+0xfc0>)
 80042cc:	ed93 7a00 	vldr	s14, [r3]
 80042d0:	4b9d      	ldr	r3, [pc, #628]	@ (8004548 <Gait_controller+0xfc4>)
 80042d2:	ed93 6a00 	vldr	s12, [r3]
 80042d6:	4b9c      	ldr	r3, [pc, #624]	@ (8004548 <Gait_controller+0xfc4>)
 80042d8:	edd3 5a01 	vldr	s11, [r3, #4]
 80042dc:	eddf 2a9b 	vldr	s5, [pc, #620]	@ 800454c <Gait_controller+0xfc8>
 80042e0:	eeb0 2a65 	vmov.f32	s4, s11
 80042e4:	eef0 1a46 	vmov.f32	s3, s12
 80042e8:	4999      	ldr	r1, [pc, #612]	@ (8004550 <Gait_controller+0xfcc>)
 80042ea:	eeb0 1a47 	vmov.f32	s2, s14
 80042ee:	eef0 0a67 	vmov.f32	s1, s15
 80042f2:	eeb0 0a66 	vmov.f32	s0, s13
 80042f6:	4897      	ldr	r0, [pc, #604]	@ (8004554 <Gait_controller+0xfd0>)
 80042f8:	f7fe ff9e 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,2*x_setpoint,2*y_setpoint - y_translation,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 80042fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8004300:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004304:	edd7 7a01 	vldr	s15, [r7, #4]
 8004308:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800430c:	4b8c      	ldr	r3, [pc, #560]	@ (8004540 <Gait_controller+0xfbc>)
 800430e:	edd3 7a00 	vldr	s15, [r3]
 8004312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004316:	4b8b      	ldr	r3, [pc, #556]	@ (8004544 <Gait_controller+0xfc0>)
 8004318:	ed93 7a00 	vldr	s14, [r3]
 800431c:	4b8a      	ldr	r3, [pc, #552]	@ (8004548 <Gait_controller+0xfc4>)
 800431e:	ed93 6a00 	vldr	s12, [r3]
 8004322:	4b89      	ldr	r3, [pc, #548]	@ (8004548 <Gait_controller+0xfc4>)
 8004324:	edd3 5a01 	vldr	s11, [r3, #4]
 8004328:	eddf 2a88 	vldr	s5, [pc, #544]	@ 800454c <Gait_controller+0xfc8>
 800432c:	eeb0 2a65 	vmov.f32	s4, s11
 8004330:	eef0 1a46 	vmov.f32	s3, s12
 8004334:	4988      	ldr	r1, [pc, #544]	@ (8004558 <Gait_controller+0xfd4>)
 8004336:	eeb0 1a47 	vmov.f32	s2, s14
 800433a:	eef0 0a67 	vmov.f32	s1, s15
 800433e:	eeb0 0a66 	vmov.f32	s0, s13
 8004342:	4886      	ldr	r0, [pc, #536]	@ (800455c <Gait_controller+0xfd8>)
 8004344:	f7fe ff78 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,x_setpoint,y_setpoint - y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 8004348:	4b7d      	ldr	r3, [pc, #500]	@ (8004540 <Gait_controller+0xfbc>)
 800434a:	edd3 7a00 	vldr	s15, [r3]
 800434e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004356:	4b7b      	ldr	r3, [pc, #492]	@ (8004544 <Gait_controller+0xfc0>)
 8004358:	ed93 7a00 	vldr	s14, [r3]
 800435c:	4b7a      	ldr	r3, [pc, #488]	@ (8004548 <Gait_controller+0xfc4>)
 800435e:	edd3 6a00 	vldr	s13, [r3]
 8004362:	4b79      	ldr	r3, [pc, #484]	@ (8004548 <Gait_controller+0xfc4>)
 8004364:	ed93 6a01 	vldr	s12, [r3, #4]
 8004368:	eddf 2a78 	vldr	s5, [pc, #480]	@ 800454c <Gait_controller+0xfc8>
 800436c:	eeb0 2a46 	vmov.f32	s4, s12
 8004370:	eef0 1a66 	vmov.f32	s3, s13
 8004374:	497a      	ldr	r1, [pc, #488]	@ (8004560 <Gait_controller+0xfdc>)
 8004376:	eeb0 1a47 	vmov.f32	s2, s14
 800437a:	eef0 0a67 	vmov.f32	s1, s15
 800437e:	ed97 0a02 	vldr	s0, [r7, #8]
 8004382:	4878      	ldr	r0, [pc, #480]	@ (8004564 <Gait_controller+0xfe0>)
 8004384:	f7fe ff58 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,-x_setpoint,-y_setpoint - y_translation,body_height - step_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 8004388:	edd7 7a02 	vldr	s15, [r7, #8]
 800438c:	eef1 6a67 	vneg.f32	s13, s15
 8004390:	edd7 7a01 	vldr	s15, [r7, #4]
 8004394:	eeb1 7a67 	vneg.f32	s14, s15
 8004398:	4b69      	ldr	r3, [pc, #420]	@ (8004540 <Gait_controller+0xfbc>)
 800439a:	edd3 7a00 	vldr	s15, [r3]
 800439e:	ee37 6a67 	vsub.f32	s12, s14, s15
 80043a2:	4b68      	ldr	r3, [pc, #416]	@ (8004544 <Gait_controller+0xfc0>)
 80043a4:	ed93 7a00 	vldr	s14, [r3]
 80043a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004568 <Gait_controller+0xfe4>)
 80043aa:	edd3 7a00 	vldr	s15, [r3]
 80043ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043b2:	4b65      	ldr	r3, [pc, #404]	@ (8004548 <Gait_controller+0xfc4>)
 80043b4:	ed93 7a00 	vldr	s14, [r3]
 80043b8:	4b63      	ldr	r3, [pc, #396]	@ (8004548 <Gait_controller+0xfc4>)
 80043ba:	edd3 5a01 	vldr	s11, [r3, #4]
 80043be:	eddf 2a63 	vldr	s5, [pc, #396]	@ 800454c <Gait_controller+0xfc8>
 80043c2:	eeb0 2a65 	vmov.f32	s4, s11
 80043c6:	eef0 1a47 	vmov.f32	s3, s14
 80043ca:	4968      	ldr	r1, [pc, #416]	@ (800456c <Gait_controller+0xfe8>)
 80043cc:	eeb0 1a67 	vmov.f32	s2, s15
 80043d0:	eef0 0a46 	vmov.f32	s1, s12
 80043d4:	eeb0 0a66 	vmov.f32	s0, s13
 80043d8:	4865      	ldr	r0, [pc, #404]	@ (8004570 <Gait_controller+0xfec>)
 80043da:	f7fe ff2d 	bl	8003238 <load_leg_position>
			break;
 80043de:	f000 bc28 	b.w	8004c32 <Gait_controller+0x16ae>
		case 11:
			load_leg_position(FL_position,-2*x_setpoint,-2*y_setpoint - y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 80043e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80043e6:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80043ea:	ee67 6a87 	vmul.f32	s13, s15, s14
 80043ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80043f2:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80043f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043fa:	4b51      	ldr	r3, [pc, #324]	@ (8004540 <Gait_controller+0xfbc>)
 80043fc:	edd3 7a00 	vldr	s15, [r3]
 8004400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004404:	4b4f      	ldr	r3, [pc, #316]	@ (8004544 <Gait_controller+0xfc0>)
 8004406:	ed93 7a00 	vldr	s14, [r3]
 800440a:	4b4f      	ldr	r3, [pc, #316]	@ (8004548 <Gait_controller+0xfc4>)
 800440c:	ed93 6a00 	vldr	s12, [r3]
 8004410:	4b4d      	ldr	r3, [pc, #308]	@ (8004548 <Gait_controller+0xfc4>)
 8004412:	edd3 5a01 	vldr	s11, [r3, #4]
 8004416:	eddf 2a4d 	vldr	s5, [pc, #308]	@ 800454c <Gait_controller+0xfc8>
 800441a:	eeb0 2a65 	vmov.f32	s4, s11
 800441e:	eef0 1a46 	vmov.f32	s3, s12
 8004422:	494b      	ldr	r1, [pc, #300]	@ (8004550 <Gait_controller+0xfcc>)
 8004424:	eeb0 1a47 	vmov.f32	s2, s14
 8004428:	eef0 0a67 	vmov.f32	s1, s15
 800442c:	eeb0 0a66 	vmov.f32	s0, s13
 8004430:	4848      	ldr	r0, [pc, #288]	@ (8004554 <Gait_controller+0xfd0>)
 8004432:	f7fe ff01 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,x_setpoint,y_setpoint - y_translation,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 8004436:	4b42      	ldr	r3, [pc, #264]	@ (8004540 <Gait_controller+0xfbc>)
 8004438:	edd3 7a00 	vldr	s15, [r3]
 800443c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004444:	4b3f      	ldr	r3, [pc, #252]	@ (8004544 <Gait_controller+0xfc0>)
 8004446:	ed93 7a00 	vldr	s14, [r3]
 800444a:	4b3f      	ldr	r3, [pc, #252]	@ (8004548 <Gait_controller+0xfc4>)
 800444c:	edd3 6a00 	vldr	s13, [r3]
 8004450:	4b3d      	ldr	r3, [pc, #244]	@ (8004548 <Gait_controller+0xfc4>)
 8004452:	ed93 6a01 	vldr	s12, [r3, #4]
 8004456:	eddf 2a3d 	vldr	s5, [pc, #244]	@ 800454c <Gait_controller+0xfc8>
 800445a:	eeb0 2a46 	vmov.f32	s4, s12
 800445e:	eef0 1a66 	vmov.f32	s3, s13
 8004462:	493d      	ldr	r1, [pc, #244]	@ (8004558 <Gait_controller+0xfd4>)
 8004464:	eeb0 1a47 	vmov.f32	s2, s14
 8004468:	eef0 0a67 	vmov.f32	s1, s15
 800446c:	ed97 0a02 	vldr	s0, [r7, #8]
 8004470:	483a      	ldr	r0, [pc, #232]	@ (800455c <Gait_controller+0xfd8>)
 8004472:	f7fe fee1 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,-x_setpoint,-y_setpoint - y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 8004476:	edd7 7a02 	vldr	s15, [r7, #8]
 800447a:	eef1 6a67 	vneg.f32	s13, s15
 800447e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004482:	eeb1 7a67 	vneg.f32	s14, s15
 8004486:	4b2e      	ldr	r3, [pc, #184]	@ (8004540 <Gait_controller+0xfbc>)
 8004488:	edd3 7a00 	vldr	s15, [r3]
 800448c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004490:	4b2c      	ldr	r3, [pc, #176]	@ (8004544 <Gait_controller+0xfc0>)
 8004492:	ed93 7a00 	vldr	s14, [r3]
 8004496:	4b2c      	ldr	r3, [pc, #176]	@ (8004548 <Gait_controller+0xfc4>)
 8004498:	ed93 6a00 	vldr	s12, [r3]
 800449c:	4b2a      	ldr	r3, [pc, #168]	@ (8004548 <Gait_controller+0xfc4>)
 800449e:	edd3 5a01 	vldr	s11, [r3, #4]
 80044a2:	eddf 2a2a 	vldr	s5, [pc, #168]	@ 800454c <Gait_controller+0xfc8>
 80044a6:	eeb0 2a65 	vmov.f32	s4, s11
 80044aa:	eef0 1a46 	vmov.f32	s3, s12
 80044ae:	492c      	ldr	r1, [pc, #176]	@ (8004560 <Gait_controller+0xfdc>)
 80044b0:	eeb0 1a47 	vmov.f32	s2, s14
 80044b4:	eef0 0a67 	vmov.f32	s1, s15
 80044b8:	eeb0 0a66 	vmov.f32	s0, s13
 80044bc:	4829      	ldr	r0, [pc, #164]	@ (8004564 <Gait_controller+0xfe0>)
 80044be:	f7fe febb 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,x_setpoint,y_setpoint - y_translation,body_height - step_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 80044c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004540 <Gait_controller+0xfbc>)
 80044c4:	edd3 7a00 	vldr	s15, [r3]
 80044c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80044cc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80044d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004544 <Gait_controller+0xfc0>)
 80044d2:	ed93 7a00 	vldr	s14, [r3]
 80044d6:	4b24      	ldr	r3, [pc, #144]	@ (8004568 <Gait_controller+0xfe4>)
 80044d8:	edd3 7a00 	vldr	s15, [r3]
 80044dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044e0:	4b19      	ldr	r3, [pc, #100]	@ (8004548 <Gait_controller+0xfc4>)
 80044e2:	ed93 7a00 	vldr	s14, [r3]
 80044e6:	4b18      	ldr	r3, [pc, #96]	@ (8004548 <Gait_controller+0xfc4>)
 80044e8:	ed93 6a01 	vldr	s12, [r3, #4]
 80044ec:	eddf 2a17 	vldr	s5, [pc, #92]	@ 800454c <Gait_controller+0xfc8>
 80044f0:	eeb0 2a46 	vmov.f32	s4, s12
 80044f4:	eef0 1a47 	vmov.f32	s3, s14
 80044f8:	491c      	ldr	r1, [pc, #112]	@ (800456c <Gait_controller+0xfe8>)
 80044fa:	eeb0 1a67 	vmov.f32	s2, s15
 80044fe:	eef0 0a66 	vmov.f32	s1, s13
 8004502:	ed97 0a02 	vldr	s0, [r7, #8]
 8004506:	481a      	ldr	r0, [pc, #104]	@ (8004570 <Gait_controller+0xfec>)
 8004508:	f7fe fe96 	bl	8003238 <load_leg_position>
			break;
 800450c:	e391      	b.n	8004c32 <Gait_controller+0x16ae>
		}

	}else if(mode == TROT){
 800450e:	4b19      	ldr	r3, [pc, #100]	@ (8004574 <Gait_controller+0xff0>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b01      	cmp	r3, #1
 8004514:	f040 838d 	bne.w	8004c32 <Gait_controller+0x16ae>
		switch(ticks){
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b05      	cmp	r3, #5
 800451c:	f200 8389 	bhi.w	8004c32 <Gait_controller+0x16ae>
 8004520:	a201      	add	r2, pc, #4	@ (adr r2, 8004528 <Gait_controller+0xfa4>)
 8004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004526:	bf00      	nop
 8004528:	08004579 	.word	0x08004579
 800452c:	08004697 	.word	0x08004697
 8004530:	080047a1 	.word	0x080047a1
 8004534:	080048ed 	.word	0x080048ed
 8004538:	08004a0b 	.word	0x08004a0b
 800453c:	08004b15 	.word	0x08004b15
 8004540:	20000098 	.word	0x20000098
 8004544:	2000009c 	.word	0x2000009c
 8004548:	200002a8 	.word	0x200002a8
 800454c:	00000000 	.word	0x00000000
 8004550:	20000248 	.word	0x20000248
 8004554:	20000000 	.word	0x20000000
 8004558:	20000254 	.word	0x20000254
 800455c:	2000000c 	.word	0x2000000c
 8004560:	20000260 	.word	0x20000260
 8004564:	20000018 	.word	0x20000018
 8004568:	20000090 	.word	0x20000090
 800456c:	2000026c 	.word	0x2000026c
 8004570:	20000024 	.word	0x20000024
 8004574:	2000031c 	.word	0x2000031c

		case 0:
			load_leg_position(FL_position,x_setpoint,y_setpoint,body_height-step_height, FL_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004578:	4bd1      	ldr	r3, [pc, #836]	@ (80048c0 <Gait_controller+0x133c>)
 800457a:	ed93 7a00 	vldr	s14, [r3]
 800457e:	4bd1      	ldr	r3, [pc, #836]	@ (80048c4 <Gait_controller+0x1340>)
 8004580:	edd3 7a00 	vldr	s15, [r3]
 8004584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004588:	4bcf      	ldr	r3, [pc, #828]	@ (80048c8 <Gait_controller+0x1344>)
 800458a:	ed93 7a00 	vldr	s14, [r3]
 800458e:	4bce      	ldr	r3, [pc, #824]	@ (80048c8 <Gait_controller+0x1344>)
 8004590:	edd3 6a01 	vldr	s13, [r3, #4]
 8004594:	4bcc      	ldr	r3, [pc, #816]	@ (80048c8 <Gait_controller+0x1344>)
 8004596:	ed93 6a02 	vldr	s12, [r3, #8]
 800459a:	eef0 2a46 	vmov.f32	s5, s12
 800459e:	eeb0 2a66 	vmov.f32	s4, s13
 80045a2:	eef0 1a47 	vmov.f32	s3, s14
 80045a6:	49c9      	ldr	r1, [pc, #804]	@ (80048cc <Gait_controller+0x1348>)
 80045a8:	eeb0 1a67 	vmov.f32	s2, s15
 80045ac:	edd7 0a01 	vldr	s1, [r7, #4]
 80045b0:	ed97 0a02 	vldr	s0, [r7, #8]
 80045b4:	48c6      	ldr	r0, [pc, #792]	@ (80048d0 <Gait_controller+0x134c>)
 80045b6:	f7fe fe3f 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,-x_setpoint,-y_setpoint,body_height, FR_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 80045ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80045be:	eeb1 7a67 	vneg.f32	s14, s15
 80045c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80045c6:	eef1 6a67 	vneg.f32	s13, s15
 80045ca:	4bbd      	ldr	r3, [pc, #756]	@ (80048c0 <Gait_controller+0x133c>)
 80045cc:	ed93 6a00 	vldr	s12, [r3]
 80045d0:	4bbd      	ldr	r3, [pc, #756]	@ (80048c8 <Gait_controller+0x1344>)
 80045d2:	edd3 5a00 	vldr	s11, [r3]
 80045d6:	4bbc      	ldr	r3, [pc, #752]	@ (80048c8 <Gait_controller+0x1344>)
 80045d8:	ed93 5a01 	vldr	s10, [r3, #4]
 80045dc:	4bba      	ldr	r3, [pc, #744]	@ (80048c8 <Gait_controller+0x1344>)
 80045de:	edd3 7a02 	vldr	s15, [r3, #8]
 80045e2:	eef1 7a67 	vneg.f32	s15, s15
 80045e6:	eef0 2a67 	vmov.f32	s5, s15
 80045ea:	eeb0 2a45 	vmov.f32	s4, s10
 80045ee:	eef0 1a65 	vmov.f32	s3, s11
 80045f2:	49b8      	ldr	r1, [pc, #736]	@ (80048d4 <Gait_controller+0x1350>)
 80045f4:	eeb0 1a46 	vmov.f32	s2, s12
 80045f8:	eef0 0a66 	vmov.f32	s1, s13
 80045fc:	eeb0 0a47 	vmov.f32	s0, s14
 8004600:	48b5      	ldr	r0, [pc, #724]	@ (80048d8 <Gait_controller+0x1354>)
 8004602:	f7fe fe19 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,-x_setpoint,-y_setpoint,body_height, BL_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 8004606:	edd7 7a02 	vldr	s15, [r7, #8]
 800460a:	eeb1 7a67 	vneg.f32	s14, s15
 800460e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004612:	eef1 6a67 	vneg.f32	s13, s15
 8004616:	4baa      	ldr	r3, [pc, #680]	@ (80048c0 <Gait_controller+0x133c>)
 8004618:	ed93 6a00 	vldr	s12, [r3]
 800461c:	4baa      	ldr	r3, [pc, #680]	@ (80048c8 <Gait_controller+0x1344>)
 800461e:	edd3 5a00 	vldr	s11, [r3]
 8004622:	4ba9      	ldr	r3, [pc, #676]	@ (80048c8 <Gait_controller+0x1344>)
 8004624:	ed93 5a01 	vldr	s10, [r3, #4]
 8004628:	4ba7      	ldr	r3, [pc, #668]	@ (80048c8 <Gait_controller+0x1344>)
 800462a:	edd3 7a02 	vldr	s15, [r3, #8]
 800462e:	eef1 7a67 	vneg.f32	s15, s15
 8004632:	eef0 2a67 	vmov.f32	s5, s15
 8004636:	eeb0 2a45 	vmov.f32	s4, s10
 800463a:	eef0 1a65 	vmov.f32	s3, s11
 800463e:	49a7      	ldr	r1, [pc, #668]	@ (80048dc <Gait_controller+0x1358>)
 8004640:	eeb0 1a46 	vmov.f32	s2, s12
 8004644:	eef0 0a66 	vmov.f32	s1, s13
 8004648:	eeb0 0a47 	vmov.f32	s0, s14
 800464c:	48a4      	ldr	r0, [pc, #656]	@ (80048e0 <Gait_controller+0x135c>)
 800464e:	f7fe fdf3 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,x_setpoint,y_setpoint,body_height-step_height, BR_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004652:	4b9b      	ldr	r3, [pc, #620]	@ (80048c0 <Gait_controller+0x133c>)
 8004654:	ed93 7a00 	vldr	s14, [r3]
 8004658:	4b9a      	ldr	r3, [pc, #616]	@ (80048c4 <Gait_controller+0x1340>)
 800465a:	edd3 7a00 	vldr	s15, [r3]
 800465e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004662:	4b99      	ldr	r3, [pc, #612]	@ (80048c8 <Gait_controller+0x1344>)
 8004664:	ed93 7a00 	vldr	s14, [r3]
 8004668:	4b97      	ldr	r3, [pc, #604]	@ (80048c8 <Gait_controller+0x1344>)
 800466a:	edd3 6a01 	vldr	s13, [r3, #4]
 800466e:	4b96      	ldr	r3, [pc, #600]	@ (80048c8 <Gait_controller+0x1344>)
 8004670:	ed93 6a02 	vldr	s12, [r3, #8]
 8004674:	eef0 2a46 	vmov.f32	s5, s12
 8004678:	eeb0 2a66 	vmov.f32	s4, s13
 800467c:	eef0 1a47 	vmov.f32	s3, s14
 8004680:	4998      	ldr	r1, [pc, #608]	@ (80048e4 <Gait_controller+0x1360>)
 8004682:	eeb0 1a67 	vmov.f32	s2, s15
 8004686:	edd7 0a01 	vldr	s1, [r7, #4]
 800468a:	ed97 0a02 	vldr	s0, [r7, #8]
 800468e:	4896      	ldr	r0, [pc, #600]	@ (80048e8 <Gait_controller+0x1364>)
 8004690:	f7fe fdd2 	bl	8003238 <load_leg_position>
			break;
 8004694:	e2cd      	b.n	8004c32 <Gait_controller+0x16ae>
		case 1:
			load_leg_position(FL_position,x_setpoint,y_setpoint,body_height, FL_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004696:	4b8a      	ldr	r3, [pc, #552]	@ (80048c0 <Gait_controller+0x133c>)
 8004698:	edd3 7a00 	vldr	s15, [r3]
 800469c:	4b8a      	ldr	r3, [pc, #552]	@ (80048c8 <Gait_controller+0x1344>)
 800469e:	ed93 7a00 	vldr	s14, [r3]
 80046a2:	4b89      	ldr	r3, [pc, #548]	@ (80048c8 <Gait_controller+0x1344>)
 80046a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80046a8:	4b87      	ldr	r3, [pc, #540]	@ (80048c8 <Gait_controller+0x1344>)
 80046aa:	ed93 6a02 	vldr	s12, [r3, #8]
 80046ae:	eef0 2a46 	vmov.f32	s5, s12
 80046b2:	eeb0 2a66 	vmov.f32	s4, s13
 80046b6:	eef0 1a47 	vmov.f32	s3, s14
 80046ba:	4984      	ldr	r1, [pc, #528]	@ (80048cc <Gait_controller+0x1348>)
 80046bc:	eeb0 1a67 	vmov.f32	s2, s15
 80046c0:	edd7 0a01 	vldr	s1, [r7, #4]
 80046c4:	ed97 0a02 	vldr	s0, [r7, #8]
 80046c8:	4881      	ldr	r0, [pc, #516]	@ (80048d0 <Gait_controller+0x134c>)
 80046ca:	f7fe fdb5 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,-x_setpoint,-y_setpoint,body_height, FR_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 80046ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80046d2:	eeb1 7a67 	vneg.f32	s14, s15
 80046d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80046da:	eef1 6a67 	vneg.f32	s13, s15
 80046de:	4b78      	ldr	r3, [pc, #480]	@ (80048c0 <Gait_controller+0x133c>)
 80046e0:	ed93 6a00 	vldr	s12, [r3]
 80046e4:	4b78      	ldr	r3, [pc, #480]	@ (80048c8 <Gait_controller+0x1344>)
 80046e6:	edd3 5a00 	vldr	s11, [r3]
 80046ea:	4b77      	ldr	r3, [pc, #476]	@ (80048c8 <Gait_controller+0x1344>)
 80046ec:	ed93 5a01 	vldr	s10, [r3, #4]
 80046f0:	4b75      	ldr	r3, [pc, #468]	@ (80048c8 <Gait_controller+0x1344>)
 80046f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80046f6:	eef1 7a67 	vneg.f32	s15, s15
 80046fa:	eef0 2a67 	vmov.f32	s5, s15
 80046fe:	eeb0 2a45 	vmov.f32	s4, s10
 8004702:	eef0 1a65 	vmov.f32	s3, s11
 8004706:	4973      	ldr	r1, [pc, #460]	@ (80048d4 <Gait_controller+0x1350>)
 8004708:	eeb0 1a46 	vmov.f32	s2, s12
 800470c:	eef0 0a66 	vmov.f32	s1, s13
 8004710:	eeb0 0a47 	vmov.f32	s0, s14
 8004714:	4870      	ldr	r0, [pc, #448]	@ (80048d8 <Gait_controller+0x1354>)
 8004716:	f7fe fd8f 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,-x_setpoint,-y_setpoint,body_height, BL_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 800471a:	edd7 7a02 	vldr	s15, [r7, #8]
 800471e:	eeb1 7a67 	vneg.f32	s14, s15
 8004722:	edd7 7a01 	vldr	s15, [r7, #4]
 8004726:	eef1 6a67 	vneg.f32	s13, s15
 800472a:	4b65      	ldr	r3, [pc, #404]	@ (80048c0 <Gait_controller+0x133c>)
 800472c:	ed93 6a00 	vldr	s12, [r3]
 8004730:	4b65      	ldr	r3, [pc, #404]	@ (80048c8 <Gait_controller+0x1344>)
 8004732:	edd3 5a00 	vldr	s11, [r3]
 8004736:	4b64      	ldr	r3, [pc, #400]	@ (80048c8 <Gait_controller+0x1344>)
 8004738:	ed93 5a01 	vldr	s10, [r3, #4]
 800473c:	4b62      	ldr	r3, [pc, #392]	@ (80048c8 <Gait_controller+0x1344>)
 800473e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004742:	eef1 7a67 	vneg.f32	s15, s15
 8004746:	eef0 2a67 	vmov.f32	s5, s15
 800474a:	eeb0 2a45 	vmov.f32	s4, s10
 800474e:	eef0 1a65 	vmov.f32	s3, s11
 8004752:	4962      	ldr	r1, [pc, #392]	@ (80048dc <Gait_controller+0x1358>)
 8004754:	eeb0 1a46 	vmov.f32	s2, s12
 8004758:	eef0 0a66 	vmov.f32	s1, s13
 800475c:	eeb0 0a47 	vmov.f32	s0, s14
 8004760:	485f      	ldr	r0, [pc, #380]	@ (80048e0 <Gait_controller+0x135c>)
 8004762:	f7fe fd69 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,x_setpoint,y_setpoint,body_height, BR_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004766:	4b56      	ldr	r3, [pc, #344]	@ (80048c0 <Gait_controller+0x133c>)
 8004768:	edd3 7a00 	vldr	s15, [r3]
 800476c:	4b56      	ldr	r3, [pc, #344]	@ (80048c8 <Gait_controller+0x1344>)
 800476e:	ed93 7a00 	vldr	s14, [r3]
 8004772:	4b55      	ldr	r3, [pc, #340]	@ (80048c8 <Gait_controller+0x1344>)
 8004774:	edd3 6a01 	vldr	s13, [r3, #4]
 8004778:	4b53      	ldr	r3, [pc, #332]	@ (80048c8 <Gait_controller+0x1344>)
 800477a:	ed93 6a02 	vldr	s12, [r3, #8]
 800477e:	eef0 2a46 	vmov.f32	s5, s12
 8004782:	eeb0 2a66 	vmov.f32	s4, s13
 8004786:	eef0 1a47 	vmov.f32	s3, s14
 800478a:	4956      	ldr	r1, [pc, #344]	@ (80048e4 <Gait_controller+0x1360>)
 800478c:	eeb0 1a67 	vmov.f32	s2, s15
 8004790:	edd7 0a01 	vldr	s1, [r7, #4]
 8004794:	ed97 0a02 	vldr	s0, [r7, #8]
 8004798:	4853      	ldr	r0, [pc, #332]	@ (80048e8 <Gait_controller+0x1364>)
 800479a:	f7fe fd4d 	bl	8003238 <load_leg_position>
			break;
 800479e:	e248      	b.n	8004c32 <Gait_controller+0x16ae>
		case 2:
			load_leg_position(FL_position,x_setpoint,y_setpoint,body_height, FL_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 80047a0:	4b47      	ldr	r3, [pc, #284]	@ (80048c0 <Gait_controller+0x133c>)
 80047a2:	edd3 7a00 	vldr	s15, [r3]
 80047a6:	4b48      	ldr	r3, [pc, #288]	@ (80048c8 <Gait_controller+0x1344>)
 80047a8:	ed93 7a00 	vldr	s14, [r3]
 80047ac:	4b46      	ldr	r3, [pc, #280]	@ (80048c8 <Gait_controller+0x1344>)
 80047ae:	edd3 6a01 	vldr	s13, [r3, #4]
 80047b2:	4b45      	ldr	r3, [pc, #276]	@ (80048c8 <Gait_controller+0x1344>)
 80047b4:	ed93 6a02 	vldr	s12, [r3, #8]
 80047b8:	eef0 2a46 	vmov.f32	s5, s12
 80047bc:	eeb0 2a66 	vmov.f32	s4, s13
 80047c0:	eef0 1a47 	vmov.f32	s3, s14
 80047c4:	4941      	ldr	r1, [pc, #260]	@ (80048cc <Gait_controller+0x1348>)
 80047c6:	eeb0 1a67 	vmov.f32	s2, s15
 80047ca:	edd7 0a01 	vldr	s1, [r7, #4]
 80047ce:	ed97 0a02 	vldr	s0, [r7, #8]
 80047d2:	483f      	ldr	r0, [pc, #252]	@ (80048d0 <Gait_controller+0x134c>)
 80047d4:	f7fe fd30 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,-x_setpoint,-y_setpoint,body_height - step_height, FR_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 80047d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80047dc:	eef1 6a67 	vneg.f32	s13, s15
 80047e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80047e4:	eeb1 6a67 	vneg.f32	s12, s15
 80047e8:	4b35      	ldr	r3, [pc, #212]	@ (80048c0 <Gait_controller+0x133c>)
 80047ea:	ed93 7a00 	vldr	s14, [r3]
 80047ee:	4b35      	ldr	r3, [pc, #212]	@ (80048c4 <Gait_controller+0x1340>)
 80047f0:	edd3 7a00 	vldr	s15, [r3]
 80047f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047f8:	4b33      	ldr	r3, [pc, #204]	@ (80048c8 <Gait_controller+0x1344>)
 80047fa:	edd3 5a00 	vldr	s11, [r3]
 80047fe:	4b32      	ldr	r3, [pc, #200]	@ (80048c8 <Gait_controller+0x1344>)
 8004800:	ed93 5a01 	vldr	s10, [r3, #4]
 8004804:	4b30      	ldr	r3, [pc, #192]	@ (80048c8 <Gait_controller+0x1344>)
 8004806:	edd3 7a02 	vldr	s15, [r3, #8]
 800480a:	eef1 7a67 	vneg.f32	s15, s15
 800480e:	eef0 2a67 	vmov.f32	s5, s15
 8004812:	eeb0 2a45 	vmov.f32	s4, s10
 8004816:	eef0 1a65 	vmov.f32	s3, s11
 800481a:	492e      	ldr	r1, [pc, #184]	@ (80048d4 <Gait_controller+0x1350>)
 800481c:	eeb0 1a47 	vmov.f32	s2, s14
 8004820:	eef0 0a46 	vmov.f32	s1, s12
 8004824:	eeb0 0a66 	vmov.f32	s0, s13
 8004828:	482b      	ldr	r0, [pc, #172]	@ (80048d8 <Gait_controller+0x1354>)
 800482a:	f7fe fd05 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,-x_setpoint,-y_setpoint,body_height - step_height, BL_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 800482e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004832:	eef1 6a67 	vneg.f32	s13, s15
 8004836:	edd7 7a01 	vldr	s15, [r7, #4]
 800483a:	eeb1 6a67 	vneg.f32	s12, s15
 800483e:	4b20      	ldr	r3, [pc, #128]	@ (80048c0 <Gait_controller+0x133c>)
 8004840:	ed93 7a00 	vldr	s14, [r3]
 8004844:	4b1f      	ldr	r3, [pc, #124]	@ (80048c4 <Gait_controller+0x1340>)
 8004846:	edd3 7a00 	vldr	s15, [r3]
 800484a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800484e:	4b1e      	ldr	r3, [pc, #120]	@ (80048c8 <Gait_controller+0x1344>)
 8004850:	edd3 5a00 	vldr	s11, [r3]
 8004854:	4b1c      	ldr	r3, [pc, #112]	@ (80048c8 <Gait_controller+0x1344>)
 8004856:	ed93 5a01 	vldr	s10, [r3, #4]
 800485a:	4b1b      	ldr	r3, [pc, #108]	@ (80048c8 <Gait_controller+0x1344>)
 800485c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004860:	eef1 7a67 	vneg.f32	s15, s15
 8004864:	eef0 2a67 	vmov.f32	s5, s15
 8004868:	eeb0 2a45 	vmov.f32	s4, s10
 800486c:	eef0 1a65 	vmov.f32	s3, s11
 8004870:	491a      	ldr	r1, [pc, #104]	@ (80048dc <Gait_controller+0x1358>)
 8004872:	eeb0 1a47 	vmov.f32	s2, s14
 8004876:	eef0 0a46 	vmov.f32	s1, s12
 800487a:	eeb0 0a66 	vmov.f32	s0, s13
 800487e:	4818      	ldr	r0, [pc, #96]	@ (80048e0 <Gait_controller+0x135c>)
 8004880:	f7fe fcda 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,x_setpoint,y_setpoint,body_height, BR_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004884:	4b0e      	ldr	r3, [pc, #56]	@ (80048c0 <Gait_controller+0x133c>)
 8004886:	edd3 7a00 	vldr	s15, [r3]
 800488a:	4b0f      	ldr	r3, [pc, #60]	@ (80048c8 <Gait_controller+0x1344>)
 800488c:	ed93 7a00 	vldr	s14, [r3]
 8004890:	4b0d      	ldr	r3, [pc, #52]	@ (80048c8 <Gait_controller+0x1344>)
 8004892:	edd3 6a01 	vldr	s13, [r3, #4]
 8004896:	4b0c      	ldr	r3, [pc, #48]	@ (80048c8 <Gait_controller+0x1344>)
 8004898:	ed93 6a02 	vldr	s12, [r3, #8]
 800489c:	eef0 2a46 	vmov.f32	s5, s12
 80048a0:	eeb0 2a66 	vmov.f32	s4, s13
 80048a4:	eef0 1a47 	vmov.f32	s3, s14
 80048a8:	490e      	ldr	r1, [pc, #56]	@ (80048e4 <Gait_controller+0x1360>)
 80048aa:	eeb0 1a67 	vmov.f32	s2, s15
 80048ae:	edd7 0a01 	vldr	s1, [r7, #4]
 80048b2:	ed97 0a02 	vldr	s0, [r7, #8]
 80048b6:	480c      	ldr	r0, [pc, #48]	@ (80048e8 <Gait_controller+0x1364>)
 80048b8:	f7fe fcbe 	bl	8003238 <load_leg_position>
			break;
 80048bc:	e1b9      	b.n	8004c32 <Gait_controller+0x16ae>
 80048be:	bf00      	nop
 80048c0:	2000009c 	.word	0x2000009c
 80048c4:	20000090 	.word	0x20000090
 80048c8:	200002a8 	.word	0x200002a8
 80048cc:	20000248 	.word	0x20000248
 80048d0:	20000000 	.word	0x20000000
 80048d4:	20000254 	.word	0x20000254
 80048d8:	2000000c 	.word	0x2000000c
 80048dc:	20000260 	.word	0x20000260
 80048e0:	20000018 	.word	0x20000018
 80048e4:	2000026c 	.word	0x2000026c
 80048e8:	20000024 	.word	0x20000024
		case 3:
			load_leg_position(FL_position,-x_setpoint,-y_setpoint,body_height, FL_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 80048ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80048f0:	eeb1 7a67 	vneg.f32	s14, s15
 80048f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80048f8:	eef1 6a67 	vneg.f32	s13, s15
 80048fc:	4bcf      	ldr	r3, [pc, #828]	@ (8004c3c <Gait_controller+0x16b8>)
 80048fe:	ed93 6a00 	vldr	s12, [r3]
 8004902:	4bcf      	ldr	r3, [pc, #828]	@ (8004c40 <Gait_controller+0x16bc>)
 8004904:	edd3 5a00 	vldr	s11, [r3]
 8004908:	4bcd      	ldr	r3, [pc, #820]	@ (8004c40 <Gait_controller+0x16bc>)
 800490a:	ed93 5a01 	vldr	s10, [r3, #4]
 800490e:	4bcc      	ldr	r3, [pc, #816]	@ (8004c40 <Gait_controller+0x16bc>)
 8004910:	edd3 7a02 	vldr	s15, [r3, #8]
 8004914:	eef1 7a67 	vneg.f32	s15, s15
 8004918:	eef0 2a67 	vmov.f32	s5, s15
 800491c:	eeb0 2a45 	vmov.f32	s4, s10
 8004920:	eef0 1a65 	vmov.f32	s3, s11
 8004924:	49c7      	ldr	r1, [pc, #796]	@ (8004c44 <Gait_controller+0x16c0>)
 8004926:	eeb0 1a46 	vmov.f32	s2, s12
 800492a:	eef0 0a66 	vmov.f32	s1, s13
 800492e:	eeb0 0a47 	vmov.f32	s0, s14
 8004932:	48c5      	ldr	r0, [pc, #788]	@ (8004c48 <Gait_controller+0x16c4>)
 8004934:	f7fe fc80 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,x_setpoint,y_setpoint,body_height - step_height, FR_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004938:	4bc0      	ldr	r3, [pc, #768]	@ (8004c3c <Gait_controller+0x16b8>)
 800493a:	ed93 7a00 	vldr	s14, [r3]
 800493e:	4bc3      	ldr	r3, [pc, #780]	@ (8004c4c <Gait_controller+0x16c8>)
 8004940:	edd3 7a00 	vldr	s15, [r3]
 8004944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004948:	4bbd      	ldr	r3, [pc, #756]	@ (8004c40 <Gait_controller+0x16bc>)
 800494a:	ed93 7a00 	vldr	s14, [r3]
 800494e:	4bbc      	ldr	r3, [pc, #752]	@ (8004c40 <Gait_controller+0x16bc>)
 8004950:	edd3 6a01 	vldr	s13, [r3, #4]
 8004954:	4bba      	ldr	r3, [pc, #744]	@ (8004c40 <Gait_controller+0x16bc>)
 8004956:	ed93 6a02 	vldr	s12, [r3, #8]
 800495a:	eef0 2a46 	vmov.f32	s5, s12
 800495e:	eeb0 2a66 	vmov.f32	s4, s13
 8004962:	eef0 1a47 	vmov.f32	s3, s14
 8004966:	49ba      	ldr	r1, [pc, #744]	@ (8004c50 <Gait_controller+0x16cc>)
 8004968:	eeb0 1a67 	vmov.f32	s2, s15
 800496c:	edd7 0a01 	vldr	s1, [r7, #4]
 8004970:	ed97 0a02 	vldr	s0, [r7, #8]
 8004974:	48b7      	ldr	r0, [pc, #732]	@ (8004c54 <Gait_controller+0x16d0>)
 8004976:	f7fe fc5f 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,x_setpoint,y_setpoint,body_height - step_height, BL_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 800497a:	4bb0      	ldr	r3, [pc, #704]	@ (8004c3c <Gait_controller+0x16b8>)
 800497c:	ed93 7a00 	vldr	s14, [r3]
 8004980:	4bb2      	ldr	r3, [pc, #712]	@ (8004c4c <Gait_controller+0x16c8>)
 8004982:	edd3 7a00 	vldr	s15, [r3]
 8004986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800498a:	4bad      	ldr	r3, [pc, #692]	@ (8004c40 <Gait_controller+0x16bc>)
 800498c:	ed93 7a00 	vldr	s14, [r3]
 8004990:	4bab      	ldr	r3, [pc, #684]	@ (8004c40 <Gait_controller+0x16bc>)
 8004992:	edd3 6a01 	vldr	s13, [r3, #4]
 8004996:	4baa      	ldr	r3, [pc, #680]	@ (8004c40 <Gait_controller+0x16bc>)
 8004998:	ed93 6a02 	vldr	s12, [r3, #8]
 800499c:	eef0 2a46 	vmov.f32	s5, s12
 80049a0:	eeb0 2a66 	vmov.f32	s4, s13
 80049a4:	eef0 1a47 	vmov.f32	s3, s14
 80049a8:	49ab      	ldr	r1, [pc, #684]	@ (8004c58 <Gait_controller+0x16d4>)
 80049aa:	eeb0 1a67 	vmov.f32	s2, s15
 80049ae:	edd7 0a01 	vldr	s1, [r7, #4]
 80049b2:	ed97 0a02 	vldr	s0, [r7, #8]
 80049b6:	48a9      	ldr	r0, [pc, #676]	@ (8004c5c <Gait_controller+0x16d8>)
 80049b8:	f7fe fc3e 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,-x_setpoint,-y_setpoint,body_height, BR_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 80049bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80049c0:	eeb1 7a67 	vneg.f32	s14, s15
 80049c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80049c8:	eef1 6a67 	vneg.f32	s13, s15
 80049cc:	4b9b      	ldr	r3, [pc, #620]	@ (8004c3c <Gait_controller+0x16b8>)
 80049ce:	ed93 6a00 	vldr	s12, [r3]
 80049d2:	4b9b      	ldr	r3, [pc, #620]	@ (8004c40 <Gait_controller+0x16bc>)
 80049d4:	edd3 5a00 	vldr	s11, [r3]
 80049d8:	4b99      	ldr	r3, [pc, #612]	@ (8004c40 <Gait_controller+0x16bc>)
 80049da:	ed93 5a01 	vldr	s10, [r3, #4]
 80049de:	4b98      	ldr	r3, [pc, #608]	@ (8004c40 <Gait_controller+0x16bc>)
 80049e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80049e4:	eef1 7a67 	vneg.f32	s15, s15
 80049e8:	eef0 2a67 	vmov.f32	s5, s15
 80049ec:	eeb0 2a45 	vmov.f32	s4, s10
 80049f0:	eef0 1a65 	vmov.f32	s3, s11
 80049f4:	499a      	ldr	r1, [pc, #616]	@ (8004c60 <Gait_controller+0x16dc>)
 80049f6:	eeb0 1a46 	vmov.f32	s2, s12
 80049fa:	eef0 0a66 	vmov.f32	s1, s13
 80049fe:	eeb0 0a47 	vmov.f32	s0, s14
 8004a02:	4898      	ldr	r0, [pc, #608]	@ (8004c64 <Gait_controller+0x16e0>)
 8004a04:	f7fe fc18 	bl	8003238 <load_leg_position>
			break;
 8004a08:	e113      	b.n	8004c32 <Gait_controller+0x16ae>
		case 4:
			load_leg_position(FL_position,-x_setpoint,-y_setpoint,body_height, FL_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 8004a0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a0e:	eeb1 7a67 	vneg.f32	s14, s15
 8004a12:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a16:	eef1 6a67 	vneg.f32	s13, s15
 8004a1a:	4b88      	ldr	r3, [pc, #544]	@ (8004c3c <Gait_controller+0x16b8>)
 8004a1c:	ed93 6a00 	vldr	s12, [r3]
 8004a20:	4b87      	ldr	r3, [pc, #540]	@ (8004c40 <Gait_controller+0x16bc>)
 8004a22:	edd3 5a00 	vldr	s11, [r3]
 8004a26:	4b86      	ldr	r3, [pc, #536]	@ (8004c40 <Gait_controller+0x16bc>)
 8004a28:	ed93 5a01 	vldr	s10, [r3, #4]
 8004a2c:	4b84      	ldr	r3, [pc, #528]	@ (8004c40 <Gait_controller+0x16bc>)
 8004a2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a32:	eef1 7a67 	vneg.f32	s15, s15
 8004a36:	eef0 2a67 	vmov.f32	s5, s15
 8004a3a:	eeb0 2a45 	vmov.f32	s4, s10
 8004a3e:	eef0 1a65 	vmov.f32	s3, s11
 8004a42:	4980      	ldr	r1, [pc, #512]	@ (8004c44 <Gait_controller+0x16c0>)
 8004a44:	eeb0 1a46 	vmov.f32	s2, s12
 8004a48:	eef0 0a66 	vmov.f32	s1, s13
 8004a4c:	eeb0 0a47 	vmov.f32	s0, s14
 8004a50:	487d      	ldr	r0, [pc, #500]	@ (8004c48 <Gait_controller+0x16c4>)
 8004a52:	f7fe fbf1 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,x_setpoint,y_setpoint,body_height, FR_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004a56:	4b79      	ldr	r3, [pc, #484]	@ (8004c3c <Gait_controller+0x16b8>)
 8004a58:	edd3 7a00 	vldr	s15, [r3]
 8004a5c:	4b78      	ldr	r3, [pc, #480]	@ (8004c40 <Gait_controller+0x16bc>)
 8004a5e:	ed93 7a00 	vldr	s14, [r3]
 8004a62:	4b77      	ldr	r3, [pc, #476]	@ (8004c40 <Gait_controller+0x16bc>)
 8004a64:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a68:	4b75      	ldr	r3, [pc, #468]	@ (8004c40 <Gait_controller+0x16bc>)
 8004a6a:	ed93 6a02 	vldr	s12, [r3, #8]
 8004a6e:	eef0 2a46 	vmov.f32	s5, s12
 8004a72:	eeb0 2a66 	vmov.f32	s4, s13
 8004a76:	eef0 1a47 	vmov.f32	s3, s14
 8004a7a:	4975      	ldr	r1, [pc, #468]	@ (8004c50 <Gait_controller+0x16cc>)
 8004a7c:	eeb0 1a67 	vmov.f32	s2, s15
 8004a80:	edd7 0a01 	vldr	s1, [r7, #4]
 8004a84:	ed97 0a02 	vldr	s0, [r7, #8]
 8004a88:	4872      	ldr	r0, [pc, #456]	@ (8004c54 <Gait_controller+0x16d0>)
 8004a8a:	f7fe fbd5 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,x_setpoint,y_setpoint,body_height, BL_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004a8e:	4b6b      	ldr	r3, [pc, #428]	@ (8004c3c <Gait_controller+0x16b8>)
 8004a90:	edd3 7a00 	vldr	s15, [r3]
 8004a94:	4b6a      	ldr	r3, [pc, #424]	@ (8004c40 <Gait_controller+0x16bc>)
 8004a96:	ed93 7a00 	vldr	s14, [r3]
 8004a9a:	4b69      	ldr	r3, [pc, #420]	@ (8004c40 <Gait_controller+0x16bc>)
 8004a9c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004aa0:	4b67      	ldr	r3, [pc, #412]	@ (8004c40 <Gait_controller+0x16bc>)
 8004aa2:	ed93 6a02 	vldr	s12, [r3, #8]
 8004aa6:	eef0 2a46 	vmov.f32	s5, s12
 8004aaa:	eeb0 2a66 	vmov.f32	s4, s13
 8004aae:	eef0 1a47 	vmov.f32	s3, s14
 8004ab2:	4969      	ldr	r1, [pc, #420]	@ (8004c58 <Gait_controller+0x16d4>)
 8004ab4:	eeb0 1a67 	vmov.f32	s2, s15
 8004ab8:	edd7 0a01 	vldr	s1, [r7, #4]
 8004abc:	ed97 0a02 	vldr	s0, [r7, #8]
 8004ac0:	4866      	ldr	r0, [pc, #408]	@ (8004c5c <Gait_controller+0x16d8>)
 8004ac2:	f7fe fbb9 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,-x_setpoint,-y_setpoint,body_height, BR_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 8004ac6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004aca:	eeb1 7a67 	vneg.f32	s14, s15
 8004ace:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ad2:	eef1 6a67 	vneg.f32	s13, s15
 8004ad6:	4b59      	ldr	r3, [pc, #356]	@ (8004c3c <Gait_controller+0x16b8>)
 8004ad8:	ed93 6a00 	vldr	s12, [r3]
 8004adc:	4b58      	ldr	r3, [pc, #352]	@ (8004c40 <Gait_controller+0x16bc>)
 8004ade:	edd3 5a00 	vldr	s11, [r3]
 8004ae2:	4b57      	ldr	r3, [pc, #348]	@ (8004c40 <Gait_controller+0x16bc>)
 8004ae4:	ed93 5a01 	vldr	s10, [r3, #4]
 8004ae8:	4b55      	ldr	r3, [pc, #340]	@ (8004c40 <Gait_controller+0x16bc>)
 8004aea:	edd3 7a02 	vldr	s15, [r3, #8]
 8004aee:	eef1 7a67 	vneg.f32	s15, s15
 8004af2:	eef0 2a67 	vmov.f32	s5, s15
 8004af6:	eeb0 2a45 	vmov.f32	s4, s10
 8004afa:	eef0 1a65 	vmov.f32	s3, s11
 8004afe:	4958      	ldr	r1, [pc, #352]	@ (8004c60 <Gait_controller+0x16dc>)
 8004b00:	eeb0 1a46 	vmov.f32	s2, s12
 8004b04:	eef0 0a66 	vmov.f32	s1, s13
 8004b08:	eeb0 0a47 	vmov.f32	s0, s14
 8004b0c:	4855      	ldr	r0, [pc, #340]	@ (8004c64 <Gait_controller+0x16e0>)
 8004b0e:	f7fe fb93 	bl	8003238 <load_leg_position>
			break;
 8004b12:	e08e      	b.n	8004c32 <Gait_controller+0x16ae>
		case 5:
			load_leg_position(FL_position,-x_setpoint,-y_setpoint,body_height - step_height, FL_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 8004b14:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b18:	eef1 6a67 	vneg.f32	s13, s15
 8004b1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b20:	eeb1 6a67 	vneg.f32	s12, s15
 8004b24:	4b45      	ldr	r3, [pc, #276]	@ (8004c3c <Gait_controller+0x16b8>)
 8004b26:	ed93 7a00 	vldr	s14, [r3]
 8004b2a:	4b48      	ldr	r3, [pc, #288]	@ (8004c4c <Gait_controller+0x16c8>)
 8004b2c:	edd3 7a00 	vldr	s15, [r3]
 8004b30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b34:	4b42      	ldr	r3, [pc, #264]	@ (8004c40 <Gait_controller+0x16bc>)
 8004b36:	edd3 5a00 	vldr	s11, [r3]
 8004b3a:	4b41      	ldr	r3, [pc, #260]	@ (8004c40 <Gait_controller+0x16bc>)
 8004b3c:	ed93 5a01 	vldr	s10, [r3, #4]
 8004b40:	4b3f      	ldr	r3, [pc, #252]	@ (8004c40 <Gait_controller+0x16bc>)
 8004b42:	edd3 7a02 	vldr	s15, [r3, #8]
 8004b46:	eef1 7a67 	vneg.f32	s15, s15
 8004b4a:	eef0 2a67 	vmov.f32	s5, s15
 8004b4e:	eeb0 2a45 	vmov.f32	s4, s10
 8004b52:	eef0 1a65 	vmov.f32	s3, s11
 8004b56:	493b      	ldr	r1, [pc, #236]	@ (8004c44 <Gait_controller+0x16c0>)
 8004b58:	eeb0 1a47 	vmov.f32	s2, s14
 8004b5c:	eef0 0a46 	vmov.f32	s1, s12
 8004b60:	eeb0 0a66 	vmov.f32	s0, s13
 8004b64:	4838      	ldr	r0, [pc, #224]	@ (8004c48 <Gait_controller+0x16c4>)
 8004b66:	f7fe fb67 	bl	8003238 <load_leg_position>
			load_leg_position(FR_position,x_setpoint,y_setpoint,body_height, FR_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004b6a:	4b34      	ldr	r3, [pc, #208]	@ (8004c3c <Gait_controller+0x16b8>)
 8004b6c:	edd3 7a00 	vldr	s15, [r3]
 8004b70:	4b33      	ldr	r3, [pc, #204]	@ (8004c40 <Gait_controller+0x16bc>)
 8004b72:	ed93 7a00 	vldr	s14, [r3]
 8004b76:	4b32      	ldr	r3, [pc, #200]	@ (8004c40 <Gait_controller+0x16bc>)
 8004b78:	edd3 6a01 	vldr	s13, [r3, #4]
 8004b7c:	4b30      	ldr	r3, [pc, #192]	@ (8004c40 <Gait_controller+0x16bc>)
 8004b7e:	ed93 6a02 	vldr	s12, [r3, #8]
 8004b82:	eef0 2a46 	vmov.f32	s5, s12
 8004b86:	eeb0 2a66 	vmov.f32	s4, s13
 8004b8a:	eef0 1a47 	vmov.f32	s3, s14
 8004b8e:	4930      	ldr	r1, [pc, #192]	@ (8004c50 <Gait_controller+0x16cc>)
 8004b90:	eeb0 1a67 	vmov.f32	s2, s15
 8004b94:	edd7 0a01 	vldr	s1, [r7, #4]
 8004b98:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b9c:	482d      	ldr	r0, [pc, #180]	@ (8004c54 <Gait_controller+0x16d0>)
 8004b9e:	f7fe fb4b 	bl	8003238 <load_leg_position>
			load_leg_position(BL_position,x_setpoint,y_setpoint,body_height, BL_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004ba2:	4b26      	ldr	r3, [pc, #152]	@ (8004c3c <Gait_controller+0x16b8>)
 8004ba4:	edd3 7a00 	vldr	s15, [r3]
 8004ba8:	4b25      	ldr	r3, [pc, #148]	@ (8004c40 <Gait_controller+0x16bc>)
 8004baa:	ed93 7a00 	vldr	s14, [r3]
 8004bae:	4b24      	ldr	r3, [pc, #144]	@ (8004c40 <Gait_controller+0x16bc>)
 8004bb0:	edd3 6a01 	vldr	s13, [r3, #4]
 8004bb4:	4b22      	ldr	r3, [pc, #136]	@ (8004c40 <Gait_controller+0x16bc>)
 8004bb6:	ed93 6a02 	vldr	s12, [r3, #8]
 8004bba:	eef0 2a46 	vmov.f32	s5, s12
 8004bbe:	eeb0 2a66 	vmov.f32	s4, s13
 8004bc2:	eef0 1a47 	vmov.f32	s3, s14
 8004bc6:	4924      	ldr	r1, [pc, #144]	@ (8004c58 <Gait_controller+0x16d4>)
 8004bc8:	eeb0 1a67 	vmov.f32	s2, s15
 8004bcc:	edd7 0a01 	vldr	s1, [r7, #4]
 8004bd0:	ed97 0a02 	vldr	s0, [r7, #8]
 8004bd4:	4821      	ldr	r0, [pc, #132]	@ (8004c5c <Gait_controller+0x16d8>)
 8004bd6:	f7fe fb2f 	bl	8003238 <load_leg_position>
			load_leg_position(BR_position,-x_setpoint,-y_setpoint,body_height - step_height, BR_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 8004bda:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bde:	eef1 6a67 	vneg.f32	s13, s15
 8004be2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004be6:	eeb1 6a67 	vneg.f32	s12, s15
 8004bea:	4b14      	ldr	r3, [pc, #80]	@ (8004c3c <Gait_controller+0x16b8>)
 8004bec:	ed93 7a00 	vldr	s14, [r3]
 8004bf0:	4b16      	ldr	r3, [pc, #88]	@ (8004c4c <Gait_controller+0x16c8>)
 8004bf2:	edd3 7a00 	vldr	s15, [r3]
 8004bf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bfa:	4b11      	ldr	r3, [pc, #68]	@ (8004c40 <Gait_controller+0x16bc>)
 8004bfc:	edd3 5a00 	vldr	s11, [r3]
 8004c00:	4b0f      	ldr	r3, [pc, #60]	@ (8004c40 <Gait_controller+0x16bc>)
 8004c02:	ed93 5a01 	vldr	s10, [r3, #4]
 8004c06:	4b0e      	ldr	r3, [pc, #56]	@ (8004c40 <Gait_controller+0x16bc>)
 8004c08:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c0c:	eef1 7a67 	vneg.f32	s15, s15
 8004c10:	eef0 2a67 	vmov.f32	s5, s15
 8004c14:	eeb0 2a45 	vmov.f32	s4, s10
 8004c18:	eef0 1a65 	vmov.f32	s3, s11
 8004c1c:	4910      	ldr	r1, [pc, #64]	@ (8004c60 <Gait_controller+0x16dc>)
 8004c1e:	eeb0 1a47 	vmov.f32	s2, s14
 8004c22:	eef0 0a46 	vmov.f32	s1, s12
 8004c26:	eeb0 0a66 	vmov.f32	s0, s13
 8004c2a:	480e      	ldr	r0, [pc, #56]	@ (8004c64 <Gait_controller+0x16e0>)
 8004c2c:	f7fe fb04 	bl	8003238 <load_leg_position>
			break;
 8004c30:	bf00      	nop
//			load_leg_position(BR_position,-x_setpoint,-y_setpoint,body_height - step_height, BR_body_angles, 0, 0, 0);
//			break;
//		}
//	}

}
 8004c32:	bf00      	nop
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	2000009c 	.word	0x2000009c
 8004c40:	200002a8 	.word	0x200002a8
 8004c44:	20000248 	.word	0x20000248
 8004c48:	20000000 	.word	0x20000000
 8004c4c:	20000090 	.word	0x20000090
 8004c50:	20000254 	.word	0x20000254
 8004c54:	2000000c 	.word	0x2000000c
 8004c58:	20000260 	.word	0x20000260
 8004c5c:	20000018 	.word	0x20000018
 8004c60:	2000026c 	.word	0x2000026c
 8004c64:	20000024 	.word	0x20000024

08004c68 <angle_to_pulse>:

int angle_to_pulse(float angle){
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	ed87 0a01 	vstr	s0, [r7, #4]
	int pulse;

	pulse = (uint16_t)(angle * 90.7549) + 115;
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fb fc18 	bl	80004a8 <__aeabi_f2d>
 8004c78:	a30f      	add	r3, pc, #60	@ (adr r3, 8004cb8 <angle_to_pulse+0x50>)
 8004c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7e:	f7fb fc6b 	bl	8000558 <__aeabi_dmul>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4610      	mov	r0, r2
 8004c88:	4619      	mov	r1, r3
 8004c8a:	f7fb ff3d 	bl	8000b08 <__aeabi_d2uiz>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3373      	adds	r3, #115	@ 0x73
 8004c94:	60fb      	str	r3, [r7, #12]

	if (pulse > 535) pulse = 535;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8004c9c:	db02      	blt.n	8004ca4 <angle_to_pulse+0x3c>
 8004c9e:	f240 2317 	movw	r3, #535	@ 0x217
 8004ca2:	60fb      	str	r3, [r7, #12]
	if (pulse < 115) pulse = 115;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b72      	cmp	r3, #114	@ 0x72
 8004ca8:	dc01      	bgt.n	8004cae <angle_to_pulse+0x46>
 8004caa:	2373      	movs	r3, #115	@ 0x73
 8004cac:	60fb      	str	r3, [r7, #12]

	return pulse;
 8004cae:	68fb      	ldr	r3, [r7, #12]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	4816f007 	.word	0x4816f007
 8004cbc:	4056b050 	.word	0x4056b050

08004cc0 <Rise>:
/* USER CODE END Application */

void Rise(){
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0

	float position = 0.03;
 8004cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d30 <Rise+0x70>)
 8004cc8:	607b      	str	r3, [r7, #4]
	for ( int j = 0; j < 100; j++){
 8004cca:	2300      	movs	r3, #0
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	e021      	b.n	8004d14 <Rise+0x54>
		position += 0.0013;
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7fb fbe9 	bl	80004a8 <__aeabi_f2d>
 8004cd6:	a314      	add	r3, pc, #80	@ (adr r3, 8004d28 <Rise+0x68>)
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	f7fb fa86 	bl	80001ec <__adddf3>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4610      	mov	r0, r2
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	f7fb ff2e 	bl	8000b48 <__aeabi_d2f>
 8004cec:	4603      	mov	r3, r0
 8004cee:	607b      	str	r3, [r7, #4]
		FL_position[2] = position;
 8004cf0:	4a10      	ldr	r2, [pc, #64]	@ (8004d34 <Rise+0x74>)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6093      	str	r3, [r2, #8]
		FR_position[2] = position;
 8004cf6:	4a10      	ldr	r2, [pc, #64]	@ (8004d38 <Rise+0x78>)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6093      	str	r3, [r2, #8]
		BL_position[2] = position;
 8004cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8004d3c <Rise+0x7c>)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6093      	str	r3, [r2, #8]
		BR_position[2] = position;
 8004d02:	4a0f      	ldr	r2, [pc, #60]	@ (8004d40 <Rise+0x80>)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6093      	str	r3, [r2, #8]
		HAL_Delay(10);
 8004d08:	200a      	movs	r0, #10
 8004d0a:	f000 fc8f 	bl	800562c <HAL_Delay>
	for ( int j = 0; j < 100; j++){
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	3301      	adds	r3, #1
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b63      	cmp	r3, #99	@ 0x63
 8004d18:	ddda      	ble.n	8004cd0 <Rise+0x10>
	}
}
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	f3af 8000 	nop.w
 8004d28:	5f06f694 	.word	0x5f06f694
 8004d2c:	3f554c98 	.word	0x3f554c98
 8004d30:	3cf5c28f 	.word	0x3cf5c28f
 8004d34:	20000000 	.word	0x20000000
 8004d38:	2000000c 	.word	0x2000000c
 8004d3c:	20000018 	.word	0x20000018
 8004d40:	20000024 	.word	0x20000024

08004d44 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08a      	sub	sp, #40	@ 0x28
 8004d48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d4a:	f107 0314 	add.w	r3, r7, #20
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	605a      	str	r2, [r3, #4]
 8004d54:	609a      	str	r2, [r3, #8]
 8004d56:	60da      	str	r2, [r3, #12]
 8004d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	4b27      	ldr	r3, [pc, #156]	@ (8004dfc <MX_GPIO_Init+0xb8>)
 8004d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d62:	4a26      	ldr	r2, [pc, #152]	@ (8004dfc <MX_GPIO_Init+0xb8>)
 8004d64:	f043 0304 	orr.w	r3, r3, #4
 8004d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d6a:	4b24      	ldr	r3, [pc, #144]	@ (8004dfc <MX_GPIO_Init+0xb8>)
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6e:	f003 0304 	and.w	r3, r3, #4
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	4b20      	ldr	r3, [pc, #128]	@ (8004dfc <MX_GPIO_Init+0xb8>)
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7e:	4a1f      	ldr	r2, [pc, #124]	@ (8004dfc <MX_GPIO_Init+0xb8>)
 8004d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d86:	4b1d      	ldr	r3, [pc, #116]	@ (8004dfc <MX_GPIO_Init+0xb8>)
 8004d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	4b19      	ldr	r3, [pc, #100]	@ (8004dfc <MX_GPIO_Init+0xb8>)
 8004d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9a:	4a18      	ldr	r2, [pc, #96]	@ (8004dfc <MX_GPIO_Init+0xb8>)
 8004d9c:	f043 0302 	orr.w	r3, r3, #2
 8004da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004da2:	4b16      	ldr	r3, [pc, #88]	@ (8004dfc <MX_GPIO_Init+0xb8>)
 8004da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dae:	2300      	movs	r3, #0
 8004db0:	607b      	str	r3, [r7, #4]
 8004db2:	4b12      	ldr	r3, [pc, #72]	@ (8004dfc <MX_GPIO_Init+0xb8>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db6:	4a11      	ldr	r2, [pc, #68]	@ (8004dfc <MX_GPIO_Init+0xb8>)
 8004db8:	f043 0301 	orr.w	r3, r3, #1
 8004dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8004dfc <MX_GPIO_Init+0xb8>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	607b      	str	r3, [r7, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004dd0:	480b      	ldr	r0, [pc, #44]	@ (8004e00 <MX_GPIO_Init+0xbc>)
 8004dd2:	f000 ff77 	bl	8005cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8004dd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004de4:	2300      	movs	r3, #0
 8004de6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8004de8:	f107 0314 	add.w	r3, r7, #20
 8004dec:	4619      	mov	r1, r3
 8004dee:	4804      	ldr	r0, [pc, #16]	@ (8004e00 <MX_GPIO_Init+0xbc>)
 8004df0:	f000 fde4 	bl	80059bc <HAL_GPIO_Init>

}
 8004df4:	bf00      	nop
 8004df6:	3728      	adds	r7, #40	@ 0x28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	40020800 	.word	0x40020800

08004e04 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004e08:	4b12      	ldr	r3, [pc, #72]	@ (8004e54 <MX_I2C1_Init+0x50>)
 8004e0a:	4a13      	ldr	r2, [pc, #76]	@ (8004e58 <MX_I2C1_Init+0x54>)
 8004e0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004e0e:	4b11      	ldr	r3, [pc, #68]	@ (8004e54 <MX_I2C1_Init+0x50>)
 8004e10:	4a12      	ldr	r2, [pc, #72]	@ (8004e5c <MX_I2C1_Init+0x58>)
 8004e12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004e14:	4b0f      	ldr	r3, [pc, #60]	@ (8004e54 <MX_I2C1_Init+0x50>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e54 <MX_I2C1_Init+0x50>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e20:	4b0c      	ldr	r3, [pc, #48]	@ (8004e54 <MX_I2C1_Init+0x50>)
 8004e22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e28:	4b0a      	ldr	r3, [pc, #40]	@ (8004e54 <MX_I2C1_Init+0x50>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004e2e:	4b09      	ldr	r3, [pc, #36]	@ (8004e54 <MX_I2C1_Init+0x50>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e34:	4b07      	ldr	r3, [pc, #28]	@ (8004e54 <MX_I2C1_Init+0x50>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e3a:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <MX_I2C1_Init+0x50>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004e40:	4804      	ldr	r0, [pc, #16]	@ (8004e54 <MX_I2C1_Init+0x50>)
 8004e42:	f000 ff59 	bl	8005cf8 <HAL_I2C_Init>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004e4c:	f000 f94e 	bl	80050ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004e50:	bf00      	nop
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	20000328 	.word	0x20000328
 8004e58:	40005400 	.word	0x40005400
 8004e5c:	000186a0 	.word	0x000186a0

08004e60 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004e64:	4b12      	ldr	r3, [pc, #72]	@ (8004eb0 <MX_I2C2_Init+0x50>)
 8004e66:	4a13      	ldr	r2, [pc, #76]	@ (8004eb4 <MX_I2C2_Init+0x54>)
 8004e68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004e6a:	4b11      	ldr	r3, [pc, #68]	@ (8004eb0 <MX_I2C2_Init+0x50>)
 8004e6c:	4a12      	ldr	r2, [pc, #72]	@ (8004eb8 <MX_I2C2_Init+0x58>)
 8004e6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004e70:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb0 <MX_I2C2_Init+0x50>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004e76:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb0 <MX_I2C2_Init+0x50>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb0 <MX_I2C2_Init+0x50>)
 8004e7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e84:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb0 <MX_I2C2_Init+0x50>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004e8a:	4b09      	ldr	r3, [pc, #36]	@ (8004eb0 <MX_I2C2_Init+0x50>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e90:	4b07      	ldr	r3, [pc, #28]	@ (8004eb0 <MX_I2C2_Init+0x50>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e96:	4b06      	ldr	r3, [pc, #24]	@ (8004eb0 <MX_I2C2_Init+0x50>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004e9c:	4804      	ldr	r0, [pc, #16]	@ (8004eb0 <MX_I2C2_Init+0x50>)
 8004e9e:	f000 ff2b 	bl	8005cf8 <HAL_I2C_Init>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004ea8:	f000 f920 	bl	80050ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004eac:	bf00      	nop
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	2000037c 	.word	0x2000037c
 8004eb4:	40005800 	.word	0x40005800
 8004eb8:	000186a0 	.word	0x000186a0

08004ebc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08c      	sub	sp, #48	@ 0x30
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec4:	f107 031c 	add.w	r3, r7, #28
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	609a      	str	r2, [r3, #8]
 8004ed0:	60da      	str	r2, [r3, #12]
 8004ed2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a3a      	ldr	r2, [pc, #232]	@ (8004fc4 <HAL_I2C_MspInit+0x108>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d12c      	bne.n	8004f38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	4b39      	ldr	r3, [pc, #228]	@ (8004fc8 <HAL_I2C_MspInit+0x10c>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee6:	4a38      	ldr	r2, [pc, #224]	@ (8004fc8 <HAL_I2C_MspInit+0x10c>)
 8004ee8:	f043 0302 	orr.w	r3, r3, #2
 8004eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8004eee:	4b36      	ldr	r3, [pc, #216]	@ (8004fc8 <HAL_I2C_MspInit+0x10c>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004efa:	23c0      	movs	r3, #192	@ 0xc0
 8004efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004efe:	2312      	movs	r3, #18
 8004f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f06:	2303      	movs	r3, #3
 8004f08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f0a:	2304      	movs	r3, #4
 8004f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f0e:	f107 031c 	add.w	r3, r7, #28
 8004f12:	4619      	mov	r1, r3
 8004f14:	482d      	ldr	r0, [pc, #180]	@ (8004fcc <HAL_I2C_MspInit+0x110>)
 8004f16:	f000 fd51 	bl	80059bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc8 <HAL_I2C_MspInit+0x10c>)
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	4a29      	ldr	r2, [pc, #164]	@ (8004fc8 <HAL_I2C_MspInit+0x10c>)
 8004f24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f2a:	4b27      	ldr	r3, [pc, #156]	@ (8004fc8 <HAL_I2C_MspInit+0x10c>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004f36:	e041      	b.n	8004fbc <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a24      	ldr	r2, [pc, #144]	@ (8004fd0 <HAL_I2C_MspInit+0x114>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d13c      	bne.n	8004fbc <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f42:	2300      	movs	r3, #0
 8004f44:	613b      	str	r3, [r7, #16]
 8004f46:	4b20      	ldr	r3, [pc, #128]	@ (8004fc8 <HAL_I2C_MspInit+0x10c>)
 8004f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8004fc8 <HAL_I2C_MspInit+0x10c>)
 8004f4c:	f043 0302 	orr.w	r3, r3, #2
 8004f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f52:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc8 <HAL_I2C_MspInit+0x10c>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f64:	2312      	movs	r3, #18
 8004f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004f70:	2304      	movs	r3, #4
 8004f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f74:	f107 031c 	add.w	r3, r7, #28
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4814      	ldr	r0, [pc, #80]	@ (8004fcc <HAL_I2C_MspInit+0x110>)
 8004f7c:	f000 fd1e 	bl	80059bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004f80:	2308      	movs	r3, #8
 8004f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f84:	2312      	movs	r3, #18
 8004f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8004f90:	2309      	movs	r3, #9
 8004f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f94:	f107 031c 	add.w	r3, r7, #28
 8004f98:	4619      	mov	r1, r3
 8004f9a:	480c      	ldr	r0, [pc, #48]	@ (8004fcc <HAL_I2C_MspInit+0x110>)
 8004f9c:	f000 fd0e 	bl	80059bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	4b08      	ldr	r3, [pc, #32]	@ (8004fc8 <HAL_I2C_MspInit+0x10c>)
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa8:	4a07      	ldr	r2, [pc, #28]	@ (8004fc8 <HAL_I2C_MspInit+0x10c>)
 8004faa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fae:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fb0:	4b05      	ldr	r3, [pc, #20]	@ (8004fc8 <HAL_I2C_MspInit+0x10c>)
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	68fb      	ldr	r3, [r7, #12]
}
 8004fbc:	bf00      	nop
 8004fbe:	3730      	adds	r7, #48	@ 0x30
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40005400 	.word	0x40005400
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	40020400 	.word	0x40020400
 8004fd0:	40005800 	.word	0x40005800

08004fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004fd8:	f000 fab6 	bl	8005548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004fdc:	f000 f812 	bl	8005004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004fe0:	f7ff feb0 	bl	8004d44 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004fe4:	f7ff ff0e 	bl	8004e04 <MX_I2C1_Init>
  MX_I2C2_Init();
 8004fe8:	f7ff ff3a 	bl	8004e60 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8004fec:	f000 fa10 	bl	8005410 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8004ff0:	f000 f870 	bl	80050d4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004ff4:	f003 ff24 	bl	8008e40 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8004ff8:	f7fc fb78 	bl	80016ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004ffc:	f003 ff44 	bl	8008e88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005000:	bf00      	nop
 8005002:	e7fd      	b.n	8005000 <main+0x2c>

08005004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b094      	sub	sp, #80	@ 0x50
 8005008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800500a:	f107 0320 	add.w	r3, r7, #32
 800500e:	2230      	movs	r2, #48	@ 0x30
 8005010:	2100      	movs	r1, #0
 8005012:	4618      	mov	r0, r3
 8005014:	f006 fcf8 	bl	800ba08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005018:	f107 030c 	add.w	r3, r7, #12
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	605a      	str	r2, [r3, #4]
 8005022:	609a      	str	r2, [r3, #8]
 8005024:	60da      	str	r2, [r3, #12]
 8005026:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005028:	2300      	movs	r3, #0
 800502a:	60bb      	str	r3, [r7, #8]
 800502c:	4b27      	ldr	r3, [pc, #156]	@ (80050cc <SystemClock_Config+0xc8>)
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	4a26      	ldr	r2, [pc, #152]	@ (80050cc <SystemClock_Config+0xc8>)
 8005032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005036:	6413      	str	r3, [r2, #64]	@ 0x40
 8005038:	4b24      	ldr	r3, [pc, #144]	@ (80050cc <SystemClock_Config+0xc8>)
 800503a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005040:	60bb      	str	r3, [r7, #8]
 8005042:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005044:	2300      	movs	r3, #0
 8005046:	607b      	str	r3, [r7, #4]
 8005048:	4b21      	ldr	r3, [pc, #132]	@ (80050d0 <SystemClock_Config+0xcc>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a20      	ldr	r2, [pc, #128]	@ (80050d0 <SystemClock_Config+0xcc>)
 800504e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	4b1e      	ldr	r3, [pc, #120]	@ (80050d0 <SystemClock_Config+0xcc>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800505c:	607b      	str	r3, [r7, #4]
 800505e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005060:	2301      	movs	r3, #1
 8005062:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005064:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005068:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800506a:	2302      	movs	r3, #2
 800506c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800506e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005072:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8005074:	2310      	movs	r3, #16
 8005076:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8005078:	2380      	movs	r3, #128	@ 0x80
 800507a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800507c:	2302      	movs	r3, #2
 800507e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005080:	2304      	movs	r3, #4
 8005082:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005084:	f107 0320 	add.w	r3, r7, #32
 8005088:	4618      	mov	r0, r3
 800508a:	f002 fad9 	bl	8007640 <HAL_RCC_OscConfig>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005094:	f000 f82a 	bl	80050ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005098:	230f      	movs	r3, #15
 800509a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800509c:	2302      	movs	r3, #2
 800509e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80050a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80050a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80050ae:	f107 030c 	add.w	r3, r7, #12
 80050b2:	2103      	movs	r1, #3
 80050b4:	4618      	mov	r0, r3
 80050b6:	f002 fd3b 	bl	8007b30 <HAL_RCC_ClockConfig>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80050c0:	f000 f814 	bl	80050ec <Error_Handler>
  }
}
 80050c4:	bf00      	nop
 80050c6:	3750      	adds	r7, #80	@ 0x50
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40023800 	.word	0x40023800
 80050d0:	40007000 	.word	0x40007000

080050d4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80050d8:	2200      	movs	r2, #0
 80050da:	2105      	movs	r1, #5
 80050dc:	2025      	movs	r0, #37	@ 0x25
 80050de:	f000 fba4 	bl	800582a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050e2:	2025      	movs	r0, #37	@ 0x25
 80050e4:	f000 fbbd 	bl	8005862 <HAL_NVIC_EnableIRQ>
}
 80050e8:	bf00      	nop
 80050ea:	bd80      	pop	{r7, pc}

080050ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80050f0:	b672      	cpsid	i
}
 80050f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <Error_Handler+0x8>

080050f8 <SPIDInit>:
#include "spid.h"

void SPIDInit(SPID_t* SPIDX, float* error, float *output, float sample_time,float saturation,float intgerator_max,
		float KP, float KI, float KD, float KE, float KU){
 80050f8:	b480      	push	{r7}
 80050fa:	b08d      	sub	sp, #52	@ 0x34
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8005100:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005102:	627a      	str	r2, [r7, #36]	@ 0x24
 8005104:	ed87 0a08 	vstr	s0, [r7, #32]
 8005108:	edc7 0a07 	vstr	s1, [r7, #28]
 800510c:	ed87 1a06 	vstr	s2, [r7, #24]
 8005110:	edc7 1a05 	vstr	s3, [r7, #20]
 8005114:	ed87 2a04 	vstr	s4, [r7, #16]
 8005118:	edc7 2a03 	vstr	s5, [r7, #12]
 800511c:	ed87 3a02 	vstr	s6, [r7, #8]
 8005120:	edc7 3a01 	vstr	s7, [r7, #4]

	SPIDX->saturation = saturation;
 8005124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	625a      	str	r2, [r3, #36]	@ 0x24
	SPIDX->integ_max = intgerator_max;
 800512a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	629a      	str	r2, [r3, #40]	@ 0x28
	SPIDX->sample_time = sample_time;
 8005130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005132:	6a3a      	ldr	r2, [r7, #32]
 8005134:	609a      	str	r2, [r3, #8]
	SPIDX->KP = KP;
 8005136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	619a      	str	r2, [r3, #24]
	SPIDX->KI = KI;
 800513c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	61da      	str	r2, [r3, #28]
	SPIDX->KD = KD;
 8005142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	621a      	str	r2, [r3, #32]
	SPIDX->KE = KE;
 8005148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	62da      	str	r2, [r3, #44]	@ 0x2c
	SPIDX->KU = KU;
 800514e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	631a      	str	r2, [r3, #48]	@ 0x30

	SPIDX->error_source = error;
 8005154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005156:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005158:	601a      	str	r2, [r3, #0]
	SPIDX->integrator = 0.0;
 800515a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	611a      	str	r2, [r3, #16]
	SPIDX->diffrentiator= 0.0;
 8005162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	615a      	str	r2, [r3, #20]
	SPIDX->prev_error = 0.0;
 800516a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	605a      	str	r2, [r3, #4]
	SPIDX->output = output;
 8005172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005176:	60da      	str	r2, [r3, #12]


}
 8005178:	bf00      	nop
 800517a:	3734      	adds	r7, #52	@ 0x34
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <SPIDLoop>:


void SPIDLoop(SPID_t* SPIDX){
 8005184:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005188:	b086      	sub	sp, #24
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]

	float error = *(SPIDX->error_source) * SPIDX->KE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	ed93 7a00 	vldr	s14, [r3]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800519c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a0:	edc7 7a04 	vstr	s15, [r7, #16]


	SPIDX->integrator += ((error + SPIDX->prev_error) * 0.5  * (SPIDX->sample_time)) * SPIDX->KI;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fb f97d 	bl	80004a8 <__aeabi_f2d>
 80051ae:	4604      	mov	r4, r0
 80051b0:	460d      	mov	r5, r1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80051b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80051bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051c0:	ee17 0a90 	vmov	r0, s15
 80051c4:	f7fb f970 	bl	80004a8 <__aeabi_f2d>
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	4b57      	ldr	r3, [pc, #348]	@ (800532c <SPIDLoop+0x1a8>)
 80051ce:	f7fb f9c3 	bl	8000558 <__aeabi_dmul>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4690      	mov	r8, r2
 80051d8:	4699      	mov	r9, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fb f962 	bl	80004a8 <__aeabi_f2d>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4640      	mov	r0, r8
 80051ea:	4649      	mov	r1, r9
 80051ec:	f7fb f9b4 	bl	8000558 <__aeabi_dmul>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4690      	mov	r8, r2
 80051f6:	4699      	mov	r9, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fb f953 	bl	80004a8 <__aeabi_f2d>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4640      	mov	r0, r8
 8005208:	4649      	mov	r1, r9
 800520a:	f7fb f9a5 	bl	8000558 <__aeabi_dmul>
 800520e:	4602      	mov	r2, r0
 8005210:	460b      	mov	r3, r1
 8005212:	4620      	mov	r0, r4
 8005214:	4629      	mov	r1, r5
 8005216:	f7fa ffe9 	bl	80001ec <__adddf3>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4610      	mov	r0, r2
 8005220:	4619      	mov	r1, r3
 8005222:	f7fb fc91 	bl	8000b48 <__aeabi_d2f>
 8005226:	4602      	mov	r2, r0
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	611a      	str	r2, [r3, #16]

	if(SPIDX->integrator > SPIDX->integ_max)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	ed93 7a04 	vldr	s14, [r3, #16]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800523c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005240:	dd03      	ble.n	800524a <SPIDLoop+0xc6>
		SPIDX->integrator = SPIDX->integ_max;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	611a      	str	r2, [r3, #16]
	if(SPIDX->integrator < -SPIDX->integ_max)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	ed93 7a04 	vldr	s14, [r3, #16]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005256:	eef1 7a67 	vneg.f32	s15, s15
 800525a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800525e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005262:	d507      	bpl.n	8005274 <SPIDLoop+0xf0>
		SPIDX->integrator = -SPIDX->integ_max;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800526a:	eef1 7a67 	vneg.f32	s15, s15
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	edc3 7a04 	vstr	s15, [r3, #16]


	//Dervative and Low pass Filter using Measurement to prevent Impulse when on set point change or other not smooth activites
	SPIDX->diffrentiator = SPIDX->KD * ((error - SPIDX->prev_error)/(SPIDX->sample_time));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	ed93 7a08 	vldr	s14, [r3, #32]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005280:	edd7 6a04 	vldr	s13, [r7, #16]
 8005284:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	edd3 6a02 	vldr	s13, [r3, #8]
 800528e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	edc3 7a05 	vstr	s15, [r3, #20]

	float PID = SPIDX->KP * error + SPIDX->integrator + SPIDX->diffrentiator;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	ed93 7a06 	vldr	s14, [r3, #24]
 80052a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80052a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80052b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80052ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052be:	edc7 7a05 	vstr	s15, [r7, #20]

	if(PID > SPIDX->saturation)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80052c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80052cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d4:	dd02      	ble.n	80052dc <SPIDLoop+0x158>
		PID = SPIDX->saturation;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	617b      	str	r3, [r7, #20]
	if(PID < -SPIDX->saturation)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80052e2:	eef1 7a67 	vneg.f32	s15, s15
 80052e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80052ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f2:	d506      	bpl.n	8005302 <SPIDLoop+0x17e>
		PID = -SPIDX->saturation;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80052fa:	eef1 7a67 	vneg.f32	s15, s15
 80052fe:	edc7 7a05 	vstr	s15, [r7, #20]

	SPIDX->prev_error = error;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	605a      	str	r2, [r3, #4]

	float output_buffer = (PID) * (SPIDX->KU);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800530e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005316:	edc7 7a03 	vstr	s15, [r7, #12]

	*(SPIDX->output) = output_buffer;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	601a      	str	r2, [r3, #0]

}
 8005322:	bf00      	nop
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800532c:	3fe00000 	.word	0x3fe00000

08005330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005336:	2300      	movs	r3, #0
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	4b12      	ldr	r3, [pc, #72]	@ (8005384 <HAL_MspInit+0x54>)
 800533c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800533e:	4a11      	ldr	r2, [pc, #68]	@ (8005384 <HAL_MspInit+0x54>)
 8005340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005344:	6453      	str	r3, [r2, #68]	@ 0x44
 8005346:	4b0f      	ldr	r3, [pc, #60]	@ (8005384 <HAL_MspInit+0x54>)
 8005348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800534e:	607b      	str	r3, [r7, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005352:	2300      	movs	r3, #0
 8005354:	603b      	str	r3, [r7, #0]
 8005356:	4b0b      	ldr	r3, [pc, #44]	@ (8005384 <HAL_MspInit+0x54>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	4a0a      	ldr	r2, [pc, #40]	@ (8005384 <HAL_MspInit+0x54>)
 800535c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005360:	6413      	str	r3, [r2, #64]	@ 0x40
 8005362:	4b08      	ldr	r3, [pc, #32]	@ (8005384 <HAL_MspInit+0x54>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800536e:	2200      	movs	r2, #0
 8005370:	210f      	movs	r1, #15
 8005372:	f06f 0001 	mvn.w	r0, #1
 8005376:	f000 fa58 	bl	800582a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800537a:	bf00      	nop
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40023800 	.word	0x40023800

08005388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800538c:	bf00      	nop
 800538e:	e7fd      	b.n	800538c <NMI_Handler+0x4>

08005390 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005394:	bf00      	nop
 8005396:	e7fd      	b.n	8005394 <HardFault_Handler+0x4>

08005398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005398:	b480      	push	{r7}
 800539a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800539c:	bf00      	nop
 800539e:	e7fd      	b.n	800539c <MemManage_Handler+0x4>

080053a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053a4:	bf00      	nop
 80053a6:	e7fd      	b.n	80053a4 <BusFault_Handler+0x4>

080053a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053ac:	bf00      	nop
 80053ae:	e7fd      	b.n	80053ac <UsageFault_Handler+0x4>

080053b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053b4:	bf00      	nop
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053c2:	f000 f913 	bl	80055ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80053c6:	f005 fa1b 	bl	800a800 <xTaskGetSchedulerState>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d001      	beq.n	80053d4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80053d0:	f006 f812 	bl	800b3f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053d4:	bf00      	nop
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80053dc:	4802      	ldr	r0, [pc, #8]	@ (80053e8 <USART1_IRQHandler+0x10>)
 80053de:	f002 fdfd 	bl	8007fdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80053e2:	bf00      	nop
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	200003d0 	.word	0x200003d0

080053ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053f0:	4b06      	ldr	r3, [pc, #24]	@ (800540c <SystemInit+0x20>)
 80053f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f6:	4a05      	ldr	r2, [pc, #20]	@ (800540c <SystemInit+0x20>)
 80053f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80053fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005400:	bf00      	nop
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	e000ed00 	.word	0xe000ed00

08005410 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005414:	4b11      	ldr	r3, [pc, #68]	@ (800545c <MX_USART1_UART_Init+0x4c>)
 8005416:	4a12      	ldr	r2, [pc, #72]	@ (8005460 <MX_USART1_UART_Init+0x50>)
 8005418:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800541a:	4b10      	ldr	r3, [pc, #64]	@ (800545c <MX_USART1_UART_Init+0x4c>)
 800541c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005420:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005422:	4b0e      	ldr	r3, [pc, #56]	@ (800545c <MX_USART1_UART_Init+0x4c>)
 8005424:	2200      	movs	r2, #0
 8005426:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005428:	4b0c      	ldr	r3, [pc, #48]	@ (800545c <MX_USART1_UART_Init+0x4c>)
 800542a:	2200      	movs	r2, #0
 800542c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800542e:	4b0b      	ldr	r3, [pc, #44]	@ (800545c <MX_USART1_UART_Init+0x4c>)
 8005430:	2200      	movs	r2, #0
 8005432:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005434:	4b09      	ldr	r3, [pc, #36]	@ (800545c <MX_USART1_UART_Init+0x4c>)
 8005436:	220c      	movs	r2, #12
 8005438:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800543a:	4b08      	ldr	r3, [pc, #32]	@ (800545c <MX_USART1_UART_Init+0x4c>)
 800543c:	2200      	movs	r2, #0
 800543e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005440:	4b06      	ldr	r3, [pc, #24]	@ (800545c <MX_USART1_UART_Init+0x4c>)
 8005442:	2200      	movs	r2, #0
 8005444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005446:	4805      	ldr	r0, [pc, #20]	@ (800545c <MX_USART1_UART_Init+0x4c>)
 8005448:	f002 fd52 	bl	8007ef0 <HAL_UART_Init>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005452:	f7ff fe4b 	bl	80050ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005456:	bf00      	nop
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	200003d0 	.word	0x200003d0
 8005460:	40011000 	.word	0x40011000

08005464 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08a      	sub	sp, #40	@ 0x28
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800546c:	f107 0314 	add.w	r3, r7, #20
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	605a      	str	r2, [r3, #4]
 8005476:	609a      	str	r2, [r3, #8]
 8005478:	60da      	str	r2, [r3, #12]
 800547a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a19      	ldr	r2, [pc, #100]	@ (80054e8 <HAL_UART_MspInit+0x84>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d12c      	bne.n	80054e0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005486:	2300      	movs	r3, #0
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	4b18      	ldr	r3, [pc, #96]	@ (80054ec <HAL_UART_MspInit+0x88>)
 800548c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548e:	4a17      	ldr	r2, [pc, #92]	@ (80054ec <HAL_UART_MspInit+0x88>)
 8005490:	f043 0310 	orr.w	r3, r3, #16
 8005494:	6453      	str	r3, [r2, #68]	@ 0x44
 8005496:	4b15      	ldr	r3, [pc, #84]	@ (80054ec <HAL_UART_MspInit+0x88>)
 8005498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	4b11      	ldr	r3, [pc, #68]	@ (80054ec <HAL_UART_MspInit+0x88>)
 80054a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054aa:	4a10      	ldr	r2, [pc, #64]	@ (80054ec <HAL_UART_MspInit+0x88>)
 80054ac:	f043 0301 	orr.w	r3, r3, #1
 80054b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80054b2:	4b0e      	ldr	r3, [pc, #56]	@ (80054ec <HAL_UART_MspInit+0x88>)
 80054b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80054be:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80054c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c4:	2302      	movs	r3, #2
 80054c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054cc:	2303      	movs	r3, #3
 80054ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80054d0:	2307      	movs	r3, #7
 80054d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054d4:	f107 0314 	add.w	r3, r7, #20
 80054d8:	4619      	mov	r1, r3
 80054da:	4805      	ldr	r0, [pc, #20]	@ (80054f0 <HAL_UART_MspInit+0x8c>)
 80054dc:	f000 fa6e 	bl	80059bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80054e0:	bf00      	nop
 80054e2:	3728      	adds	r7, #40	@ 0x28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40011000 	.word	0x40011000
 80054ec:	40023800 	.word	0x40023800
 80054f0:	40020000 	.word	0x40020000

080054f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80054f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800552c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80054f8:	f7ff ff78 	bl	80053ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80054fc:	480c      	ldr	r0, [pc, #48]	@ (8005530 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80054fe:	490d      	ldr	r1, [pc, #52]	@ (8005534 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005500:	4a0d      	ldr	r2, [pc, #52]	@ (8005538 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005504:	e002      	b.n	800550c <LoopCopyDataInit>

08005506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800550a:	3304      	adds	r3, #4

0800550c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800550c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800550e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005510:	d3f9      	bcc.n	8005506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005512:	4a0a      	ldr	r2, [pc, #40]	@ (800553c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005514:	4c0a      	ldr	r4, [pc, #40]	@ (8005540 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005518:	e001      	b.n	800551e <LoopFillZerobss>

0800551a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800551a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800551c:	3204      	adds	r2, #4

0800551e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800551e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005520:	d3fb      	bcc.n	800551a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005522:	f006 fad5 	bl	800bad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005526:	f7ff fd55 	bl	8004fd4 <main>
  bx  lr    
 800552a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800552c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005534:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8005538:	0800f020 	.word	0x0800f020
  ldr r2, =_sbss
 800553c:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8005540:	20006164 	.word	0x20006164

08005544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005544:	e7fe      	b.n	8005544 <ADC_IRQHandler>
	...

08005548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800554c:	4b0e      	ldr	r3, [pc, #56]	@ (8005588 <HAL_Init+0x40>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a0d      	ldr	r2, [pc, #52]	@ (8005588 <HAL_Init+0x40>)
 8005552:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005558:	4b0b      	ldr	r3, [pc, #44]	@ (8005588 <HAL_Init+0x40>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a0a      	ldr	r2, [pc, #40]	@ (8005588 <HAL_Init+0x40>)
 800555e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005564:	4b08      	ldr	r3, [pc, #32]	@ (8005588 <HAL_Init+0x40>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a07      	ldr	r2, [pc, #28]	@ (8005588 <HAL_Init+0x40>)
 800556a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800556e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005570:	2003      	movs	r0, #3
 8005572:	f000 f94f 	bl	8005814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005576:	200f      	movs	r0, #15
 8005578:	f000 f808 	bl	800558c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800557c:	f7ff fed8 	bl	8005330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	40023c00 	.word	0x40023c00

0800558c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005594:	4b12      	ldr	r3, [pc, #72]	@ (80055e0 <HAL_InitTick+0x54>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	4b12      	ldr	r3, [pc, #72]	@ (80055e4 <HAL_InitTick+0x58>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	4619      	mov	r1, r3
 800559e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80055a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80055a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f967 	bl	800587e <HAL_SYSTICK_Config>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e00e      	b.n	80055d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b0f      	cmp	r3, #15
 80055be:	d80a      	bhi.n	80055d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055c0:	2200      	movs	r2, #0
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	f04f 30ff 	mov.w	r0, #4294967295
 80055c8:	f000 f92f 	bl	800582a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055cc:	4a06      	ldr	r2, [pc, #24]	@ (80055e8 <HAL_InitTick+0x5c>)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	e000      	b.n	80055d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	200000a0 	.word	0x200000a0
 80055e4:	200000a8 	.word	0x200000a8
 80055e8:	200000a4 	.word	0x200000a4

080055ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055f0:	4b06      	ldr	r3, [pc, #24]	@ (800560c <HAL_IncTick+0x20>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	4b06      	ldr	r3, [pc, #24]	@ (8005610 <HAL_IncTick+0x24>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4413      	add	r3, r2
 80055fc:	4a04      	ldr	r2, [pc, #16]	@ (8005610 <HAL_IncTick+0x24>)
 80055fe:	6013      	str	r3, [r2, #0]
}
 8005600:	bf00      	nop
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	200000a8 	.word	0x200000a8
 8005610:	20000418 	.word	0x20000418

08005614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  return uwTick;
 8005618:	4b03      	ldr	r3, [pc, #12]	@ (8005628 <HAL_GetTick+0x14>)
 800561a:	681b      	ldr	r3, [r3, #0]
}
 800561c:	4618      	mov	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000418 	.word	0x20000418

0800562c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005634:	f7ff ffee 	bl	8005614 <HAL_GetTick>
 8005638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005644:	d005      	beq.n	8005652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005646:	4b0a      	ldr	r3, [pc, #40]	@ (8005670 <HAL_Delay+0x44>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005652:	bf00      	nop
 8005654:	f7ff ffde 	bl	8005614 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	429a      	cmp	r2, r3
 8005662:	d8f7      	bhi.n	8005654 <HAL_Delay+0x28>
  {
  }
}
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	200000a8 	.word	0x200000a8

08005674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005684:	4b0c      	ldr	r3, [pc, #48]	@ (80056b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005690:	4013      	ands	r3, r2
 8005692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800569c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80056a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056a6:	4a04      	ldr	r2, [pc, #16]	@ (80056b8 <__NVIC_SetPriorityGrouping+0x44>)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	60d3      	str	r3, [r2, #12]
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	e000ed00 	.word	0xe000ed00

080056bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056c0:	4b04      	ldr	r3, [pc, #16]	@ (80056d4 <__NVIC_GetPriorityGrouping+0x18>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	0a1b      	lsrs	r3, r3, #8
 80056c6:	f003 0307 	and.w	r3, r3, #7
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	e000ed00 	.word	0xe000ed00

080056d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	4603      	mov	r3, r0
 80056e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	db0b      	blt.n	8005702 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	f003 021f 	and.w	r2, r3, #31
 80056f0:	4907      	ldr	r1, [pc, #28]	@ (8005710 <__NVIC_EnableIRQ+0x38>)
 80056f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	2001      	movs	r0, #1
 80056fa:	fa00 f202 	lsl.w	r2, r0, r2
 80056fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005702:	bf00      	nop
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	e000e100 	.word	0xe000e100

08005714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	6039      	str	r1, [r7, #0]
 800571e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005724:	2b00      	cmp	r3, #0
 8005726:	db0a      	blt.n	800573e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	b2da      	uxtb	r2, r3
 800572c:	490c      	ldr	r1, [pc, #48]	@ (8005760 <__NVIC_SetPriority+0x4c>)
 800572e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005732:	0112      	lsls	r2, r2, #4
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	440b      	add	r3, r1
 8005738:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800573c:	e00a      	b.n	8005754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	b2da      	uxtb	r2, r3
 8005742:	4908      	ldr	r1, [pc, #32]	@ (8005764 <__NVIC_SetPriority+0x50>)
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	3b04      	subs	r3, #4
 800574c:	0112      	lsls	r2, r2, #4
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	440b      	add	r3, r1
 8005752:	761a      	strb	r2, [r3, #24]
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	e000e100 	.word	0xe000e100
 8005764:	e000ed00 	.word	0xe000ed00

08005768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005768:	b480      	push	{r7}
 800576a:	b089      	sub	sp, #36	@ 0x24
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	f1c3 0307 	rsb	r3, r3, #7
 8005782:	2b04      	cmp	r3, #4
 8005784:	bf28      	it	cs
 8005786:	2304      	movcs	r3, #4
 8005788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	3304      	adds	r3, #4
 800578e:	2b06      	cmp	r3, #6
 8005790:	d902      	bls.n	8005798 <NVIC_EncodePriority+0x30>
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	3b03      	subs	r3, #3
 8005796:	e000      	b.n	800579a <NVIC_EncodePriority+0x32>
 8005798:	2300      	movs	r3, #0
 800579a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800579c:	f04f 32ff 	mov.w	r2, #4294967295
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	43da      	mvns	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	401a      	ands	r2, r3
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057b0:	f04f 31ff 	mov.w	r1, #4294967295
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ba:	43d9      	mvns	r1, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057c0:	4313      	orrs	r3, r2
         );
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3724      	adds	r7, #36	@ 0x24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
	...

080057d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3b01      	subs	r3, #1
 80057dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057e0:	d301      	bcc.n	80057e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057e2:	2301      	movs	r3, #1
 80057e4:	e00f      	b.n	8005806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005810 <SysTick_Config+0x40>)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057ee:	210f      	movs	r1, #15
 80057f0:	f04f 30ff 	mov.w	r0, #4294967295
 80057f4:	f7ff ff8e 	bl	8005714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057f8:	4b05      	ldr	r3, [pc, #20]	@ (8005810 <SysTick_Config+0x40>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057fe:	4b04      	ldr	r3, [pc, #16]	@ (8005810 <SysTick_Config+0x40>)
 8005800:	2207      	movs	r2, #7
 8005802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	e000e010 	.word	0xe000e010

08005814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff ff29 	bl	8005674 <__NVIC_SetPriorityGrouping>
}
 8005822:	bf00      	nop
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800582a:	b580      	push	{r7, lr}
 800582c:	b086      	sub	sp, #24
 800582e:	af00      	add	r7, sp, #0
 8005830:	4603      	mov	r3, r0
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	607a      	str	r2, [r7, #4]
 8005836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800583c:	f7ff ff3e 	bl	80056bc <__NVIC_GetPriorityGrouping>
 8005840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	6978      	ldr	r0, [r7, #20]
 8005848:	f7ff ff8e 	bl	8005768 <NVIC_EncodePriority>
 800584c:	4602      	mov	r2, r0
 800584e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005852:	4611      	mov	r1, r2
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff ff5d 	bl	8005714 <__NVIC_SetPriority>
}
 800585a:	bf00      	nop
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	4603      	mov	r3, r0
 800586a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800586c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff ff31 	bl	80056d8 <__NVIC_EnableIRQ>
}
 8005876:	bf00      	nop
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b082      	sub	sp, #8
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff ffa2 	bl	80057d0 <SysTick_Config>
 800588c:	4603      	mov	r3, r0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80058a4:	f7ff feb6 	bl	8005614 <HAL_GetTick>
 80058a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d008      	beq.n	80058c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2280      	movs	r2, #128	@ 0x80
 80058ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e052      	b.n	800596e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0216 	bic.w	r2, r2, #22
 80058d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695a      	ldr	r2, [r3, #20]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d103      	bne.n	80058f8 <HAL_DMA_Abort+0x62>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d007      	beq.n	8005908 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0208 	bic.w	r2, r2, #8
 8005906:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005918:	e013      	b.n	8005942 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800591a:	f7ff fe7b 	bl	8005614 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b05      	cmp	r3, #5
 8005926:	d90c      	bls.n	8005942 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2220      	movs	r2, #32
 800592c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2203      	movs	r2, #3
 8005932:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e015      	b.n	800596e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e4      	bne.n	800591a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005954:	223f      	movs	r2, #63	@ 0x3f
 8005956:	409a      	lsls	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d004      	beq.n	8005994 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2280      	movs	r2, #128	@ 0x80
 800598e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e00c      	b.n	80059ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2205      	movs	r2, #5
 8005998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0201 	bic.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
	...

080059bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059bc:	b480      	push	{r7}
 80059be:	b089      	sub	sp, #36	@ 0x24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059d2:	2300      	movs	r3, #0
 80059d4:	61fb      	str	r3, [r7, #28]
 80059d6:	e159      	b.n	8005c8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059d8:	2201      	movs	r2, #1
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4013      	ands	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	f040 8148 	bne.w	8005c86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d005      	beq.n	8005a0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d130      	bne.n	8005a70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	2203      	movs	r2, #3
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4013      	ands	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a44:	2201      	movs	r2, #1
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	4013      	ands	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	091b      	lsrs	r3, r3, #4
 8005a5a:	f003 0201 	and.w	r2, r3, #1
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d017      	beq.n	8005aac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	2203      	movs	r2, #3
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	4013      	ands	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f003 0303 	and.w	r3, r3, #3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d123      	bne.n	8005b00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	08da      	lsrs	r2, r3, #3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3208      	adds	r2, #8
 8005ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	220f      	movs	r2, #15
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	08da      	lsrs	r2, r3, #3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3208      	adds	r2, #8
 8005afa:	69b9      	ldr	r1, [r7, #24]
 8005afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	43db      	mvns	r3, r3
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	4013      	ands	r3, r2
 8005b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f003 0203 	and.w	r2, r3, #3
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 80a2 	beq.w	8005c86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	4b57      	ldr	r3, [pc, #348]	@ (8005ca4 <HAL_GPIO_Init+0x2e8>)
 8005b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b4a:	4a56      	ldr	r2, [pc, #344]	@ (8005ca4 <HAL_GPIO_Init+0x2e8>)
 8005b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8005b52:	4b54      	ldr	r3, [pc, #336]	@ (8005ca4 <HAL_GPIO_Init+0x2e8>)
 8005b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b5e:	4a52      	ldr	r2, [pc, #328]	@ (8005ca8 <HAL_GPIO_Init+0x2ec>)
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	089b      	lsrs	r3, r3, #2
 8005b64:	3302      	adds	r3, #2
 8005b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	220f      	movs	r2, #15
 8005b76:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7a:	43db      	mvns	r3, r3
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a49      	ldr	r2, [pc, #292]	@ (8005cac <HAL_GPIO_Init+0x2f0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d019      	beq.n	8005bbe <HAL_GPIO_Init+0x202>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a48      	ldr	r2, [pc, #288]	@ (8005cb0 <HAL_GPIO_Init+0x2f4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <HAL_GPIO_Init+0x1fe>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a47      	ldr	r2, [pc, #284]	@ (8005cb4 <HAL_GPIO_Init+0x2f8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00d      	beq.n	8005bb6 <HAL_GPIO_Init+0x1fa>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a46      	ldr	r2, [pc, #280]	@ (8005cb8 <HAL_GPIO_Init+0x2fc>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d007      	beq.n	8005bb2 <HAL_GPIO_Init+0x1f6>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a45      	ldr	r2, [pc, #276]	@ (8005cbc <HAL_GPIO_Init+0x300>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d101      	bne.n	8005bae <HAL_GPIO_Init+0x1f2>
 8005baa:	2304      	movs	r3, #4
 8005bac:	e008      	b.n	8005bc0 <HAL_GPIO_Init+0x204>
 8005bae:	2307      	movs	r3, #7
 8005bb0:	e006      	b.n	8005bc0 <HAL_GPIO_Init+0x204>
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e004      	b.n	8005bc0 <HAL_GPIO_Init+0x204>
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	e002      	b.n	8005bc0 <HAL_GPIO_Init+0x204>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <HAL_GPIO_Init+0x204>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	69fa      	ldr	r2, [r7, #28]
 8005bc2:	f002 0203 	and.w	r2, r2, #3
 8005bc6:	0092      	lsls	r2, r2, #2
 8005bc8:	4093      	lsls	r3, r2
 8005bca:	69ba      	ldr	r2, [r7, #24]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bd0:	4935      	ldr	r1, [pc, #212]	@ (8005ca8 <HAL_GPIO_Init+0x2ec>)
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	089b      	lsrs	r3, r3, #2
 8005bd6:	3302      	adds	r3, #2
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bde:	4b38      	ldr	r3, [pc, #224]	@ (8005cc0 <HAL_GPIO_Init+0x304>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	43db      	mvns	r3, r3
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	4013      	ands	r3, r2
 8005bec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c02:	4a2f      	ldr	r2, [pc, #188]	@ (8005cc0 <HAL_GPIO_Init+0x304>)
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c08:	4b2d      	ldr	r3, [pc, #180]	@ (8005cc0 <HAL_GPIO_Init+0x304>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	43db      	mvns	r3, r3
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	4013      	ands	r3, r2
 8005c16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c2c:	4a24      	ldr	r2, [pc, #144]	@ (8005cc0 <HAL_GPIO_Init+0x304>)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c32:	4b23      	ldr	r3, [pc, #140]	@ (8005cc0 <HAL_GPIO_Init+0x304>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c56:	4a1a      	ldr	r2, [pc, #104]	@ (8005cc0 <HAL_GPIO_Init+0x304>)
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c5c:	4b18      	ldr	r3, [pc, #96]	@ (8005cc0 <HAL_GPIO_Init+0x304>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	43db      	mvns	r3, r3
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c80:	4a0f      	ldr	r2, [pc, #60]	@ (8005cc0 <HAL_GPIO_Init+0x304>)
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	61fb      	str	r3, [r7, #28]
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	2b0f      	cmp	r3, #15
 8005c90:	f67f aea2 	bls.w	80059d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	3724      	adds	r7, #36	@ 0x24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	40013800 	.word	0x40013800
 8005cac:	40020000 	.word	0x40020000
 8005cb0:	40020400 	.word	0x40020400
 8005cb4:	40020800 	.word	0x40020800
 8005cb8:	40020c00 	.word	0x40020c00
 8005cbc:	40021000 	.word	0x40021000
 8005cc0:	40013c00 	.word	0x40013c00

08005cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	460b      	mov	r3, r1
 8005cce:	807b      	strh	r3, [r7, #2]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005cd4:	787b      	ldrb	r3, [r7, #1]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cda:	887a      	ldrh	r2, [r7, #2]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ce0:	e003      	b.n	8005cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ce2:	887b      	ldrh	r3, [r7, #2]
 8005ce4:	041a      	lsls	r2, r3, #16
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	619a      	str	r2, [r3, #24]
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
	...

08005cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e12b      	b.n	8005f62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff f8cc 	bl	8004ebc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2224      	movs	r2, #36	@ 0x24
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0201 	bic.w	r2, r2, #1
 8005d3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d5c:	f002 f8a0 	bl	8007ea0 <HAL_RCC_GetPCLK1Freq>
 8005d60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	4a81      	ldr	r2, [pc, #516]	@ (8005f6c <HAL_I2C_Init+0x274>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d807      	bhi.n	8005d7c <HAL_I2C_Init+0x84>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4a80      	ldr	r2, [pc, #512]	@ (8005f70 <HAL_I2C_Init+0x278>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	bf94      	ite	ls
 8005d74:	2301      	movls	r3, #1
 8005d76:	2300      	movhi	r3, #0
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	e006      	b.n	8005d8a <HAL_I2C_Init+0x92>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4a7d      	ldr	r2, [pc, #500]	@ (8005f74 <HAL_I2C_Init+0x27c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	bf94      	ite	ls
 8005d84:	2301      	movls	r3, #1
 8005d86:	2300      	movhi	r3, #0
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e0e7      	b.n	8005f62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4a78      	ldr	r2, [pc, #480]	@ (8005f78 <HAL_I2C_Init+0x280>)
 8005d96:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9a:	0c9b      	lsrs	r3, r3, #18
 8005d9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	4a6a      	ldr	r2, [pc, #424]	@ (8005f6c <HAL_I2C_Init+0x274>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d802      	bhi.n	8005dcc <HAL_I2C_Init+0xd4>
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	e009      	b.n	8005de0 <HAL_I2C_Init+0xe8>
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005dd2:	fb02 f303 	mul.w	r3, r2, r3
 8005dd6:	4a69      	ldr	r2, [pc, #420]	@ (8005f7c <HAL_I2C_Init+0x284>)
 8005dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ddc:	099b      	lsrs	r3, r3, #6
 8005dde:	3301      	adds	r3, #1
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6812      	ldr	r2, [r2, #0]
 8005de4:	430b      	orrs	r3, r1
 8005de6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005df2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	495c      	ldr	r1, [pc, #368]	@ (8005f6c <HAL_I2C_Init+0x274>)
 8005dfc:	428b      	cmp	r3, r1
 8005dfe:	d819      	bhi.n	8005e34 <HAL_I2C_Init+0x13c>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	1e59      	subs	r1, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e0e:	1c59      	adds	r1, r3, #1
 8005e10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005e14:	400b      	ands	r3, r1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <HAL_I2C_Init+0x138>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1e59      	subs	r1, r3, #1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e28:	3301      	adds	r3, #1
 8005e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e2e:	e051      	b.n	8005ed4 <HAL_I2C_Init+0x1dc>
 8005e30:	2304      	movs	r3, #4
 8005e32:	e04f      	b.n	8005ed4 <HAL_I2C_Init+0x1dc>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d111      	bne.n	8005e60 <HAL_I2C_Init+0x168>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	1e58      	subs	r0, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6859      	ldr	r1, [r3, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	440b      	add	r3, r1
 8005e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e4e:	3301      	adds	r3, #1
 8005e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	bf0c      	ite	eq
 8005e58:	2301      	moveq	r3, #1
 8005e5a:	2300      	movne	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	e012      	b.n	8005e86 <HAL_I2C_Init+0x18e>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	1e58      	subs	r0, r3, #1
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6859      	ldr	r1, [r3, #4]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	440b      	add	r3, r1
 8005e6e:	0099      	lsls	r1, r3, #2
 8005e70:	440b      	add	r3, r1
 8005e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e76:	3301      	adds	r3, #1
 8005e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bf0c      	ite	eq
 8005e80:	2301      	moveq	r3, #1
 8005e82:	2300      	movne	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <HAL_I2C_Init+0x196>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e022      	b.n	8005ed4 <HAL_I2C_Init+0x1dc>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10e      	bne.n	8005eb4 <HAL_I2C_Init+0x1bc>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	1e58      	subs	r0, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6859      	ldr	r1, [r3, #4]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	440b      	add	r3, r1
 8005ea4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eb2:	e00f      	b.n	8005ed4 <HAL_I2C_Init+0x1dc>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	1e58      	subs	r0, r3, #1
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6859      	ldr	r1, [r3, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	440b      	add	r3, r1
 8005ec2:	0099      	lsls	r1, r3, #2
 8005ec4:	440b      	add	r3, r1
 8005ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005eca:	3301      	adds	r3, #1
 8005ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ed0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	6809      	ldr	r1, [r1, #0]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	69da      	ldr	r2, [r3, #28]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005f02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6911      	ldr	r1, [r2, #16]
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	68d2      	ldr	r2, [r2, #12]
 8005f0e:	4311      	orrs	r1, r2
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	430b      	orrs	r3, r1
 8005f16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	695a      	ldr	r2, [r3, #20]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	000186a0 	.word	0x000186a0
 8005f70:	001e847f 	.word	0x001e847f
 8005f74:	003d08ff 	.word	0x003d08ff
 8005f78:	431bde83 	.word	0x431bde83
 8005f7c:	10624dd3 	.word	0x10624dd3

08005f80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	607a      	str	r2, [r7, #4]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	817b      	strh	r3, [r7, #10]
 8005f90:	4613      	mov	r3, r2
 8005f92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f94:	f7ff fb3e 	bl	8005614 <HAL_GetTick>
 8005f98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b20      	cmp	r3, #32
 8005fa4:	f040 80e0 	bne.w	8006168 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	2319      	movs	r3, #25
 8005fae:	2201      	movs	r2, #1
 8005fb0:	4970      	ldr	r1, [pc, #448]	@ (8006174 <HAL_I2C_Master_Transmit+0x1f4>)
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f001 f90e 	bl	80071d4 <I2C_WaitOnFlagUntilTimeout>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e0d3      	b.n	800616a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_I2C_Master_Transmit+0x50>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e0cc      	b.n	800616a <HAL_I2C_Master_Transmit+0x1ea>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d007      	beq.n	8005ff6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f042 0201 	orr.w	r2, r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006004:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2221      	movs	r2, #33	@ 0x21
 800600a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2210      	movs	r2, #16
 8006012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	893a      	ldrh	r2, [r7, #8]
 8006026:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	4a50      	ldr	r2, [pc, #320]	@ (8006178 <HAL_I2C_Master_Transmit+0x1f8>)
 8006036:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006038:	8979      	ldrh	r1, [r7, #10]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	6a3a      	ldr	r2, [r7, #32]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 fdfa 	bl	8006c38 <I2C_MasterRequestWrite>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e08d      	b.n	800616a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800604e:	2300      	movs	r3, #0
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006064:	e066      	b.n	8006134 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	6a39      	ldr	r1, [r7, #32]
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f001 f9cc 	bl	8007408 <I2C_WaitOnTXEFlagUntilTimeout>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00d      	beq.n	8006092 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607a:	2b04      	cmp	r3, #4
 800607c:	d107      	bne.n	800608e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800608c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e06b      	b.n	800616a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006096:	781a      	ldrb	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d11b      	bne.n	8006108 <HAL_I2C_Master_Transmit+0x188>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d017      	beq.n	8006108 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060dc:	781a      	ldrb	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	6a39      	ldr	r1, [r7, #32]
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f001 f9c3 	bl	8007498 <I2C_WaitOnBTFFlagUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00d      	beq.n	8006134 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611c:	2b04      	cmp	r3, #4
 800611e:	d107      	bne.n	8006130 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800612e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e01a      	b.n	800616a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006138:	2b00      	cmp	r3, #0
 800613a:	d194      	bne.n	8006066 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800614a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	e000      	b.n	800616a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006168:	2302      	movs	r3, #2
  }
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	00100002 	.word	0x00100002
 8006178:	ffff0000 	.word	0xffff0000

0800617c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08c      	sub	sp, #48	@ 0x30
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	607a      	str	r2, [r7, #4]
 8006186:	461a      	mov	r2, r3
 8006188:	460b      	mov	r3, r1
 800618a:	817b      	strh	r3, [r7, #10]
 800618c:	4613      	mov	r3, r2
 800618e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006190:	f7ff fa40 	bl	8005614 <HAL_GetTick>
 8006194:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b20      	cmp	r3, #32
 80061a0:	f040 8217 	bne.w	80065d2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	2319      	movs	r3, #25
 80061aa:	2201      	movs	r2, #1
 80061ac:	497c      	ldr	r1, [pc, #496]	@ (80063a0 <HAL_I2C_Master_Receive+0x224>)
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f001 f810 	bl	80071d4 <I2C_WaitOnFlagUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80061ba:	2302      	movs	r3, #2
 80061bc:	e20a      	b.n	80065d4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_I2C_Master_Receive+0x50>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e203      	b.n	80065d4 <HAL_I2C_Master_Receive+0x458>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d007      	beq.n	80061f2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0201 	orr.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006200:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2222      	movs	r2, #34	@ 0x22
 8006206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2210      	movs	r2, #16
 800620e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	893a      	ldrh	r2, [r7, #8]
 8006222:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4a5c      	ldr	r2, [pc, #368]	@ (80063a4 <HAL_I2C_Master_Receive+0x228>)
 8006232:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006234:	8979      	ldrh	r1, [r7, #10]
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 fd7e 	bl	8006d3c <I2C_MasterRequestRead>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e1c4      	b.n	80065d4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800624e:	2b00      	cmp	r3, #0
 8006250:	d113      	bne.n	800627a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006252:	2300      	movs	r3, #0
 8006254:	623b      	str	r3, [r7, #32]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	623b      	str	r3, [r7, #32]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	623b      	str	r3, [r7, #32]
 8006266:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	e198      	b.n	80065ac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800627e:	2b01      	cmp	r3, #1
 8006280:	d11b      	bne.n	80062ba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006290:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006292:	2300      	movs	r3, #0
 8006294:	61fb      	str	r3, [r7, #28]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	61fb      	str	r3, [r7, #28]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	61fb      	str	r3, [r7, #28]
 80062a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	e178      	b.n	80065ac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d11b      	bne.n	80062fa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e2:	2300      	movs	r3, #0
 80062e4:	61bb      	str	r3, [r7, #24]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	61bb      	str	r3, [r7, #24]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	61bb      	str	r3, [r7, #24]
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	e158      	b.n	80065ac <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006308:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	617b      	str	r3, [r7, #20]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006320:	e144      	b.n	80065ac <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006326:	2b03      	cmp	r3, #3
 8006328:	f200 80f1 	bhi.w	800650e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006330:	2b01      	cmp	r3, #1
 8006332:	d123      	bne.n	800637c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006336:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f001 f8f5 	bl	8007528 <I2C_WaitOnRXNEFlagUntilTimeout>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e145      	b.n	80065d4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691a      	ldr	r2, [r3, #16]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006364:	3b01      	subs	r3, #1
 8006366:	b29a      	uxth	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006370:	b29b      	uxth	r3, r3
 8006372:	3b01      	subs	r3, #1
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800637a:	e117      	b.n	80065ac <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006380:	2b02      	cmp	r3, #2
 8006382:	d14e      	bne.n	8006422 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638a:	2200      	movs	r2, #0
 800638c:	4906      	ldr	r1, [pc, #24]	@ (80063a8 <HAL_I2C_Master_Receive+0x22c>)
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 ff20 	bl	80071d4 <I2C_WaitOnFlagUntilTimeout>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d008      	beq.n	80063ac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e11a      	b.n	80065d4 <HAL_I2C_Master_Receive+0x458>
 800639e:	bf00      	nop
 80063a0:	00100002 	.word	0x00100002
 80063a4:	ffff0000 	.word	0xffff0000
 80063a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691a      	ldr	r2, [r3, #16]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ce:	1c5a      	adds	r2, r3, #1
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	3b01      	subs	r3, #1
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800640a:	3b01      	subs	r3, #1
 800640c:	b29a      	uxth	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006416:	b29b      	uxth	r3, r3
 8006418:	3b01      	subs	r3, #1
 800641a:	b29a      	uxth	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006420:	e0c4      	b.n	80065ac <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006428:	2200      	movs	r2, #0
 800642a:	496c      	ldr	r1, [pc, #432]	@ (80065dc <HAL_I2C_Master_Receive+0x460>)
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 fed1 	bl	80071d4 <I2C_WaitOnFlagUntilTimeout>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e0cb      	b.n	80065d4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800644a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800647e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006484:	2200      	movs	r2, #0
 8006486:	4955      	ldr	r1, [pc, #340]	@ (80065dc <HAL_I2C_Master_Receive+0x460>)
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 fea3 	bl	80071d4 <I2C_WaitOnFlagUntilTimeout>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e09d      	b.n	80065d4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	691a      	ldr	r2, [r3, #16]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064c4:	3b01      	subs	r3, #1
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	3b01      	subs	r3, #1
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691a      	ldr	r2, [r3, #16]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e4:	b2d2      	uxtb	r2, r2
 80064e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f6:	3b01      	subs	r3, #1
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800650c:	e04e      	b.n	80065ac <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800650e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006510:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f001 f808 	bl	8007528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e058      	b.n	80065d4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800653e:	3b01      	subs	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	f003 0304 	and.w	r3, r3, #4
 800655e:	2b04      	cmp	r3, #4
 8006560:	d124      	bne.n	80065ac <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006566:	2b03      	cmp	r3, #3
 8006568:	d107      	bne.n	800657a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006578:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	3b01      	subs	r3, #1
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f47f aeb6 	bne.w	8006322 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	e000      	b.n	80065d4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80065d2:	2302      	movs	r3, #2
  }
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3728      	adds	r7, #40	@ 0x28
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	00010004 	.word	0x00010004

080065e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	4608      	mov	r0, r1
 80065ea:	4611      	mov	r1, r2
 80065ec:	461a      	mov	r2, r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	817b      	strh	r3, [r7, #10]
 80065f2:	460b      	mov	r3, r1
 80065f4:	813b      	strh	r3, [r7, #8]
 80065f6:	4613      	mov	r3, r2
 80065f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065fa:	f7ff f80b 	bl	8005614 <HAL_GetTick>
 80065fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b20      	cmp	r3, #32
 800660a:	f040 80d9 	bne.w	80067c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	2319      	movs	r3, #25
 8006614:	2201      	movs	r2, #1
 8006616:	496d      	ldr	r1, [pc, #436]	@ (80067cc <HAL_I2C_Mem_Write+0x1ec>)
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 fddb 	bl	80071d4 <I2C_WaitOnFlagUntilTimeout>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006624:	2302      	movs	r3, #2
 8006626:	e0cc      	b.n	80067c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800662e:	2b01      	cmp	r3, #1
 8006630:	d101      	bne.n	8006636 <HAL_I2C_Mem_Write+0x56>
 8006632:	2302      	movs	r3, #2
 8006634:	e0c5      	b.n	80067c2 <HAL_I2C_Mem_Write+0x1e2>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b01      	cmp	r3, #1
 800664a:	d007      	beq.n	800665c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0201 	orr.w	r2, r2, #1
 800665a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800666a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2221      	movs	r2, #33	@ 0x21
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2240      	movs	r2, #64	@ 0x40
 8006678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6a3a      	ldr	r2, [r7, #32]
 8006686:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800668c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4a4d      	ldr	r2, [pc, #308]	@ (80067d0 <HAL_I2C_Mem_Write+0x1f0>)
 800669c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800669e:	88f8      	ldrh	r0, [r7, #6]
 80066a0:	893a      	ldrh	r2, [r7, #8]
 80066a2:	8979      	ldrh	r1, [r7, #10]
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	9301      	str	r3, [sp, #4]
 80066a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	4603      	mov	r3, r0
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fc12 	bl	8006ed8 <I2C_RequestMemoryWrite>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d052      	beq.n	8006760 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e081      	b.n	80067c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fea0 	bl	8007408 <I2C_WaitOnTXEFlagUntilTimeout>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00d      	beq.n	80066ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d107      	bne.n	80066e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e06b      	b.n	80067c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ee:	781a      	ldrb	r2, [r3, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006710:	b29b      	uxth	r3, r3
 8006712:	3b01      	subs	r3, #1
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b04      	cmp	r3, #4
 8006726:	d11b      	bne.n	8006760 <HAL_I2C_Mem_Write+0x180>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800672c:	2b00      	cmp	r3, #0
 800672e:	d017      	beq.n	8006760 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006734:	781a      	ldrb	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800674a:	3b01      	subs	r3, #1
 800674c:	b29a      	uxth	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006756:	b29b      	uxth	r3, r3
 8006758:	3b01      	subs	r3, #1
 800675a:	b29a      	uxth	r2, r3
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006764:	2b00      	cmp	r3, #0
 8006766:	d1aa      	bne.n	80066be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800676c:	68f8      	ldr	r0, [r7, #12]
 800676e:	f000 fe93 	bl	8007498 <I2C_WaitOnBTFFlagUntilTimeout>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00d      	beq.n	8006794 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677c:	2b04      	cmp	r3, #4
 800677e:	d107      	bne.n	8006790 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800678e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e016      	b.n	80067c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	e000      	b.n	80067c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
  }
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	00100002 	.word	0x00100002
 80067d0:	ffff0000 	.word	0xffff0000

080067d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b08c      	sub	sp, #48	@ 0x30
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	4608      	mov	r0, r1
 80067de:	4611      	mov	r1, r2
 80067e0:	461a      	mov	r2, r3
 80067e2:	4603      	mov	r3, r0
 80067e4:	817b      	strh	r3, [r7, #10]
 80067e6:	460b      	mov	r3, r1
 80067e8:	813b      	strh	r3, [r7, #8]
 80067ea:	4613      	mov	r3, r2
 80067ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067ee:	f7fe ff11 	bl	8005614 <HAL_GetTick>
 80067f2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b20      	cmp	r3, #32
 80067fe:	f040 8214 	bne.w	8006c2a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	2319      	movs	r3, #25
 8006808:	2201      	movs	r2, #1
 800680a:	497b      	ldr	r1, [pc, #492]	@ (80069f8 <HAL_I2C_Mem_Read+0x224>)
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 fce1 	bl	80071d4 <I2C_WaitOnFlagUntilTimeout>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006818:	2302      	movs	r3, #2
 800681a:	e207      	b.n	8006c2c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <HAL_I2C_Mem_Read+0x56>
 8006826:	2302      	movs	r3, #2
 8006828:	e200      	b.n	8006c2c <HAL_I2C_Mem_Read+0x458>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	2b01      	cmp	r3, #1
 800683e:	d007      	beq.n	8006850 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0201 	orr.w	r2, r2, #1
 800684e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800685e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2222      	movs	r2, #34	@ 0x22
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2240      	movs	r2, #64	@ 0x40
 800686c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800687a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006880:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006886:	b29a      	uxth	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4a5b      	ldr	r2, [pc, #364]	@ (80069fc <HAL_I2C_Mem_Read+0x228>)
 8006890:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006892:	88f8      	ldrh	r0, [r7, #6]
 8006894:	893a      	ldrh	r2, [r7, #8]
 8006896:	8979      	ldrh	r1, [r7, #10]
 8006898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689a:	9301      	str	r3, [sp, #4]
 800689c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	4603      	mov	r3, r0
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 fbae 	bl	8007004 <I2C_RequestMemoryRead>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e1bc      	b.n	8006c2c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d113      	bne.n	80068e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ba:	2300      	movs	r3, #0
 80068bc:	623b      	str	r3, [r7, #32]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	623b      	str	r3, [r7, #32]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	623b      	str	r3, [r7, #32]
 80068ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	e190      	b.n	8006c04 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d11b      	bne.n	8006922 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068fa:	2300      	movs	r3, #0
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	61fb      	str	r3, [r7, #28]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	61fb      	str	r3, [r7, #28]
 800690e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	e170      	b.n	8006c04 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006926:	2b02      	cmp	r3, #2
 8006928:	d11b      	bne.n	8006962 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006938:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006948:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800694a:	2300      	movs	r3, #0
 800694c:	61bb      	str	r3, [r7, #24]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	61bb      	str	r3, [r7, #24]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	e150      	b.n	8006c04 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006962:	2300      	movs	r3, #0
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006978:	e144      	b.n	8006c04 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800697e:	2b03      	cmp	r3, #3
 8006980:	f200 80f1 	bhi.w	8006b66 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006988:	2b01      	cmp	r3, #1
 800698a:	d123      	bne.n	80069d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800698c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800698e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 fdc9 	bl	8007528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e145      	b.n	8006c2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691a      	ldr	r2, [r3, #16]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069bc:	3b01      	subs	r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80069d2:	e117      	b.n	8006c04 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d14e      	bne.n	8006a7a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e2:	2200      	movs	r2, #0
 80069e4:	4906      	ldr	r1, [pc, #24]	@ (8006a00 <HAL_I2C_Mem_Read+0x22c>)
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 fbf4 	bl	80071d4 <I2C_WaitOnFlagUntilTimeout>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d008      	beq.n	8006a04 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e11a      	b.n	8006c2c <HAL_I2C_Mem_Read+0x458>
 80069f6:	bf00      	nop
 80069f8:	00100002 	.word	0x00100002
 80069fc:	ffff0000 	.word	0xffff0000
 8006a00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691a      	ldr	r2, [r3, #16]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	691a      	ldr	r2, [r3, #16]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	b2d2      	uxtb	r2, r2
 8006a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006a78:	e0c4      	b.n	8006c04 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a80:	2200      	movs	r2, #0
 8006a82:	496c      	ldr	r1, [pc, #432]	@ (8006c34 <HAL_I2C_Mem_Read+0x460>)
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 fba5 	bl	80071d4 <I2C_WaitOnFlagUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e0cb      	b.n	8006c2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006adc:	2200      	movs	r2, #0
 8006ade:	4955      	ldr	r1, [pc, #340]	@ (8006c34 <HAL_I2C_Mem_Read+0x460>)
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 fb77 	bl	80071d4 <I2C_WaitOnFlagUntilTimeout>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e09d      	b.n	8006c2c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006afe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691a      	ldr	r2, [r3, #16]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	691a      	ldr	r2, [r3, #16]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3c:	b2d2      	uxtb	r2, r2
 8006b3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006b64:	e04e      	b.n	8006c04 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b68:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 fcdc 	bl	8007528 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e058      	b.n	8006c2c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f003 0304 	and.w	r3, r3, #4
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d124      	bne.n	8006c04 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d107      	bne.n	8006bd2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bd0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	691a      	ldr	r2, [r3, #16]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bdc:	b2d2      	uxtb	r2, r2
 8006bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f47f aeb6 	bne.w	800697a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2220      	movs	r2, #32
 8006c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	e000      	b.n	8006c2c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006c2a:	2302      	movs	r3, #2
  }
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3728      	adds	r7, #40	@ 0x28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	00010004 	.word	0x00010004

08006c38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b088      	sub	sp, #32
 8006c3c:	af02      	add	r7, sp, #8
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	607a      	str	r2, [r7, #4]
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	460b      	mov	r3, r1
 8006c46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2b08      	cmp	r3, #8
 8006c52:	d006      	beq.n	8006c62 <I2C_MasterRequestWrite+0x2a>
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d003      	beq.n	8006c62 <I2C_MasterRequestWrite+0x2a>
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006c60:	d108      	bne.n	8006c74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	e00b      	b.n	8006c8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c78:	2b12      	cmp	r3, #18
 8006c7a:	d107      	bne.n	8006c8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 fa9b 	bl	80071d4 <I2C_WaitOnFlagUntilTimeout>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00d      	beq.n	8006cc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cb2:	d103      	bne.n	8006cbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e035      	b.n	8006d2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cc8:	d108      	bne.n	8006cdc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cca:	897b      	ldrh	r3, [r7, #10]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	461a      	mov	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006cd8:	611a      	str	r2, [r3, #16]
 8006cda:	e01b      	b.n	8006d14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006cdc:	897b      	ldrh	r3, [r7, #10]
 8006cde:	11db      	asrs	r3, r3, #7
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	f003 0306 	and.w	r3, r3, #6
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	f063 030f 	orn	r3, r3, #15
 8006cec:	b2da      	uxtb	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	490e      	ldr	r1, [pc, #56]	@ (8006d34 <I2C_MasterRequestWrite+0xfc>)
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 fae4 	bl	80072c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e010      	b.n	8006d2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006d0a:	897b      	ldrh	r3, [r7, #10]
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	4907      	ldr	r1, [pc, #28]	@ (8006d38 <I2C_MasterRequestWrite+0x100>)
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 fad4 	bl	80072c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e000      	b.n	8006d2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	00010008 	.word	0x00010008
 8006d38:	00010002 	.word	0x00010002

08006d3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af02      	add	r7, sp, #8
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	607a      	str	r2, [r7, #4]
 8006d46:	603b      	str	r3, [r7, #0]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2b08      	cmp	r3, #8
 8006d66:	d006      	beq.n	8006d76 <I2C_MasterRequestRead+0x3a>
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d003      	beq.n	8006d76 <I2C_MasterRequestRead+0x3a>
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d74:	d108      	bne.n	8006d88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	e00b      	b.n	8006da0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d8c:	2b11      	cmp	r3, #17
 8006d8e:	d107      	bne.n	8006da0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 fa11 	bl	80071d4 <I2C_WaitOnFlagUntilTimeout>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00d      	beq.n	8006dd4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dc6:	d103      	bne.n	8006dd0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006dce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e079      	b.n	8006ec8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ddc:	d108      	bne.n	8006df0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006dde:	897b      	ldrh	r3, [r7, #10]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	f043 0301 	orr.w	r3, r3, #1
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	611a      	str	r2, [r3, #16]
 8006dee:	e05f      	b.n	8006eb0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006df0:	897b      	ldrh	r3, [r7, #10]
 8006df2:	11db      	asrs	r3, r3, #7
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	f003 0306 	and.w	r3, r3, #6
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	f063 030f 	orn	r3, r3, #15
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	4930      	ldr	r1, [pc, #192]	@ (8006ed0 <I2C_MasterRequestRead+0x194>)
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 fa5a 	bl	80072c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e054      	b.n	8006ec8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006e1e:	897b      	ldrh	r3, [r7, #10]
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	4929      	ldr	r1, [pc, #164]	@ (8006ed4 <I2C_MasterRequestRead+0x198>)
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 fa4a 	bl	80072c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e044      	b.n	8006ec8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e3e:	2300      	movs	r3, #0
 8006e40:	613b      	str	r3, [r7, #16]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e62:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 f9af 	bl	80071d4 <I2C_WaitOnFlagUntilTimeout>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00d      	beq.n	8006e98 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e8a:	d103      	bne.n	8006e94 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e92:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e017      	b.n	8006ec8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006e98:	897b      	ldrh	r3, [r7, #10]
 8006e9a:	11db      	asrs	r3, r3, #7
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	f003 0306 	and.w	r3, r3, #6
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	f063 030e 	orn	r3, r3, #14
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	4907      	ldr	r1, [pc, #28]	@ (8006ed4 <I2C_MasterRequestRead+0x198>)
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 fa06 	bl	80072c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e000      	b.n	8006ec8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3718      	adds	r7, #24
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	00010008 	.word	0x00010008
 8006ed4:	00010002 	.word	0x00010002

08006ed8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af02      	add	r7, sp, #8
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	817b      	strh	r3, [r7, #10]
 8006eea:	460b      	mov	r3, r1
 8006eec:	813b      	strh	r3, [r7, #8]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 f960 	bl	80071d4 <I2C_WaitOnFlagUntilTimeout>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00d      	beq.n	8006f36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f28:	d103      	bne.n	8006f32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f30:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e05f      	b.n	8006ff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f36:	897b      	ldrh	r3, [r7, #10]
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006f44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f48:	6a3a      	ldr	r2, [r7, #32]
 8006f4a:	492d      	ldr	r1, [pc, #180]	@ (8007000 <I2C_RequestMemoryWrite+0x128>)
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 f9bb 	bl	80072c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e04c      	b.n	8006ff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	617b      	str	r3, [r7, #20]
 8006f70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f74:	6a39      	ldr	r1, [r7, #32]
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 fa46 	bl	8007408 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00d      	beq.n	8006f9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f86:	2b04      	cmp	r3, #4
 8006f88:	d107      	bne.n	8006f9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e02b      	b.n	8006ff6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f9e:	88fb      	ldrh	r3, [r7, #6]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d105      	bne.n	8006fb0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fa4:	893b      	ldrh	r3, [r7, #8]
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	611a      	str	r2, [r3, #16]
 8006fae:	e021      	b.n	8006ff4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006fb0:	893b      	ldrh	r3, [r7, #8]
 8006fb2:	0a1b      	lsrs	r3, r3, #8
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	b2da      	uxtb	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fc0:	6a39      	ldr	r1, [r7, #32]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 fa20 	bl	8007408 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00d      	beq.n	8006fea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	d107      	bne.n	8006fe6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fe4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e005      	b.n	8006ff6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fea:	893b      	ldrh	r3, [r7, #8]
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	00010002 	.word	0x00010002

08007004 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b088      	sub	sp, #32
 8007008:	af02      	add	r7, sp, #8
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	4608      	mov	r0, r1
 800700e:	4611      	mov	r1, r2
 8007010:	461a      	mov	r2, r3
 8007012:	4603      	mov	r3, r0
 8007014:	817b      	strh	r3, [r7, #10]
 8007016:	460b      	mov	r3, r1
 8007018:	813b      	strh	r3, [r7, #8]
 800701a:	4613      	mov	r3, r2
 800701c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800702c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800703c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800703e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	2200      	movs	r2, #0
 8007046:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 f8c2 	bl	80071d4 <I2C_WaitOnFlagUntilTimeout>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00d      	beq.n	8007072 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007064:	d103      	bne.n	800706e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800706c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e0aa      	b.n	80071c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007072:	897b      	ldrh	r3, [r7, #10]
 8007074:	b2db      	uxtb	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007080:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007084:	6a3a      	ldr	r2, [r7, #32]
 8007086:	4952      	ldr	r1, [pc, #328]	@ (80071d0 <I2C_RequestMemoryRead+0x1cc>)
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f91d 	bl	80072c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d001      	beq.n	8007098 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e097      	b.n	80071c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007098:	2300      	movs	r3, #0
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070b0:	6a39      	ldr	r1, [r7, #32]
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 f9a8 	bl	8007408 <I2C_WaitOnTXEFlagUntilTimeout>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00d      	beq.n	80070da <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d107      	bne.n	80070d6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e076      	b.n	80071c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070da:	88fb      	ldrh	r3, [r7, #6]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d105      	bne.n	80070ec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070e0:	893b      	ldrh	r3, [r7, #8]
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	611a      	str	r2, [r3, #16]
 80070ea:	e021      	b.n	8007130 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80070ec:	893b      	ldrh	r3, [r7, #8]
 80070ee:	0a1b      	lsrs	r3, r3, #8
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070fc:	6a39      	ldr	r1, [r7, #32]
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 f982 	bl	8007408 <I2C_WaitOnTXEFlagUntilTimeout>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00d      	beq.n	8007126 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710e:	2b04      	cmp	r3, #4
 8007110:	d107      	bne.n	8007122 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007120:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e050      	b.n	80071c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007126:	893b      	ldrh	r3, [r7, #8]
 8007128:	b2da      	uxtb	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007132:	6a39      	ldr	r1, [r7, #32]
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 f967 	bl	8007408 <I2C_WaitOnTXEFlagUntilTimeout>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00d      	beq.n	800715c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007144:	2b04      	cmp	r3, #4
 8007146:	d107      	bne.n	8007158 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007156:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	e035      	b.n	80071c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800716a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800716c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	2200      	movs	r2, #0
 8007174:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 f82b 	bl	80071d4 <I2C_WaitOnFlagUntilTimeout>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00d      	beq.n	80071a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800718e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007192:	d103      	bne.n	800719c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800719a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e013      	b.n	80071c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80071a0:	897b      	ldrh	r3, [r7, #10]
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	f043 0301 	orr.w	r3, r3, #1
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b2:	6a3a      	ldr	r2, [r7, #32]
 80071b4:	4906      	ldr	r1, [pc, #24]	@ (80071d0 <I2C_RequestMemoryRead+0x1cc>)
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 f886 	bl	80072c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e000      	b.n	80071c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	00010002 	.word	0x00010002

080071d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	4613      	mov	r3, r2
 80071e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071e4:	e048      	b.n	8007278 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ec:	d044      	beq.n	8007278 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ee:	f7fe fa11 	bl	8005614 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d302      	bcc.n	8007204 <I2C_WaitOnFlagUntilTimeout+0x30>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d139      	bne.n	8007278 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	0c1b      	lsrs	r3, r3, #16
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b01      	cmp	r3, #1
 800720c:	d10d      	bne.n	800722a <I2C_WaitOnFlagUntilTimeout+0x56>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	695b      	ldr	r3, [r3, #20]
 8007214:	43da      	mvns	r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	4013      	ands	r3, r2
 800721a:	b29b      	uxth	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	bf0c      	ite	eq
 8007220:	2301      	moveq	r3, #1
 8007222:	2300      	movne	r3, #0
 8007224:	b2db      	uxtb	r3, r3
 8007226:	461a      	mov	r2, r3
 8007228:	e00c      	b.n	8007244 <I2C_WaitOnFlagUntilTimeout+0x70>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	699b      	ldr	r3, [r3, #24]
 8007230:	43da      	mvns	r2, r3
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	4013      	ands	r3, r2
 8007236:	b29b      	uxth	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	bf0c      	ite	eq
 800723c:	2301      	moveq	r3, #1
 800723e:	2300      	movne	r3, #0
 8007240:	b2db      	uxtb	r3, r3
 8007242:	461a      	mov	r2, r3
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	429a      	cmp	r2, r3
 8007248:	d116      	bne.n	8007278 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007264:	f043 0220 	orr.w	r2, r3, #32
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e023      	b.n	80072c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	0c1b      	lsrs	r3, r3, #16
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b01      	cmp	r3, #1
 8007280:	d10d      	bne.n	800729e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	695b      	ldr	r3, [r3, #20]
 8007288:	43da      	mvns	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	4013      	ands	r3, r2
 800728e:	b29b      	uxth	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	bf0c      	ite	eq
 8007294:	2301      	moveq	r3, #1
 8007296:	2300      	movne	r3, #0
 8007298:	b2db      	uxtb	r3, r3
 800729a:	461a      	mov	r2, r3
 800729c:	e00c      	b.n	80072b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	43da      	mvns	r2, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	4013      	ands	r3, r2
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	bf0c      	ite	eq
 80072b0:	2301      	moveq	r3, #1
 80072b2:	2300      	movne	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	461a      	mov	r2, r3
 80072b8:	79fb      	ldrb	r3, [r7, #7]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d093      	beq.n	80071e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072d6:	e071      	b.n	80073bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072e6:	d123      	bne.n	8007330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007300:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2220      	movs	r2, #32
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731c:	f043 0204 	orr.w	r2, r3, #4
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e067      	b.n	8007400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007336:	d041      	beq.n	80073bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007338:	f7fe f96c 	bl	8005614 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	429a      	cmp	r2, r3
 8007346:	d302      	bcc.n	800734e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d136      	bne.n	80073bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	0c1b      	lsrs	r3, r3, #16
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b01      	cmp	r3, #1
 8007356:	d10c      	bne.n	8007372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	43da      	mvns	r2, r3
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	4013      	ands	r3, r2
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	bf14      	ite	ne
 800736a:	2301      	movne	r3, #1
 800736c:	2300      	moveq	r3, #0
 800736e:	b2db      	uxtb	r3, r3
 8007370:	e00b      	b.n	800738a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	43da      	mvns	r2, r3
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	4013      	ands	r3, r2
 800737e:	b29b      	uxth	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	bf14      	ite	ne
 8007384:	2301      	movne	r3, #1
 8007386:	2300      	moveq	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d016      	beq.n	80073bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2220      	movs	r2, #32
 8007398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a8:	f043 0220 	orr.w	r2, r3, #32
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e021      	b.n	8007400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	0c1b      	lsrs	r3, r3, #16
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d10c      	bne.n	80073e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	43da      	mvns	r2, r3
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	4013      	ands	r3, r2
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	bf14      	ite	ne
 80073d8:	2301      	movne	r3, #1
 80073da:	2300      	moveq	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	e00b      	b.n	80073f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	43da      	mvns	r2, r3
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	4013      	ands	r3, r2
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	bf14      	ite	ne
 80073f2:	2301      	movne	r3, #1
 80073f4:	2300      	moveq	r3, #0
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f47f af6d 	bne.w	80072d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007414:	e034      	b.n	8007480 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 f8e3 	bl	80075e2 <I2C_IsAcknowledgeFailed>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e034      	b.n	8007490 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742c:	d028      	beq.n	8007480 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800742e:	f7fe f8f1 	bl	8005614 <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	429a      	cmp	r2, r3
 800743c:	d302      	bcc.n	8007444 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d11d      	bne.n	8007480 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800744e:	2b80      	cmp	r3, #128	@ 0x80
 8007450:	d016      	beq.n	8007480 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2220      	movs	r2, #32
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746c:	f043 0220 	orr.w	r2, r3, #32
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e007      	b.n	8007490 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800748a:	2b80      	cmp	r3, #128	@ 0x80
 800748c:	d1c3      	bne.n	8007416 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074a4:	e034      	b.n	8007510 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 f89b 	bl	80075e2 <I2C_IsAcknowledgeFailed>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e034      	b.n	8007520 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074bc:	d028      	beq.n	8007510 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074be:	f7fe f8a9 	bl	8005614 <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d302      	bcc.n	80074d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d11d      	bne.n	8007510 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d016      	beq.n	8007510 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2200      	movs	r2, #0
 80074e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2220      	movs	r2, #32
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fc:	f043 0220 	orr.w	r2, r3, #32
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e007      	b.n	8007520 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b04      	cmp	r3, #4
 800751c:	d1c3      	bne.n	80074a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007534:	e049      	b.n	80075ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	f003 0310 	and.w	r3, r3, #16
 8007540:	2b10      	cmp	r3, #16
 8007542:	d119      	bne.n	8007578 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f06f 0210 	mvn.w	r2, #16
 800754c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2220      	movs	r2, #32
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e030      	b.n	80075da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007578:	f7fe f84c 	bl	8005614 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	429a      	cmp	r2, r3
 8007586:	d302      	bcc.n	800758e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d11d      	bne.n	80075ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007598:	2b40      	cmp	r3, #64	@ 0x40
 800759a:	d016      	beq.n	80075ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b6:	f043 0220 	orr.w	r2, r3, #32
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e007      	b.n	80075da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d4:	2b40      	cmp	r3, #64	@ 0x40
 80075d6:	d1ae      	bne.n	8007536 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075f8:	d11b      	bne.n	8007632 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007602:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2220      	movs	r2, #32
 800760e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761e:	f043 0204 	orr.w	r2, r3, #4
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e267      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d075      	beq.n	800774a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800765e:	4b88      	ldr	r3, [pc, #544]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f003 030c 	and.w	r3, r3, #12
 8007666:	2b04      	cmp	r3, #4
 8007668:	d00c      	beq.n	8007684 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800766a:	4b85      	ldr	r3, [pc, #532]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007672:	2b08      	cmp	r3, #8
 8007674:	d112      	bne.n	800769c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007676:	4b82      	ldr	r3, [pc, #520]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800767e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007682:	d10b      	bne.n	800769c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007684:	4b7e      	ldr	r3, [pc, #504]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d05b      	beq.n	8007748 <HAL_RCC_OscConfig+0x108>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d157      	bne.n	8007748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e242      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076a4:	d106      	bne.n	80076b4 <HAL_RCC_OscConfig+0x74>
 80076a6:	4b76      	ldr	r3, [pc, #472]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a75      	ldr	r2, [pc, #468]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 80076ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076b0:	6013      	str	r3, [r2, #0]
 80076b2:	e01d      	b.n	80076f0 <HAL_RCC_OscConfig+0xb0>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076bc:	d10c      	bne.n	80076d8 <HAL_RCC_OscConfig+0x98>
 80076be:	4b70      	ldr	r3, [pc, #448]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a6f      	ldr	r2, [pc, #444]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 80076c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	4b6d      	ldr	r3, [pc, #436]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a6c      	ldr	r2, [pc, #432]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 80076d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	e00b      	b.n	80076f0 <HAL_RCC_OscConfig+0xb0>
 80076d8:	4b69      	ldr	r3, [pc, #420]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a68      	ldr	r2, [pc, #416]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 80076de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076e2:	6013      	str	r3, [r2, #0]
 80076e4:	4b66      	ldr	r3, [pc, #408]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a65      	ldr	r2, [pc, #404]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 80076ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d013      	beq.n	8007720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076f8:	f7fd ff8c 	bl	8005614 <HAL_GetTick>
 80076fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076fe:	e008      	b.n	8007712 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007700:	f7fd ff88 	bl	8005614 <HAL_GetTick>
 8007704:	4602      	mov	r2, r0
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	2b64      	cmp	r3, #100	@ 0x64
 800770c:	d901      	bls.n	8007712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e207      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007712:	4b5b      	ldr	r3, [pc, #364]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0f0      	beq.n	8007700 <HAL_RCC_OscConfig+0xc0>
 800771e:	e014      	b.n	800774a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007720:	f7fd ff78 	bl	8005614 <HAL_GetTick>
 8007724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007726:	e008      	b.n	800773a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007728:	f7fd ff74 	bl	8005614 <HAL_GetTick>
 800772c:	4602      	mov	r2, r0
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	2b64      	cmp	r3, #100	@ 0x64
 8007734:	d901      	bls.n	800773a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e1f3      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800773a:	4b51      	ldr	r3, [pc, #324]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1f0      	bne.n	8007728 <HAL_RCC_OscConfig+0xe8>
 8007746:	e000      	b.n	800774a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d063      	beq.n	800781e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007756:	4b4a      	ldr	r3, [pc, #296]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f003 030c 	and.w	r3, r3, #12
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00b      	beq.n	800777a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007762:	4b47      	ldr	r3, [pc, #284]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800776a:	2b08      	cmp	r3, #8
 800776c:	d11c      	bne.n	80077a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800776e:	4b44      	ldr	r3, [pc, #272]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d116      	bne.n	80077a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800777a:	4b41      	ldr	r3, [pc, #260]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d005      	beq.n	8007792 <HAL_RCC_OscConfig+0x152>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d001      	beq.n	8007792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e1c7      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007792:	4b3b      	ldr	r3, [pc, #236]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	4937      	ldr	r1, [pc, #220]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077a6:	e03a      	b.n	800781e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d020      	beq.n	80077f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077b0:	4b34      	ldr	r3, [pc, #208]	@ (8007884 <HAL_RCC_OscConfig+0x244>)
 80077b2:	2201      	movs	r2, #1
 80077b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b6:	f7fd ff2d 	bl	8005614 <HAL_GetTick>
 80077ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077bc:	e008      	b.n	80077d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077be:	f7fd ff29 	bl	8005614 <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d901      	bls.n	80077d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e1a8      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0302 	and.w	r3, r3, #2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0f0      	beq.n	80077be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077dc:	4b28      	ldr	r3, [pc, #160]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	00db      	lsls	r3, r3, #3
 80077ea:	4925      	ldr	r1, [pc, #148]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	600b      	str	r3, [r1, #0]
 80077f0:	e015      	b.n	800781e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077f2:	4b24      	ldr	r3, [pc, #144]	@ (8007884 <HAL_RCC_OscConfig+0x244>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f8:	f7fd ff0c 	bl	8005614 <HAL_GetTick>
 80077fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077fe:	e008      	b.n	8007812 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007800:	f7fd ff08 	bl	8005614 <HAL_GetTick>
 8007804:	4602      	mov	r2, r0
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	1ad3      	subs	r3, r2, r3
 800780a:	2b02      	cmp	r3, #2
 800780c:	d901      	bls.n	8007812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e187      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007812:	4b1b      	ldr	r3, [pc, #108]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1f0      	bne.n	8007800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0308 	and.w	r3, r3, #8
 8007826:	2b00      	cmp	r3, #0
 8007828:	d036      	beq.n	8007898 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d016      	beq.n	8007860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007832:	4b15      	ldr	r3, [pc, #84]	@ (8007888 <HAL_RCC_OscConfig+0x248>)
 8007834:	2201      	movs	r2, #1
 8007836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007838:	f7fd feec 	bl	8005614 <HAL_GetTick>
 800783c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800783e:	e008      	b.n	8007852 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007840:	f7fd fee8 	bl	8005614 <HAL_GetTick>
 8007844:	4602      	mov	r2, r0
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	1ad3      	subs	r3, r2, r3
 800784a:	2b02      	cmp	r3, #2
 800784c:	d901      	bls.n	8007852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e167      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007852:	4b0b      	ldr	r3, [pc, #44]	@ (8007880 <HAL_RCC_OscConfig+0x240>)
 8007854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007856:	f003 0302 	and.w	r3, r3, #2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d0f0      	beq.n	8007840 <HAL_RCC_OscConfig+0x200>
 800785e:	e01b      	b.n	8007898 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007860:	4b09      	ldr	r3, [pc, #36]	@ (8007888 <HAL_RCC_OscConfig+0x248>)
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007866:	f7fd fed5 	bl	8005614 <HAL_GetTick>
 800786a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800786c:	e00e      	b.n	800788c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800786e:	f7fd fed1 	bl	8005614 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	2b02      	cmp	r3, #2
 800787a:	d907      	bls.n	800788c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e150      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
 8007880:	40023800 	.word	0x40023800
 8007884:	42470000 	.word	0x42470000
 8007888:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800788c:	4b88      	ldr	r3, [pc, #544]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 800788e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007890:	f003 0302 	and.w	r3, r3, #2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1ea      	bne.n	800786e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0304 	and.w	r3, r3, #4
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 8097 	beq.w	80079d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078a6:	2300      	movs	r3, #0
 80078a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078aa:	4b81      	ldr	r3, [pc, #516]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 80078ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10f      	bne.n	80078d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078b6:	2300      	movs	r3, #0
 80078b8:	60bb      	str	r3, [r7, #8]
 80078ba:	4b7d      	ldr	r3, [pc, #500]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 80078bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078be:	4a7c      	ldr	r2, [pc, #496]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 80078c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80078c6:	4b7a      	ldr	r3, [pc, #488]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 80078c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078ce:	60bb      	str	r3, [r7, #8]
 80078d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078d2:	2301      	movs	r3, #1
 80078d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078d6:	4b77      	ldr	r3, [pc, #476]	@ (8007ab4 <HAL_RCC_OscConfig+0x474>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d118      	bne.n	8007914 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078e2:	4b74      	ldr	r3, [pc, #464]	@ (8007ab4 <HAL_RCC_OscConfig+0x474>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a73      	ldr	r2, [pc, #460]	@ (8007ab4 <HAL_RCC_OscConfig+0x474>)
 80078e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078ee:	f7fd fe91 	bl	8005614 <HAL_GetTick>
 80078f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078f4:	e008      	b.n	8007908 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078f6:	f7fd fe8d 	bl	8005614 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e10c      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007908:	4b6a      	ldr	r3, [pc, #424]	@ (8007ab4 <HAL_RCC_OscConfig+0x474>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007910:	2b00      	cmp	r3, #0
 8007912:	d0f0      	beq.n	80078f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d106      	bne.n	800792a <HAL_RCC_OscConfig+0x2ea>
 800791c:	4b64      	ldr	r3, [pc, #400]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 800791e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007920:	4a63      	ldr	r2, [pc, #396]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 8007922:	f043 0301 	orr.w	r3, r3, #1
 8007926:	6713      	str	r3, [r2, #112]	@ 0x70
 8007928:	e01c      	b.n	8007964 <HAL_RCC_OscConfig+0x324>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	2b05      	cmp	r3, #5
 8007930:	d10c      	bne.n	800794c <HAL_RCC_OscConfig+0x30c>
 8007932:	4b5f      	ldr	r3, [pc, #380]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 8007934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007936:	4a5e      	ldr	r2, [pc, #376]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 8007938:	f043 0304 	orr.w	r3, r3, #4
 800793c:	6713      	str	r3, [r2, #112]	@ 0x70
 800793e:	4b5c      	ldr	r3, [pc, #368]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 8007940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007942:	4a5b      	ldr	r2, [pc, #364]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 8007944:	f043 0301 	orr.w	r3, r3, #1
 8007948:	6713      	str	r3, [r2, #112]	@ 0x70
 800794a:	e00b      	b.n	8007964 <HAL_RCC_OscConfig+0x324>
 800794c:	4b58      	ldr	r3, [pc, #352]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 800794e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007950:	4a57      	ldr	r2, [pc, #348]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 8007952:	f023 0301 	bic.w	r3, r3, #1
 8007956:	6713      	str	r3, [r2, #112]	@ 0x70
 8007958:	4b55      	ldr	r3, [pc, #340]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 800795a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800795c:	4a54      	ldr	r2, [pc, #336]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 800795e:	f023 0304 	bic.w	r3, r3, #4
 8007962:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d015      	beq.n	8007998 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800796c:	f7fd fe52 	bl	8005614 <HAL_GetTick>
 8007970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007972:	e00a      	b.n	800798a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007974:	f7fd fe4e 	bl	8005614 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007982:	4293      	cmp	r3, r2
 8007984:	d901      	bls.n	800798a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e0cb      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800798a:	4b49      	ldr	r3, [pc, #292]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 800798c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b00      	cmp	r3, #0
 8007994:	d0ee      	beq.n	8007974 <HAL_RCC_OscConfig+0x334>
 8007996:	e014      	b.n	80079c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007998:	f7fd fe3c 	bl	8005614 <HAL_GetTick>
 800799c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800799e:	e00a      	b.n	80079b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079a0:	f7fd fe38 	bl	8005614 <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d901      	bls.n	80079b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e0b5      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079b6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 80079b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1ee      	bne.n	80079a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80079c2:	7dfb      	ldrb	r3, [r7, #23]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d105      	bne.n	80079d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079c8:	4b39      	ldr	r3, [pc, #228]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 80079ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079cc:	4a38      	ldr	r2, [pc, #224]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 80079ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80a1 	beq.w	8007b20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079de:	4b34      	ldr	r3, [pc, #208]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f003 030c 	and.w	r3, r3, #12
 80079e6:	2b08      	cmp	r3, #8
 80079e8:	d05c      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d141      	bne.n	8007a76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079f2:	4b31      	ldr	r3, [pc, #196]	@ (8007ab8 <HAL_RCC_OscConfig+0x478>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079f8:	f7fd fe0c 	bl	8005614 <HAL_GetTick>
 80079fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079fe:	e008      	b.n	8007a12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a00:	f7fd fe08 	bl	8005614 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e087      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a12:	4b27      	ldr	r3, [pc, #156]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1f0      	bne.n	8007a00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	69da      	ldr	r2, [r3, #28]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	431a      	orrs	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a2c:	019b      	lsls	r3, r3, #6
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a34:	085b      	lsrs	r3, r3, #1
 8007a36:	3b01      	subs	r3, #1
 8007a38:	041b      	lsls	r3, r3, #16
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a40:	061b      	lsls	r3, r3, #24
 8007a42:	491b      	ldr	r1, [pc, #108]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a48:	4b1b      	ldr	r3, [pc, #108]	@ (8007ab8 <HAL_RCC_OscConfig+0x478>)
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a4e:	f7fd fde1 	bl	8005614 <HAL_GetTick>
 8007a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a54:	e008      	b.n	8007a68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a56:	f7fd fddd 	bl	8005614 <HAL_GetTick>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	2b02      	cmp	r3, #2
 8007a62:	d901      	bls.n	8007a68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e05c      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a68:	4b11      	ldr	r3, [pc, #68]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d0f0      	beq.n	8007a56 <HAL_RCC_OscConfig+0x416>
 8007a74:	e054      	b.n	8007b20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a76:	4b10      	ldr	r3, [pc, #64]	@ (8007ab8 <HAL_RCC_OscConfig+0x478>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a7c:	f7fd fdca 	bl	8005614 <HAL_GetTick>
 8007a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a82:	e008      	b.n	8007a96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a84:	f7fd fdc6 	bl	8005614 <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d901      	bls.n	8007a96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e045      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a96:	4b06      	ldr	r3, [pc, #24]	@ (8007ab0 <HAL_RCC_OscConfig+0x470>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1f0      	bne.n	8007a84 <HAL_RCC_OscConfig+0x444>
 8007aa2:	e03d      	b.n	8007b20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d107      	bne.n	8007abc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e038      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
 8007ab0:	40023800 	.word	0x40023800
 8007ab4:	40007000 	.word	0x40007000
 8007ab8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007abc:	4b1b      	ldr	r3, [pc, #108]	@ (8007b2c <HAL_RCC_OscConfig+0x4ec>)
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d028      	beq.n	8007b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d121      	bne.n	8007b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d11a      	bne.n	8007b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007aec:	4013      	ands	r3, r2
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007af2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d111      	bne.n	8007b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b02:	085b      	lsrs	r3, r3, #1
 8007b04:	3b01      	subs	r3, #1
 8007b06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d107      	bne.n	8007b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d001      	beq.n	8007b20 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e000      	b.n	8007b22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	40023800 	.word	0x40023800

08007b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d101      	bne.n	8007b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e0cc      	b.n	8007cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b44:	4b68      	ldr	r3, [pc, #416]	@ (8007ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0307 	and.w	r3, r3, #7
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d90c      	bls.n	8007b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b52:	4b65      	ldr	r3, [pc, #404]	@ (8007ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	b2d2      	uxtb	r2, r2
 8007b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b5a:	4b63      	ldr	r3, [pc, #396]	@ (8007ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0307 	and.w	r3, r3, #7
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d001      	beq.n	8007b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e0b8      	b.n	8007cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d020      	beq.n	8007bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d005      	beq.n	8007b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b84:	4b59      	ldr	r3, [pc, #356]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	4a58      	ldr	r2, [pc, #352]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007b8a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007b8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0308 	and.w	r3, r3, #8
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d005      	beq.n	8007ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b9c:	4b53      	ldr	r3, [pc, #332]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	4a52      	ldr	r2, [pc, #328]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007ba2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ba8:	4b50      	ldr	r3, [pc, #320]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	494d      	ldr	r1, [pc, #308]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d044      	beq.n	8007c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d107      	bne.n	8007bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bce:	4b47      	ldr	r3, [pc, #284]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d119      	bne.n	8007c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e07f      	b.n	8007cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d003      	beq.n	8007bee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d107      	bne.n	8007bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bee:	4b3f      	ldr	r3, [pc, #252]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d109      	bne.n	8007c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e06f      	b.n	8007cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e067      	b.n	8007cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c0e:	4b37      	ldr	r3, [pc, #220]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f023 0203 	bic.w	r2, r3, #3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	4934      	ldr	r1, [pc, #208]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c20:	f7fd fcf8 	bl	8005614 <HAL_GetTick>
 8007c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c26:	e00a      	b.n	8007c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c28:	f7fd fcf4 	bl	8005614 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d901      	bls.n	8007c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e04f      	b.n	8007cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c3e:	4b2b      	ldr	r3, [pc, #172]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f003 020c 	and.w	r2, r3, #12
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d1eb      	bne.n	8007c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c50:	4b25      	ldr	r3, [pc, #148]	@ (8007ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0307 	and.w	r3, r3, #7
 8007c58:	683a      	ldr	r2, [r7, #0]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d20c      	bcs.n	8007c78 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c5e:	4b22      	ldr	r3, [pc, #136]	@ (8007ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c60:	683a      	ldr	r2, [r7, #0]
 8007c62:	b2d2      	uxtb	r2, r2
 8007c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c66:	4b20      	ldr	r3, [pc, #128]	@ (8007ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0307 	and.w	r3, r3, #7
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d001      	beq.n	8007c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e032      	b.n	8007cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d008      	beq.n	8007c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c84:	4b19      	ldr	r3, [pc, #100]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	4916      	ldr	r1, [pc, #88]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0308 	and.w	r3, r3, #8
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d009      	beq.n	8007cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ca2:	4b12      	ldr	r3, [pc, #72]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	490e      	ldr	r1, [pc, #56]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007cb6:	f000 f821 	bl	8007cfc <HAL_RCC_GetSysClockFreq>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8007cec <HAL_RCC_ClockConfig+0x1bc>)
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	091b      	lsrs	r3, r3, #4
 8007cc2:	f003 030f 	and.w	r3, r3, #15
 8007cc6:	490a      	ldr	r1, [pc, #40]	@ (8007cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8007cc8:	5ccb      	ldrb	r3, [r1, r3]
 8007cca:	fa22 f303 	lsr.w	r3, r2, r3
 8007cce:	4a09      	ldr	r2, [pc, #36]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8007cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007cd2:	4b09      	ldr	r3, [pc, #36]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fd fc58 	bl	800558c <HAL_InitTick>

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	40023c00 	.word	0x40023c00
 8007cec:	40023800 	.word	0x40023800
 8007cf0:	0800ec78 	.word	0x0800ec78
 8007cf4:	200000a0 	.word	0x200000a0
 8007cf8:	200000a4 	.word	0x200000a4

08007cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d00:	b090      	sub	sp, #64	@ 0x40
 8007d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d14:	4b59      	ldr	r3, [pc, #356]	@ (8007e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f003 030c 	and.w	r3, r3, #12
 8007d1c:	2b08      	cmp	r3, #8
 8007d1e:	d00d      	beq.n	8007d3c <HAL_RCC_GetSysClockFreq+0x40>
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	f200 80a1 	bhi.w	8007e68 <HAL_RCC_GetSysClockFreq+0x16c>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <HAL_RCC_GetSysClockFreq+0x34>
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d003      	beq.n	8007d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8007d2e:	e09b      	b.n	8007e68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d30:	4b53      	ldr	r3, [pc, #332]	@ (8007e80 <HAL_RCC_GetSysClockFreq+0x184>)
 8007d32:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007d34:	e09b      	b.n	8007e6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d36:	4b53      	ldr	r3, [pc, #332]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0x188>)
 8007d38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007d3a:	e098      	b.n	8007e6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8007e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d46:	4b4d      	ldr	r3, [pc, #308]	@ (8007e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d028      	beq.n	8007da4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d52:	4b4a      	ldr	r3, [pc, #296]	@ (8007e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	099b      	lsrs	r3, r3, #6
 8007d58:	2200      	movs	r2, #0
 8007d5a:	623b      	str	r3, [r7, #32]
 8007d5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007d64:	2100      	movs	r1, #0
 8007d66:	4b47      	ldr	r3, [pc, #284]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0x188>)
 8007d68:	fb03 f201 	mul.w	r2, r3, r1
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	fb00 f303 	mul.w	r3, r0, r3
 8007d72:	4413      	add	r3, r2
 8007d74:	4a43      	ldr	r2, [pc, #268]	@ (8007e84 <HAL_RCC_GetSysClockFreq+0x188>)
 8007d76:	fba0 1202 	umull	r1, r2, r0, r2
 8007d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d7c:	460a      	mov	r2, r1
 8007d7e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007d80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d82:	4413      	add	r3, r2
 8007d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d88:	2200      	movs	r2, #0
 8007d8a:	61bb      	str	r3, [r7, #24]
 8007d8c:	61fa      	str	r2, [r7, #28]
 8007d8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007d96:	f7f8 ff27 	bl	8000be8 <__aeabi_uldivmod>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4613      	mov	r3, r2
 8007da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007da2:	e053      	b.n	8007e4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007da4:	4b35      	ldr	r3, [pc, #212]	@ (8007e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	099b      	lsrs	r3, r3, #6
 8007daa:	2200      	movs	r2, #0
 8007dac:	613b      	str	r3, [r7, #16]
 8007dae:	617a      	str	r2, [r7, #20]
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007db6:	f04f 0b00 	mov.w	fp, #0
 8007dba:	4652      	mov	r2, sl
 8007dbc:	465b      	mov	r3, fp
 8007dbe:	f04f 0000 	mov.w	r0, #0
 8007dc2:	f04f 0100 	mov.w	r1, #0
 8007dc6:	0159      	lsls	r1, r3, #5
 8007dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dcc:	0150      	lsls	r0, r2, #5
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	ebb2 080a 	subs.w	r8, r2, sl
 8007dd6:	eb63 090b 	sbc.w	r9, r3, fp
 8007dda:	f04f 0200 	mov.w	r2, #0
 8007dde:	f04f 0300 	mov.w	r3, #0
 8007de2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007de6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007dea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007dee:	ebb2 0408 	subs.w	r4, r2, r8
 8007df2:	eb63 0509 	sbc.w	r5, r3, r9
 8007df6:	f04f 0200 	mov.w	r2, #0
 8007dfa:	f04f 0300 	mov.w	r3, #0
 8007dfe:	00eb      	lsls	r3, r5, #3
 8007e00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e04:	00e2      	lsls	r2, r4, #3
 8007e06:	4614      	mov	r4, r2
 8007e08:	461d      	mov	r5, r3
 8007e0a:	eb14 030a 	adds.w	r3, r4, sl
 8007e0e:	603b      	str	r3, [r7, #0]
 8007e10:	eb45 030b 	adc.w	r3, r5, fp
 8007e14:	607b      	str	r3, [r7, #4]
 8007e16:	f04f 0200 	mov.w	r2, #0
 8007e1a:	f04f 0300 	mov.w	r3, #0
 8007e1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e22:	4629      	mov	r1, r5
 8007e24:	028b      	lsls	r3, r1, #10
 8007e26:	4621      	mov	r1, r4
 8007e28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	028a      	lsls	r2, r1, #10
 8007e30:	4610      	mov	r0, r2
 8007e32:	4619      	mov	r1, r3
 8007e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e36:	2200      	movs	r2, #0
 8007e38:	60bb      	str	r3, [r7, #8]
 8007e3a:	60fa      	str	r2, [r7, #12]
 8007e3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e40:	f7f8 fed2 	bl	8000be8 <__aeabi_uldivmod>
 8007e44:	4602      	mov	r2, r0
 8007e46:	460b      	mov	r3, r1
 8007e48:	4613      	mov	r3, r2
 8007e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	0c1b      	lsrs	r3, r3, #16
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	3301      	adds	r3, #1
 8007e58:	005b      	lsls	r3, r3, #1
 8007e5a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007e5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e66:	e002      	b.n	8007e6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e68:	4b05      	ldr	r3, [pc, #20]	@ (8007e80 <HAL_RCC_GetSysClockFreq+0x184>)
 8007e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3740      	adds	r7, #64	@ 0x40
 8007e74:	46bd      	mov	sp, r7
 8007e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e7a:	bf00      	nop
 8007e7c:	40023800 	.word	0x40023800
 8007e80:	00f42400 	.word	0x00f42400
 8007e84:	017d7840 	.word	0x017d7840

08007e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e8c:	4b03      	ldr	r3, [pc, #12]	@ (8007e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	200000a0 	.word	0x200000a0

08007ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ea4:	f7ff fff0 	bl	8007e88 <HAL_RCC_GetHCLKFreq>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	4b05      	ldr	r3, [pc, #20]	@ (8007ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	0a9b      	lsrs	r3, r3, #10
 8007eb0:	f003 0307 	and.w	r3, r3, #7
 8007eb4:	4903      	ldr	r1, [pc, #12]	@ (8007ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eb6:	5ccb      	ldrb	r3, [r1, r3]
 8007eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	40023800 	.word	0x40023800
 8007ec4:	0800ec88 	.word	0x0800ec88

08007ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ecc:	f7ff ffdc 	bl	8007e88 <HAL_RCC_GetHCLKFreq>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	4b05      	ldr	r3, [pc, #20]	@ (8007ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	0b5b      	lsrs	r3, r3, #13
 8007ed8:	f003 0307 	and.w	r3, r3, #7
 8007edc:	4903      	ldr	r1, [pc, #12]	@ (8007eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ede:	5ccb      	ldrb	r3, [r1, r3]
 8007ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	40023800 	.word	0x40023800
 8007eec:	0800ec88 	.word	0x0800ec88

08007ef0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e042      	b.n	8007f88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d106      	bne.n	8007f1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7fd faa4 	bl	8005464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2224      	movs	r2, #36	@ 0x24
 8007f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fcdb 	bl	80088f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	691a      	ldr	r2, [r3, #16]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	695a      	ldr	r2, [r3, #20]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b20      	cmp	r3, #32
 8007fa8:	d112      	bne.n	8007fd0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <HAL_UART_Receive_IT+0x26>
 8007fb0:	88fb      	ldrh	r3, [r7, #6]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e00b      	b.n	8007fd2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007fc0:	88fb      	ldrh	r3, [r7, #6]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	68b9      	ldr	r1, [r7, #8]
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 faba 	bl	8008540 <UART_Start_Receive_IT>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	e000      	b.n	8007fd2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007fd0:	2302      	movs	r3, #2
  }
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
	...

08007fdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b0ba      	sub	sp, #232	@ 0xe8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008002:	2300      	movs	r3, #0
 8008004:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008008:	2300      	movs	r3, #0
 800800a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800800e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008012:	f003 030f 	and.w	r3, r3, #15
 8008016:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800801a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10f      	bne.n	8008042 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008026:	f003 0320 	and.w	r3, r3, #32
 800802a:	2b00      	cmp	r3, #0
 800802c:	d009      	beq.n	8008042 <HAL_UART_IRQHandler+0x66>
 800802e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008032:	f003 0320 	and.w	r3, r3, #32
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fb99 	bl	8008772 <UART_Receive_IT>
      return;
 8008040:	e25b      	b.n	80084fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008046:	2b00      	cmp	r3, #0
 8008048:	f000 80de 	beq.w	8008208 <HAL_UART_IRQHandler+0x22c>
 800804c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	d106      	bne.n	8008066 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800805c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 80d1 	beq.w	8008208 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00b      	beq.n	800808a <HAL_UART_IRQHandler+0xae>
 8008072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800807a:	2b00      	cmp	r3, #0
 800807c:	d005      	beq.n	800808a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008082:	f043 0201 	orr.w	r2, r3, #1
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800808a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800808e:	f003 0304 	and.w	r3, r3, #4
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00b      	beq.n	80080ae <HAL_UART_IRQHandler+0xd2>
 8008096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d005      	beq.n	80080ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a6:	f043 0202 	orr.w	r2, r3, #2
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00b      	beq.n	80080d2 <HAL_UART_IRQHandler+0xf6>
 80080ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d005      	beq.n	80080d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ca:	f043 0204 	orr.w	r2, r3, #4
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80080d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080d6:	f003 0308 	and.w	r3, r3, #8
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d011      	beq.n	8008102 <HAL_UART_IRQHandler+0x126>
 80080de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080e2:	f003 0320 	and.w	r3, r3, #32
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d105      	bne.n	80080f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80080ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d005      	beq.n	8008102 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080fa:	f043 0208 	orr.w	r2, r3, #8
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 81f2 	beq.w	80084f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800810c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008110:	f003 0320 	and.w	r3, r3, #32
 8008114:	2b00      	cmp	r3, #0
 8008116:	d008      	beq.n	800812a <HAL_UART_IRQHandler+0x14e>
 8008118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800811c:	f003 0320 	and.w	r3, r3, #32
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fb24 	bl	8008772 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008134:	2b40      	cmp	r3, #64	@ 0x40
 8008136:	bf0c      	ite	eq
 8008138:	2301      	moveq	r3, #1
 800813a:	2300      	movne	r3, #0
 800813c:	b2db      	uxtb	r3, r3
 800813e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d103      	bne.n	8008156 <HAL_UART_IRQHandler+0x17a>
 800814e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008152:	2b00      	cmp	r3, #0
 8008154:	d04f      	beq.n	80081f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fa2c 	bl	80085b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008166:	2b40      	cmp	r3, #64	@ 0x40
 8008168:	d141      	bne.n	80081ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3314      	adds	r3, #20
 8008170:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008174:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008178:	e853 3f00 	ldrex	r3, [r3]
 800817c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008180:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008184:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008188:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3314      	adds	r3, #20
 8008192:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008196:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800819a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80081a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80081ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1d9      	bne.n	800816a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d013      	beq.n	80081e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081c2:	4a7e      	ldr	r2, [pc, #504]	@ (80083bc <HAL_UART_IRQHandler+0x3e0>)
 80081c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fd fbd3 	bl	8005976 <HAL_DMA_Abort_IT>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d016      	beq.n	8008204 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80081e0:	4610      	mov	r0, r2
 80081e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081e4:	e00e      	b.n	8008204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f994 	bl	8008514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081ec:	e00a      	b.n	8008204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f990 	bl	8008514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f4:	e006      	b.n	8008204 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f98c 	bl	8008514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008202:	e175      	b.n	80084f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008204:	bf00      	nop
    return;
 8008206:	e173      	b.n	80084f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800820c:	2b01      	cmp	r3, #1
 800820e:	f040 814f 	bne.w	80084b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008216:	f003 0310 	and.w	r3, r3, #16
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 8148 	beq.w	80084b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008224:	f003 0310 	and.w	r3, r3, #16
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 8141 	beq.w	80084b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800822e:	2300      	movs	r3, #0
 8008230:	60bb      	str	r3, [r7, #8]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	60bb      	str	r3, [r7, #8]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	60bb      	str	r3, [r7, #8]
 8008242:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800824e:	2b40      	cmp	r3, #64	@ 0x40
 8008250:	f040 80b6 	bne.w	80083c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008260:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 8145 	beq.w	80084f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800826e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008272:	429a      	cmp	r2, r3
 8008274:	f080 813e 	bcs.w	80084f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800827e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800828a:	f000 8088 	beq.w	800839e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	330c      	adds	r3, #12
 8008294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80082a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	330c      	adds	r3, #12
 80082b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80082ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80082be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80082c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80082ca:	e841 2300 	strex	r3, r2, [r1]
 80082ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80082d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1d9      	bne.n	800828e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3314      	adds	r3, #20
 80082e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082e4:	e853 3f00 	ldrex	r3, [r3]
 80082e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80082ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082ec:	f023 0301 	bic.w	r3, r3, #1
 80082f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	3314      	adds	r3, #20
 80082fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80082fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008302:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008304:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008306:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e1      	bne.n	80082da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	3314      	adds	r3, #20
 800831c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008320:	e853 3f00 	ldrex	r3, [r3]
 8008324:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800832c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3314      	adds	r3, #20
 8008336:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800833a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800833c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008340:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008342:	e841 2300 	strex	r3, r2, [r1]
 8008346:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008348:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1e3      	bne.n	8008316 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2220      	movs	r2, #32
 8008352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	330c      	adds	r3, #12
 8008362:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008366:	e853 3f00 	ldrex	r3, [r3]
 800836a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800836c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800836e:	f023 0310 	bic.w	r3, r3, #16
 8008372:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	330c      	adds	r3, #12
 800837c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008380:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008382:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008384:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008386:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008388:	e841 2300 	strex	r3, r2, [r1]
 800838c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800838e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1e3      	bne.n	800835c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008398:	4618      	mov	r0, r3
 800839a:	f7fd fa7c 	bl	8005896 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2202      	movs	r2, #2
 80083a2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f8b7 	bl	8008528 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80083ba:	e09b      	b.n	80084f4 <HAL_UART_IRQHandler+0x518>
 80083bc:	0800867b 	.word	0x0800867b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f000 808e 	beq.w	80084f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80083dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 8089 	beq.w	80084f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	330c      	adds	r3, #12
 80083ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f0:	e853 3f00 	ldrex	r3, [r3]
 80083f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	330c      	adds	r3, #12
 8008406:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800840a:	647a      	str	r2, [r7, #68]	@ 0x44
 800840c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008412:	e841 2300 	strex	r3, r2, [r1]
 8008416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e3      	bne.n	80083e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3314      	adds	r3, #20
 8008424:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	e853 3f00 	ldrex	r3, [r3]
 800842c:	623b      	str	r3, [r7, #32]
   return(result);
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	f023 0301 	bic.w	r3, r3, #1
 8008434:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3314      	adds	r3, #20
 800843e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008442:	633a      	str	r2, [r7, #48]	@ 0x30
 8008444:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e3      	bne.n	800841e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	330c      	adds	r3, #12
 800846a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	e853 3f00 	ldrex	r3, [r3]
 8008472:	60fb      	str	r3, [r7, #12]
   return(result);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f023 0310 	bic.w	r3, r3, #16
 800847a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	330c      	adds	r3, #12
 8008484:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008488:	61fa      	str	r2, [r7, #28]
 800848a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	69b9      	ldr	r1, [r7, #24]
 800848e:	69fa      	ldr	r2, [r7, #28]
 8008490:	e841 2300 	strex	r3, r2, [r1]
 8008494:	617b      	str	r3, [r7, #20]
   return(result);
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1e3      	bne.n	8008464 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2202      	movs	r2, #2
 80084a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f83d 	bl	8008528 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084ae:	e023      	b.n	80084f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80084b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d009      	beq.n	80084d0 <HAL_UART_IRQHandler+0x4f4>
 80084bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d003      	beq.n	80084d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f8ea 	bl	80086a2 <UART_Transmit_IT>
    return;
 80084ce:	e014      	b.n	80084fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80084d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00e      	beq.n	80084fa <HAL_UART_IRQHandler+0x51e>
 80084dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d008      	beq.n	80084fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f92a 	bl	8008742 <UART_EndTransmit_IT>
    return;
 80084ee:	e004      	b.n	80084fa <HAL_UART_IRQHandler+0x51e>
    return;
 80084f0:	bf00      	nop
 80084f2:	e002      	b.n	80084fa <HAL_UART_IRQHandler+0x51e>
      return;
 80084f4:	bf00      	nop
 80084f6:	e000      	b.n	80084fa <HAL_UART_IRQHandler+0x51e>
      return;
 80084f8:	bf00      	nop
  }
}
 80084fa:	37e8      	adds	r7, #232	@ 0xe8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008508:	bf00      	nop
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	4613      	mov	r3, r2
 800854c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	88fa      	ldrh	r2, [r7, #6]
 8008558:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	88fa      	ldrh	r2, [r7, #6]
 800855e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2222      	movs	r2, #34	@ 0x22
 800856a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d007      	beq.n	8008586 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68da      	ldr	r2, [r3, #12]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008584:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	695a      	ldr	r2, [r3, #20]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f042 0201 	orr.w	r2, r2, #1
 8008594:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68da      	ldr	r2, [r3, #12]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f042 0220 	orr.w	r2, r2, #32
 80085a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b095      	sub	sp, #84	@ 0x54
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	330c      	adds	r3, #12
 80085c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c6:	e853 3f00 	ldrex	r3, [r3]
 80085ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80085cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	330c      	adds	r3, #12
 80085da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80085dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80085de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80085e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80085e4:	e841 2300 	strex	r3, r2, [r1]
 80085e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80085ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e5      	bne.n	80085bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3314      	adds	r3, #20
 80085f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	e853 3f00 	ldrex	r3, [r3]
 80085fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	f023 0301 	bic.w	r3, r3, #1
 8008606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3314      	adds	r3, #20
 800860e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008610:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008612:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008614:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008618:	e841 2300 	strex	r3, r2, [r1]
 800861c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800861e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1e5      	bne.n	80085f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008628:	2b01      	cmp	r3, #1
 800862a:	d119      	bne.n	8008660 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	330c      	adds	r3, #12
 8008632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	e853 3f00 	ldrex	r3, [r3]
 800863a:	60bb      	str	r3, [r7, #8]
   return(result);
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f023 0310 	bic.w	r3, r3, #16
 8008642:	647b      	str	r3, [r7, #68]	@ 0x44
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	330c      	adds	r3, #12
 800864a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800864c:	61ba      	str	r2, [r7, #24]
 800864e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008650:	6979      	ldr	r1, [r7, #20]
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	e841 2300 	strex	r3, r2, [r1]
 8008658:	613b      	str	r3, [r7, #16]
   return(result);
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1e5      	bne.n	800862c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2220      	movs	r2, #32
 8008664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800866e:	bf00      	nop
 8008670:	3754      	adds	r7, #84	@ 0x54
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008686:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f7ff ff3d 	bl	8008514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800869a:	bf00      	nop
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b085      	sub	sp, #20
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b21      	cmp	r3, #33	@ 0x21
 80086b4:	d13e      	bne.n	8008734 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086be:	d114      	bne.n	80086ea <UART_Transmit_IT+0x48>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d110      	bne.n	80086ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a1b      	ldr	r3, [r3, #32]
 80086cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	881b      	ldrh	r3, [r3, #0]
 80086d2:	461a      	mov	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	1c9a      	adds	r2, r3, #2
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	621a      	str	r2, [r3, #32]
 80086e8:	e008      	b.n	80086fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	1c59      	adds	r1, r3, #1
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	6211      	str	r1, [r2, #32]
 80086f4:	781a      	ldrb	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008700:	b29b      	uxth	r3, r3
 8008702:	3b01      	subs	r3, #1
 8008704:	b29b      	uxth	r3, r3
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	4619      	mov	r1, r3
 800870a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10f      	bne.n	8008730 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800871e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800872e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	e000      	b.n	8008736 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008734:	2302      	movs	r3, #2
  }
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b082      	sub	sp, #8
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68da      	ldr	r2, [r3, #12]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008758:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2220      	movs	r2, #32
 800875e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff fecc 	bl	8008500 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b08c      	sub	sp, #48	@ 0x30
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b22      	cmp	r3, #34	@ 0x22
 8008784:	f040 80ae 	bne.w	80088e4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008790:	d117      	bne.n	80087c2 <UART_Receive_IT+0x50>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d113      	bne.n	80087c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800879a:	2300      	movs	r3, #0
 800879c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ba:	1c9a      	adds	r2, r3, #2
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	629a      	str	r2, [r3, #40]	@ 0x28
 80087c0:	e026      	b.n	8008810 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80087c8:	2300      	movs	r3, #0
 80087ca:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087d4:	d007      	beq.n	80087e6 <UART_Receive_IT+0x74>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10a      	bne.n	80087f4 <UART_Receive_IT+0x82>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d106      	bne.n	80087f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f0:	701a      	strb	r2, [r3, #0]
 80087f2:	e008      	b.n	8008806 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008800:	b2da      	uxtb	r2, r3
 8008802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008804:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008814:	b29b      	uxth	r3, r3
 8008816:	3b01      	subs	r3, #1
 8008818:	b29b      	uxth	r3, r3
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	4619      	mov	r1, r3
 800881e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008820:	2b00      	cmp	r3, #0
 8008822:	d15d      	bne.n	80088e0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68da      	ldr	r2, [r3, #12]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f022 0220 	bic.w	r2, r2, #32
 8008832:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68da      	ldr	r2, [r3, #12]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008842:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	695a      	ldr	r2, [r3, #20]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0201 	bic.w	r2, r2, #1
 8008852:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008866:	2b01      	cmp	r3, #1
 8008868:	d135      	bne.n	80088d6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	330c      	adds	r3, #12
 8008876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	e853 3f00 	ldrex	r3, [r3]
 800887e:	613b      	str	r3, [r7, #16]
   return(result);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f023 0310 	bic.w	r3, r3, #16
 8008886:	627b      	str	r3, [r7, #36]	@ 0x24
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	330c      	adds	r3, #12
 800888e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008890:	623a      	str	r2, [r7, #32]
 8008892:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008894:	69f9      	ldr	r1, [r7, #28]
 8008896:	6a3a      	ldr	r2, [r7, #32]
 8008898:	e841 2300 	strex	r3, r2, [r1]
 800889c:	61bb      	str	r3, [r7, #24]
   return(result);
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1e5      	bne.n	8008870 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0310 	and.w	r3, r3, #16
 80088ae:	2b10      	cmp	r3, #16
 80088b0:	d10a      	bne.n	80088c8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088b2:	2300      	movs	r3, #0
 80088b4:	60fb      	str	r3, [r7, #12]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088cc:	4619      	mov	r1, r3
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7ff fe2a 	bl	8008528 <HAL_UARTEx_RxEventCallback>
 80088d4:	e002      	b.n	80088dc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7f9 fa90 	bl	8001dfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80088dc:	2300      	movs	r3, #0
 80088de:	e002      	b.n	80088e6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	e000      	b.n	80088e6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80088e4:	2302      	movs	r3, #2
  }
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3730      	adds	r7, #48	@ 0x30
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088f4:	b0c0      	sub	sp, #256	@ 0x100
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800890c:	68d9      	ldr	r1, [r3, #12]
 800890e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	ea40 0301 	orr.w	r3, r0, r1
 8008918:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800891a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800891e:	689a      	ldr	r2, [r3, #8]
 8008920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	431a      	orrs	r2, r3
 8008928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	431a      	orrs	r2, r3
 8008930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	4313      	orrs	r3, r2
 8008938:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800893c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008948:	f021 010c 	bic.w	r1, r1, #12
 800894c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008956:	430b      	orrs	r3, r1
 8008958:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800895a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800896a:	6999      	ldr	r1, [r3, #24]
 800896c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	ea40 0301 	orr.w	r3, r0, r1
 8008976:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	4b8f      	ldr	r3, [pc, #572]	@ (8008bbc <UART_SetConfig+0x2cc>)
 8008980:	429a      	cmp	r2, r3
 8008982:	d005      	beq.n	8008990 <UART_SetConfig+0xa0>
 8008984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	4b8d      	ldr	r3, [pc, #564]	@ (8008bc0 <UART_SetConfig+0x2d0>)
 800898c:	429a      	cmp	r2, r3
 800898e:	d104      	bne.n	800899a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008990:	f7ff fa9a 	bl	8007ec8 <HAL_RCC_GetPCLK2Freq>
 8008994:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008998:	e003      	b.n	80089a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800899a:	f7ff fa81 	bl	8007ea0 <HAL_RCC_GetPCLK1Freq>
 800899e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089a6:	69db      	ldr	r3, [r3, #28]
 80089a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80089ac:	f040 810c 	bne.w	8008bc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089b4:	2200      	movs	r2, #0
 80089b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80089ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80089be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80089c2:	4622      	mov	r2, r4
 80089c4:	462b      	mov	r3, r5
 80089c6:	1891      	adds	r1, r2, r2
 80089c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80089ca:	415b      	adcs	r3, r3
 80089cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80089d2:	4621      	mov	r1, r4
 80089d4:	eb12 0801 	adds.w	r8, r2, r1
 80089d8:	4629      	mov	r1, r5
 80089da:	eb43 0901 	adc.w	r9, r3, r1
 80089de:	f04f 0200 	mov.w	r2, #0
 80089e2:	f04f 0300 	mov.w	r3, #0
 80089e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80089ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80089ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80089f2:	4690      	mov	r8, r2
 80089f4:	4699      	mov	r9, r3
 80089f6:	4623      	mov	r3, r4
 80089f8:	eb18 0303 	adds.w	r3, r8, r3
 80089fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008a00:	462b      	mov	r3, r5
 8008a02:	eb49 0303 	adc.w	r3, r9, r3
 8008a06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008a16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008a1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008a1e:	460b      	mov	r3, r1
 8008a20:	18db      	adds	r3, r3, r3
 8008a22:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a24:	4613      	mov	r3, r2
 8008a26:	eb42 0303 	adc.w	r3, r2, r3
 8008a2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008a30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008a34:	f7f8 f8d8 	bl	8000be8 <__aeabi_uldivmod>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	4b61      	ldr	r3, [pc, #388]	@ (8008bc4 <UART_SetConfig+0x2d4>)
 8008a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8008a42:	095b      	lsrs	r3, r3, #5
 8008a44:	011c      	lsls	r4, r3, #4
 8008a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008a54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008a58:	4642      	mov	r2, r8
 8008a5a:	464b      	mov	r3, r9
 8008a5c:	1891      	adds	r1, r2, r2
 8008a5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008a60:	415b      	adcs	r3, r3
 8008a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008a68:	4641      	mov	r1, r8
 8008a6a:	eb12 0a01 	adds.w	sl, r2, r1
 8008a6e:	4649      	mov	r1, r9
 8008a70:	eb43 0b01 	adc.w	fp, r3, r1
 8008a74:	f04f 0200 	mov.w	r2, #0
 8008a78:	f04f 0300 	mov.w	r3, #0
 8008a7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008a80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a88:	4692      	mov	sl, r2
 8008a8a:	469b      	mov	fp, r3
 8008a8c:	4643      	mov	r3, r8
 8008a8e:	eb1a 0303 	adds.w	r3, sl, r3
 8008a92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a96:	464b      	mov	r3, r9
 8008a98:	eb4b 0303 	adc.w	r3, fp, r3
 8008a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008aac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008ab0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	18db      	adds	r3, r3, r3
 8008ab8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008aba:	4613      	mov	r3, r2
 8008abc:	eb42 0303 	adc.w	r3, r2, r3
 8008ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ac2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008ac6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008aca:	f7f8 f88d 	bl	8000be8 <__aeabi_uldivmod>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8008bc4 <UART_SetConfig+0x2d4>)
 8008ad6:	fba3 2301 	umull	r2, r3, r3, r1
 8008ada:	095b      	lsrs	r3, r3, #5
 8008adc:	2264      	movs	r2, #100	@ 0x64
 8008ade:	fb02 f303 	mul.w	r3, r2, r3
 8008ae2:	1acb      	subs	r3, r1, r3
 8008ae4:	00db      	lsls	r3, r3, #3
 8008ae6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008aea:	4b36      	ldr	r3, [pc, #216]	@ (8008bc4 <UART_SetConfig+0x2d4>)
 8008aec:	fba3 2302 	umull	r2, r3, r3, r2
 8008af0:	095b      	lsrs	r3, r3, #5
 8008af2:	005b      	lsls	r3, r3, #1
 8008af4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008af8:	441c      	add	r4, r3
 8008afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008afe:	2200      	movs	r2, #0
 8008b00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008b08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008b0c:	4642      	mov	r2, r8
 8008b0e:	464b      	mov	r3, r9
 8008b10:	1891      	adds	r1, r2, r2
 8008b12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008b14:	415b      	adcs	r3, r3
 8008b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008b1c:	4641      	mov	r1, r8
 8008b1e:	1851      	adds	r1, r2, r1
 8008b20:	6339      	str	r1, [r7, #48]	@ 0x30
 8008b22:	4649      	mov	r1, r9
 8008b24:	414b      	adcs	r3, r1
 8008b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b28:	f04f 0200 	mov.w	r2, #0
 8008b2c:	f04f 0300 	mov.w	r3, #0
 8008b30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008b34:	4659      	mov	r1, fp
 8008b36:	00cb      	lsls	r3, r1, #3
 8008b38:	4651      	mov	r1, sl
 8008b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b3e:	4651      	mov	r1, sl
 8008b40:	00ca      	lsls	r2, r1, #3
 8008b42:	4610      	mov	r0, r2
 8008b44:	4619      	mov	r1, r3
 8008b46:	4603      	mov	r3, r0
 8008b48:	4642      	mov	r2, r8
 8008b4a:	189b      	adds	r3, r3, r2
 8008b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b50:	464b      	mov	r3, r9
 8008b52:	460a      	mov	r2, r1
 8008b54:	eb42 0303 	adc.w	r3, r2, r3
 8008b58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008b68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008b6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008b70:	460b      	mov	r3, r1
 8008b72:	18db      	adds	r3, r3, r3
 8008b74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b76:	4613      	mov	r3, r2
 8008b78:	eb42 0303 	adc.w	r3, r2, r3
 8008b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008b82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008b86:	f7f8 f82f 	bl	8000be8 <__aeabi_uldivmod>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc4 <UART_SetConfig+0x2d4>)
 8008b90:	fba3 1302 	umull	r1, r3, r3, r2
 8008b94:	095b      	lsrs	r3, r3, #5
 8008b96:	2164      	movs	r1, #100	@ 0x64
 8008b98:	fb01 f303 	mul.w	r3, r1, r3
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	00db      	lsls	r3, r3, #3
 8008ba0:	3332      	adds	r3, #50	@ 0x32
 8008ba2:	4a08      	ldr	r2, [pc, #32]	@ (8008bc4 <UART_SetConfig+0x2d4>)
 8008ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba8:	095b      	lsrs	r3, r3, #5
 8008baa:	f003 0207 	and.w	r2, r3, #7
 8008bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4422      	add	r2, r4
 8008bb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008bb8:	e106      	b.n	8008dc8 <UART_SetConfig+0x4d8>
 8008bba:	bf00      	nop
 8008bbc:	40011000 	.word	0x40011000
 8008bc0:	40011400 	.word	0x40011400
 8008bc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008bd2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008bd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008bda:	4642      	mov	r2, r8
 8008bdc:	464b      	mov	r3, r9
 8008bde:	1891      	adds	r1, r2, r2
 8008be0:	6239      	str	r1, [r7, #32]
 8008be2:	415b      	adcs	r3, r3
 8008be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8008be6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008bea:	4641      	mov	r1, r8
 8008bec:	1854      	adds	r4, r2, r1
 8008bee:	4649      	mov	r1, r9
 8008bf0:	eb43 0501 	adc.w	r5, r3, r1
 8008bf4:	f04f 0200 	mov.w	r2, #0
 8008bf8:	f04f 0300 	mov.w	r3, #0
 8008bfc:	00eb      	lsls	r3, r5, #3
 8008bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c02:	00e2      	lsls	r2, r4, #3
 8008c04:	4614      	mov	r4, r2
 8008c06:	461d      	mov	r5, r3
 8008c08:	4643      	mov	r3, r8
 8008c0a:	18e3      	adds	r3, r4, r3
 8008c0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008c10:	464b      	mov	r3, r9
 8008c12:	eb45 0303 	adc.w	r3, r5, r3
 8008c16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008c2a:	f04f 0200 	mov.w	r2, #0
 8008c2e:	f04f 0300 	mov.w	r3, #0
 8008c32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008c36:	4629      	mov	r1, r5
 8008c38:	008b      	lsls	r3, r1, #2
 8008c3a:	4621      	mov	r1, r4
 8008c3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c40:	4621      	mov	r1, r4
 8008c42:	008a      	lsls	r2, r1, #2
 8008c44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008c48:	f7f7 ffce 	bl	8000be8 <__aeabi_uldivmod>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4b60      	ldr	r3, [pc, #384]	@ (8008dd4 <UART_SetConfig+0x4e4>)
 8008c52:	fba3 2302 	umull	r2, r3, r3, r2
 8008c56:	095b      	lsrs	r3, r3, #5
 8008c58:	011c      	lsls	r4, r3, #4
 8008c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008c68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008c6c:	4642      	mov	r2, r8
 8008c6e:	464b      	mov	r3, r9
 8008c70:	1891      	adds	r1, r2, r2
 8008c72:	61b9      	str	r1, [r7, #24]
 8008c74:	415b      	adcs	r3, r3
 8008c76:	61fb      	str	r3, [r7, #28]
 8008c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c7c:	4641      	mov	r1, r8
 8008c7e:	1851      	adds	r1, r2, r1
 8008c80:	6139      	str	r1, [r7, #16]
 8008c82:	4649      	mov	r1, r9
 8008c84:	414b      	adcs	r3, r1
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	f04f 0200 	mov.w	r2, #0
 8008c8c:	f04f 0300 	mov.w	r3, #0
 8008c90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c94:	4659      	mov	r1, fp
 8008c96:	00cb      	lsls	r3, r1, #3
 8008c98:	4651      	mov	r1, sl
 8008c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c9e:	4651      	mov	r1, sl
 8008ca0:	00ca      	lsls	r2, r1, #3
 8008ca2:	4610      	mov	r0, r2
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	4642      	mov	r2, r8
 8008caa:	189b      	adds	r3, r3, r2
 8008cac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008cb0:	464b      	mov	r3, r9
 8008cb2:	460a      	mov	r2, r1
 8008cb4:	eb42 0303 	adc.w	r3, r2, r3
 8008cb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008cc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008cc8:	f04f 0200 	mov.w	r2, #0
 8008ccc:	f04f 0300 	mov.w	r3, #0
 8008cd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008cd4:	4649      	mov	r1, r9
 8008cd6:	008b      	lsls	r3, r1, #2
 8008cd8:	4641      	mov	r1, r8
 8008cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cde:	4641      	mov	r1, r8
 8008ce0:	008a      	lsls	r2, r1, #2
 8008ce2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008ce6:	f7f7 ff7f 	bl	8000be8 <__aeabi_uldivmod>
 8008cea:	4602      	mov	r2, r0
 8008cec:	460b      	mov	r3, r1
 8008cee:	4611      	mov	r1, r2
 8008cf0:	4b38      	ldr	r3, [pc, #224]	@ (8008dd4 <UART_SetConfig+0x4e4>)
 8008cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8008cf6:	095b      	lsrs	r3, r3, #5
 8008cf8:	2264      	movs	r2, #100	@ 0x64
 8008cfa:	fb02 f303 	mul.w	r3, r2, r3
 8008cfe:	1acb      	subs	r3, r1, r3
 8008d00:	011b      	lsls	r3, r3, #4
 8008d02:	3332      	adds	r3, #50	@ 0x32
 8008d04:	4a33      	ldr	r2, [pc, #204]	@ (8008dd4 <UART_SetConfig+0x4e4>)
 8008d06:	fba2 2303 	umull	r2, r3, r2, r3
 8008d0a:	095b      	lsrs	r3, r3, #5
 8008d0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d10:	441c      	add	r4, r3
 8008d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d16:	2200      	movs	r2, #0
 8008d18:	673b      	str	r3, [r7, #112]	@ 0x70
 8008d1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8008d1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008d20:	4642      	mov	r2, r8
 8008d22:	464b      	mov	r3, r9
 8008d24:	1891      	adds	r1, r2, r2
 8008d26:	60b9      	str	r1, [r7, #8]
 8008d28:	415b      	adcs	r3, r3
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d30:	4641      	mov	r1, r8
 8008d32:	1851      	adds	r1, r2, r1
 8008d34:	6039      	str	r1, [r7, #0]
 8008d36:	4649      	mov	r1, r9
 8008d38:	414b      	adcs	r3, r1
 8008d3a:	607b      	str	r3, [r7, #4]
 8008d3c:	f04f 0200 	mov.w	r2, #0
 8008d40:	f04f 0300 	mov.w	r3, #0
 8008d44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008d48:	4659      	mov	r1, fp
 8008d4a:	00cb      	lsls	r3, r1, #3
 8008d4c:	4651      	mov	r1, sl
 8008d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d52:	4651      	mov	r1, sl
 8008d54:	00ca      	lsls	r2, r1, #3
 8008d56:	4610      	mov	r0, r2
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	4642      	mov	r2, r8
 8008d5e:	189b      	adds	r3, r3, r2
 8008d60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d62:	464b      	mov	r3, r9
 8008d64:	460a      	mov	r2, r1
 8008d66:	eb42 0303 	adc.w	r3, r2, r3
 8008d6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d76:	667a      	str	r2, [r7, #100]	@ 0x64
 8008d78:	f04f 0200 	mov.w	r2, #0
 8008d7c:	f04f 0300 	mov.w	r3, #0
 8008d80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008d84:	4649      	mov	r1, r9
 8008d86:	008b      	lsls	r3, r1, #2
 8008d88:	4641      	mov	r1, r8
 8008d8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d8e:	4641      	mov	r1, r8
 8008d90:	008a      	lsls	r2, r1, #2
 8008d92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008d96:	f7f7 ff27 	bl	8000be8 <__aeabi_uldivmod>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8008dd4 <UART_SetConfig+0x4e4>)
 8008da0:	fba3 1302 	umull	r1, r3, r3, r2
 8008da4:	095b      	lsrs	r3, r3, #5
 8008da6:	2164      	movs	r1, #100	@ 0x64
 8008da8:	fb01 f303 	mul.w	r3, r1, r3
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	011b      	lsls	r3, r3, #4
 8008db0:	3332      	adds	r3, #50	@ 0x32
 8008db2:	4a08      	ldr	r2, [pc, #32]	@ (8008dd4 <UART_SetConfig+0x4e4>)
 8008db4:	fba2 2303 	umull	r2, r3, r2, r3
 8008db8:	095b      	lsrs	r3, r3, #5
 8008dba:	f003 020f 	and.w	r2, r3, #15
 8008dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4422      	add	r2, r4
 8008dc6:	609a      	str	r2, [r3, #8]
}
 8008dc8:	bf00      	nop
 8008dca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dd4:	51eb851f 	.word	0x51eb851f

08008dd8 <__NVIC_SetPriority>:
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	6039      	str	r1, [r7, #0]
 8008de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	db0a      	blt.n	8008e02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	b2da      	uxtb	r2, r3
 8008df0:	490c      	ldr	r1, [pc, #48]	@ (8008e24 <__NVIC_SetPriority+0x4c>)
 8008df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008df6:	0112      	lsls	r2, r2, #4
 8008df8:	b2d2      	uxtb	r2, r2
 8008dfa:	440b      	add	r3, r1
 8008dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008e00:	e00a      	b.n	8008e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	4908      	ldr	r1, [pc, #32]	@ (8008e28 <__NVIC_SetPriority+0x50>)
 8008e08:	79fb      	ldrb	r3, [r7, #7]
 8008e0a:	f003 030f 	and.w	r3, r3, #15
 8008e0e:	3b04      	subs	r3, #4
 8008e10:	0112      	lsls	r2, r2, #4
 8008e12:	b2d2      	uxtb	r2, r2
 8008e14:	440b      	add	r3, r1
 8008e16:	761a      	strb	r2, [r3, #24]
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	e000e100 	.word	0xe000e100
 8008e28:	e000ed00 	.word	0xe000ed00

08008e2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008e30:	2100      	movs	r1, #0
 8008e32:	f06f 0004 	mvn.w	r0, #4
 8008e36:	f7ff ffcf 	bl	8008dd8 <__NVIC_SetPriority>
#endif
}
 8008e3a:	bf00      	nop
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e46:	f3ef 8305 	mrs	r3, IPSR
 8008e4a:	603b      	str	r3, [r7, #0]
  return(result);
 8008e4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008e52:	f06f 0305 	mvn.w	r3, #5
 8008e56:	607b      	str	r3, [r7, #4]
 8008e58:	e00c      	b.n	8008e74 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e84 <osKernelInitialize+0x44>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d105      	bne.n	8008e6e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008e62:	4b08      	ldr	r3, [pc, #32]	@ (8008e84 <osKernelInitialize+0x44>)
 8008e64:	2201      	movs	r2, #1
 8008e66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	607b      	str	r3, [r7, #4]
 8008e6c:	e002      	b.n	8008e74 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008e74:	687b      	ldr	r3, [r7, #4]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	2000041c 	.word	0x2000041c

08008e88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e8e:	f3ef 8305 	mrs	r3, IPSR
 8008e92:	603b      	str	r3, [r7, #0]
  return(result);
 8008e94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008e9a:	f06f 0305 	mvn.w	r3, #5
 8008e9e:	607b      	str	r3, [r7, #4]
 8008ea0:	e010      	b.n	8008ec4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed0 <osKernelStart+0x48>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d109      	bne.n	8008ebe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008eaa:	f7ff ffbf 	bl	8008e2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008eae:	4b08      	ldr	r3, [pc, #32]	@ (8008ed0 <osKernelStart+0x48>)
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008eb4:	f001 f840 	bl	8009f38 <vTaskStartScheduler>
      stat = osOK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	607b      	str	r3, [r7, #4]
 8008ebc:	e002      	b.n	8008ec4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8008ec2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ec4:	687b      	ldr	r3, [r7, #4]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	2000041c 	.word	0x2000041c

08008ed4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b08e      	sub	sp, #56	@ 0x38
 8008ed8:	af04      	add	r7, sp, #16
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ee4:	f3ef 8305 	mrs	r3, IPSR
 8008ee8:	617b      	str	r3, [r7, #20]
  return(result);
 8008eea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d17e      	bne.n	8008fee <osThreadNew+0x11a>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d07b      	beq.n	8008fee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008ef6:	2380      	movs	r3, #128	@ 0x80
 8008ef8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008efa:	2318      	movs	r3, #24
 8008efc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008f02:	f04f 33ff 	mov.w	r3, #4294967295
 8008f06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d045      	beq.n	8008f9a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d002      	beq.n	8008f1c <osThreadNew+0x48>
        name = attr->name;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d002      	beq.n	8008f2a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d008      	beq.n	8008f42 <osThreadNew+0x6e>
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	2b38      	cmp	r3, #56	@ 0x38
 8008f34:	d805      	bhi.n	8008f42 <osThreadNew+0x6e>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <osThreadNew+0x72>
        return (NULL);
 8008f42:	2300      	movs	r3, #0
 8008f44:	e054      	b.n	8008ff0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	089b      	lsrs	r3, r3, #2
 8008f54:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00e      	beq.n	8008f7c <osThreadNew+0xa8>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	2ba7      	cmp	r3, #167	@ 0xa7
 8008f64:	d90a      	bls.n	8008f7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d006      	beq.n	8008f7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	695b      	ldr	r3, [r3, #20]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d002      	beq.n	8008f7c <osThreadNew+0xa8>
        mem = 1;
 8008f76:	2301      	movs	r3, #1
 8008f78:	61bb      	str	r3, [r7, #24]
 8008f7a:	e010      	b.n	8008f9e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10c      	bne.n	8008f9e <osThreadNew+0xca>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d108      	bne.n	8008f9e <osThreadNew+0xca>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d104      	bne.n	8008f9e <osThreadNew+0xca>
          mem = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61bb      	str	r3, [r7, #24]
 8008f98:	e001      	b.n	8008f9e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d110      	bne.n	8008fc6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008fac:	9202      	str	r2, [sp, #8]
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	6a3a      	ldr	r2, [r7, #32]
 8008fb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f000 fdfe 	bl	8009bbc <xTaskCreateStatic>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	613b      	str	r3, [r7, #16]
 8008fc4:	e013      	b.n	8008fee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d110      	bne.n	8008fee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008fcc:	6a3b      	ldr	r3, [r7, #32]
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	f107 0310 	add.w	r3, r7, #16
 8008fd4:	9301      	str	r3, [sp, #4]
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f000 fe4c 	bl	8009c7c <xTaskCreate>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d001      	beq.n	8008fee <osThreadNew+0x11a>
            hTask = NULL;
 8008fea:	2300      	movs	r3, #0
 8008fec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008fee:	693b      	ldr	r3, [r7, #16]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3728      	adds	r7, #40	@ 0x28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	4a07      	ldr	r2, [pc, #28]	@ (8009024 <vApplicationGetIdleTaskMemory+0x2c>)
 8009008:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	4a06      	ldr	r2, [pc, #24]	@ (8009028 <vApplicationGetIdleTaskMemory+0x30>)
 800900e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2280      	movs	r2, #128	@ 0x80
 8009014:	601a      	str	r2, [r3, #0]
}
 8009016:	bf00      	nop
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	20000420 	.word	0x20000420
 8009028:	200004c8 	.word	0x200004c8

0800902c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4a07      	ldr	r2, [pc, #28]	@ (8009058 <vApplicationGetTimerTaskMemory+0x2c>)
 800903c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	4a06      	ldr	r2, [pc, #24]	@ (800905c <vApplicationGetTimerTaskMemory+0x30>)
 8009042:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800904a:	601a      	str	r2, [r3, #0]
}
 800904c:	bf00      	nop
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	200006c8 	.word	0x200006c8
 800905c:	20000770 	.word	0x20000770

08009060 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f103 0208 	add.w	r2, r3, #8
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f04f 32ff 	mov.w	r2, #4294967295
 8009078:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f103 0208 	add.w	r2, r3, #8
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f103 0208 	add.w	r2, r3, #8
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090ae:	bf00      	nop
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090ba:	b480      	push	{r7}
 80090bc:	b085      	sub	sp, #20
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	689a      	ldr	r2, [r3, #8]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	1c5a      	adds	r2, r3, #1
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	601a      	str	r2, [r3, #0]
}
 80090f6:	bf00      	nop
 80090f8:	3714      	adds	r7, #20
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr

08009102 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009102:	b480      	push	{r7}
 8009104:	b085      	sub	sp, #20
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009118:	d103      	bne.n	8009122 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	e00c      	b.n	800913c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	3308      	adds	r3, #8
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	e002      	b.n	8009130 <vListInsert+0x2e>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	60fb      	str	r3, [r7, #12]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	429a      	cmp	r2, r3
 800913a:	d2f6      	bcs.n	800912a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	683a      	ldr	r2, [r7, #0]
 800914a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	1c5a      	adds	r2, r3, #1
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	601a      	str	r2, [r3, #0]
}
 8009168:	bf00      	nop
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	6892      	ldr	r2, [r2, #8]
 800918a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	6852      	ldr	r2, [r2, #4]
 8009194:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	429a      	cmp	r2, r3
 800919e:	d103      	bne.n	80091a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	689a      	ldr	r2, [r3, #8]
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	1e5a      	subs	r2, r3, #1
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10b      	bne.n	80091f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e0:	f383 8811 	msr	BASEPRI, r3
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	f3bf 8f4f 	dsb	sy
 80091ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80091ee:	bf00      	nop
 80091f0:	bf00      	nop
 80091f2:	e7fd      	b.n	80091f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80091f4:	f002 f870 	bl	800b2d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009200:	68f9      	ldr	r1, [r7, #12]
 8009202:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009204:	fb01 f303 	mul.w	r3, r1, r3
 8009208:	441a      	add	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009224:	3b01      	subs	r3, #1
 8009226:	68f9      	ldr	r1, [r7, #12]
 8009228:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800922a:	fb01 f303 	mul.w	r3, r1, r3
 800922e:	441a      	add	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	22ff      	movs	r2, #255	@ 0xff
 8009238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	22ff      	movs	r2, #255	@ 0xff
 8009240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d114      	bne.n	8009274 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d01a      	beq.n	8009288 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3310      	adds	r3, #16
 8009256:	4618      	mov	r0, r3
 8009258:	f001 f90c 	bl	800a474 <xTaskRemoveFromEventList>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d012      	beq.n	8009288 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009262:	4b0d      	ldr	r3, [pc, #52]	@ (8009298 <xQueueGenericReset+0xd0>)
 8009264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	e009      	b.n	8009288 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	3310      	adds	r3, #16
 8009278:	4618      	mov	r0, r3
 800927a:	f7ff fef1 	bl	8009060 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3324      	adds	r3, #36	@ 0x24
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff feec 	bl	8009060 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009288:	f002 f858 	bl	800b33c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800928c:	2301      	movs	r3, #1
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	e000ed04 	.word	0xe000ed04

0800929c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800929c:	b580      	push	{r7, lr}
 800929e:	b08e      	sub	sp, #56	@ 0x38
 80092a0:	af02      	add	r7, sp, #8
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10b      	bne.n	80092c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80092c2:	bf00      	nop
 80092c4:	bf00      	nop
 80092c6:	e7fd      	b.n	80092c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10b      	bne.n	80092e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80092e0:	bf00      	nop
 80092e2:	bf00      	nop
 80092e4:	e7fd      	b.n	80092e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <xQueueGenericCreateStatic+0x56>
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <xQueueGenericCreateStatic+0x5a>
 80092f2:	2301      	movs	r3, #1
 80092f4:	e000      	b.n	80092f8 <xQueueGenericCreateStatic+0x5c>
 80092f6:	2300      	movs	r3, #0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d10b      	bne.n	8009314 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80092fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009300:	f383 8811 	msr	BASEPRI, r3
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	623b      	str	r3, [r7, #32]
}
 800930e:	bf00      	nop
 8009310:	bf00      	nop
 8009312:	e7fd      	b.n	8009310 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d102      	bne.n	8009320 <xQueueGenericCreateStatic+0x84>
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <xQueueGenericCreateStatic+0x88>
 8009320:	2301      	movs	r3, #1
 8009322:	e000      	b.n	8009326 <xQueueGenericCreateStatic+0x8a>
 8009324:	2300      	movs	r3, #0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10b      	bne.n	8009342 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800932a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	61fb      	str	r3, [r7, #28]
}
 800933c:	bf00      	nop
 800933e:	bf00      	nop
 8009340:	e7fd      	b.n	800933e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009342:	2350      	movs	r3, #80	@ 0x50
 8009344:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	2b50      	cmp	r3, #80	@ 0x50
 800934a:	d00b      	beq.n	8009364 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	61bb      	str	r3, [r7, #24]
}
 800935e:	bf00      	nop
 8009360:	bf00      	nop
 8009362:	e7fd      	b.n	8009360 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009364:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800936a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00d      	beq.n	800938c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009372:	2201      	movs	r2, #1
 8009374:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009378:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800937c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	4613      	mov	r3, r2
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	68b9      	ldr	r1, [r7, #8]
 8009386:	68f8      	ldr	r0, [r7, #12]
 8009388:	f000 f805 	bl	8009396 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800938c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800938e:	4618      	mov	r0, r3
 8009390:	3730      	adds	r7, #48	@ 0x30
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	60f8      	str	r0, [r7, #12]
 800939e:	60b9      	str	r1, [r7, #8]
 80093a0:	607a      	str	r2, [r7, #4]
 80093a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d103      	bne.n	80093b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	69ba      	ldr	r2, [r7, #24]
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	e002      	b.n	80093b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80093c4:	2101      	movs	r1, #1
 80093c6:	69b8      	ldr	r0, [r7, #24]
 80093c8:	f7ff fefe 	bl	80091c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	78fa      	ldrb	r2, [r7, #3]
 80093d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80093d4:	bf00      	nop
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b08e      	sub	sp, #56	@ 0x38
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
 80093e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80093ea:	2300      	movs	r3, #0
 80093ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80093f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10b      	bne.n	8009410 <xQueueGenericSend+0x34>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800940a:	bf00      	nop
 800940c:	bf00      	nop
 800940e:	e7fd      	b.n	800940c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d103      	bne.n	800941e <xQueueGenericSend+0x42>
 8009416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <xQueueGenericSend+0x46>
 800941e:	2301      	movs	r3, #1
 8009420:	e000      	b.n	8009424 <xQueueGenericSend+0x48>
 8009422:	2300      	movs	r3, #0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10b      	bne.n	8009440 <xQueueGenericSend+0x64>
	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800942c:	f383 8811 	msr	BASEPRI, r3
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800943a:	bf00      	nop
 800943c:	bf00      	nop
 800943e:	e7fd      	b.n	800943c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	2b02      	cmp	r3, #2
 8009444:	d103      	bne.n	800944e <xQueueGenericSend+0x72>
 8009446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800944a:	2b01      	cmp	r3, #1
 800944c:	d101      	bne.n	8009452 <xQueueGenericSend+0x76>
 800944e:	2301      	movs	r3, #1
 8009450:	e000      	b.n	8009454 <xQueueGenericSend+0x78>
 8009452:	2300      	movs	r3, #0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10b      	bne.n	8009470 <xQueueGenericSend+0x94>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	623b      	str	r3, [r7, #32]
}
 800946a:	bf00      	nop
 800946c:	bf00      	nop
 800946e:	e7fd      	b.n	800946c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009470:	f001 f9c6 	bl	800a800 <xTaskGetSchedulerState>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d102      	bne.n	8009480 <xQueueGenericSend+0xa4>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d101      	bne.n	8009484 <xQueueGenericSend+0xa8>
 8009480:	2301      	movs	r3, #1
 8009482:	e000      	b.n	8009486 <xQueueGenericSend+0xaa>
 8009484:	2300      	movs	r3, #0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d10b      	bne.n	80094a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800948a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	61fb      	str	r3, [r7, #28]
}
 800949c:	bf00      	nop
 800949e:	bf00      	nop
 80094a0:	e7fd      	b.n	800949e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094a2:	f001 ff19 	bl	800b2d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d302      	bcc.n	80094b8 <xQueueGenericSend+0xdc>
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d129      	bne.n	800950c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	68b9      	ldr	r1, [r7, #8]
 80094bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094be:	f000 fa0f 	bl	80098e0 <prvCopyDataToQueue>
 80094c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d010      	beq.n	80094ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ce:	3324      	adds	r3, #36	@ 0x24
 80094d0:	4618      	mov	r0, r3
 80094d2:	f000 ffcf 	bl	800a474 <xTaskRemoveFromEventList>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d013      	beq.n	8009504 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80094dc:	4b3f      	ldr	r3, [pc, #252]	@ (80095dc <xQueueGenericSend+0x200>)
 80094de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	f3bf 8f6f 	isb	sy
 80094ec:	e00a      	b.n	8009504 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80094ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d007      	beq.n	8009504 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80094f4:	4b39      	ldr	r3, [pc, #228]	@ (80095dc <xQueueGenericSend+0x200>)
 80094f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094fa:	601a      	str	r2, [r3, #0]
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009504:	f001 ff1a 	bl	800b33c <vPortExitCritical>
				return pdPASS;
 8009508:	2301      	movs	r3, #1
 800950a:	e063      	b.n	80095d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d103      	bne.n	800951a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009512:	f001 ff13 	bl	800b33c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009516:	2300      	movs	r3, #0
 8009518:	e05c      	b.n	80095d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800951a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800951c:	2b00      	cmp	r3, #0
 800951e:	d106      	bne.n	800952e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009520:	f107 0314 	add.w	r3, r7, #20
 8009524:	4618      	mov	r0, r3
 8009526:	f001 f809 	bl	800a53c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800952a:	2301      	movs	r3, #1
 800952c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800952e:	f001 ff05 	bl	800b33c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009532:	f000 fd71 	bl	800a018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009536:	f001 fecf 	bl	800b2d8 <vPortEnterCritical>
 800953a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009540:	b25b      	sxtb	r3, r3
 8009542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009546:	d103      	bne.n	8009550 <xQueueGenericSend+0x174>
 8009548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009552:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009556:	b25b      	sxtb	r3, r3
 8009558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955c:	d103      	bne.n	8009566 <xQueueGenericSend+0x18a>
 800955e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009566:	f001 fee9 	bl	800b33c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800956a:	1d3a      	adds	r2, r7, #4
 800956c:	f107 0314 	add.w	r3, r7, #20
 8009570:	4611      	mov	r1, r2
 8009572:	4618      	mov	r0, r3
 8009574:	f000 fff8 	bl	800a568 <xTaskCheckForTimeOut>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d124      	bne.n	80095c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800957e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009580:	f000 faa6 	bl	8009ad0 <prvIsQueueFull>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d018      	beq.n	80095bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800958a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958c:	3310      	adds	r3, #16
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	4611      	mov	r1, r2
 8009592:	4618      	mov	r0, r3
 8009594:	f000 ff1c 	bl	800a3d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800959a:	f000 fa31 	bl	8009a00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800959e:	f000 fd49 	bl	800a034 <xTaskResumeAll>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f47f af7c 	bne.w	80094a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80095aa:	4b0c      	ldr	r3, [pc, #48]	@ (80095dc <xQueueGenericSend+0x200>)
 80095ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095b0:	601a      	str	r2, [r3, #0]
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	e772      	b.n	80094a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80095bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095be:	f000 fa1f 	bl	8009a00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095c2:	f000 fd37 	bl	800a034 <xTaskResumeAll>
 80095c6:	e76c      	b.n	80094a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80095c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095ca:	f000 fa19 	bl	8009a00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095ce:	f000 fd31 	bl	800a034 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80095d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3738      	adds	r7, #56	@ 0x38
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	e000ed04 	.word	0xe000ed04

080095e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b090      	sub	sp, #64	@ 0x40
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
 80095ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80095f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10b      	bne.n	8009610 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80095f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800960a:	bf00      	nop
 800960c:	bf00      	nop
 800960e:	e7fd      	b.n	800960c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d103      	bne.n	800961e <xQueueGenericSendFromISR+0x3e>
 8009616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800961a:	2b00      	cmp	r3, #0
 800961c:	d101      	bne.n	8009622 <xQueueGenericSendFromISR+0x42>
 800961e:	2301      	movs	r3, #1
 8009620:	e000      	b.n	8009624 <xQueueGenericSendFromISR+0x44>
 8009622:	2300      	movs	r3, #0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10b      	bne.n	8009640 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800963a:	bf00      	nop
 800963c:	bf00      	nop
 800963e:	e7fd      	b.n	800963c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	2b02      	cmp	r3, #2
 8009644:	d103      	bne.n	800964e <xQueueGenericSendFromISR+0x6e>
 8009646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800964a:	2b01      	cmp	r3, #1
 800964c:	d101      	bne.n	8009652 <xQueueGenericSendFromISR+0x72>
 800964e:	2301      	movs	r3, #1
 8009650:	e000      	b.n	8009654 <xQueueGenericSendFromISR+0x74>
 8009652:	2300      	movs	r3, #0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10b      	bne.n	8009670 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	623b      	str	r3, [r7, #32]
}
 800966a:	bf00      	nop
 800966c:	bf00      	nop
 800966e:	e7fd      	b.n	800966c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009670:	f001 ff12 	bl	800b498 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009674:	f3ef 8211 	mrs	r2, BASEPRI
 8009678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800967c:	f383 8811 	msr	BASEPRI, r3
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	61fa      	str	r2, [r7, #28]
 800968a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800968c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800968e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009692:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009698:	429a      	cmp	r2, r3
 800969a:	d302      	bcc.n	80096a2 <xQueueGenericSendFromISR+0xc2>
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d12f      	bne.n	8009702 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80096a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	68b9      	ldr	r1, [r7, #8]
 80096b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80096b8:	f000 f912 	bl	80098e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80096bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80096c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c4:	d112      	bne.n	80096ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d016      	beq.n	80096fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d0:	3324      	adds	r3, #36	@ 0x24
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 fece 	bl	800a474 <xTaskRemoveFromEventList>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00e      	beq.n	80096fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	601a      	str	r2, [r3, #0]
 80096ea:	e007      	b.n	80096fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80096ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80096f0:	3301      	adds	r3, #1
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	b25a      	sxtb	r2, r3
 80096f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80096fc:	2301      	movs	r3, #1
 80096fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009700:	e001      	b.n	8009706 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009702:	2300      	movs	r3, #0
 8009704:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009708:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009710:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009714:	4618      	mov	r0, r3
 8009716:	3740      	adds	r7, #64	@ 0x40
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b08c      	sub	sp, #48	@ 0x30
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009728:	2300      	movs	r3, #0
 800972a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10b      	bne.n	800974e <xQueueReceive+0x32>
	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	623b      	str	r3, [r7, #32]
}
 8009748:	bf00      	nop
 800974a:	bf00      	nop
 800974c:	e7fd      	b.n	800974a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d103      	bne.n	800975c <xQueueReceive+0x40>
 8009754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009758:	2b00      	cmp	r3, #0
 800975a:	d101      	bne.n	8009760 <xQueueReceive+0x44>
 800975c:	2301      	movs	r3, #1
 800975e:	e000      	b.n	8009762 <xQueueReceive+0x46>
 8009760:	2300      	movs	r3, #0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10b      	bne.n	800977e <xQueueReceive+0x62>
	__asm volatile
 8009766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800976a:	f383 8811 	msr	BASEPRI, r3
 800976e:	f3bf 8f6f 	isb	sy
 8009772:	f3bf 8f4f 	dsb	sy
 8009776:	61fb      	str	r3, [r7, #28]
}
 8009778:	bf00      	nop
 800977a:	bf00      	nop
 800977c:	e7fd      	b.n	800977a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800977e:	f001 f83f 	bl	800a800 <xTaskGetSchedulerState>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d102      	bne.n	800978e <xQueueReceive+0x72>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <xQueueReceive+0x76>
 800978e:	2301      	movs	r3, #1
 8009790:	e000      	b.n	8009794 <xQueueReceive+0x78>
 8009792:	2300      	movs	r3, #0
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10b      	bne.n	80097b0 <xQueueReceive+0x94>
	__asm volatile
 8009798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979c:	f383 8811 	msr	BASEPRI, r3
 80097a0:	f3bf 8f6f 	isb	sy
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	61bb      	str	r3, [r7, #24]
}
 80097aa:	bf00      	nop
 80097ac:	bf00      	nop
 80097ae:	e7fd      	b.n	80097ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097b0:	f001 fd92 	bl	800b2d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d01f      	beq.n	8009800 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80097c0:	68b9      	ldr	r1, [r7, #8]
 80097c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097c4:	f000 f8f6 	bl	80099b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80097c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ca:	1e5a      	subs	r2, r3, #1
 80097cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00f      	beq.n	80097f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097da:	3310      	adds	r3, #16
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 fe49 	bl	800a474 <xTaskRemoveFromEventList>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d007      	beq.n	80097f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80097e8:	4b3c      	ldr	r3, [pc, #240]	@ (80098dc <xQueueReceive+0x1c0>)
 80097ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097ee:	601a      	str	r2, [r3, #0]
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80097f8:	f001 fda0 	bl	800b33c <vPortExitCritical>
				return pdPASS;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e069      	b.n	80098d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d103      	bne.n	800980e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009806:	f001 fd99 	bl	800b33c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800980a:	2300      	movs	r3, #0
 800980c:	e062      	b.n	80098d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800980e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009810:	2b00      	cmp	r3, #0
 8009812:	d106      	bne.n	8009822 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009814:	f107 0310 	add.w	r3, r7, #16
 8009818:	4618      	mov	r0, r3
 800981a:	f000 fe8f 	bl	800a53c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800981e:	2301      	movs	r3, #1
 8009820:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009822:	f001 fd8b 	bl	800b33c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009826:	f000 fbf7 	bl	800a018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800982a:	f001 fd55 	bl	800b2d8 <vPortEnterCritical>
 800982e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009830:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009834:	b25b      	sxtb	r3, r3
 8009836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983a:	d103      	bne.n	8009844 <xQueueReceive+0x128>
 800983c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983e:	2200      	movs	r2, #0
 8009840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009846:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800984a:	b25b      	sxtb	r3, r3
 800984c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009850:	d103      	bne.n	800985a <xQueueReceive+0x13e>
 8009852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800985a:	f001 fd6f 	bl	800b33c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800985e:	1d3a      	adds	r2, r7, #4
 8009860:	f107 0310 	add.w	r3, r7, #16
 8009864:	4611      	mov	r1, r2
 8009866:	4618      	mov	r0, r3
 8009868:	f000 fe7e 	bl	800a568 <xTaskCheckForTimeOut>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d123      	bne.n	80098ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009874:	f000 f916 	bl	8009aa4 <prvIsQueueEmpty>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d017      	beq.n	80098ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800987e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009880:	3324      	adds	r3, #36	@ 0x24
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	4611      	mov	r1, r2
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fda2 	bl	800a3d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800988c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800988e:	f000 f8b7 	bl	8009a00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009892:	f000 fbcf 	bl	800a034 <xTaskResumeAll>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d189      	bne.n	80097b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800989c:	4b0f      	ldr	r3, [pc, #60]	@ (80098dc <xQueueReceive+0x1c0>)
 800989e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098a2:	601a      	str	r2, [r3, #0]
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	e780      	b.n	80097b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80098ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098b0:	f000 f8a6 	bl	8009a00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098b4:	f000 fbbe 	bl	800a034 <xTaskResumeAll>
 80098b8:	e77a      	b.n	80097b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80098ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098bc:	f000 f8a0 	bl	8009a00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098c0:	f000 fbb8 	bl	800a034 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098c6:	f000 f8ed 	bl	8009aa4 <prvIsQueueEmpty>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f43f af6f 	beq.w	80097b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80098d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3730      	adds	r7, #48	@ 0x30
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	e000ed04 	.word	0xe000ed04

080098e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80098ec:	2300      	movs	r3, #0
 80098ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10d      	bne.n	800991a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d14d      	bne.n	80099a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	4618      	mov	r0, r3
 800990c:	f000 ff96 	bl	800a83c <xTaskPriorityDisinherit>
 8009910:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	609a      	str	r2, [r3, #8]
 8009918:	e043      	b.n	80099a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d119      	bne.n	8009954 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6858      	ldr	r0, [r3, #4]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009928:	461a      	mov	r2, r3
 800992a:	68b9      	ldr	r1, [r7, #8]
 800992c:	f002 f8f6 	bl	800bb1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	685a      	ldr	r2, [r3, #4]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009938:	441a      	add	r2, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	429a      	cmp	r2, r3
 8009948:	d32b      	bcc.n	80099a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	605a      	str	r2, [r3, #4]
 8009952:	e026      	b.n	80099a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	68d8      	ldr	r0, [r3, #12]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800995c:	461a      	mov	r2, r3
 800995e:	68b9      	ldr	r1, [r7, #8]
 8009960:	f002 f8dc 	bl	800bb1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	68da      	ldr	r2, [r3, #12]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800996c:	425b      	negs	r3, r3
 800996e:	441a      	add	r2, r3
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	68da      	ldr	r2, [r3, #12]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	429a      	cmp	r2, r3
 800997e:	d207      	bcs.n	8009990 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	689a      	ldr	r2, [r3, #8]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009988:	425b      	negs	r3, r3
 800998a:	441a      	add	r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b02      	cmp	r3, #2
 8009994:	d105      	bne.n	80099a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d002      	beq.n	80099a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	3b01      	subs	r3, #1
 80099a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	1c5a      	adds	r2, r3, #1
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80099aa:	697b      	ldr	r3, [r7, #20]
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3718      	adds	r7, #24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d018      	beq.n	80099f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	68da      	ldr	r2, [r3, #12]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099ce:	441a      	add	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	68da      	ldr	r2, [r3, #12]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	429a      	cmp	r2, r3
 80099de:	d303      	bcc.n	80099e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	68d9      	ldr	r1, [r3, #12]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f0:	461a      	mov	r2, r3
 80099f2:	6838      	ldr	r0, [r7, #0]
 80099f4:	f002 f892 	bl	800bb1c <memcpy>
	}
}
 80099f8:	bf00      	nop
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a08:	f001 fc66 	bl	800b2d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a14:	e011      	b.n	8009a3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d012      	beq.n	8009a44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	3324      	adds	r3, #36	@ 0x24
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 fd26 	bl	800a474 <xTaskRemoveFromEventList>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a2e:	f000 fdff 	bl	800a630 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	3b01      	subs	r3, #1
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	dce9      	bgt.n	8009a16 <prvUnlockQueue+0x16>
 8009a42:	e000      	b.n	8009a46 <prvUnlockQueue+0x46>
					break;
 8009a44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	22ff      	movs	r2, #255	@ 0xff
 8009a4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009a4e:	f001 fc75 	bl	800b33c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009a52:	f001 fc41 	bl	800b2d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a5e:	e011      	b.n	8009a84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d012      	beq.n	8009a8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	3310      	adds	r3, #16
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 fd01 	bl	800a474 <xTaskRemoveFromEventList>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009a78:	f000 fdda 	bl	800a630 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009a7c:	7bbb      	ldrb	r3, [r7, #14]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	dce9      	bgt.n	8009a60 <prvUnlockQueue+0x60>
 8009a8c:	e000      	b.n	8009a90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	22ff      	movs	r2, #255	@ 0xff
 8009a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009a98:	f001 fc50 	bl	800b33c <vPortExitCritical>
}
 8009a9c:	bf00      	nop
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009aac:	f001 fc14 	bl	800b2d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d102      	bne.n	8009abe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	60fb      	str	r3, [r7, #12]
 8009abc:	e001      	b.n	8009ac2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ac2:	f001 fc3b 	bl	800b33c <vPortExitCritical>

	return xReturn;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ad8:	f001 fbfe 	bl	800b2d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d102      	bne.n	8009aee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	60fb      	str	r3, [r7, #12]
 8009aec:	e001      	b.n	8009af2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009aee:	2300      	movs	r3, #0
 8009af0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009af2:	f001 fc23 	bl	800b33c <vPortExitCritical>

	return xReturn;
 8009af6:	68fb      	ldr	r3, [r7, #12]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	60fb      	str	r3, [r7, #12]
 8009b0e:	e014      	b.n	8009b3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b10:	4a0f      	ldr	r2, [pc, #60]	@ (8009b50 <vQueueAddToRegistry+0x50>)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10b      	bne.n	8009b34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b1c:	490c      	ldr	r1, [pc, #48]	@ (8009b50 <vQueueAddToRegistry+0x50>)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009b26:	4a0a      	ldr	r2, [pc, #40]	@ (8009b50 <vQueueAddToRegistry+0x50>)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	00db      	lsls	r3, r3, #3
 8009b2c:	4413      	add	r3, r2
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009b32:	e006      	b.n	8009b42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	3301      	adds	r3, #1
 8009b38:	60fb      	str	r3, [r7, #12]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b07      	cmp	r3, #7
 8009b3e:	d9e7      	bls.n	8009b10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009b40:	bf00      	nop
 8009b42:	bf00      	nop
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	20000b70 	.word	0x20000b70

08009b54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b086      	sub	sp, #24
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009b64:	f001 fbb8 	bl	800b2d8 <vPortEnterCritical>
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b6e:	b25b      	sxtb	r3, r3
 8009b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b74:	d103      	bne.n	8009b7e <vQueueWaitForMessageRestricted+0x2a>
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b84:	b25b      	sxtb	r3, r3
 8009b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b8a:	d103      	bne.n	8009b94 <vQueueWaitForMessageRestricted+0x40>
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b94:	f001 fbd2 	bl	800b33c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d106      	bne.n	8009bae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	3324      	adds	r3, #36	@ 0x24
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	68b9      	ldr	r1, [r7, #8]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f000 fc37 	bl	800a41c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009bae:	6978      	ldr	r0, [r7, #20]
 8009bb0:	f7ff ff26 	bl	8009a00 <prvUnlockQueue>
	}
 8009bb4:	bf00      	nop
 8009bb6:	3718      	adds	r7, #24
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b08e      	sub	sp, #56	@ 0x38
 8009bc0:	af04      	add	r7, sp, #16
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
 8009bc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10b      	bne.n	8009be8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	623b      	str	r3, [r7, #32]
}
 8009be2:	bf00      	nop
 8009be4:	bf00      	nop
 8009be6:	e7fd      	b.n	8009be4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10b      	bne.n	8009c06 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	61fb      	str	r3, [r7, #28]
}
 8009c00:	bf00      	nop
 8009c02:	bf00      	nop
 8009c04:	e7fd      	b.n	8009c02 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c06:	23a8      	movs	r3, #168	@ 0xa8
 8009c08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	2ba8      	cmp	r3, #168	@ 0xa8
 8009c0e:	d00b      	beq.n	8009c28 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	61bb      	str	r3, [r7, #24]
}
 8009c22:	bf00      	nop
 8009c24:	bf00      	nop
 8009c26:	e7fd      	b.n	8009c24 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d01e      	beq.n	8009c6e <xTaskCreateStatic+0xb2>
 8009c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d01b      	beq.n	8009c6e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c38:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c3e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c42:	2202      	movs	r2, #2
 8009c44:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c48:	2300      	movs	r3, #0
 8009c4a:	9303      	str	r3, [sp, #12]
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4e:	9302      	str	r3, [sp, #8]
 8009c50:	f107 0314 	add.w	r3, r7, #20
 8009c54:	9301      	str	r3, [sp, #4]
 8009c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	68b9      	ldr	r1, [r7, #8]
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f000 f851 	bl	8009d08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009c68:	f000 f8f6 	bl	8009e58 <prvAddNewTaskToReadyList>
 8009c6c:	e001      	b.n	8009c72 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c72:	697b      	ldr	r3, [r7, #20]
	}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3728      	adds	r7, #40	@ 0x28
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b08c      	sub	sp, #48	@ 0x30
 8009c80:	af04      	add	r7, sp, #16
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	603b      	str	r3, [r7, #0]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c8c:	88fb      	ldrh	r3, [r7, #6]
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4618      	mov	r0, r3
 8009c92:	f001 fc43 	bl	800b51c <pvPortMalloc>
 8009c96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00e      	beq.n	8009cbc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c9e:	20a8      	movs	r0, #168	@ 0xa8
 8009ca0:	f001 fc3c 	bl	800b51c <pvPortMalloc>
 8009ca4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8009cb2:	e005      	b.n	8009cc0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009cb4:	6978      	ldr	r0, [r7, #20]
 8009cb6:	f001 fcff 	bl	800b6b8 <vPortFree>
 8009cba:	e001      	b.n	8009cc0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d017      	beq.n	8009cf6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009cce:	88fa      	ldrh	r2, [r7, #6]
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	9303      	str	r3, [sp, #12]
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	9302      	str	r3, [sp, #8]
 8009cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cda:	9301      	str	r3, [sp, #4]
 8009cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	68b9      	ldr	r1, [r7, #8]
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f000 f80f 	bl	8009d08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009cea:	69f8      	ldr	r0, [r7, #28]
 8009cec:	f000 f8b4 	bl	8009e58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	61bb      	str	r3, [r7, #24]
 8009cf4:	e002      	b.n	8009cfc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cfa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009cfc:	69bb      	ldr	r3, [r7, #24]
	}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3720      	adds	r7, #32
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
	...

08009d08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b088      	sub	sp, #32
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
 8009d14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d18:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	461a      	mov	r2, r3
 8009d20:	21a5      	movs	r1, #165	@ 0xa5
 8009d22:	f001 fe71 	bl	800ba08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009d30:	3b01      	subs	r3, #1
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	f023 0307 	bic.w	r3, r3, #7
 8009d3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	f003 0307 	and.w	r3, r3, #7
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00b      	beq.n	8009d62 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4e:	f383 8811 	msr	BASEPRI, r3
 8009d52:	f3bf 8f6f 	isb	sy
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	617b      	str	r3, [r7, #20]
}
 8009d5c:	bf00      	nop
 8009d5e:	bf00      	nop
 8009d60:	e7fd      	b.n	8009d5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01f      	beq.n	8009da8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d68:	2300      	movs	r3, #0
 8009d6a:	61fb      	str	r3, [r7, #28]
 8009d6c:	e012      	b.n	8009d94 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	69fb      	ldr	r3, [r7, #28]
 8009d72:	4413      	add	r3, r2
 8009d74:	7819      	ldrb	r1, [r3, #0]
 8009d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	3334      	adds	r3, #52	@ 0x34
 8009d7e:	460a      	mov	r2, r1
 8009d80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	4413      	add	r3, r2
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d006      	beq.n	8009d9c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	3301      	adds	r3, #1
 8009d92:	61fb      	str	r3, [r7, #28]
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	2b0f      	cmp	r3, #15
 8009d98:	d9e9      	bls.n	8009d6e <prvInitialiseNewTask+0x66>
 8009d9a:	e000      	b.n	8009d9e <prvInitialiseNewTask+0x96>
			{
				break;
 8009d9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009da6:	e003      	b.n	8009db0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db2:	2b37      	cmp	r3, #55	@ 0x37
 8009db4:	d901      	bls.n	8009dba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009db6:	2337      	movs	r3, #55	@ 0x37
 8009db8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dc4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc8:	2200      	movs	r2, #0
 8009dca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dce:	3304      	adds	r3, #4
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7ff f965 	bl	80090a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd8:	3318      	adds	r3, #24
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7ff f960 	bl	80090a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009de4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009df4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e08:	3354      	adds	r3, #84	@ 0x54
 8009e0a:	224c      	movs	r2, #76	@ 0x4c
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f001 fdfa 	bl	800ba08 <memset>
 8009e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e16:	4a0d      	ldr	r2, [pc, #52]	@ (8009e4c <prvInitialiseNewTask+0x144>)
 8009e18:	659a      	str	r2, [r3, #88]	@ 0x58
 8009e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8009e50 <prvInitialiseNewTask+0x148>)
 8009e1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e22:	4a0c      	ldr	r2, [pc, #48]	@ (8009e54 <prvInitialiseNewTask+0x14c>)
 8009e24:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e26:	683a      	ldr	r2, [r7, #0]
 8009e28:	68f9      	ldr	r1, [r7, #12]
 8009e2a:	69b8      	ldr	r0, [r7, #24]
 8009e2c:	f001 f924 	bl	800b078 <pxPortInitialiseStack>
 8009e30:	4602      	mov	r2, r0
 8009e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e42:	bf00      	nop
 8009e44:	3720      	adds	r7, #32
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	20006024 	.word	0x20006024
 8009e50:	2000608c 	.word	0x2000608c
 8009e54:	200060f4 	.word	0x200060f4

08009e58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e60:	f001 fa3a 	bl	800b2d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e64:	4b2d      	ldr	r3, [pc, #180]	@ (8009f1c <prvAddNewTaskToReadyList+0xc4>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	4a2c      	ldr	r2, [pc, #176]	@ (8009f1c <prvAddNewTaskToReadyList+0xc4>)
 8009e6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e6e:	4b2c      	ldr	r3, [pc, #176]	@ (8009f20 <prvAddNewTaskToReadyList+0xc8>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d109      	bne.n	8009e8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e76:	4a2a      	ldr	r2, [pc, #168]	@ (8009f20 <prvAddNewTaskToReadyList+0xc8>)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e7c:	4b27      	ldr	r3, [pc, #156]	@ (8009f1c <prvAddNewTaskToReadyList+0xc4>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d110      	bne.n	8009ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e84:	f000 fbf8 	bl	800a678 <prvInitialiseTaskLists>
 8009e88:	e00d      	b.n	8009ea6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e8a:	4b26      	ldr	r3, [pc, #152]	@ (8009f24 <prvAddNewTaskToReadyList+0xcc>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d109      	bne.n	8009ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e92:	4b23      	ldr	r3, [pc, #140]	@ (8009f20 <prvAddNewTaskToReadyList+0xc8>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d802      	bhi.n	8009ea6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8009f20 <prvAddNewTaskToReadyList+0xc8>)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ea6:	4b20      	ldr	r3, [pc, #128]	@ (8009f28 <prvAddNewTaskToReadyList+0xd0>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	4a1e      	ldr	r2, [pc, #120]	@ (8009f28 <prvAddNewTaskToReadyList+0xd0>)
 8009eae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8009f28 <prvAddNewTaskToReadyList+0xd0>)
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8009f2c <prvAddNewTaskToReadyList+0xd4>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d903      	bls.n	8009ecc <prvAddNewTaskToReadyList+0x74>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec8:	4a18      	ldr	r2, [pc, #96]	@ (8009f2c <prvAddNewTaskToReadyList+0xd4>)
 8009eca:	6013      	str	r3, [r2, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4413      	add	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4a15      	ldr	r2, [pc, #84]	@ (8009f30 <prvAddNewTaskToReadyList+0xd8>)
 8009eda:	441a      	add	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	3304      	adds	r3, #4
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	4610      	mov	r0, r2
 8009ee4:	f7ff f8e9 	bl	80090ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009ee8:	f001 fa28 	bl	800b33c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009eec:	4b0d      	ldr	r3, [pc, #52]	@ (8009f24 <prvAddNewTaskToReadyList+0xcc>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00e      	beq.n	8009f12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8009f20 <prvAddNewTaskToReadyList+0xc8>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d207      	bcs.n	8009f12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f02:	4b0c      	ldr	r3, [pc, #48]	@ (8009f34 <prvAddNewTaskToReadyList+0xdc>)
 8009f04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f12:	bf00      	nop
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20001084 	.word	0x20001084
 8009f20:	20000bb0 	.word	0x20000bb0
 8009f24:	20001090 	.word	0x20001090
 8009f28:	200010a0 	.word	0x200010a0
 8009f2c:	2000108c 	.word	0x2000108c
 8009f30:	20000bb4 	.word	0x20000bb4
 8009f34:	e000ed04 	.word	0xe000ed04

08009f38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b08a      	sub	sp, #40	@ 0x28
 8009f3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f46:	463a      	mov	r2, r7
 8009f48:	1d39      	adds	r1, r7, #4
 8009f4a:	f107 0308 	add.w	r3, r7, #8
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7ff f852 	bl	8008ff8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f54:	6839      	ldr	r1, [r7, #0]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	9202      	str	r2, [sp, #8]
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	2300      	movs	r3, #0
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	2300      	movs	r3, #0
 8009f64:	460a      	mov	r2, r1
 8009f66:	4924      	ldr	r1, [pc, #144]	@ (8009ff8 <vTaskStartScheduler+0xc0>)
 8009f68:	4824      	ldr	r0, [pc, #144]	@ (8009ffc <vTaskStartScheduler+0xc4>)
 8009f6a:	f7ff fe27 	bl	8009bbc <xTaskCreateStatic>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	4a23      	ldr	r2, [pc, #140]	@ (800a000 <vTaskStartScheduler+0xc8>)
 8009f72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f74:	4b22      	ldr	r3, [pc, #136]	@ (800a000 <vTaskStartScheduler+0xc8>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d002      	beq.n	8009f82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	617b      	str	r3, [r7, #20]
 8009f80:	e001      	b.n	8009f86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009f82:	2300      	movs	r3, #0
 8009f84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d102      	bne.n	8009f92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009f8c:	f000 fd1a 	bl	800a9c4 <xTimerCreateTimerTask>
 8009f90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d11b      	bne.n	8009fd0 <vTaskStartScheduler+0x98>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	613b      	str	r3, [r7, #16]
}
 8009faa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009fac:	4b15      	ldr	r3, [pc, #84]	@ (800a004 <vTaskStartScheduler+0xcc>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	3354      	adds	r3, #84	@ 0x54
 8009fb2:	4a15      	ldr	r2, [pc, #84]	@ (800a008 <vTaskStartScheduler+0xd0>)
 8009fb4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009fb6:	4b15      	ldr	r3, [pc, #84]	@ (800a00c <vTaskStartScheduler+0xd4>)
 8009fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009fbe:	4b14      	ldr	r3, [pc, #80]	@ (800a010 <vTaskStartScheduler+0xd8>)
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009fc4:	4b13      	ldr	r3, [pc, #76]	@ (800a014 <vTaskStartScheduler+0xdc>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009fca:	f001 f8e1 	bl	800b190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009fce:	e00f      	b.n	8009ff0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd6:	d10b      	bne.n	8009ff0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	60fb      	str	r3, [r7, #12]
}
 8009fea:	bf00      	nop
 8009fec:	bf00      	nop
 8009fee:	e7fd      	b.n	8009fec <vTaskStartScheduler+0xb4>
}
 8009ff0:	bf00      	nop
 8009ff2:	3718      	adds	r7, #24
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	0800ec18 	.word	0x0800ec18
 8009ffc:	0800a649 	.word	0x0800a649
 800a000:	200010a8 	.word	0x200010a8
 800a004:	20000bb0 	.word	0x20000bb0
 800a008:	200000b0 	.word	0x200000b0
 800a00c:	200010a4 	.word	0x200010a4
 800a010:	20001090 	.word	0x20001090
 800a014:	20001088 	.word	0x20001088

0800a018 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a018:	b480      	push	{r7}
 800a01a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a01c:	4b04      	ldr	r3, [pc, #16]	@ (800a030 <vTaskSuspendAll+0x18>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	3301      	adds	r3, #1
 800a022:	4a03      	ldr	r2, [pc, #12]	@ (800a030 <vTaskSuspendAll+0x18>)
 800a024:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a026:	bf00      	nop
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	200010ac 	.word	0x200010ac

0800a034 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a03a:	2300      	movs	r3, #0
 800a03c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a03e:	2300      	movs	r3, #0
 800a040:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a042:	4b42      	ldr	r3, [pc, #264]	@ (800a14c <xTaskResumeAll+0x118>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10b      	bne.n	800a062 <xTaskResumeAll+0x2e>
	__asm volatile
 800a04a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	603b      	str	r3, [r7, #0]
}
 800a05c:	bf00      	nop
 800a05e:	bf00      	nop
 800a060:	e7fd      	b.n	800a05e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a062:	f001 f939 	bl	800b2d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a066:	4b39      	ldr	r3, [pc, #228]	@ (800a14c <xTaskResumeAll+0x118>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3b01      	subs	r3, #1
 800a06c:	4a37      	ldr	r2, [pc, #220]	@ (800a14c <xTaskResumeAll+0x118>)
 800a06e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a070:	4b36      	ldr	r3, [pc, #216]	@ (800a14c <xTaskResumeAll+0x118>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d162      	bne.n	800a13e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a078:	4b35      	ldr	r3, [pc, #212]	@ (800a150 <xTaskResumeAll+0x11c>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d05e      	beq.n	800a13e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a080:	e02f      	b.n	800a0e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a082:	4b34      	ldr	r3, [pc, #208]	@ (800a154 <xTaskResumeAll+0x120>)
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	3318      	adds	r3, #24
 800a08e:	4618      	mov	r0, r3
 800a090:	f7ff f870 	bl	8009174 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	3304      	adds	r3, #4
 800a098:	4618      	mov	r0, r3
 800a09a:	f7ff f86b 	bl	8009174 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0a2:	4b2d      	ldr	r3, [pc, #180]	@ (800a158 <xTaskResumeAll+0x124>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d903      	bls.n	800a0b2 <xTaskResumeAll+0x7e>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ae:	4a2a      	ldr	r2, [pc, #168]	@ (800a158 <xTaskResumeAll+0x124>)
 800a0b0:	6013      	str	r3, [r2, #0]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	009b      	lsls	r3, r3, #2
 800a0ba:	4413      	add	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4a27      	ldr	r2, [pc, #156]	@ (800a15c <xTaskResumeAll+0x128>)
 800a0c0:	441a      	add	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	3304      	adds	r3, #4
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	4610      	mov	r0, r2
 800a0ca:	f7fe fff6 	bl	80090ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0d2:	4b23      	ldr	r3, [pc, #140]	@ (800a160 <xTaskResumeAll+0x12c>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d302      	bcc.n	800a0e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a0dc:	4b21      	ldr	r3, [pc, #132]	@ (800a164 <xTaskResumeAll+0x130>)
 800a0de:	2201      	movs	r2, #1
 800a0e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0e2:	4b1c      	ldr	r3, [pc, #112]	@ (800a154 <xTaskResumeAll+0x120>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d1cb      	bne.n	800a082 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a0f0:	f000 fb66 	bl	800a7c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a0f4:	4b1c      	ldr	r3, [pc, #112]	@ (800a168 <xTaskResumeAll+0x134>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d010      	beq.n	800a122 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a100:	f000 f846 	bl	800a190 <xTaskIncrementTick>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d002      	beq.n	800a110 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a10a:	4b16      	ldr	r3, [pc, #88]	@ (800a164 <xTaskResumeAll+0x130>)
 800a10c:	2201      	movs	r2, #1
 800a10e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3b01      	subs	r3, #1
 800a114:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1f1      	bne.n	800a100 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a11c:	4b12      	ldr	r3, [pc, #72]	@ (800a168 <xTaskResumeAll+0x134>)
 800a11e:	2200      	movs	r2, #0
 800a120:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a122:	4b10      	ldr	r3, [pc, #64]	@ (800a164 <xTaskResumeAll+0x130>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d009      	beq.n	800a13e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a12a:	2301      	movs	r3, #1
 800a12c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a12e:	4b0f      	ldr	r3, [pc, #60]	@ (800a16c <xTaskResumeAll+0x138>)
 800a130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a134:	601a      	str	r2, [r3, #0]
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a13e:	f001 f8fd 	bl	800b33c <vPortExitCritical>

	return xAlreadyYielded;
 800a142:	68bb      	ldr	r3, [r7, #8]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	200010ac 	.word	0x200010ac
 800a150:	20001084 	.word	0x20001084
 800a154:	20001044 	.word	0x20001044
 800a158:	2000108c 	.word	0x2000108c
 800a15c:	20000bb4 	.word	0x20000bb4
 800a160:	20000bb0 	.word	0x20000bb0
 800a164:	20001098 	.word	0x20001098
 800a168:	20001094 	.word	0x20001094
 800a16c:	e000ed04 	.word	0xe000ed04

0800a170 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a176:	4b05      	ldr	r3, [pc, #20]	@ (800a18c <xTaskGetTickCount+0x1c>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a17c:	687b      	ldr	r3, [r7, #4]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	370c      	adds	r7, #12
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	20001088 	.word	0x20001088

0800a190 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a196:	2300      	movs	r3, #0
 800a198:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a19a:	4b4f      	ldr	r3, [pc, #316]	@ (800a2d8 <xTaskIncrementTick+0x148>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f040 8090 	bne.w	800a2c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a1a4:	4b4d      	ldr	r3, [pc, #308]	@ (800a2dc <xTaskIncrementTick+0x14c>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a1ac:	4a4b      	ldr	r2, [pc, #300]	@ (800a2dc <xTaskIncrementTick+0x14c>)
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d121      	bne.n	800a1fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a1b8:	4b49      	ldr	r3, [pc, #292]	@ (800a2e0 <xTaskIncrementTick+0x150>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00b      	beq.n	800a1da <xTaskIncrementTick+0x4a>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	603b      	str	r3, [r7, #0]
}
 800a1d4:	bf00      	nop
 800a1d6:	bf00      	nop
 800a1d8:	e7fd      	b.n	800a1d6 <xTaskIncrementTick+0x46>
 800a1da:	4b41      	ldr	r3, [pc, #260]	@ (800a2e0 <xTaskIncrementTick+0x150>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	60fb      	str	r3, [r7, #12]
 800a1e0:	4b40      	ldr	r3, [pc, #256]	@ (800a2e4 <xTaskIncrementTick+0x154>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a3e      	ldr	r2, [pc, #248]	@ (800a2e0 <xTaskIncrementTick+0x150>)
 800a1e6:	6013      	str	r3, [r2, #0]
 800a1e8:	4a3e      	ldr	r2, [pc, #248]	@ (800a2e4 <xTaskIncrementTick+0x154>)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6013      	str	r3, [r2, #0]
 800a1ee:	4b3e      	ldr	r3, [pc, #248]	@ (800a2e8 <xTaskIncrementTick+0x158>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	4a3c      	ldr	r2, [pc, #240]	@ (800a2e8 <xTaskIncrementTick+0x158>)
 800a1f6:	6013      	str	r3, [r2, #0]
 800a1f8:	f000 fae2 	bl	800a7c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a1fc:	4b3b      	ldr	r3, [pc, #236]	@ (800a2ec <xTaskIncrementTick+0x15c>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	693a      	ldr	r2, [r7, #16]
 800a202:	429a      	cmp	r2, r3
 800a204:	d349      	bcc.n	800a29a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a206:	4b36      	ldr	r3, [pc, #216]	@ (800a2e0 <xTaskIncrementTick+0x150>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d104      	bne.n	800a21a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a210:	4b36      	ldr	r3, [pc, #216]	@ (800a2ec <xTaskIncrementTick+0x15c>)
 800a212:	f04f 32ff 	mov.w	r2, #4294967295
 800a216:	601a      	str	r2, [r3, #0]
					break;
 800a218:	e03f      	b.n	800a29a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a21a:	4b31      	ldr	r3, [pc, #196]	@ (800a2e0 <xTaskIncrementTick+0x150>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d203      	bcs.n	800a23a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a232:	4a2e      	ldr	r2, [pc, #184]	@ (800a2ec <xTaskIncrementTick+0x15c>)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a238:	e02f      	b.n	800a29a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	3304      	adds	r3, #4
 800a23e:	4618      	mov	r0, r3
 800a240:	f7fe ff98 	bl	8009174 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d004      	beq.n	800a256 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	3318      	adds	r3, #24
 800a250:	4618      	mov	r0, r3
 800a252:	f7fe ff8f 	bl	8009174 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a25a:	4b25      	ldr	r3, [pc, #148]	@ (800a2f0 <xTaskIncrementTick+0x160>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d903      	bls.n	800a26a <xTaskIncrementTick+0xda>
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a266:	4a22      	ldr	r2, [pc, #136]	@ (800a2f0 <xTaskIncrementTick+0x160>)
 800a268:	6013      	str	r3, [r2, #0]
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a26e:	4613      	mov	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4413      	add	r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	4a1f      	ldr	r2, [pc, #124]	@ (800a2f4 <xTaskIncrementTick+0x164>)
 800a278:	441a      	add	r2, r3
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	3304      	adds	r3, #4
 800a27e:	4619      	mov	r1, r3
 800a280:	4610      	mov	r0, r2
 800a282:	f7fe ff1a 	bl	80090ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a28a:	4b1b      	ldr	r3, [pc, #108]	@ (800a2f8 <xTaskIncrementTick+0x168>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a290:	429a      	cmp	r2, r3
 800a292:	d3b8      	bcc.n	800a206 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a294:	2301      	movs	r3, #1
 800a296:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a298:	e7b5      	b.n	800a206 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a29a:	4b17      	ldr	r3, [pc, #92]	@ (800a2f8 <xTaskIncrementTick+0x168>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2a0:	4914      	ldr	r1, [pc, #80]	@ (800a2f4 <xTaskIncrementTick+0x164>)
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4413      	add	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	440b      	add	r3, r1
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d901      	bls.n	800a2b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a2b6:	4b11      	ldr	r3, [pc, #68]	@ (800a2fc <xTaskIncrementTick+0x16c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d007      	beq.n	800a2ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	617b      	str	r3, [r7, #20]
 800a2c2:	e004      	b.n	800a2ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a2c4:	4b0e      	ldr	r3, [pc, #56]	@ (800a300 <xTaskIncrementTick+0x170>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	4a0d      	ldr	r2, [pc, #52]	@ (800a300 <xTaskIncrementTick+0x170>)
 800a2cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a2ce:	697b      	ldr	r3, [r7, #20]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3718      	adds	r7, #24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	200010ac 	.word	0x200010ac
 800a2dc:	20001088 	.word	0x20001088
 800a2e0:	2000103c 	.word	0x2000103c
 800a2e4:	20001040 	.word	0x20001040
 800a2e8:	2000109c 	.word	0x2000109c
 800a2ec:	200010a4 	.word	0x200010a4
 800a2f0:	2000108c 	.word	0x2000108c
 800a2f4:	20000bb4 	.word	0x20000bb4
 800a2f8:	20000bb0 	.word	0x20000bb0
 800a2fc:	20001098 	.word	0x20001098
 800a300:	20001094 	.word	0x20001094

0800a304 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a30a:	4b2b      	ldr	r3, [pc, #172]	@ (800a3b8 <vTaskSwitchContext+0xb4>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a312:	4b2a      	ldr	r3, [pc, #168]	@ (800a3bc <vTaskSwitchContext+0xb8>)
 800a314:	2201      	movs	r2, #1
 800a316:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a318:	e047      	b.n	800a3aa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a31a:	4b28      	ldr	r3, [pc, #160]	@ (800a3bc <vTaskSwitchContext+0xb8>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a320:	4b27      	ldr	r3, [pc, #156]	@ (800a3c0 <vTaskSwitchContext+0xbc>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	60fb      	str	r3, [r7, #12]
 800a326:	e011      	b.n	800a34c <vTaskSwitchContext+0x48>
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10b      	bne.n	800a346 <vTaskSwitchContext+0x42>
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	607b      	str	r3, [r7, #4]
}
 800a340:	bf00      	nop
 800a342:	bf00      	nop
 800a344:	e7fd      	b.n	800a342 <vTaskSwitchContext+0x3e>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	3b01      	subs	r3, #1
 800a34a:	60fb      	str	r3, [r7, #12]
 800a34c:	491d      	ldr	r1, [pc, #116]	@ (800a3c4 <vTaskSwitchContext+0xc0>)
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	4613      	mov	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	440b      	add	r3, r1
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d0e3      	beq.n	800a328 <vTaskSwitchContext+0x24>
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	4613      	mov	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	4413      	add	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4a16      	ldr	r2, [pc, #88]	@ (800a3c4 <vTaskSwitchContext+0xc0>)
 800a36c:	4413      	add	r3, r2
 800a36e:	60bb      	str	r3, [r7, #8]
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	685a      	ldr	r2, [r3, #4]
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	605a      	str	r2, [r3, #4]
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	685a      	ldr	r2, [r3, #4]
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	3308      	adds	r3, #8
 800a382:	429a      	cmp	r2, r3
 800a384:	d104      	bne.n	800a390 <vTaskSwitchContext+0x8c>
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	605a      	str	r2, [r3, #4]
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	4a0c      	ldr	r2, [pc, #48]	@ (800a3c8 <vTaskSwitchContext+0xc4>)
 800a398:	6013      	str	r3, [r2, #0]
 800a39a:	4a09      	ldr	r2, [pc, #36]	@ (800a3c0 <vTaskSwitchContext+0xbc>)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a3a0:	4b09      	ldr	r3, [pc, #36]	@ (800a3c8 <vTaskSwitchContext+0xc4>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	3354      	adds	r3, #84	@ 0x54
 800a3a6:	4a09      	ldr	r2, [pc, #36]	@ (800a3cc <vTaskSwitchContext+0xc8>)
 800a3a8:	6013      	str	r3, [r2, #0]
}
 800a3aa:	bf00      	nop
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	200010ac 	.word	0x200010ac
 800a3bc:	20001098 	.word	0x20001098
 800a3c0:	2000108c 	.word	0x2000108c
 800a3c4:	20000bb4 	.word	0x20000bb4
 800a3c8:	20000bb0 	.word	0x20000bb0
 800a3cc:	200000b0 	.word	0x200000b0

0800a3d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b084      	sub	sp, #16
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d10b      	bne.n	800a3f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e4:	f383 8811 	msr	BASEPRI, r3
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	f3bf 8f4f 	dsb	sy
 800a3f0:	60fb      	str	r3, [r7, #12]
}
 800a3f2:	bf00      	nop
 800a3f4:	bf00      	nop
 800a3f6:	e7fd      	b.n	800a3f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a3f8:	4b07      	ldr	r3, [pc, #28]	@ (800a418 <vTaskPlaceOnEventList+0x48>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	3318      	adds	r3, #24
 800a3fe:	4619      	mov	r1, r3
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f7fe fe7e 	bl	8009102 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a406:	2101      	movs	r1, #1
 800a408:	6838      	ldr	r0, [r7, #0]
 800a40a:	f000 fa87 	bl	800a91c <prvAddCurrentTaskToDelayedList>
}
 800a40e:	bf00      	nop
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20000bb0 	.word	0x20000bb0

0800a41c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d10b      	bne.n	800a446 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	617b      	str	r3, [r7, #20]
}
 800a440:	bf00      	nop
 800a442:	bf00      	nop
 800a444:	e7fd      	b.n	800a442 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a446:	4b0a      	ldr	r3, [pc, #40]	@ (800a470 <vTaskPlaceOnEventListRestricted+0x54>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	3318      	adds	r3, #24
 800a44c:	4619      	mov	r1, r3
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f7fe fe33 	bl	80090ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d002      	beq.n	800a460 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a45a:	f04f 33ff 	mov.w	r3, #4294967295
 800a45e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a460:	6879      	ldr	r1, [r7, #4]
 800a462:	68b8      	ldr	r0, [r7, #8]
 800a464:	f000 fa5a 	bl	800a91c <prvAddCurrentTaskToDelayedList>
	}
 800a468:	bf00      	nop
 800a46a:	3718      	adds	r7, #24
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	20000bb0 	.word	0x20000bb0

0800a474 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10b      	bne.n	800a4a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	60fb      	str	r3, [r7, #12]
}
 800a49c:	bf00      	nop
 800a49e:	bf00      	nop
 800a4a0:	e7fd      	b.n	800a49e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	3318      	adds	r3, #24
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7fe fe64 	bl	8009174 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4ac:	4b1d      	ldr	r3, [pc, #116]	@ (800a524 <xTaskRemoveFromEventList+0xb0>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d11d      	bne.n	800a4f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	3304      	adds	r3, #4
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fe fe5b 	bl	8009174 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4c2:	4b19      	ldr	r3, [pc, #100]	@ (800a528 <xTaskRemoveFromEventList+0xb4>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d903      	bls.n	800a4d2 <xTaskRemoveFromEventList+0x5e>
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ce:	4a16      	ldr	r2, [pc, #88]	@ (800a528 <xTaskRemoveFromEventList+0xb4>)
 800a4d0:	6013      	str	r3, [r2, #0]
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	4413      	add	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	4a13      	ldr	r2, [pc, #76]	@ (800a52c <xTaskRemoveFromEventList+0xb8>)
 800a4e0:	441a      	add	r2, r3
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	4610      	mov	r0, r2
 800a4ea:	f7fe fde6 	bl	80090ba <vListInsertEnd>
 800a4ee:	e005      	b.n	800a4fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	3318      	adds	r3, #24
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	480e      	ldr	r0, [pc, #56]	@ (800a530 <xTaskRemoveFromEventList+0xbc>)
 800a4f8:	f7fe fddf 	bl	80090ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a500:	4b0c      	ldr	r3, [pc, #48]	@ (800a534 <xTaskRemoveFromEventList+0xc0>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a506:	429a      	cmp	r2, r3
 800a508:	d905      	bls.n	800a516 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a50a:	2301      	movs	r3, #1
 800a50c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a50e:	4b0a      	ldr	r3, [pc, #40]	@ (800a538 <xTaskRemoveFromEventList+0xc4>)
 800a510:	2201      	movs	r2, #1
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	e001      	b.n	800a51a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a516:	2300      	movs	r3, #0
 800a518:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a51a:	697b      	ldr	r3, [r7, #20]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3718      	adds	r7, #24
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	200010ac 	.word	0x200010ac
 800a528:	2000108c 	.word	0x2000108c
 800a52c:	20000bb4 	.word	0x20000bb4
 800a530:	20001044 	.word	0x20001044
 800a534:	20000bb0 	.word	0x20000bb0
 800a538:	20001098 	.word	0x20001098

0800a53c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a544:	4b06      	ldr	r3, [pc, #24]	@ (800a560 <vTaskInternalSetTimeOutState+0x24>)
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a54c:	4b05      	ldr	r3, [pc, #20]	@ (800a564 <vTaskInternalSetTimeOutState+0x28>)
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	605a      	str	r2, [r3, #4]
}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	2000109c 	.word	0x2000109c
 800a564:	20001088 	.word	0x20001088

0800a568 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b088      	sub	sp, #32
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10b      	bne.n	800a590 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a57c:	f383 8811 	msr	BASEPRI, r3
 800a580:	f3bf 8f6f 	isb	sy
 800a584:	f3bf 8f4f 	dsb	sy
 800a588:	613b      	str	r3, [r7, #16]
}
 800a58a:	bf00      	nop
 800a58c:	bf00      	nop
 800a58e:	e7fd      	b.n	800a58c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d10b      	bne.n	800a5ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a59a:	f383 8811 	msr	BASEPRI, r3
 800a59e:	f3bf 8f6f 	isb	sy
 800a5a2:	f3bf 8f4f 	dsb	sy
 800a5a6:	60fb      	str	r3, [r7, #12]
}
 800a5a8:	bf00      	nop
 800a5aa:	bf00      	nop
 800a5ac:	e7fd      	b.n	800a5aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a5ae:	f000 fe93 	bl	800b2d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a5b2:	4b1d      	ldr	r3, [pc, #116]	@ (800a628 <xTaskCheckForTimeOut+0xc0>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	69ba      	ldr	r2, [r7, #24]
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ca:	d102      	bne.n	800a5d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	61fb      	str	r3, [r7, #28]
 800a5d0:	e023      	b.n	800a61a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	4b15      	ldr	r3, [pc, #84]	@ (800a62c <xTaskCheckForTimeOut+0xc4>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d007      	beq.n	800a5ee <xTaskCheckForTimeOut+0x86>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	69ba      	ldr	r2, [r7, #24]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d302      	bcc.n	800a5ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	61fb      	str	r3, [r7, #28]
 800a5ec:	e015      	b.n	800a61a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d20b      	bcs.n	800a610 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	1ad2      	subs	r2, r2, r3
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7ff ff99 	bl	800a53c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a60a:	2300      	movs	r3, #0
 800a60c:	61fb      	str	r3, [r7, #28]
 800a60e:	e004      	b.n	800a61a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	2200      	movs	r2, #0
 800a614:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a616:	2301      	movs	r3, #1
 800a618:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a61a:	f000 fe8f 	bl	800b33c <vPortExitCritical>

	return xReturn;
 800a61e:	69fb      	ldr	r3, [r7, #28]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3720      	adds	r7, #32
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	20001088 	.word	0x20001088
 800a62c:	2000109c 	.word	0x2000109c

0800a630 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a630:	b480      	push	{r7}
 800a632:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a634:	4b03      	ldr	r3, [pc, #12]	@ (800a644 <vTaskMissedYield+0x14>)
 800a636:	2201      	movs	r2, #1
 800a638:	601a      	str	r2, [r3, #0]
}
 800a63a:	bf00      	nop
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	20001098 	.word	0x20001098

0800a648 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a650:	f000 f852 	bl	800a6f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a654:	4b06      	ldr	r3, [pc, #24]	@ (800a670 <prvIdleTask+0x28>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d9f9      	bls.n	800a650 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a65c:	4b05      	ldr	r3, [pc, #20]	@ (800a674 <prvIdleTask+0x2c>)
 800a65e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a66c:	e7f0      	b.n	800a650 <prvIdleTask+0x8>
 800a66e:	bf00      	nop
 800a670:	20000bb4 	.word	0x20000bb4
 800a674:	e000ed04 	.word	0xe000ed04

0800a678 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a67e:	2300      	movs	r3, #0
 800a680:	607b      	str	r3, [r7, #4]
 800a682:	e00c      	b.n	800a69e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	4613      	mov	r3, r2
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	4413      	add	r3, r2
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4a12      	ldr	r2, [pc, #72]	@ (800a6d8 <prvInitialiseTaskLists+0x60>)
 800a690:	4413      	add	r3, r2
 800a692:	4618      	mov	r0, r3
 800a694:	f7fe fce4 	bl	8009060 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3301      	adds	r3, #1
 800a69c:	607b      	str	r3, [r7, #4]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2b37      	cmp	r3, #55	@ 0x37
 800a6a2:	d9ef      	bls.n	800a684 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a6a4:	480d      	ldr	r0, [pc, #52]	@ (800a6dc <prvInitialiseTaskLists+0x64>)
 800a6a6:	f7fe fcdb 	bl	8009060 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a6aa:	480d      	ldr	r0, [pc, #52]	@ (800a6e0 <prvInitialiseTaskLists+0x68>)
 800a6ac:	f7fe fcd8 	bl	8009060 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a6b0:	480c      	ldr	r0, [pc, #48]	@ (800a6e4 <prvInitialiseTaskLists+0x6c>)
 800a6b2:	f7fe fcd5 	bl	8009060 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a6b6:	480c      	ldr	r0, [pc, #48]	@ (800a6e8 <prvInitialiseTaskLists+0x70>)
 800a6b8:	f7fe fcd2 	bl	8009060 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a6bc:	480b      	ldr	r0, [pc, #44]	@ (800a6ec <prvInitialiseTaskLists+0x74>)
 800a6be:	f7fe fccf 	bl	8009060 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a6c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a6f0 <prvInitialiseTaskLists+0x78>)
 800a6c4:	4a05      	ldr	r2, [pc, #20]	@ (800a6dc <prvInitialiseTaskLists+0x64>)
 800a6c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a6c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a6f4 <prvInitialiseTaskLists+0x7c>)
 800a6ca:	4a05      	ldr	r2, [pc, #20]	@ (800a6e0 <prvInitialiseTaskLists+0x68>)
 800a6cc:	601a      	str	r2, [r3, #0]
}
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	20000bb4 	.word	0x20000bb4
 800a6dc:	20001014 	.word	0x20001014
 800a6e0:	20001028 	.word	0x20001028
 800a6e4:	20001044 	.word	0x20001044
 800a6e8:	20001058 	.word	0x20001058
 800a6ec:	20001070 	.word	0x20001070
 800a6f0:	2000103c 	.word	0x2000103c
 800a6f4:	20001040 	.word	0x20001040

0800a6f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6fe:	e019      	b.n	800a734 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a700:	f000 fdea 	bl	800b2d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a704:	4b10      	ldr	r3, [pc, #64]	@ (800a748 <prvCheckTasksWaitingTermination+0x50>)
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	3304      	adds	r3, #4
 800a710:	4618      	mov	r0, r3
 800a712:	f7fe fd2f 	bl	8009174 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a716:	4b0d      	ldr	r3, [pc, #52]	@ (800a74c <prvCheckTasksWaitingTermination+0x54>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3b01      	subs	r3, #1
 800a71c:	4a0b      	ldr	r2, [pc, #44]	@ (800a74c <prvCheckTasksWaitingTermination+0x54>)
 800a71e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a720:	4b0b      	ldr	r3, [pc, #44]	@ (800a750 <prvCheckTasksWaitingTermination+0x58>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	3b01      	subs	r3, #1
 800a726:	4a0a      	ldr	r2, [pc, #40]	@ (800a750 <prvCheckTasksWaitingTermination+0x58>)
 800a728:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a72a:	f000 fe07 	bl	800b33c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f000 f810 	bl	800a754 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a734:	4b06      	ldr	r3, [pc, #24]	@ (800a750 <prvCheckTasksWaitingTermination+0x58>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d1e1      	bne.n	800a700 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a73c:	bf00      	nop
 800a73e:	bf00      	nop
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	20001058 	.word	0x20001058
 800a74c:	20001084 	.word	0x20001084
 800a750:	2000106c 	.word	0x2000106c

0800a754 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	3354      	adds	r3, #84	@ 0x54
 800a760:	4618      	mov	r0, r3
 800a762:	f001 f959 	bl	800ba18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d108      	bne.n	800a782 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a774:	4618      	mov	r0, r3
 800a776:	f000 ff9f 	bl	800b6b8 <vPortFree>
				vPortFree( pxTCB );
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 ff9c 	bl	800b6b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a780:	e019      	b.n	800a7b6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d103      	bne.n	800a794 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 ff93 	bl	800b6b8 <vPortFree>
	}
 800a792:	e010      	b.n	800a7b6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d00b      	beq.n	800a7b6 <prvDeleteTCB+0x62>
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	60fb      	str	r3, [r7, #12]
}
 800a7b0:	bf00      	nop
 800a7b2:	bf00      	nop
 800a7b4:	e7fd      	b.n	800a7b2 <prvDeleteTCB+0x5e>
	}
 800a7b6:	bf00      	nop
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
	...

0800a7c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7c6:	4b0c      	ldr	r3, [pc, #48]	@ (800a7f8 <prvResetNextTaskUnblockTime+0x38>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d104      	bne.n	800a7da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a7fc <prvResetNextTaskUnblockTime+0x3c>)
 800a7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a7d8:	e008      	b.n	800a7ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7da:	4b07      	ldr	r3, [pc, #28]	@ (800a7f8 <prvResetNextTaskUnblockTime+0x38>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	4a04      	ldr	r2, [pc, #16]	@ (800a7fc <prvResetNextTaskUnblockTime+0x3c>)
 800a7ea:	6013      	str	r3, [r2, #0]
}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr
 800a7f8:	2000103c 	.word	0x2000103c
 800a7fc:	200010a4 	.word	0x200010a4

0800a800 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a806:	4b0b      	ldr	r3, [pc, #44]	@ (800a834 <xTaskGetSchedulerState+0x34>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d102      	bne.n	800a814 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a80e:	2301      	movs	r3, #1
 800a810:	607b      	str	r3, [r7, #4]
 800a812:	e008      	b.n	800a826 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a814:	4b08      	ldr	r3, [pc, #32]	@ (800a838 <xTaskGetSchedulerState+0x38>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d102      	bne.n	800a822 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a81c:	2302      	movs	r3, #2
 800a81e:	607b      	str	r3, [r7, #4]
 800a820:	e001      	b.n	800a826 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a822:	2300      	movs	r3, #0
 800a824:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a826:	687b      	ldr	r3, [r7, #4]
	}
 800a828:	4618      	mov	r0, r3
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr
 800a834:	20001090 	.word	0x20001090
 800a838:	200010ac 	.word	0x200010ac

0800a83c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a848:	2300      	movs	r3, #0
 800a84a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d058      	beq.n	800a904 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a852:	4b2f      	ldr	r3, [pc, #188]	@ (800a910 <xTaskPriorityDisinherit+0xd4>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	693a      	ldr	r2, [r7, #16]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d00b      	beq.n	800a874 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a860:	f383 8811 	msr	BASEPRI, r3
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	60fb      	str	r3, [r7, #12]
}
 800a86e:	bf00      	nop
 800a870:	bf00      	nop
 800a872:	e7fd      	b.n	800a870 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10b      	bne.n	800a894 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a87c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a880:	f383 8811 	msr	BASEPRI, r3
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	60bb      	str	r3, [r7, #8]
}
 800a88e:	bf00      	nop
 800a890:	bf00      	nop
 800a892:	e7fd      	b.n	800a890 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a898:	1e5a      	subs	r2, r3, #1
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d02c      	beq.n	800a904 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d128      	bne.n	800a904 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	3304      	adds	r3, #4
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fe fc5c 	bl	8009174 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8d4:	4b0f      	ldr	r3, [pc, #60]	@ (800a914 <xTaskPriorityDisinherit+0xd8>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d903      	bls.n	800a8e4 <xTaskPriorityDisinherit+0xa8>
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8e0:	4a0c      	ldr	r2, [pc, #48]	@ (800a914 <xTaskPriorityDisinherit+0xd8>)
 800a8e2:	6013      	str	r3, [r2, #0]
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4a09      	ldr	r2, [pc, #36]	@ (800a918 <xTaskPriorityDisinherit+0xdc>)
 800a8f2:	441a      	add	r2, r3
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	4610      	mov	r0, r2
 800a8fc:	f7fe fbdd 	bl	80090ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a900:	2301      	movs	r3, #1
 800a902:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a904:	697b      	ldr	r3, [r7, #20]
	}
 800a906:	4618      	mov	r0, r3
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	20000bb0 	.word	0x20000bb0
 800a914:	2000108c 	.word	0x2000108c
 800a918:	20000bb4 	.word	0x20000bb4

0800a91c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a926:	4b21      	ldr	r3, [pc, #132]	@ (800a9ac <prvAddCurrentTaskToDelayedList+0x90>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a92c:	4b20      	ldr	r3, [pc, #128]	@ (800a9b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	3304      	adds	r3, #4
 800a932:	4618      	mov	r0, r3
 800a934:	f7fe fc1e 	bl	8009174 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a93e:	d10a      	bne.n	800a956 <prvAddCurrentTaskToDelayedList+0x3a>
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d007      	beq.n	800a956 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a946:	4b1a      	ldr	r3, [pc, #104]	@ (800a9b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	3304      	adds	r3, #4
 800a94c:	4619      	mov	r1, r3
 800a94e:	4819      	ldr	r0, [pc, #100]	@ (800a9b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a950:	f7fe fbb3 	bl	80090ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a954:	e026      	b.n	800a9a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4413      	add	r3, r2
 800a95c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a95e:	4b14      	ldr	r3, [pc, #80]	@ (800a9b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d209      	bcs.n	800a982 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a96e:	4b12      	ldr	r3, [pc, #72]	@ (800a9b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	4b0f      	ldr	r3, [pc, #60]	@ (800a9b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	3304      	adds	r3, #4
 800a978:	4619      	mov	r1, r3
 800a97a:	4610      	mov	r0, r2
 800a97c:	f7fe fbc1 	bl	8009102 <vListInsert>
}
 800a980:	e010      	b.n	800a9a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a982:	4b0e      	ldr	r3, [pc, #56]	@ (800a9bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3304      	adds	r3, #4
 800a98c:	4619      	mov	r1, r3
 800a98e:	4610      	mov	r0, r2
 800a990:	f7fe fbb7 	bl	8009102 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a994:	4b0a      	ldr	r3, [pc, #40]	@ (800a9c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d202      	bcs.n	800a9a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a99e:	4a08      	ldr	r2, [pc, #32]	@ (800a9c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	6013      	str	r3, [r2, #0]
}
 800a9a4:	bf00      	nop
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	20001088 	.word	0x20001088
 800a9b0:	20000bb0 	.word	0x20000bb0
 800a9b4:	20001070 	.word	0x20001070
 800a9b8:	20001040 	.word	0x20001040
 800a9bc:	2000103c 	.word	0x2000103c
 800a9c0:	200010a4 	.word	0x200010a4

0800a9c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b08a      	sub	sp, #40	@ 0x28
 800a9c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a9ce:	f000 fb13 	bl	800aff8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a9d2:	4b1d      	ldr	r3, [pc, #116]	@ (800aa48 <xTimerCreateTimerTask+0x84>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d021      	beq.n	800aa1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a9e2:	1d3a      	adds	r2, r7, #4
 800a9e4:	f107 0108 	add.w	r1, r7, #8
 800a9e8:	f107 030c 	add.w	r3, r7, #12
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fe fb1d 	bl	800902c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a9f2:	6879      	ldr	r1, [r7, #4]
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	9202      	str	r2, [sp, #8]
 800a9fa:	9301      	str	r3, [sp, #4]
 800a9fc:	2302      	movs	r3, #2
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	2300      	movs	r3, #0
 800aa02:	460a      	mov	r2, r1
 800aa04:	4911      	ldr	r1, [pc, #68]	@ (800aa4c <xTimerCreateTimerTask+0x88>)
 800aa06:	4812      	ldr	r0, [pc, #72]	@ (800aa50 <xTimerCreateTimerTask+0x8c>)
 800aa08:	f7ff f8d8 	bl	8009bbc <xTaskCreateStatic>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	4a11      	ldr	r2, [pc, #68]	@ (800aa54 <xTimerCreateTimerTask+0x90>)
 800aa10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aa12:	4b10      	ldr	r3, [pc, #64]	@ (800aa54 <xTimerCreateTimerTask+0x90>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d10b      	bne.n	800aa3c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800aa24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa28:	f383 8811 	msr	BASEPRI, r3
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	613b      	str	r3, [r7, #16]
}
 800aa36:	bf00      	nop
 800aa38:	bf00      	nop
 800aa3a:	e7fd      	b.n	800aa38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aa3c:	697b      	ldr	r3, [r7, #20]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3718      	adds	r7, #24
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	200010e0 	.word	0x200010e0
 800aa4c:	0800ec20 	.word	0x0800ec20
 800aa50:	0800ab91 	.word	0x0800ab91
 800aa54:	200010e4 	.word	0x200010e4

0800aa58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b08a      	sub	sp, #40	@ 0x28
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
 800aa64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aa66:	2300      	movs	r3, #0
 800aa68:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d10b      	bne.n	800aa88 <xTimerGenericCommand+0x30>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa74:	f383 8811 	msr	BASEPRI, r3
 800aa78:	f3bf 8f6f 	isb	sy
 800aa7c:	f3bf 8f4f 	dsb	sy
 800aa80:	623b      	str	r3, [r7, #32]
}
 800aa82:	bf00      	nop
 800aa84:	bf00      	nop
 800aa86:	e7fd      	b.n	800aa84 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aa88:	4b19      	ldr	r3, [pc, #100]	@ (800aaf0 <xTimerGenericCommand+0x98>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d02a      	beq.n	800aae6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2b05      	cmp	r3, #5
 800aaa0:	dc18      	bgt.n	800aad4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aaa2:	f7ff fead 	bl	800a800 <xTaskGetSchedulerState>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d109      	bne.n	800aac0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aaac:	4b10      	ldr	r3, [pc, #64]	@ (800aaf0 <xTimerGenericCommand+0x98>)
 800aaae:	6818      	ldr	r0, [r3, #0]
 800aab0:	f107 0110 	add.w	r1, r7, #16
 800aab4:	2300      	movs	r3, #0
 800aab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aab8:	f7fe fc90 	bl	80093dc <xQueueGenericSend>
 800aabc:	6278      	str	r0, [r7, #36]	@ 0x24
 800aabe:	e012      	b.n	800aae6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aac0:	4b0b      	ldr	r3, [pc, #44]	@ (800aaf0 <xTimerGenericCommand+0x98>)
 800aac2:	6818      	ldr	r0, [r3, #0]
 800aac4:	f107 0110 	add.w	r1, r7, #16
 800aac8:	2300      	movs	r3, #0
 800aaca:	2200      	movs	r2, #0
 800aacc:	f7fe fc86 	bl	80093dc <xQueueGenericSend>
 800aad0:	6278      	str	r0, [r7, #36]	@ 0x24
 800aad2:	e008      	b.n	800aae6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aad4:	4b06      	ldr	r3, [pc, #24]	@ (800aaf0 <xTimerGenericCommand+0x98>)
 800aad6:	6818      	ldr	r0, [r3, #0]
 800aad8:	f107 0110 	add.w	r1, r7, #16
 800aadc:	2300      	movs	r3, #0
 800aade:	683a      	ldr	r2, [r7, #0]
 800aae0:	f7fe fd7e 	bl	80095e0 <xQueueGenericSendFromISR>
 800aae4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3728      	adds	r7, #40	@ 0x28
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	200010e0 	.word	0x200010e0

0800aaf4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b088      	sub	sp, #32
 800aaf8:	af02      	add	r7, sp, #8
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aafe:	4b23      	ldr	r3, [pc, #140]	@ (800ab8c <prvProcessExpiredTimer+0x98>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fe fb31 	bl	8009174 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab18:	f003 0304 	and.w	r3, r3, #4
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d023      	beq.n	800ab68 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	699a      	ldr	r2, [r3, #24]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	18d1      	adds	r1, r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	6978      	ldr	r0, [r7, #20]
 800ab2e:	f000 f8d5 	bl	800acdc <prvInsertTimerInActiveList>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d020      	beq.n	800ab7a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab38:	2300      	movs	r3, #0
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	2100      	movs	r1, #0
 800ab42:	6978      	ldr	r0, [r7, #20]
 800ab44:	f7ff ff88 	bl	800aa58 <xTimerGenericCommand>
 800ab48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d114      	bne.n	800ab7a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ab50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	60fb      	str	r3, [r7, #12]
}
 800ab62:	bf00      	nop
 800ab64:	bf00      	nop
 800ab66:	e7fd      	b.n	800ab64 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab6e:	f023 0301 	bic.w	r3, r3, #1
 800ab72:	b2da      	uxtb	r2, r3
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	6a1b      	ldr	r3, [r3, #32]
 800ab7e:	6978      	ldr	r0, [r7, #20]
 800ab80:	4798      	blx	r3
}
 800ab82:	bf00      	nop
 800ab84:	3718      	adds	r7, #24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	200010d8 	.word	0x200010d8

0800ab90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab98:	f107 0308 	add.w	r3, r7, #8
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 f859 	bl	800ac54 <prvGetNextExpireTime>
 800aba2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	4619      	mov	r1, r3
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f000 f805 	bl	800abb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800abae:	f000 f8d7 	bl	800ad60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800abb2:	bf00      	nop
 800abb4:	e7f0      	b.n	800ab98 <prvTimerTask+0x8>
	...

0800abb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800abc2:	f7ff fa29 	bl	800a018 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800abc6:	f107 0308 	add.w	r3, r7, #8
 800abca:	4618      	mov	r0, r3
 800abcc:	f000 f866 	bl	800ac9c <prvSampleTimeNow>
 800abd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d130      	bne.n	800ac3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d10a      	bne.n	800abf4 <prvProcessTimerOrBlockTask+0x3c>
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d806      	bhi.n	800abf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800abe6:	f7ff fa25 	bl	800a034 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800abea:	68f9      	ldr	r1, [r7, #12]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f7ff ff81 	bl	800aaf4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800abf2:	e024      	b.n	800ac3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d008      	beq.n	800ac0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800abfa:	4b13      	ldr	r3, [pc, #76]	@ (800ac48 <prvProcessTimerOrBlockTask+0x90>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d101      	bne.n	800ac08 <prvProcessTimerOrBlockTask+0x50>
 800ac04:	2301      	movs	r3, #1
 800ac06:	e000      	b.n	800ac0a <prvProcessTimerOrBlockTask+0x52>
 800ac08:	2300      	movs	r3, #0
 800ac0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ac0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ac4c <prvProcessTimerOrBlockTask+0x94>)
 800ac0e:	6818      	ldr	r0, [r3, #0]
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	1ad3      	subs	r3, r2, r3
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	4619      	mov	r1, r3
 800ac1a:	f7fe ff9b 	bl	8009b54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ac1e:	f7ff fa09 	bl	800a034 <xTaskResumeAll>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d10a      	bne.n	800ac3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ac28:	4b09      	ldr	r3, [pc, #36]	@ (800ac50 <prvProcessTimerOrBlockTask+0x98>)
 800ac2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac2e:	601a      	str	r2, [r3, #0]
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	f3bf 8f6f 	isb	sy
}
 800ac38:	e001      	b.n	800ac3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ac3a:	f7ff f9fb 	bl	800a034 <xTaskResumeAll>
}
 800ac3e:	bf00      	nop
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	200010dc 	.word	0x200010dc
 800ac4c:	200010e0 	.word	0x200010e0
 800ac50:	e000ed04 	.word	0xe000ed04

0800ac54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ac5c:	4b0e      	ldr	r3, [pc, #56]	@ (800ac98 <prvGetNextExpireTime+0x44>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d101      	bne.n	800ac6a <prvGetNextExpireTime+0x16>
 800ac66:	2201      	movs	r2, #1
 800ac68:	e000      	b.n	800ac6c <prvGetNextExpireTime+0x18>
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d105      	bne.n	800ac84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac78:	4b07      	ldr	r3, [pc, #28]	@ (800ac98 <prvGetNextExpireTime+0x44>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	60fb      	str	r3, [r7, #12]
 800ac82:	e001      	b.n	800ac88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ac84:	2300      	movs	r3, #0
 800ac86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ac88:	68fb      	ldr	r3, [r7, #12]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	200010d8 	.word	0x200010d8

0800ac9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aca4:	f7ff fa64 	bl	800a170 <xTaskGetTickCount>
 800aca8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800acaa:	4b0b      	ldr	r3, [pc, #44]	@ (800acd8 <prvSampleTimeNow+0x3c>)
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d205      	bcs.n	800acc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800acb4:	f000 f93a 	bl	800af2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	601a      	str	r2, [r3, #0]
 800acbe:	e002      	b.n	800acc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800acc6:	4a04      	ldr	r2, [pc, #16]	@ (800acd8 <prvSampleTimeNow+0x3c>)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800accc:	68fb      	ldr	r3, [r7, #12]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3710      	adds	r7, #16
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	200010e8 	.word	0x200010e8

0800acdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b086      	sub	sp, #24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
 800ace8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800acea:	2300      	movs	r3, #0
 800acec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d812      	bhi.n	800ad28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	1ad2      	subs	r2, r2, r3
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d302      	bcc.n	800ad16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ad10:	2301      	movs	r3, #1
 800ad12:	617b      	str	r3, [r7, #20]
 800ad14:	e01b      	b.n	800ad4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ad16:	4b10      	ldr	r3, [pc, #64]	@ (800ad58 <prvInsertTimerInActiveList+0x7c>)
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	3304      	adds	r3, #4
 800ad1e:	4619      	mov	r1, r3
 800ad20:	4610      	mov	r0, r2
 800ad22:	f7fe f9ee 	bl	8009102 <vListInsert>
 800ad26:	e012      	b.n	800ad4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d206      	bcs.n	800ad3e <prvInsertTimerInActiveList+0x62>
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d302      	bcc.n	800ad3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	617b      	str	r3, [r7, #20]
 800ad3c:	e007      	b.n	800ad4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad3e:	4b07      	ldr	r3, [pc, #28]	@ (800ad5c <prvInsertTimerInActiveList+0x80>)
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	3304      	adds	r3, #4
 800ad46:	4619      	mov	r1, r3
 800ad48:	4610      	mov	r0, r2
 800ad4a:	f7fe f9da 	bl	8009102 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ad4e:	697b      	ldr	r3, [r7, #20]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3718      	adds	r7, #24
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	200010dc 	.word	0x200010dc
 800ad5c:	200010d8 	.word	0x200010d8

0800ad60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08e      	sub	sp, #56	@ 0x38
 800ad64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad66:	e0ce      	b.n	800af06 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	da19      	bge.n	800ada2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ad6e:	1d3b      	adds	r3, r7, #4
 800ad70:	3304      	adds	r3, #4
 800ad72:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ad74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d10b      	bne.n	800ad92 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800ad7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad7e:	f383 8811 	msr	BASEPRI, r3
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	61fb      	str	r3, [r7, #28]
}
 800ad8c:	bf00      	nop
 800ad8e:	bf00      	nop
 800ad90:	e7fd      	b.n	800ad8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ad92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad98:	6850      	ldr	r0, [r2, #4]
 800ad9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad9c:	6892      	ldr	r2, [r2, #8]
 800ad9e:	4611      	mov	r1, r2
 800ada0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f2c0 80ae 	blt.w	800af06 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800adae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb0:	695b      	ldr	r3, [r3, #20]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d004      	beq.n	800adc0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb8:	3304      	adds	r3, #4
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fe f9da 	bl	8009174 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800adc0:	463b      	mov	r3, r7
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7ff ff6a 	bl	800ac9c <prvSampleTimeNow>
 800adc8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2b09      	cmp	r3, #9
 800adce:	f200 8097 	bhi.w	800af00 <prvProcessReceivedCommands+0x1a0>
 800add2:	a201      	add	r2, pc, #4	@ (adr r2, 800add8 <prvProcessReceivedCommands+0x78>)
 800add4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add8:	0800ae01 	.word	0x0800ae01
 800addc:	0800ae01 	.word	0x0800ae01
 800ade0:	0800ae01 	.word	0x0800ae01
 800ade4:	0800ae77 	.word	0x0800ae77
 800ade8:	0800ae8b 	.word	0x0800ae8b
 800adec:	0800aed7 	.word	0x0800aed7
 800adf0:	0800ae01 	.word	0x0800ae01
 800adf4:	0800ae01 	.word	0x0800ae01
 800adf8:	0800ae77 	.word	0x0800ae77
 800adfc:	0800ae8b 	.word	0x0800ae8b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae06:	f043 0301 	orr.w	r3, r3, #1
 800ae0a:	b2da      	uxtb	r2, r3
 800ae0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ae12:	68ba      	ldr	r2, [r7, #8]
 800ae14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	18d1      	adds	r1, r2, r3
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae20:	f7ff ff5c 	bl	800acdc <prvInsertTimerInActiveList>
 800ae24:	4603      	mov	r3, r0
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d06c      	beq.n	800af04 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae38:	f003 0304 	and.w	r3, r3, #4
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d061      	beq.n	800af04 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae44:	699b      	ldr	r3, [r3, #24]
 800ae46:	441a      	add	r2, r3
 800ae48:	2300      	movs	r3, #0
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	2100      	movs	r1, #0
 800ae50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae52:	f7ff fe01 	bl	800aa58 <xTimerGenericCommand>
 800ae56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ae58:	6a3b      	ldr	r3, [r7, #32]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d152      	bne.n	800af04 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	61bb      	str	r3, [r7, #24]
}
 800ae70:	bf00      	nop
 800ae72:	bf00      	nop
 800ae74:	e7fd      	b.n	800ae72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae7c:	f023 0301 	bic.w	r3, r3, #1
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ae88:	e03d      	b.n	800af06 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae90:	f043 0301 	orr.w	r3, r3, #1
 800ae94:	b2da      	uxtb	r2, r3
 800ae96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea4:	699b      	ldr	r3, [r3, #24]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d10b      	bne.n	800aec2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	617b      	str	r3, [r7, #20]
}
 800aebc:	bf00      	nop
 800aebe:	bf00      	nop
 800aec0:	e7fd      	b.n	800aebe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec4:	699a      	ldr	r2, [r3, #24]
 800aec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec8:	18d1      	adds	r1, r2, r3
 800aeca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aece:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aed0:	f7ff ff04 	bl	800acdc <prvInsertTimerInActiveList>
					break;
 800aed4:	e017      	b.n	800af06 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aedc:	f003 0302 	and.w	r3, r3, #2
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d103      	bne.n	800aeec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800aee4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aee6:	f000 fbe7 	bl	800b6b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aeea:	e00c      	b.n	800af06 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aeec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aef2:	f023 0301 	bic.w	r3, r3, #1
 800aef6:	b2da      	uxtb	r2, r3
 800aef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aefa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800aefe:	e002      	b.n	800af06 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800af00:	bf00      	nop
 800af02:	e000      	b.n	800af06 <prvProcessReceivedCommands+0x1a6>
					break;
 800af04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af06:	4b08      	ldr	r3, [pc, #32]	@ (800af28 <prvProcessReceivedCommands+0x1c8>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	1d39      	adds	r1, r7, #4
 800af0c:	2200      	movs	r2, #0
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fe fc04 	bl	800971c <xQueueReceive>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	f47f af26 	bne.w	800ad68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800af1c:	bf00      	nop
 800af1e:	bf00      	nop
 800af20:	3730      	adds	r7, #48	@ 0x30
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	200010e0 	.word	0x200010e0

0800af2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b088      	sub	sp, #32
 800af30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af32:	e049      	b.n	800afc8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af34:	4b2e      	ldr	r3, [pc, #184]	@ (800aff0 <prvSwitchTimerLists+0xc4>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af3e:	4b2c      	ldr	r3, [pc, #176]	@ (800aff0 <prvSwitchTimerLists+0xc4>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	3304      	adds	r3, #4
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7fe f911 	bl	8009174 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af60:	f003 0304 	and.w	r3, r3, #4
 800af64:	2b00      	cmp	r3, #0
 800af66:	d02f      	beq.n	800afc8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	693a      	ldr	r2, [r7, #16]
 800af6e:	4413      	add	r3, r2
 800af70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	429a      	cmp	r2, r3
 800af78:	d90e      	bls.n	800af98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	68ba      	ldr	r2, [r7, #8]
 800af7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af86:	4b1a      	ldr	r3, [pc, #104]	@ (800aff0 <prvSwitchTimerLists+0xc4>)
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	3304      	adds	r3, #4
 800af8e:	4619      	mov	r1, r3
 800af90:	4610      	mov	r0, r2
 800af92:	f7fe f8b6 	bl	8009102 <vListInsert>
 800af96:	e017      	b.n	800afc8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af98:	2300      	movs	r3, #0
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	2300      	movs	r3, #0
 800af9e:	693a      	ldr	r2, [r7, #16]
 800afa0:	2100      	movs	r1, #0
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f7ff fd58 	bl	800aa58 <xTimerGenericCommand>
 800afa8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d10b      	bne.n	800afc8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800afb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb4:	f383 8811 	msr	BASEPRI, r3
 800afb8:	f3bf 8f6f 	isb	sy
 800afbc:	f3bf 8f4f 	dsb	sy
 800afc0:	603b      	str	r3, [r7, #0]
}
 800afc2:	bf00      	nop
 800afc4:	bf00      	nop
 800afc6:	e7fd      	b.n	800afc4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800afc8:	4b09      	ldr	r3, [pc, #36]	@ (800aff0 <prvSwitchTimerLists+0xc4>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1b0      	bne.n	800af34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800afd2:	4b07      	ldr	r3, [pc, #28]	@ (800aff0 <prvSwitchTimerLists+0xc4>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800afd8:	4b06      	ldr	r3, [pc, #24]	@ (800aff4 <prvSwitchTimerLists+0xc8>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a04      	ldr	r2, [pc, #16]	@ (800aff0 <prvSwitchTimerLists+0xc4>)
 800afde:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800afe0:	4a04      	ldr	r2, [pc, #16]	@ (800aff4 <prvSwitchTimerLists+0xc8>)
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	6013      	str	r3, [r2, #0]
}
 800afe6:	bf00      	nop
 800afe8:	3718      	adds	r7, #24
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	200010d8 	.word	0x200010d8
 800aff4:	200010dc 	.word	0x200010dc

0800aff8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800affe:	f000 f96b 	bl	800b2d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b002:	4b15      	ldr	r3, [pc, #84]	@ (800b058 <prvCheckForValidListAndQueue+0x60>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d120      	bne.n	800b04c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b00a:	4814      	ldr	r0, [pc, #80]	@ (800b05c <prvCheckForValidListAndQueue+0x64>)
 800b00c:	f7fe f828 	bl	8009060 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b010:	4813      	ldr	r0, [pc, #76]	@ (800b060 <prvCheckForValidListAndQueue+0x68>)
 800b012:	f7fe f825 	bl	8009060 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b016:	4b13      	ldr	r3, [pc, #76]	@ (800b064 <prvCheckForValidListAndQueue+0x6c>)
 800b018:	4a10      	ldr	r2, [pc, #64]	@ (800b05c <prvCheckForValidListAndQueue+0x64>)
 800b01a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b01c:	4b12      	ldr	r3, [pc, #72]	@ (800b068 <prvCheckForValidListAndQueue+0x70>)
 800b01e:	4a10      	ldr	r2, [pc, #64]	@ (800b060 <prvCheckForValidListAndQueue+0x68>)
 800b020:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b022:	2300      	movs	r3, #0
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	4b11      	ldr	r3, [pc, #68]	@ (800b06c <prvCheckForValidListAndQueue+0x74>)
 800b028:	4a11      	ldr	r2, [pc, #68]	@ (800b070 <prvCheckForValidListAndQueue+0x78>)
 800b02a:	2110      	movs	r1, #16
 800b02c:	200a      	movs	r0, #10
 800b02e:	f7fe f935 	bl	800929c <xQueueGenericCreateStatic>
 800b032:	4603      	mov	r3, r0
 800b034:	4a08      	ldr	r2, [pc, #32]	@ (800b058 <prvCheckForValidListAndQueue+0x60>)
 800b036:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b038:	4b07      	ldr	r3, [pc, #28]	@ (800b058 <prvCheckForValidListAndQueue+0x60>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d005      	beq.n	800b04c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b040:	4b05      	ldr	r3, [pc, #20]	@ (800b058 <prvCheckForValidListAndQueue+0x60>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	490b      	ldr	r1, [pc, #44]	@ (800b074 <prvCheckForValidListAndQueue+0x7c>)
 800b046:	4618      	mov	r0, r3
 800b048:	f7fe fd5a 	bl	8009b00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b04c:	f000 f976 	bl	800b33c <vPortExitCritical>
}
 800b050:	bf00      	nop
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	200010e0 	.word	0x200010e0
 800b05c:	200010b0 	.word	0x200010b0
 800b060:	200010c4 	.word	0x200010c4
 800b064:	200010d8 	.word	0x200010d8
 800b068:	200010dc 	.word	0x200010dc
 800b06c:	2000118c 	.word	0x2000118c
 800b070:	200010ec 	.word	0x200010ec
 800b074:	0800ec28 	.word	0x0800ec28

0800b078 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	3b04      	subs	r3, #4
 800b088:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	3b04      	subs	r3, #4
 800b096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	f023 0201 	bic.w	r2, r3, #1
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3b04      	subs	r3, #4
 800b0a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b0a8:	4a0c      	ldr	r2, [pc, #48]	@ (800b0dc <pxPortInitialiseStack+0x64>)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	3b14      	subs	r3, #20
 800b0b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	3b04      	subs	r3, #4
 800b0be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f06f 0202 	mvn.w	r2, #2
 800b0c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	3b20      	subs	r3, #32
 800b0cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3714      	adds	r7, #20
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	0800b0e1 	.word	0x0800b0e1

0800b0e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b0ea:	4b13      	ldr	r3, [pc, #76]	@ (800b138 <prvTaskExitError+0x58>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f2:	d00b      	beq.n	800b10c <prvTaskExitError+0x2c>
	__asm volatile
 800b0f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0f8:	f383 8811 	msr	BASEPRI, r3
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	60fb      	str	r3, [r7, #12]
}
 800b106:	bf00      	nop
 800b108:	bf00      	nop
 800b10a:	e7fd      	b.n	800b108 <prvTaskExitError+0x28>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b110:	f383 8811 	msr	BASEPRI, r3
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	60bb      	str	r3, [r7, #8]
}
 800b11e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b120:	bf00      	nop
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d0fc      	beq.n	800b122 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b128:	bf00      	nop
 800b12a:	bf00      	nop
 800b12c:	3714      	adds	r7, #20
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	200000ac 	.word	0x200000ac
 800b13c:	00000000 	.word	0x00000000

0800b140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b140:	4b07      	ldr	r3, [pc, #28]	@ (800b160 <pxCurrentTCBConst2>)
 800b142:	6819      	ldr	r1, [r3, #0]
 800b144:	6808      	ldr	r0, [r1, #0]
 800b146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14a:	f380 8809 	msr	PSP, r0
 800b14e:	f3bf 8f6f 	isb	sy
 800b152:	f04f 0000 	mov.w	r0, #0
 800b156:	f380 8811 	msr	BASEPRI, r0
 800b15a:	4770      	bx	lr
 800b15c:	f3af 8000 	nop.w

0800b160 <pxCurrentTCBConst2>:
 800b160:	20000bb0 	.word	0x20000bb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b164:	bf00      	nop
 800b166:	bf00      	nop

0800b168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b168:	4808      	ldr	r0, [pc, #32]	@ (800b18c <prvPortStartFirstTask+0x24>)
 800b16a:	6800      	ldr	r0, [r0, #0]
 800b16c:	6800      	ldr	r0, [r0, #0]
 800b16e:	f380 8808 	msr	MSP, r0
 800b172:	f04f 0000 	mov.w	r0, #0
 800b176:	f380 8814 	msr	CONTROL, r0
 800b17a:	b662      	cpsie	i
 800b17c:	b661      	cpsie	f
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	df00      	svc	0
 800b188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b18a:	bf00      	nop
 800b18c:	e000ed08 	.word	0xe000ed08

0800b190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b196:	4b47      	ldr	r3, [pc, #284]	@ (800b2b4 <xPortStartScheduler+0x124>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a47      	ldr	r2, [pc, #284]	@ (800b2b8 <xPortStartScheduler+0x128>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d10b      	bne.n	800b1b8 <xPortStartScheduler+0x28>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	613b      	str	r3, [r7, #16]
}
 800b1b2:	bf00      	nop
 800b1b4:	bf00      	nop
 800b1b6:	e7fd      	b.n	800b1b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b1b8:	4b3e      	ldr	r3, [pc, #248]	@ (800b2b4 <xPortStartScheduler+0x124>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a3f      	ldr	r2, [pc, #252]	@ (800b2bc <xPortStartScheduler+0x12c>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d10b      	bne.n	800b1da <xPortStartScheduler+0x4a>
	__asm volatile
 800b1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	60fb      	str	r3, [r7, #12]
}
 800b1d4:	bf00      	nop
 800b1d6:	bf00      	nop
 800b1d8:	e7fd      	b.n	800b1d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b1da:	4b39      	ldr	r3, [pc, #228]	@ (800b2c0 <xPortStartScheduler+0x130>)
 800b1dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	22ff      	movs	r2, #255	@ 0xff
 800b1ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b1f4:	78fb      	ldrb	r3, [r7, #3]
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	4b31      	ldr	r3, [pc, #196]	@ (800b2c4 <xPortStartScheduler+0x134>)
 800b200:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b202:	4b31      	ldr	r3, [pc, #196]	@ (800b2c8 <xPortStartScheduler+0x138>)
 800b204:	2207      	movs	r2, #7
 800b206:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b208:	e009      	b.n	800b21e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b20a:	4b2f      	ldr	r3, [pc, #188]	@ (800b2c8 <xPortStartScheduler+0x138>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	3b01      	subs	r3, #1
 800b210:	4a2d      	ldr	r2, [pc, #180]	@ (800b2c8 <xPortStartScheduler+0x138>)
 800b212:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b214:	78fb      	ldrb	r3, [r7, #3]
 800b216:	b2db      	uxtb	r3, r3
 800b218:	005b      	lsls	r3, r3, #1
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b21e:	78fb      	ldrb	r3, [r7, #3]
 800b220:	b2db      	uxtb	r3, r3
 800b222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b226:	2b80      	cmp	r3, #128	@ 0x80
 800b228:	d0ef      	beq.n	800b20a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b22a:	4b27      	ldr	r3, [pc, #156]	@ (800b2c8 <xPortStartScheduler+0x138>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f1c3 0307 	rsb	r3, r3, #7
 800b232:	2b04      	cmp	r3, #4
 800b234:	d00b      	beq.n	800b24e <xPortStartScheduler+0xbe>
	__asm volatile
 800b236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b23a:	f383 8811 	msr	BASEPRI, r3
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	60bb      	str	r3, [r7, #8]
}
 800b248:	bf00      	nop
 800b24a:	bf00      	nop
 800b24c:	e7fd      	b.n	800b24a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b24e:	4b1e      	ldr	r3, [pc, #120]	@ (800b2c8 <xPortStartScheduler+0x138>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	021b      	lsls	r3, r3, #8
 800b254:	4a1c      	ldr	r2, [pc, #112]	@ (800b2c8 <xPortStartScheduler+0x138>)
 800b256:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b258:	4b1b      	ldr	r3, [pc, #108]	@ (800b2c8 <xPortStartScheduler+0x138>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b260:	4a19      	ldr	r2, [pc, #100]	@ (800b2c8 <xPortStartScheduler+0x138>)
 800b262:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	b2da      	uxtb	r2, r3
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b26c:	4b17      	ldr	r3, [pc, #92]	@ (800b2cc <xPortStartScheduler+0x13c>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4a16      	ldr	r2, [pc, #88]	@ (800b2cc <xPortStartScheduler+0x13c>)
 800b272:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b276:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b278:	4b14      	ldr	r3, [pc, #80]	@ (800b2cc <xPortStartScheduler+0x13c>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a13      	ldr	r2, [pc, #76]	@ (800b2cc <xPortStartScheduler+0x13c>)
 800b27e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b282:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b284:	f000 f8da 	bl	800b43c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b288:	4b11      	ldr	r3, [pc, #68]	@ (800b2d0 <xPortStartScheduler+0x140>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b28e:	f000 f8f9 	bl	800b484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b292:	4b10      	ldr	r3, [pc, #64]	@ (800b2d4 <xPortStartScheduler+0x144>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a0f      	ldr	r2, [pc, #60]	@ (800b2d4 <xPortStartScheduler+0x144>)
 800b298:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b29c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b29e:	f7ff ff63 	bl	800b168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2a2:	f7ff f82f 	bl	800a304 <vTaskSwitchContext>
	prvTaskExitError();
 800b2a6:	f7ff ff1b 	bl	800b0e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2aa:	2300      	movs	r3, #0
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3718      	adds	r7, #24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	e000ed00 	.word	0xe000ed00
 800b2b8:	410fc271 	.word	0x410fc271
 800b2bc:	410fc270 	.word	0x410fc270
 800b2c0:	e000e400 	.word	0xe000e400
 800b2c4:	200011dc 	.word	0x200011dc
 800b2c8:	200011e0 	.word	0x200011e0
 800b2cc:	e000ed20 	.word	0xe000ed20
 800b2d0:	200000ac 	.word	0x200000ac
 800b2d4:	e000ef34 	.word	0xe000ef34

0800b2d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	607b      	str	r3, [r7, #4]
}
 800b2f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b2f2:	4b10      	ldr	r3, [pc, #64]	@ (800b334 <vPortEnterCritical+0x5c>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	4a0e      	ldr	r2, [pc, #56]	@ (800b334 <vPortEnterCritical+0x5c>)
 800b2fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b2fc:	4b0d      	ldr	r3, [pc, #52]	@ (800b334 <vPortEnterCritical+0x5c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b01      	cmp	r3, #1
 800b302:	d110      	bne.n	800b326 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b304:	4b0c      	ldr	r3, [pc, #48]	@ (800b338 <vPortEnterCritical+0x60>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00b      	beq.n	800b326 <vPortEnterCritical+0x4e>
	__asm volatile
 800b30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	603b      	str	r3, [r7, #0]
}
 800b320:	bf00      	nop
 800b322:	bf00      	nop
 800b324:	e7fd      	b.n	800b322 <vPortEnterCritical+0x4a>
	}
}
 800b326:	bf00      	nop
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	200000ac 	.word	0x200000ac
 800b338:	e000ed04 	.word	0xe000ed04

0800b33c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b342:	4b12      	ldr	r3, [pc, #72]	@ (800b38c <vPortExitCritical+0x50>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10b      	bne.n	800b362 <vPortExitCritical+0x26>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	607b      	str	r3, [r7, #4]
}
 800b35c:	bf00      	nop
 800b35e:	bf00      	nop
 800b360:	e7fd      	b.n	800b35e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b362:	4b0a      	ldr	r3, [pc, #40]	@ (800b38c <vPortExitCritical+0x50>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	3b01      	subs	r3, #1
 800b368:	4a08      	ldr	r2, [pc, #32]	@ (800b38c <vPortExitCritical+0x50>)
 800b36a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b36c:	4b07      	ldr	r3, [pc, #28]	@ (800b38c <vPortExitCritical+0x50>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d105      	bne.n	800b380 <vPortExitCritical+0x44>
 800b374:	2300      	movs	r3, #0
 800b376:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	f383 8811 	msr	BASEPRI, r3
}
 800b37e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr
 800b38c:	200000ac 	.word	0x200000ac

0800b390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b390:	f3ef 8009 	mrs	r0, PSP
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	4b15      	ldr	r3, [pc, #84]	@ (800b3f0 <pxCurrentTCBConst>)
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	f01e 0f10 	tst.w	lr, #16
 800b3a0:	bf08      	it	eq
 800b3a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3aa:	6010      	str	r0, [r2, #0]
 800b3ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b3b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b3b4:	f380 8811 	msr	BASEPRI, r0
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	f7fe ffa0 	bl	800a304 <vTaskSwitchContext>
 800b3c4:	f04f 0000 	mov.w	r0, #0
 800b3c8:	f380 8811 	msr	BASEPRI, r0
 800b3cc:	bc09      	pop	{r0, r3}
 800b3ce:	6819      	ldr	r1, [r3, #0]
 800b3d0:	6808      	ldr	r0, [r1, #0]
 800b3d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d6:	f01e 0f10 	tst.w	lr, #16
 800b3da:	bf08      	it	eq
 800b3dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b3e0:	f380 8809 	msr	PSP, r0
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	f3af 8000 	nop.w

0800b3f0 <pxCurrentTCBConst>:
 800b3f0:	20000bb0 	.word	0x20000bb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b3f4:	bf00      	nop
 800b3f6:	bf00      	nop

0800b3f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	607b      	str	r3, [r7, #4]
}
 800b410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b412:	f7fe febd 	bl	800a190 <xTaskIncrementTick>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d003      	beq.n	800b424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b41c:	4b06      	ldr	r3, [pc, #24]	@ (800b438 <xPortSysTickHandler+0x40>)
 800b41e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b422:	601a      	str	r2, [r3, #0]
 800b424:	2300      	movs	r3, #0
 800b426:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	f383 8811 	msr	BASEPRI, r3
}
 800b42e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b430:	bf00      	nop
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	e000ed04 	.word	0xe000ed04

0800b43c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b43c:	b480      	push	{r7}
 800b43e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b440:	4b0b      	ldr	r3, [pc, #44]	@ (800b470 <vPortSetupTimerInterrupt+0x34>)
 800b442:	2200      	movs	r2, #0
 800b444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b446:	4b0b      	ldr	r3, [pc, #44]	@ (800b474 <vPortSetupTimerInterrupt+0x38>)
 800b448:	2200      	movs	r2, #0
 800b44a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b44c:	4b0a      	ldr	r3, [pc, #40]	@ (800b478 <vPortSetupTimerInterrupt+0x3c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a0a      	ldr	r2, [pc, #40]	@ (800b47c <vPortSetupTimerInterrupt+0x40>)
 800b452:	fba2 2303 	umull	r2, r3, r2, r3
 800b456:	099b      	lsrs	r3, r3, #6
 800b458:	4a09      	ldr	r2, [pc, #36]	@ (800b480 <vPortSetupTimerInterrupt+0x44>)
 800b45a:	3b01      	subs	r3, #1
 800b45c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b45e:	4b04      	ldr	r3, [pc, #16]	@ (800b470 <vPortSetupTimerInterrupt+0x34>)
 800b460:	2207      	movs	r2, #7
 800b462:	601a      	str	r2, [r3, #0]
}
 800b464:	bf00      	nop
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	e000e010 	.word	0xe000e010
 800b474:	e000e018 	.word	0xe000e018
 800b478:	200000a0 	.word	0x200000a0
 800b47c:	10624dd3 	.word	0x10624dd3
 800b480:	e000e014 	.word	0xe000e014

0800b484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b484:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b494 <vPortEnableVFP+0x10>
 800b488:	6801      	ldr	r1, [r0, #0]
 800b48a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b48e:	6001      	str	r1, [r0, #0]
 800b490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b492:	bf00      	nop
 800b494:	e000ed88 	.word	0xe000ed88

0800b498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b49e:	f3ef 8305 	mrs	r3, IPSR
 800b4a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2b0f      	cmp	r3, #15
 800b4a8:	d915      	bls.n	800b4d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4aa:	4a18      	ldr	r2, [pc, #96]	@ (800b50c <vPortValidateInterruptPriority+0x74>)
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b4b4:	4b16      	ldr	r3, [pc, #88]	@ (800b510 <vPortValidateInterruptPriority+0x78>)
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	7afa      	ldrb	r2, [r7, #11]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d20b      	bcs.n	800b4d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	607b      	str	r3, [r7, #4]
}
 800b4d0:	bf00      	nop
 800b4d2:	bf00      	nop
 800b4d4:	e7fd      	b.n	800b4d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b4d6:	4b0f      	ldr	r3, [pc, #60]	@ (800b514 <vPortValidateInterruptPriority+0x7c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b4de:	4b0e      	ldr	r3, [pc, #56]	@ (800b518 <vPortValidateInterruptPriority+0x80>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d90b      	bls.n	800b4fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	603b      	str	r3, [r7, #0]
}
 800b4f8:	bf00      	nop
 800b4fa:	bf00      	nop
 800b4fc:	e7fd      	b.n	800b4fa <vPortValidateInterruptPriority+0x62>
	}
 800b4fe:	bf00      	nop
 800b500:	3714      	adds	r7, #20
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	e000e3f0 	.word	0xe000e3f0
 800b510:	200011dc 	.word	0x200011dc
 800b514:	e000ed0c 	.word	0xe000ed0c
 800b518:	200011e0 	.word	0x200011e0

0800b51c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b08a      	sub	sp, #40	@ 0x28
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b524:	2300      	movs	r3, #0
 800b526:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b528:	f7fe fd76 	bl	800a018 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b52c:	4b5c      	ldr	r3, [pc, #368]	@ (800b6a0 <pvPortMalloc+0x184>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d101      	bne.n	800b538 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b534:	f000 f924 	bl	800b780 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b538:	4b5a      	ldr	r3, [pc, #360]	@ (800b6a4 <pvPortMalloc+0x188>)
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	4013      	ands	r3, r2
 800b540:	2b00      	cmp	r3, #0
 800b542:	f040 8095 	bne.w	800b670 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d01e      	beq.n	800b58a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b54c:	2208      	movs	r2, #8
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	4413      	add	r3, r2
 800b552:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f003 0307 	and.w	r3, r3, #7
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d015      	beq.n	800b58a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f023 0307 	bic.w	r3, r3, #7
 800b564:	3308      	adds	r3, #8
 800b566:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f003 0307 	and.w	r3, r3, #7
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00b      	beq.n	800b58a <pvPortMalloc+0x6e>
	__asm volatile
 800b572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	617b      	str	r3, [r7, #20]
}
 800b584:	bf00      	nop
 800b586:	bf00      	nop
 800b588:	e7fd      	b.n	800b586 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d06f      	beq.n	800b670 <pvPortMalloc+0x154>
 800b590:	4b45      	ldr	r3, [pc, #276]	@ (800b6a8 <pvPortMalloc+0x18c>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	429a      	cmp	r2, r3
 800b598:	d86a      	bhi.n	800b670 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b59a:	4b44      	ldr	r3, [pc, #272]	@ (800b6ac <pvPortMalloc+0x190>)
 800b59c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b59e:	4b43      	ldr	r3, [pc, #268]	@ (800b6ac <pvPortMalloc+0x190>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5a4:	e004      	b.n	800b5b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d903      	bls.n	800b5c2 <pvPortMalloc+0xa6>
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1f1      	bne.n	800b5a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b5c2:	4b37      	ldr	r3, [pc, #220]	@ (800b6a0 <pvPortMalloc+0x184>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d051      	beq.n	800b670 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b5cc:	6a3b      	ldr	r3, [r7, #32]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2208      	movs	r2, #8
 800b5d2:	4413      	add	r3, r2
 800b5d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	6a3b      	ldr	r3, [r7, #32]
 800b5dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e0:	685a      	ldr	r2, [r3, #4]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	1ad2      	subs	r2, r2, r3
 800b5e6:	2308      	movs	r3, #8
 800b5e8:	005b      	lsls	r3, r3, #1
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d920      	bls.n	800b630 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b5ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	f003 0307 	and.w	r3, r3, #7
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d00b      	beq.n	800b618 <pvPortMalloc+0xfc>
	__asm volatile
 800b600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b604:	f383 8811 	msr	BASEPRI, r3
 800b608:	f3bf 8f6f 	isb	sy
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	613b      	str	r3, [r7, #16]
}
 800b612:	bf00      	nop
 800b614:	bf00      	nop
 800b616:	e7fd      	b.n	800b614 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61a:	685a      	ldr	r2, [r3, #4]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	1ad2      	subs	r2, r2, r3
 800b620:	69bb      	ldr	r3, [r7, #24]
 800b622:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b62a:	69b8      	ldr	r0, [r7, #24]
 800b62c:	f000 f90a 	bl	800b844 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b630:	4b1d      	ldr	r3, [pc, #116]	@ (800b6a8 <pvPortMalloc+0x18c>)
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	1ad3      	subs	r3, r2, r3
 800b63a:	4a1b      	ldr	r2, [pc, #108]	@ (800b6a8 <pvPortMalloc+0x18c>)
 800b63c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b63e:	4b1a      	ldr	r3, [pc, #104]	@ (800b6a8 <pvPortMalloc+0x18c>)
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	4b1b      	ldr	r3, [pc, #108]	@ (800b6b0 <pvPortMalloc+0x194>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	429a      	cmp	r2, r3
 800b648:	d203      	bcs.n	800b652 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b64a:	4b17      	ldr	r3, [pc, #92]	@ (800b6a8 <pvPortMalloc+0x18c>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a18      	ldr	r2, [pc, #96]	@ (800b6b0 <pvPortMalloc+0x194>)
 800b650:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b654:	685a      	ldr	r2, [r3, #4]
 800b656:	4b13      	ldr	r3, [pc, #76]	@ (800b6a4 <pvPortMalloc+0x188>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	431a      	orrs	r2, r3
 800b65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b662:	2200      	movs	r2, #0
 800b664:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b666:	4b13      	ldr	r3, [pc, #76]	@ (800b6b4 <pvPortMalloc+0x198>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	3301      	adds	r3, #1
 800b66c:	4a11      	ldr	r2, [pc, #68]	@ (800b6b4 <pvPortMalloc+0x198>)
 800b66e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b670:	f7fe fce0 	bl	800a034 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	f003 0307 	and.w	r3, r3, #7
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00b      	beq.n	800b696 <pvPortMalloc+0x17a>
	__asm volatile
 800b67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b682:	f383 8811 	msr	BASEPRI, r3
 800b686:	f3bf 8f6f 	isb	sy
 800b68a:	f3bf 8f4f 	dsb	sy
 800b68e:	60fb      	str	r3, [r7, #12]
}
 800b690:	bf00      	nop
 800b692:	bf00      	nop
 800b694:	e7fd      	b.n	800b692 <pvPortMalloc+0x176>
	return pvReturn;
 800b696:	69fb      	ldr	r3, [r7, #28]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3728      	adds	r7, #40	@ 0x28
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	2000600c 	.word	0x2000600c
 800b6a4:	20006020 	.word	0x20006020
 800b6a8:	20006010 	.word	0x20006010
 800b6ac:	20006004 	.word	0x20006004
 800b6b0:	20006014 	.word	0x20006014
 800b6b4:	20006018 	.word	0x20006018

0800b6b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d04f      	beq.n	800b76a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b6ca:	2308      	movs	r3, #8
 800b6cc:	425b      	negs	r3, r3
 800b6ce:	697a      	ldr	r2, [r7, #20]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	685a      	ldr	r2, [r3, #4]
 800b6dc:	4b25      	ldr	r3, [pc, #148]	@ (800b774 <vPortFree+0xbc>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d10b      	bne.n	800b6fe <vPortFree+0x46>
	__asm volatile
 800b6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ea:	f383 8811 	msr	BASEPRI, r3
 800b6ee:	f3bf 8f6f 	isb	sy
 800b6f2:	f3bf 8f4f 	dsb	sy
 800b6f6:	60fb      	str	r3, [r7, #12]
}
 800b6f8:	bf00      	nop
 800b6fa:	bf00      	nop
 800b6fc:	e7fd      	b.n	800b6fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00b      	beq.n	800b71e <vPortFree+0x66>
	__asm volatile
 800b706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b70a:	f383 8811 	msr	BASEPRI, r3
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	60bb      	str	r3, [r7, #8]
}
 800b718:	bf00      	nop
 800b71a:	bf00      	nop
 800b71c:	e7fd      	b.n	800b71a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	685a      	ldr	r2, [r3, #4]
 800b722:	4b14      	ldr	r3, [pc, #80]	@ (800b774 <vPortFree+0xbc>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4013      	ands	r3, r2
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d01e      	beq.n	800b76a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d11a      	bne.n	800b76a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	685a      	ldr	r2, [r3, #4]
 800b738:	4b0e      	ldr	r3, [pc, #56]	@ (800b774 <vPortFree+0xbc>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	43db      	mvns	r3, r3
 800b73e:	401a      	ands	r2, r3
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b744:	f7fe fc68 	bl	800a018 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	4b0a      	ldr	r3, [pc, #40]	@ (800b778 <vPortFree+0xc0>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4413      	add	r3, r2
 800b752:	4a09      	ldr	r2, [pc, #36]	@ (800b778 <vPortFree+0xc0>)
 800b754:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b756:	6938      	ldr	r0, [r7, #16]
 800b758:	f000 f874 	bl	800b844 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b75c:	4b07      	ldr	r3, [pc, #28]	@ (800b77c <vPortFree+0xc4>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	3301      	adds	r3, #1
 800b762:	4a06      	ldr	r2, [pc, #24]	@ (800b77c <vPortFree+0xc4>)
 800b764:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b766:	f7fe fc65 	bl	800a034 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b76a:	bf00      	nop
 800b76c:	3718      	adds	r7, #24
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	20006020 	.word	0x20006020
 800b778:	20006010 	.word	0x20006010
 800b77c:	2000601c 	.word	0x2000601c

0800b780 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b786:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800b78a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b78c:	4b27      	ldr	r3, [pc, #156]	@ (800b82c <prvHeapInit+0xac>)
 800b78e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f003 0307 	and.w	r3, r3, #7
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00c      	beq.n	800b7b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	3307      	adds	r3, #7
 800b79e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f023 0307 	bic.w	r3, r3, #7
 800b7a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b7a8:	68ba      	ldr	r2, [r7, #8]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	4a1f      	ldr	r2, [pc, #124]	@ (800b82c <prvHeapInit+0xac>)
 800b7b0:	4413      	add	r3, r2
 800b7b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b7b8:	4a1d      	ldr	r2, [pc, #116]	@ (800b830 <prvHeapInit+0xb0>)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b7be:	4b1c      	ldr	r3, [pc, #112]	@ (800b830 <prvHeapInit+0xb0>)
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	68ba      	ldr	r2, [r7, #8]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b7cc:	2208      	movs	r2, #8
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	1a9b      	subs	r3, r3, r2
 800b7d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f023 0307 	bic.w	r3, r3, #7
 800b7da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	4a15      	ldr	r2, [pc, #84]	@ (800b834 <prvHeapInit+0xb4>)
 800b7e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b7e2:	4b14      	ldr	r3, [pc, #80]	@ (800b834 <prvHeapInit+0xb4>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b7ea:	4b12      	ldr	r3, [pc, #72]	@ (800b834 <prvHeapInit+0xb4>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	1ad2      	subs	r2, r2, r3
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b800:	4b0c      	ldr	r3, [pc, #48]	@ (800b834 <prvHeapInit+0xb4>)
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	4a0a      	ldr	r2, [pc, #40]	@ (800b838 <prvHeapInit+0xb8>)
 800b80e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	4a09      	ldr	r2, [pc, #36]	@ (800b83c <prvHeapInit+0xbc>)
 800b816:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b818:	4b09      	ldr	r3, [pc, #36]	@ (800b840 <prvHeapInit+0xc0>)
 800b81a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b81e:	601a      	str	r2, [r3, #0]
}
 800b820:	bf00      	nop
 800b822:	3714      	adds	r7, #20
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	200011e4 	.word	0x200011e4
 800b830:	20006004 	.word	0x20006004
 800b834:	2000600c 	.word	0x2000600c
 800b838:	20006014 	.word	0x20006014
 800b83c:	20006010 	.word	0x20006010
 800b840:	20006020 	.word	0x20006020

0800b844 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b84c:	4b28      	ldr	r3, [pc, #160]	@ (800b8f0 <prvInsertBlockIntoFreeList+0xac>)
 800b84e:	60fb      	str	r3, [r7, #12]
 800b850:	e002      	b.n	800b858 <prvInsertBlockIntoFreeList+0x14>
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	60fb      	str	r3, [r7, #12]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d8f7      	bhi.n	800b852 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	4413      	add	r3, r2
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	429a      	cmp	r2, r3
 800b872:	d108      	bne.n	800b886 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	685a      	ldr	r2, [r3, #4]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	441a      	add	r2, r3
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	441a      	add	r2, r3
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	429a      	cmp	r2, r3
 800b898:	d118      	bne.n	800b8cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	4b15      	ldr	r3, [pc, #84]	@ (800b8f4 <prvInsertBlockIntoFreeList+0xb0>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d00d      	beq.n	800b8c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	685a      	ldr	r2, [r3, #4]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	441a      	add	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	601a      	str	r2, [r3, #0]
 800b8c0:	e008      	b.n	800b8d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b8c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b8f4 <prvInsertBlockIntoFreeList+0xb0>)
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	601a      	str	r2, [r3, #0]
 800b8ca:	e003      	b.n	800b8d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d002      	beq.n	800b8e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8e2:	bf00      	nop
 800b8e4:	3714      	adds	r7, #20
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr
 800b8ee:	bf00      	nop
 800b8f0:	20006004 	.word	0x20006004
 800b8f4:	2000600c 	.word	0x2000600c

0800b8f8 <atoi>:
 800b8f8:	220a      	movs	r2, #10
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	f000 b87a 	b.w	800b9f4 <strtol>

0800b900 <_strtol_l.constprop.0>:
 800b900:	2b24      	cmp	r3, #36	@ 0x24
 800b902:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b906:	4686      	mov	lr, r0
 800b908:	4690      	mov	r8, r2
 800b90a:	d801      	bhi.n	800b910 <_strtol_l.constprop.0+0x10>
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d106      	bne.n	800b91e <_strtol_l.constprop.0+0x1e>
 800b910:	f000 f8d8 	bl	800bac4 <__errno>
 800b914:	2316      	movs	r3, #22
 800b916:	6003      	str	r3, [r0, #0]
 800b918:	2000      	movs	r0, #0
 800b91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b91e:	4834      	ldr	r0, [pc, #208]	@ (800b9f0 <_strtol_l.constprop.0+0xf0>)
 800b920:	460d      	mov	r5, r1
 800b922:	462a      	mov	r2, r5
 800b924:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b928:	5d06      	ldrb	r6, [r0, r4]
 800b92a:	f016 0608 	ands.w	r6, r6, #8
 800b92e:	d1f8      	bne.n	800b922 <_strtol_l.constprop.0+0x22>
 800b930:	2c2d      	cmp	r4, #45	@ 0x2d
 800b932:	d12d      	bne.n	800b990 <_strtol_l.constprop.0+0x90>
 800b934:	782c      	ldrb	r4, [r5, #0]
 800b936:	2601      	movs	r6, #1
 800b938:	1c95      	adds	r5, r2, #2
 800b93a:	f033 0210 	bics.w	r2, r3, #16
 800b93e:	d109      	bne.n	800b954 <_strtol_l.constprop.0+0x54>
 800b940:	2c30      	cmp	r4, #48	@ 0x30
 800b942:	d12a      	bne.n	800b99a <_strtol_l.constprop.0+0x9a>
 800b944:	782a      	ldrb	r2, [r5, #0]
 800b946:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b94a:	2a58      	cmp	r2, #88	@ 0x58
 800b94c:	d125      	bne.n	800b99a <_strtol_l.constprop.0+0x9a>
 800b94e:	786c      	ldrb	r4, [r5, #1]
 800b950:	2310      	movs	r3, #16
 800b952:	3502      	adds	r5, #2
 800b954:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b958:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b95c:	2200      	movs	r2, #0
 800b95e:	fbbc f9f3 	udiv	r9, ip, r3
 800b962:	4610      	mov	r0, r2
 800b964:	fb03 ca19 	mls	sl, r3, r9, ip
 800b968:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b96c:	2f09      	cmp	r7, #9
 800b96e:	d81b      	bhi.n	800b9a8 <_strtol_l.constprop.0+0xa8>
 800b970:	463c      	mov	r4, r7
 800b972:	42a3      	cmp	r3, r4
 800b974:	dd27      	ble.n	800b9c6 <_strtol_l.constprop.0+0xc6>
 800b976:	1c57      	adds	r7, r2, #1
 800b978:	d007      	beq.n	800b98a <_strtol_l.constprop.0+0x8a>
 800b97a:	4581      	cmp	r9, r0
 800b97c:	d320      	bcc.n	800b9c0 <_strtol_l.constprop.0+0xc0>
 800b97e:	d101      	bne.n	800b984 <_strtol_l.constprop.0+0x84>
 800b980:	45a2      	cmp	sl, r4
 800b982:	db1d      	blt.n	800b9c0 <_strtol_l.constprop.0+0xc0>
 800b984:	fb00 4003 	mla	r0, r0, r3, r4
 800b988:	2201      	movs	r2, #1
 800b98a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b98e:	e7eb      	b.n	800b968 <_strtol_l.constprop.0+0x68>
 800b990:	2c2b      	cmp	r4, #43	@ 0x2b
 800b992:	bf04      	itt	eq
 800b994:	782c      	ldrbeq	r4, [r5, #0]
 800b996:	1c95      	addeq	r5, r2, #2
 800b998:	e7cf      	b.n	800b93a <_strtol_l.constprop.0+0x3a>
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d1da      	bne.n	800b954 <_strtol_l.constprop.0+0x54>
 800b99e:	2c30      	cmp	r4, #48	@ 0x30
 800b9a0:	bf0c      	ite	eq
 800b9a2:	2308      	moveq	r3, #8
 800b9a4:	230a      	movne	r3, #10
 800b9a6:	e7d5      	b.n	800b954 <_strtol_l.constprop.0+0x54>
 800b9a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b9ac:	2f19      	cmp	r7, #25
 800b9ae:	d801      	bhi.n	800b9b4 <_strtol_l.constprop.0+0xb4>
 800b9b0:	3c37      	subs	r4, #55	@ 0x37
 800b9b2:	e7de      	b.n	800b972 <_strtol_l.constprop.0+0x72>
 800b9b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b9b8:	2f19      	cmp	r7, #25
 800b9ba:	d804      	bhi.n	800b9c6 <_strtol_l.constprop.0+0xc6>
 800b9bc:	3c57      	subs	r4, #87	@ 0x57
 800b9be:	e7d8      	b.n	800b972 <_strtol_l.constprop.0+0x72>
 800b9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c4:	e7e1      	b.n	800b98a <_strtol_l.constprop.0+0x8a>
 800b9c6:	1c53      	adds	r3, r2, #1
 800b9c8:	d108      	bne.n	800b9dc <_strtol_l.constprop.0+0xdc>
 800b9ca:	2322      	movs	r3, #34	@ 0x22
 800b9cc:	f8ce 3000 	str.w	r3, [lr]
 800b9d0:	4660      	mov	r0, ip
 800b9d2:	f1b8 0f00 	cmp.w	r8, #0
 800b9d6:	d0a0      	beq.n	800b91a <_strtol_l.constprop.0+0x1a>
 800b9d8:	1e69      	subs	r1, r5, #1
 800b9da:	e006      	b.n	800b9ea <_strtol_l.constprop.0+0xea>
 800b9dc:	b106      	cbz	r6, 800b9e0 <_strtol_l.constprop.0+0xe0>
 800b9de:	4240      	negs	r0, r0
 800b9e0:	f1b8 0f00 	cmp.w	r8, #0
 800b9e4:	d099      	beq.n	800b91a <_strtol_l.constprop.0+0x1a>
 800b9e6:	2a00      	cmp	r2, #0
 800b9e8:	d1f6      	bne.n	800b9d8 <_strtol_l.constprop.0+0xd8>
 800b9ea:	f8c8 1000 	str.w	r1, [r8]
 800b9ee:	e794      	b.n	800b91a <_strtol_l.constprop.0+0x1a>
 800b9f0:	0800ec91 	.word	0x0800ec91

0800b9f4 <strtol>:
 800b9f4:	4613      	mov	r3, r2
 800b9f6:	460a      	mov	r2, r1
 800b9f8:	4601      	mov	r1, r0
 800b9fa:	4802      	ldr	r0, [pc, #8]	@ (800ba04 <strtol+0x10>)
 800b9fc:	6800      	ldr	r0, [r0, #0]
 800b9fe:	f7ff bf7f 	b.w	800b900 <_strtol_l.constprop.0>
 800ba02:	bf00      	nop
 800ba04:	200000b0 	.word	0x200000b0

0800ba08 <memset>:
 800ba08:	4402      	add	r2, r0
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d100      	bne.n	800ba12 <memset+0xa>
 800ba10:	4770      	bx	lr
 800ba12:	f803 1b01 	strb.w	r1, [r3], #1
 800ba16:	e7f9      	b.n	800ba0c <memset+0x4>

0800ba18 <_reclaim_reent>:
 800ba18:	4b29      	ldr	r3, [pc, #164]	@ (800bac0 <_reclaim_reent+0xa8>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4283      	cmp	r3, r0
 800ba1e:	b570      	push	{r4, r5, r6, lr}
 800ba20:	4604      	mov	r4, r0
 800ba22:	d04b      	beq.n	800babc <_reclaim_reent+0xa4>
 800ba24:	69c3      	ldr	r3, [r0, #28]
 800ba26:	b1ab      	cbz	r3, 800ba54 <_reclaim_reent+0x3c>
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	b16b      	cbz	r3, 800ba48 <_reclaim_reent+0x30>
 800ba2c:	2500      	movs	r5, #0
 800ba2e:	69e3      	ldr	r3, [r4, #28]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	5959      	ldr	r1, [r3, r5]
 800ba34:	2900      	cmp	r1, #0
 800ba36:	d13b      	bne.n	800bab0 <_reclaim_reent+0x98>
 800ba38:	3504      	adds	r5, #4
 800ba3a:	2d80      	cmp	r5, #128	@ 0x80
 800ba3c:	d1f7      	bne.n	800ba2e <_reclaim_reent+0x16>
 800ba3e:	69e3      	ldr	r3, [r4, #28]
 800ba40:	4620      	mov	r0, r4
 800ba42:	68d9      	ldr	r1, [r3, #12]
 800ba44:	f000 f878 	bl	800bb38 <_free_r>
 800ba48:	69e3      	ldr	r3, [r4, #28]
 800ba4a:	6819      	ldr	r1, [r3, #0]
 800ba4c:	b111      	cbz	r1, 800ba54 <_reclaim_reent+0x3c>
 800ba4e:	4620      	mov	r0, r4
 800ba50:	f000 f872 	bl	800bb38 <_free_r>
 800ba54:	6961      	ldr	r1, [r4, #20]
 800ba56:	b111      	cbz	r1, 800ba5e <_reclaim_reent+0x46>
 800ba58:	4620      	mov	r0, r4
 800ba5a:	f000 f86d 	bl	800bb38 <_free_r>
 800ba5e:	69e1      	ldr	r1, [r4, #28]
 800ba60:	b111      	cbz	r1, 800ba68 <_reclaim_reent+0x50>
 800ba62:	4620      	mov	r0, r4
 800ba64:	f000 f868 	bl	800bb38 <_free_r>
 800ba68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ba6a:	b111      	cbz	r1, 800ba72 <_reclaim_reent+0x5a>
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	f000 f863 	bl	800bb38 <_free_r>
 800ba72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba74:	b111      	cbz	r1, 800ba7c <_reclaim_reent+0x64>
 800ba76:	4620      	mov	r0, r4
 800ba78:	f000 f85e 	bl	800bb38 <_free_r>
 800ba7c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ba7e:	b111      	cbz	r1, 800ba86 <_reclaim_reent+0x6e>
 800ba80:	4620      	mov	r0, r4
 800ba82:	f000 f859 	bl	800bb38 <_free_r>
 800ba86:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ba88:	b111      	cbz	r1, 800ba90 <_reclaim_reent+0x78>
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	f000 f854 	bl	800bb38 <_free_r>
 800ba90:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ba92:	b111      	cbz	r1, 800ba9a <_reclaim_reent+0x82>
 800ba94:	4620      	mov	r0, r4
 800ba96:	f000 f84f 	bl	800bb38 <_free_r>
 800ba9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ba9c:	b111      	cbz	r1, 800baa4 <_reclaim_reent+0x8c>
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f000 f84a 	bl	800bb38 <_free_r>
 800baa4:	6a23      	ldr	r3, [r4, #32]
 800baa6:	b14b      	cbz	r3, 800babc <_reclaim_reent+0xa4>
 800baa8:	4620      	mov	r0, r4
 800baaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800baae:	4718      	bx	r3
 800bab0:	680e      	ldr	r6, [r1, #0]
 800bab2:	4620      	mov	r0, r4
 800bab4:	f000 f840 	bl	800bb38 <_free_r>
 800bab8:	4631      	mov	r1, r6
 800baba:	e7bb      	b.n	800ba34 <_reclaim_reent+0x1c>
 800babc:	bd70      	pop	{r4, r5, r6, pc}
 800babe:	bf00      	nop
 800bac0:	200000b0 	.word	0x200000b0

0800bac4 <__errno>:
 800bac4:	4b01      	ldr	r3, [pc, #4]	@ (800bacc <__errno+0x8>)
 800bac6:	6818      	ldr	r0, [r3, #0]
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	200000b0 	.word	0x200000b0

0800bad0 <__libc_init_array>:
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	4d0d      	ldr	r5, [pc, #52]	@ (800bb08 <__libc_init_array+0x38>)
 800bad4:	4c0d      	ldr	r4, [pc, #52]	@ (800bb0c <__libc_init_array+0x3c>)
 800bad6:	1b64      	subs	r4, r4, r5
 800bad8:	10a4      	asrs	r4, r4, #2
 800bada:	2600      	movs	r6, #0
 800badc:	42a6      	cmp	r6, r4
 800bade:	d109      	bne.n	800baf4 <__libc_init_array+0x24>
 800bae0:	4d0b      	ldr	r5, [pc, #44]	@ (800bb10 <__libc_init_array+0x40>)
 800bae2:	4c0c      	ldr	r4, [pc, #48]	@ (800bb14 <__libc_init_array+0x44>)
 800bae4:	f003 f880 	bl	800ebe8 <_init>
 800bae8:	1b64      	subs	r4, r4, r5
 800baea:	10a4      	asrs	r4, r4, #2
 800baec:	2600      	movs	r6, #0
 800baee:	42a6      	cmp	r6, r4
 800baf0:	d105      	bne.n	800bafe <__libc_init_array+0x2e>
 800baf2:	bd70      	pop	{r4, r5, r6, pc}
 800baf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800baf8:	4798      	blx	r3
 800bafa:	3601      	adds	r6, #1
 800bafc:	e7ee      	b.n	800badc <__libc_init_array+0xc>
 800bafe:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb02:	4798      	blx	r3
 800bb04:	3601      	adds	r6, #1
 800bb06:	e7f2      	b.n	800baee <__libc_init_array+0x1e>
 800bb08:	0800f018 	.word	0x0800f018
 800bb0c:	0800f018 	.word	0x0800f018
 800bb10:	0800f018 	.word	0x0800f018
 800bb14:	0800f01c 	.word	0x0800f01c

0800bb18 <__retarget_lock_acquire_recursive>:
 800bb18:	4770      	bx	lr

0800bb1a <__retarget_lock_release_recursive>:
 800bb1a:	4770      	bx	lr

0800bb1c <memcpy>:
 800bb1c:	440a      	add	r2, r1
 800bb1e:	4291      	cmp	r1, r2
 800bb20:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb24:	d100      	bne.n	800bb28 <memcpy+0xc>
 800bb26:	4770      	bx	lr
 800bb28:	b510      	push	{r4, lr}
 800bb2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb32:	4291      	cmp	r1, r2
 800bb34:	d1f9      	bne.n	800bb2a <memcpy+0xe>
 800bb36:	bd10      	pop	{r4, pc}

0800bb38 <_free_r>:
 800bb38:	b538      	push	{r3, r4, r5, lr}
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	2900      	cmp	r1, #0
 800bb3e:	d041      	beq.n	800bbc4 <_free_r+0x8c>
 800bb40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb44:	1f0c      	subs	r4, r1, #4
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	bfb8      	it	lt
 800bb4a:	18e4      	addlt	r4, r4, r3
 800bb4c:	f000 f83e 	bl	800bbcc <__malloc_lock>
 800bb50:	4a1d      	ldr	r2, [pc, #116]	@ (800bbc8 <_free_r+0x90>)
 800bb52:	6813      	ldr	r3, [r2, #0]
 800bb54:	b933      	cbnz	r3, 800bb64 <_free_r+0x2c>
 800bb56:	6063      	str	r3, [r4, #4]
 800bb58:	6014      	str	r4, [r2, #0]
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb60:	f000 b83a 	b.w	800bbd8 <__malloc_unlock>
 800bb64:	42a3      	cmp	r3, r4
 800bb66:	d908      	bls.n	800bb7a <_free_r+0x42>
 800bb68:	6820      	ldr	r0, [r4, #0]
 800bb6a:	1821      	adds	r1, r4, r0
 800bb6c:	428b      	cmp	r3, r1
 800bb6e:	bf01      	itttt	eq
 800bb70:	6819      	ldreq	r1, [r3, #0]
 800bb72:	685b      	ldreq	r3, [r3, #4]
 800bb74:	1809      	addeq	r1, r1, r0
 800bb76:	6021      	streq	r1, [r4, #0]
 800bb78:	e7ed      	b.n	800bb56 <_free_r+0x1e>
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	b10b      	cbz	r3, 800bb84 <_free_r+0x4c>
 800bb80:	42a3      	cmp	r3, r4
 800bb82:	d9fa      	bls.n	800bb7a <_free_r+0x42>
 800bb84:	6811      	ldr	r1, [r2, #0]
 800bb86:	1850      	adds	r0, r2, r1
 800bb88:	42a0      	cmp	r0, r4
 800bb8a:	d10b      	bne.n	800bba4 <_free_r+0x6c>
 800bb8c:	6820      	ldr	r0, [r4, #0]
 800bb8e:	4401      	add	r1, r0
 800bb90:	1850      	adds	r0, r2, r1
 800bb92:	4283      	cmp	r3, r0
 800bb94:	6011      	str	r1, [r2, #0]
 800bb96:	d1e0      	bne.n	800bb5a <_free_r+0x22>
 800bb98:	6818      	ldr	r0, [r3, #0]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	6053      	str	r3, [r2, #4]
 800bb9e:	4408      	add	r0, r1
 800bba0:	6010      	str	r0, [r2, #0]
 800bba2:	e7da      	b.n	800bb5a <_free_r+0x22>
 800bba4:	d902      	bls.n	800bbac <_free_r+0x74>
 800bba6:	230c      	movs	r3, #12
 800bba8:	602b      	str	r3, [r5, #0]
 800bbaa:	e7d6      	b.n	800bb5a <_free_r+0x22>
 800bbac:	6820      	ldr	r0, [r4, #0]
 800bbae:	1821      	adds	r1, r4, r0
 800bbb0:	428b      	cmp	r3, r1
 800bbb2:	bf04      	itt	eq
 800bbb4:	6819      	ldreq	r1, [r3, #0]
 800bbb6:	685b      	ldreq	r3, [r3, #4]
 800bbb8:	6063      	str	r3, [r4, #4]
 800bbba:	bf04      	itt	eq
 800bbbc:	1809      	addeq	r1, r1, r0
 800bbbe:	6021      	streq	r1, [r4, #0]
 800bbc0:	6054      	str	r4, [r2, #4]
 800bbc2:	e7ca      	b.n	800bb5a <_free_r+0x22>
 800bbc4:	bd38      	pop	{r3, r4, r5, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20006160 	.word	0x20006160

0800bbcc <__malloc_lock>:
 800bbcc:	4801      	ldr	r0, [pc, #4]	@ (800bbd4 <__malloc_lock+0x8>)
 800bbce:	f7ff bfa3 	b.w	800bb18 <__retarget_lock_acquire_recursive>
 800bbd2:	bf00      	nop
 800bbd4:	2000615c 	.word	0x2000615c

0800bbd8 <__malloc_unlock>:
 800bbd8:	4801      	ldr	r0, [pc, #4]	@ (800bbe0 <__malloc_unlock+0x8>)
 800bbda:	f7ff bf9e 	b.w	800bb1a <__retarget_lock_release_recursive>
 800bbde:	bf00      	nop
 800bbe0:	2000615c 	.word	0x2000615c

0800bbe4 <acos>:
 800bbe4:	b538      	push	{r3, r4, r5, lr}
 800bbe6:	ed2d 8b02 	vpush	{d8}
 800bbea:	ec55 4b10 	vmov	r4, r5, d0
 800bbee:	f000 fff3 	bl	800cbd8 <__ieee754_acos>
 800bbf2:	4622      	mov	r2, r4
 800bbf4:	462b      	mov	r3, r5
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	4629      	mov	r1, r5
 800bbfa:	eeb0 8a40 	vmov.f32	s16, s0
 800bbfe:	eef0 8a60 	vmov.f32	s17, s1
 800bc02:	f7f4 ff43 	bl	8000a8c <__aeabi_dcmpun>
 800bc06:	b9a8      	cbnz	r0, 800bc34 <acos+0x50>
 800bc08:	ec45 4b10 	vmov	d0, r4, r5
 800bc0c:	f000 fadc 	bl	800c1c8 <fabs>
 800bc10:	4b0c      	ldr	r3, [pc, #48]	@ (800bc44 <acos+0x60>)
 800bc12:	ec51 0b10 	vmov	r0, r1, d0
 800bc16:	2200      	movs	r2, #0
 800bc18:	f7f4 ff2e 	bl	8000a78 <__aeabi_dcmpgt>
 800bc1c:	b150      	cbz	r0, 800bc34 <acos+0x50>
 800bc1e:	f7ff ff51 	bl	800bac4 <__errno>
 800bc22:	ecbd 8b02 	vpop	{d8}
 800bc26:	2321      	movs	r3, #33	@ 0x21
 800bc28:	6003      	str	r3, [r0, #0]
 800bc2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc2e:	4806      	ldr	r0, [pc, #24]	@ (800bc48 <acos+0x64>)
 800bc30:	f000 bb66 	b.w	800c300 <nan>
 800bc34:	eeb0 0a48 	vmov.f32	s0, s16
 800bc38:	eef0 0a68 	vmov.f32	s1, s17
 800bc3c:	ecbd 8b02 	vpop	{d8}
 800bc40:	bd38      	pop	{r3, r4, r5, pc}
 800bc42:	bf00      	nop
 800bc44:	3ff00000 	.word	0x3ff00000
 800bc48:	0800ed91 	.word	0x0800ed91

0800bc4c <atan2>:
 800bc4c:	f001 ba20 	b.w	800d090 <__ieee754_atan2>

0800bc50 <hypot>:
 800bc50:	b508      	push	{r3, lr}
 800bc52:	ed2d 8b06 	vpush	{d8-d10}
 800bc56:	eeb0 aa40 	vmov.f32	s20, s0
 800bc5a:	eef0 aa60 	vmov.f32	s21, s1
 800bc5e:	eeb0 9a41 	vmov.f32	s18, s2
 800bc62:	eef0 9a61 	vmov.f32	s19, s3
 800bc66:	f001 fad9 	bl	800d21c <__ieee754_hypot>
 800bc6a:	eeb0 8a40 	vmov.f32	s16, s0
 800bc6e:	eef0 8a60 	vmov.f32	s17, s1
 800bc72:	f000 fb39 	bl	800c2e8 <finite>
 800bc76:	b998      	cbnz	r0, 800bca0 <hypot+0x50>
 800bc78:	eeb0 0a4a 	vmov.f32	s0, s20
 800bc7c:	eef0 0a6a 	vmov.f32	s1, s21
 800bc80:	f000 fb32 	bl	800c2e8 <finite>
 800bc84:	b160      	cbz	r0, 800bca0 <hypot+0x50>
 800bc86:	eeb0 0a49 	vmov.f32	s0, s18
 800bc8a:	eef0 0a69 	vmov.f32	s1, s19
 800bc8e:	f000 fb2b 	bl	800c2e8 <finite>
 800bc92:	b128      	cbz	r0, 800bca0 <hypot+0x50>
 800bc94:	f7ff ff16 	bl	800bac4 <__errno>
 800bc98:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800bcb0 <hypot+0x60>
 800bc9c:	2322      	movs	r3, #34	@ 0x22
 800bc9e:	6003      	str	r3, [r0, #0]
 800bca0:	eeb0 0a48 	vmov.f32	s0, s16
 800bca4:	eef0 0a68 	vmov.f32	s1, s17
 800bca8:	ecbd 8b06 	vpop	{d8-d10}
 800bcac:	bd08      	pop	{r3, pc}
 800bcae:	bf00      	nop
 800bcb0:	00000000 	.word	0x00000000
 800bcb4:	7ff00000 	.word	0x7ff00000

0800bcb8 <pow>:
 800bcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcba:	ed2d 8b02 	vpush	{d8}
 800bcbe:	eeb0 8a40 	vmov.f32	s16, s0
 800bcc2:	eef0 8a60 	vmov.f32	s17, s1
 800bcc6:	ec55 4b11 	vmov	r4, r5, d1
 800bcca:	f001 fbbd 	bl	800d448 <__ieee754_pow>
 800bcce:	4622      	mov	r2, r4
 800bcd0:	462b      	mov	r3, r5
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	ec57 6b10 	vmov	r6, r7, d0
 800bcda:	f7f4 fed7 	bl	8000a8c <__aeabi_dcmpun>
 800bcde:	2800      	cmp	r0, #0
 800bce0:	d13b      	bne.n	800bd5a <pow+0xa2>
 800bce2:	ec51 0b18 	vmov	r0, r1, d8
 800bce6:	2200      	movs	r2, #0
 800bce8:	2300      	movs	r3, #0
 800bcea:	f7f4 fe9d 	bl	8000a28 <__aeabi_dcmpeq>
 800bcee:	b1b8      	cbz	r0, 800bd20 <pow+0x68>
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	4629      	mov	r1, r5
 800bcf8:	f7f4 fe96 	bl	8000a28 <__aeabi_dcmpeq>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d146      	bne.n	800bd8e <pow+0xd6>
 800bd00:	ec45 4b10 	vmov	d0, r4, r5
 800bd04:	f000 faf0 	bl	800c2e8 <finite>
 800bd08:	b338      	cbz	r0, 800bd5a <pow+0xa2>
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	4620      	mov	r0, r4
 800bd10:	4629      	mov	r1, r5
 800bd12:	f7f4 fe93 	bl	8000a3c <__aeabi_dcmplt>
 800bd16:	b300      	cbz	r0, 800bd5a <pow+0xa2>
 800bd18:	f7ff fed4 	bl	800bac4 <__errno>
 800bd1c:	2322      	movs	r3, #34	@ 0x22
 800bd1e:	e01b      	b.n	800bd58 <pow+0xa0>
 800bd20:	ec47 6b10 	vmov	d0, r6, r7
 800bd24:	f000 fae0 	bl	800c2e8 <finite>
 800bd28:	b9e0      	cbnz	r0, 800bd64 <pow+0xac>
 800bd2a:	eeb0 0a48 	vmov.f32	s0, s16
 800bd2e:	eef0 0a68 	vmov.f32	s1, s17
 800bd32:	f000 fad9 	bl	800c2e8 <finite>
 800bd36:	b1a8      	cbz	r0, 800bd64 <pow+0xac>
 800bd38:	ec45 4b10 	vmov	d0, r4, r5
 800bd3c:	f000 fad4 	bl	800c2e8 <finite>
 800bd40:	b180      	cbz	r0, 800bd64 <pow+0xac>
 800bd42:	4632      	mov	r2, r6
 800bd44:	463b      	mov	r3, r7
 800bd46:	4630      	mov	r0, r6
 800bd48:	4639      	mov	r1, r7
 800bd4a:	f7f4 fe9f 	bl	8000a8c <__aeabi_dcmpun>
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	d0e2      	beq.n	800bd18 <pow+0x60>
 800bd52:	f7ff feb7 	bl	800bac4 <__errno>
 800bd56:	2321      	movs	r3, #33	@ 0x21
 800bd58:	6003      	str	r3, [r0, #0]
 800bd5a:	ecbd 8b02 	vpop	{d8}
 800bd5e:	ec47 6b10 	vmov	d0, r6, r7
 800bd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd64:	2200      	movs	r2, #0
 800bd66:	2300      	movs	r3, #0
 800bd68:	4630      	mov	r0, r6
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	f7f4 fe5c 	bl	8000a28 <__aeabi_dcmpeq>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d0f2      	beq.n	800bd5a <pow+0xa2>
 800bd74:	eeb0 0a48 	vmov.f32	s0, s16
 800bd78:	eef0 0a68 	vmov.f32	s1, s17
 800bd7c:	f000 fab4 	bl	800c2e8 <finite>
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d0ea      	beq.n	800bd5a <pow+0xa2>
 800bd84:	ec45 4b10 	vmov	d0, r4, r5
 800bd88:	f000 faae 	bl	800c2e8 <finite>
 800bd8c:	e7c3      	b.n	800bd16 <pow+0x5e>
 800bd8e:	4f01      	ldr	r7, [pc, #4]	@ (800bd94 <pow+0xdc>)
 800bd90:	2600      	movs	r6, #0
 800bd92:	e7e2      	b.n	800bd5a <pow+0xa2>
 800bd94:	3ff00000 	.word	0x3ff00000

0800bd98 <sqrt>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	ed2d 8b02 	vpush	{d8}
 800bd9e:	ec55 4b10 	vmov	r4, r5, d0
 800bda2:	f000 fab5 	bl	800c310 <__ieee754_sqrt>
 800bda6:	4622      	mov	r2, r4
 800bda8:	462b      	mov	r3, r5
 800bdaa:	4620      	mov	r0, r4
 800bdac:	4629      	mov	r1, r5
 800bdae:	eeb0 8a40 	vmov.f32	s16, s0
 800bdb2:	eef0 8a60 	vmov.f32	s17, s1
 800bdb6:	f7f4 fe69 	bl	8000a8c <__aeabi_dcmpun>
 800bdba:	b990      	cbnz	r0, 800bde2 <sqrt+0x4a>
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	4629      	mov	r1, r5
 800bdc4:	f7f4 fe3a 	bl	8000a3c <__aeabi_dcmplt>
 800bdc8:	b158      	cbz	r0, 800bde2 <sqrt+0x4a>
 800bdca:	f7ff fe7b 	bl	800bac4 <__errno>
 800bdce:	2321      	movs	r3, #33	@ 0x21
 800bdd0:	6003      	str	r3, [r0, #0]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	4610      	mov	r0, r2
 800bdd8:	4619      	mov	r1, r3
 800bdda:	f7f4 fce7 	bl	80007ac <__aeabi_ddiv>
 800bdde:	ec41 0b18 	vmov	d8, r0, r1
 800bde2:	eeb0 0a48 	vmov.f32	s0, s16
 800bde6:	eef0 0a68 	vmov.f32	s1, s17
 800bdea:	ecbd 8b02 	vpop	{d8}
 800bdee:	bd38      	pop	{r3, r4, r5, pc}

0800bdf0 <atan>:
 800bdf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf4:	ec55 4b10 	vmov	r4, r5, d0
 800bdf8:	4bbf      	ldr	r3, [pc, #764]	@ (800c0f8 <atan+0x308>)
 800bdfa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800bdfe:	429e      	cmp	r6, r3
 800be00:	46ab      	mov	fp, r5
 800be02:	d918      	bls.n	800be36 <atan+0x46>
 800be04:	4bbd      	ldr	r3, [pc, #756]	@ (800c0fc <atan+0x30c>)
 800be06:	429e      	cmp	r6, r3
 800be08:	d801      	bhi.n	800be0e <atan+0x1e>
 800be0a:	d109      	bne.n	800be20 <atan+0x30>
 800be0c:	b144      	cbz	r4, 800be20 <atan+0x30>
 800be0e:	4622      	mov	r2, r4
 800be10:	462b      	mov	r3, r5
 800be12:	4620      	mov	r0, r4
 800be14:	4629      	mov	r1, r5
 800be16:	f7f4 f9e9 	bl	80001ec <__adddf3>
 800be1a:	4604      	mov	r4, r0
 800be1c:	460d      	mov	r5, r1
 800be1e:	e006      	b.n	800be2e <atan+0x3e>
 800be20:	f1bb 0f00 	cmp.w	fp, #0
 800be24:	f340 812b 	ble.w	800c07e <atan+0x28e>
 800be28:	a597      	add	r5, pc, #604	@ (adr r5, 800c088 <atan+0x298>)
 800be2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be2e:	ec45 4b10 	vmov	d0, r4, r5
 800be32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be36:	4bb2      	ldr	r3, [pc, #712]	@ (800c100 <atan+0x310>)
 800be38:	429e      	cmp	r6, r3
 800be3a:	d813      	bhi.n	800be64 <atan+0x74>
 800be3c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800be40:	429e      	cmp	r6, r3
 800be42:	d80c      	bhi.n	800be5e <atan+0x6e>
 800be44:	a392      	add	r3, pc, #584	@ (adr r3, 800c090 <atan+0x2a0>)
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	4620      	mov	r0, r4
 800be4c:	4629      	mov	r1, r5
 800be4e:	f7f4 f9cd 	bl	80001ec <__adddf3>
 800be52:	4bac      	ldr	r3, [pc, #688]	@ (800c104 <atan+0x314>)
 800be54:	2200      	movs	r2, #0
 800be56:	f7f4 fe0f 	bl	8000a78 <__aeabi_dcmpgt>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d1e7      	bne.n	800be2e <atan+0x3e>
 800be5e:	f04f 3aff 	mov.w	sl, #4294967295
 800be62:	e029      	b.n	800beb8 <atan+0xc8>
 800be64:	f000 f9b0 	bl	800c1c8 <fabs>
 800be68:	4ba7      	ldr	r3, [pc, #668]	@ (800c108 <atan+0x318>)
 800be6a:	429e      	cmp	r6, r3
 800be6c:	ec55 4b10 	vmov	r4, r5, d0
 800be70:	f200 80bc 	bhi.w	800bfec <atan+0x1fc>
 800be74:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800be78:	429e      	cmp	r6, r3
 800be7a:	f200 809e 	bhi.w	800bfba <atan+0x1ca>
 800be7e:	4622      	mov	r2, r4
 800be80:	462b      	mov	r3, r5
 800be82:	4620      	mov	r0, r4
 800be84:	4629      	mov	r1, r5
 800be86:	f7f4 f9b1 	bl	80001ec <__adddf3>
 800be8a:	4b9e      	ldr	r3, [pc, #632]	@ (800c104 <atan+0x314>)
 800be8c:	2200      	movs	r2, #0
 800be8e:	f7f4 f9ab 	bl	80001e8 <__aeabi_dsub>
 800be92:	2200      	movs	r2, #0
 800be94:	4606      	mov	r6, r0
 800be96:	460f      	mov	r7, r1
 800be98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800be9c:	4620      	mov	r0, r4
 800be9e:	4629      	mov	r1, r5
 800bea0:	f7f4 f9a4 	bl	80001ec <__adddf3>
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	4630      	mov	r0, r6
 800beaa:	4639      	mov	r1, r7
 800beac:	f7f4 fc7e 	bl	80007ac <__aeabi_ddiv>
 800beb0:	f04f 0a00 	mov.w	sl, #0
 800beb4:	4604      	mov	r4, r0
 800beb6:	460d      	mov	r5, r1
 800beb8:	4622      	mov	r2, r4
 800beba:	462b      	mov	r3, r5
 800bebc:	4620      	mov	r0, r4
 800bebe:	4629      	mov	r1, r5
 800bec0:	f7f4 fb4a 	bl	8000558 <__aeabi_dmul>
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	4680      	mov	r8, r0
 800beca:	4689      	mov	r9, r1
 800becc:	f7f4 fb44 	bl	8000558 <__aeabi_dmul>
 800bed0:	a371      	add	r3, pc, #452	@ (adr r3, 800c098 <atan+0x2a8>)
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	4606      	mov	r6, r0
 800bed8:	460f      	mov	r7, r1
 800beda:	f7f4 fb3d 	bl	8000558 <__aeabi_dmul>
 800bede:	a370      	add	r3, pc, #448	@ (adr r3, 800c0a0 <atan+0x2b0>)
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	f7f4 f982 	bl	80001ec <__adddf3>
 800bee8:	4632      	mov	r2, r6
 800beea:	463b      	mov	r3, r7
 800beec:	f7f4 fb34 	bl	8000558 <__aeabi_dmul>
 800bef0:	a36d      	add	r3, pc, #436	@ (adr r3, 800c0a8 <atan+0x2b8>)
 800bef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef6:	f7f4 f979 	bl	80001ec <__adddf3>
 800befa:	4632      	mov	r2, r6
 800befc:	463b      	mov	r3, r7
 800befe:	f7f4 fb2b 	bl	8000558 <__aeabi_dmul>
 800bf02:	a36b      	add	r3, pc, #428	@ (adr r3, 800c0b0 <atan+0x2c0>)
 800bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf08:	f7f4 f970 	bl	80001ec <__adddf3>
 800bf0c:	4632      	mov	r2, r6
 800bf0e:	463b      	mov	r3, r7
 800bf10:	f7f4 fb22 	bl	8000558 <__aeabi_dmul>
 800bf14:	a368      	add	r3, pc, #416	@ (adr r3, 800c0b8 <atan+0x2c8>)
 800bf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1a:	f7f4 f967 	bl	80001ec <__adddf3>
 800bf1e:	4632      	mov	r2, r6
 800bf20:	463b      	mov	r3, r7
 800bf22:	f7f4 fb19 	bl	8000558 <__aeabi_dmul>
 800bf26:	a366      	add	r3, pc, #408	@ (adr r3, 800c0c0 <atan+0x2d0>)
 800bf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2c:	f7f4 f95e 	bl	80001ec <__adddf3>
 800bf30:	4642      	mov	r2, r8
 800bf32:	464b      	mov	r3, r9
 800bf34:	f7f4 fb10 	bl	8000558 <__aeabi_dmul>
 800bf38:	a363      	add	r3, pc, #396	@ (adr r3, 800c0c8 <atan+0x2d8>)
 800bf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3e:	4680      	mov	r8, r0
 800bf40:	4689      	mov	r9, r1
 800bf42:	4630      	mov	r0, r6
 800bf44:	4639      	mov	r1, r7
 800bf46:	f7f4 fb07 	bl	8000558 <__aeabi_dmul>
 800bf4a:	a361      	add	r3, pc, #388	@ (adr r3, 800c0d0 <atan+0x2e0>)
 800bf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf50:	f7f4 f94a 	bl	80001e8 <__aeabi_dsub>
 800bf54:	4632      	mov	r2, r6
 800bf56:	463b      	mov	r3, r7
 800bf58:	f7f4 fafe 	bl	8000558 <__aeabi_dmul>
 800bf5c:	a35e      	add	r3, pc, #376	@ (adr r3, 800c0d8 <atan+0x2e8>)
 800bf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf62:	f7f4 f941 	bl	80001e8 <__aeabi_dsub>
 800bf66:	4632      	mov	r2, r6
 800bf68:	463b      	mov	r3, r7
 800bf6a:	f7f4 faf5 	bl	8000558 <__aeabi_dmul>
 800bf6e:	a35c      	add	r3, pc, #368	@ (adr r3, 800c0e0 <atan+0x2f0>)
 800bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf74:	f7f4 f938 	bl	80001e8 <__aeabi_dsub>
 800bf78:	4632      	mov	r2, r6
 800bf7a:	463b      	mov	r3, r7
 800bf7c:	f7f4 faec 	bl	8000558 <__aeabi_dmul>
 800bf80:	a359      	add	r3, pc, #356	@ (adr r3, 800c0e8 <atan+0x2f8>)
 800bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf86:	f7f4 f92f 	bl	80001e8 <__aeabi_dsub>
 800bf8a:	4632      	mov	r2, r6
 800bf8c:	463b      	mov	r3, r7
 800bf8e:	f7f4 fae3 	bl	8000558 <__aeabi_dmul>
 800bf92:	4602      	mov	r2, r0
 800bf94:	460b      	mov	r3, r1
 800bf96:	4640      	mov	r0, r8
 800bf98:	4649      	mov	r1, r9
 800bf9a:	f7f4 f927 	bl	80001ec <__adddf3>
 800bf9e:	4622      	mov	r2, r4
 800bfa0:	462b      	mov	r3, r5
 800bfa2:	f7f4 fad9 	bl	8000558 <__aeabi_dmul>
 800bfa6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bfaa:	4602      	mov	r2, r0
 800bfac:	460b      	mov	r3, r1
 800bfae:	d148      	bne.n	800c042 <atan+0x252>
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	4629      	mov	r1, r5
 800bfb4:	f7f4 f918 	bl	80001e8 <__aeabi_dsub>
 800bfb8:	e72f      	b.n	800be1a <atan+0x2a>
 800bfba:	4b52      	ldr	r3, [pc, #328]	@ (800c104 <atan+0x314>)
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	4629      	mov	r1, r5
 800bfc2:	f7f4 f911 	bl	80001e8 <__aeabi_dsub>
 800bfc6:	4b4f      	ldr	r3, [pc, #316]	@ (800c104 <atan+0x314>)
 800bfc8:	4606      	mov	r6, r0
 800bfca:	460f      	mov	r7, r1
 800bfcc:	2200      	movs	r2, #0
 800bfce:	4620      	mov	r0, r4
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	f7f4 f90b 	bl	80001ec <__adddf3>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	460b      	mov	r3, r1
 800bfda:	4630      	mov	r0, r6
 800bfdc:	4639      	mov	r1, r7
 800bfde:	f7f4 fbe5 	bl	80007ac <__aeabi_ddiv>
 800bfe2:	f04f 0a01 	mov.w	sl, #1
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	460d      	mov	r5, r1
 800bfea:	e765      	b.n	800beb8 <atan+0xc8>
 800bfec:	4b47      	ldr	r3, [pc, #284]	@ (800c10c <atan+0x31c>)
 800bfee:	429e      	cmp	r6, r3
 800bff0:	d21c      	bcs.n	800c02c <atan+0x23c>
 800bff2:	4b47      	ldr	r3, [pc, #284]	@ (800c110 <atan+0x320>)
 800bff4:	2200      	movs	r2, #0
 800bff6:	4620      	mov	r0, r4
 800bff8:	4629      	mov	r1, r5
 800bffa:	f7f4 f8f5 	bl	80001e8 <__aeabi_dsub>
 800bffe:	4b44      	ldr	r3, [pc, #272]	@ (800c110 <atan+0x320>)
 800c000:	4606      	mov	r6, r0
 800c002:	460f      	mov	r7, r1
 800c004:	2200      	movs	r2, #0
 800c006:	4620      	mov	r0, r4
 800c008:	4629      	mov	r1, r5
 800c00a:	f7f4 faa5 	bl	8000558 <__aeabi_dmul>
 800c00e:	4b3d      	ldr	r3, [pc, #244]	@ (800c104 <atan+0x314>)
 800c010:	2200      	movs	r2, #0
 800c012:	f7f4 f8eb 	bl	80001ec <__adddf3>
 800c016:	4602      	mov	r2, r0
 800c018:	460b      	mov	r3, r1
 800c01a:	4630      	mov	r0, r6
 800c01c:	4639      	mov	r1, r7
 800c01e:	f7f4 fbc5 	bl	80007ac <__aeabi_ddiv>
 800c022:	f04f 0a02 	mov.w	sl, #2
 800c026:	4604      	mov	r4, r0
 800c028:	460d      	mov	r5, r1
 800c02a:	e745      	b.n	800beb8 <atan+0xc8>
 800c02c:	4622      	mov	r2, r4
 800c02e:	462b      	mov	r3, r5
 800c030:	4938      	ldr	r1, [pc, #224]	@ (800c114 <atan+0x324>)
 800c032:	2000      	movs	r0, #0
 800c034:	f7f4 fbba 	bl	80007ac <__aeabi_ddiv>
 800c038:	f04f 0a03 	mov.w	sl, #3
 800c03c:	4604      	mov	r4, r0
 800c03e:	460d      	mov	r5, r1
 800c040:	e73a      	b.n	800beb8 <atan+0xc8>
 800c042:	4b35      	ldr	r3, [pc, #212]	@ (800c118 <atan+0x328>)
 800c044:	4e35      	ldr	r6, [pc, #212]	@ (800c11c <atan+0x32c>)
 800c046:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04e:	f7f4 f8cb 	bl	80001e8 <__aeabi_dsub>
 800c052:	4622      	mov	r2, r4
 800c054:	462b      	mov	r3, r5
 800c056:	f7f4 f8c7 	bl	80001e8 <__aeabi_dsub>
 800c05a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c05e:	4602      	mov	r2, r0
 800c060:	460b      	mov	r3, r1
 800c062:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c066:	f7f4 f8bf 	bl	80001e8 <__aeabi_dsub>
 800c06a:	f1bb 0f00 	cmp.w	fp, #0
 800c06e:	4604      	mov	r4, r0
 800c070:	460d      	mov	r5, r1
 800c072:	f6bf aedc 	bge.w	800be2e <atan+0x3e>
 800c076:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c07a:	461d      	mov	r5, r3
 800c07c:	e6d7      	b.n	800be2e <atan+0x3e>
 800c07e:	a51c      	add	r5, pc, #112	@ (adr r5, 800c0f0 <atan+0x300>)
 800c080:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c084:	e6d3      	b.n	800be2e <atan+0x3e>
 800c086:	bf00      	nop
 800c088:	54442d18 	.word	0x54442d18
 800c08c:	3ff921fb 	.word	0x3ff921fb
 800c090:	8800759c 	.word	0x8800759c
 800c094:	7e37e43c 	.word	0x7e37e43c
 800c098:	e322da11 	.word	0xe322da11
 800c09c:	3f90ad3a 	.word	0x3f90ad3a
 800c0a0:	24760deb 	.word	0x24760deb
 800c0a4:	3fa97b4b 	.word	0x3fa97b4b
 800c0a8:	a0d03d51 	.word	0xa0d03d51
 800c0ac:	3fb10d66 	.word	0x3fb10d66
 800c0b0:	c54c206e 	.word	0xc54c206e
 800c0b4:	3fb745cd 	.word	0x3fb745cd
 800c0b8:	920083ff 	.word	0x920083ff
 800c0bc:	3fc24924 	.word	0x3fc24924
 800c0c0:	5555550d 	.word	0x5555550d
 800c0c4:	3fd55555 	.word	0x3fd55555
 800c0c8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c0cc:	bfa2b444 	.word	0xbfa2b444
 800c0d0:	52defd9a 	.word	0x52defd9a
 800c0d4:	3fadde2d 	.word	0x3fadde2d
 800c0d8:	af749a6d 	.word	0xaf749a6d
 800c0dc:	3fb3b0f2 	.word	0x3fb3b0f2
 800c0e0:	fe231671 	.word	0xfe231671
 800c0e4:	3fbc71c6 	.word	0x3fbc71c6
 800c0e8:	9998ebc4 	.word	0x9998ebc4
 800c0ec:	3fc99999 	.word	0x3fc99999
 800c0f0:	54442d18 	.word	0x54442d18
 800c0f4:	bff921fb 	.word	0xbff921fb
 800c0f8:	440fffff 	.word	0x440fffff
 800c0fc:	7ff00000 	.word	0x7ff00000
 800c100:	3fdbffff 	.word	0x3fdbffff
 800c104:	3ff00000 	.word	0x3ff00000
 800c108:	3ff2ffff 	.word	0x3ff2ffff
 800c10c:	40038000 	.word	0x40038000
 800c110:	3ff80000 	.word	0x3ff80000
 800c114:	bff00000 	.word	0xbff00000
 800c118:	0800ed98 	.word	0x0800ed98
 800c11c:	0800edb8 	.word	0x0800edb8

0800c120 <cos>:
 800c120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c122:	ec53 2b10 	vmov	r2, r3, d0
 800c126:	4826      	ldr	r0, [pc, #152]	@ (800c1c0 <cos+0xa0>)
 800c128:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c12c:	4281      	cmp	r1, r0
 800c12e:	d806      	bhi.n	800c13e <cos+0x1e>
 800c130:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c1b8 <cos+0x98>
 800c134:	b005      	add	sp, #20
 800c136:	f85d eb04 	ldr.w	lr, [sp], #4
 800c13a:	f000 b9c5 	b.w	800c4c8 <__kernel_cos>
 800c13e:	4821      	ldr	r0, [pc, #132]	@ (800c1c4 <cos+0xa4>)
 800c140:	4281      	cmp	r1, r0
 800c142:	d908      	bls.n	800c156 <cos+0x36>
 800c144:	4610      	mov	r0, r2
 800c146:	4619      	mov	r1, r3
 800c148:	f7f4 f84e 	bl	80001e8 <__aeabi_dsub>
 800c14c:	ec41 0b10 	vmov	d0, r0, r1
 800c150:	b005      	add	sp, #20
 800c152:	f85d fb04 	ldr.w	pc, [sp], #4
 800c156:	4668      	mov	r0, sp
 800c158:	f001 feba 	bl	800ded0 <__ieee754_rem_pio2>
 800c15c:	f000 0003 	and.w	r0, r0, #3
 800c160:	2801      	cmp	r0, #1
 800c162:	d00b      	beq.n	800c17c <cos+0x5c>
 800c164:	2802      	cmp	r0, #2
 800c166:	d015      	beq.n	800c194 <cos+0x74>
 800c168:	b9d8      	cbnz	r0, 800c1a2 <cos+0x82>
 800c16a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c16e:	ed9d 0b00 	vldr	d0, [sp]
 800c172:	f000 f9a9 	bl	800c4c8 <__kernel_cos>
 800c176:	ec51 0b10 	vmov	r0, r1, d0
 800c17a:	e7e7      	b.n	800c14c <cos+0x2c>
 800c17c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c180:	ed9d 0b00 	vldr	d0, [sp]
 800c184:	f000 fa68 	bl	800c658 <__kernel_sin>
 800c188:	ec53 2b10 	vmov	r2, r3, d0
 800c18c:	4610      	mov	r0, r2
 800c18e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c192:	e7db      	b.n	800c14c <cos+0x2c>
 800c194:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c198:	ed9d 0b00 	vldr	d0, [sp]
 800c19c:	f000 f994 	bl	800c4c8 <__kernel_cos>
 800c1a0:	e7f2      	b.n	800c188 <cos+0x68>
 800c1a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c1a6:	ed9d 0b00 	vldr	d0, [sp]
 800c1aa:	2001      	movs	r0, #1
 800c1ac:	f000 fa54 	bl	800c658 <__kernel_sin>
 800c1b0:	e7e1      	b.n	800c176 <cos+0x56>
 800c1b2:	bf00      	nop
 800c1b4:	f3af 8000 	nop.w
	...
 800c1c0:	3fe921fb 	.word	0x3fe921fb
 800c1c4:	7fefffff 	.word	0x7fefffff

0800c1c8 <fabs>:
 800c1c8:	ec51 0b10 	vmov	r0, r1, d0
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c1d2:	ec43 2b10 	vmov	d0, r2, r3
 800c1d6:	4770      	bx	lr

0800c1d8 <sin>:
 800c1d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1da:	ec53 2b10 	vmov	r2, r3, d0
 800c1de:	4826      	ldr	r0, [pc, #152]	@ (800c278 <sin+0xa0>)
 800c1e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c1e4:	4281      	cmp	r1, r0
 800c1e6:	d807      	bhi.n	800c1f8 <sin+0x20>
 800c1e8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c270 <sin+0x98>
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	b005      	add	sp, #20
 800c1f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1f4:	f000 ba30 	b.w	800c658 <__kernel_sin>
 800c1f8:	4820      	ldr	r0, [pc, #128]	@ (800c27c <sin+0xa4>)
 800c1fa:	4281      	cmp	r1, r0
 800c1fc:	d908      	bls.n	800c210 <sin+0x38>
 800c1fe:	4610      	mov	r0, r2
 800c200:	4619      	mov	r1, r3
 800c202:	f7f3 fff1 	bl	80001e8 <__aeabi_dsub>
 800c206:	ec41 0b10 	vmov	d0, r0, r1
 800c20a:	b005      	add	sp, #20
 800c20c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c210:	4668      	mov	r0, sp
 800c212:	f001 fe5d 	bl	800ded0 <__ieee754_rem_pio2>
 800c216:	f000 0003 	and.w	r0, r0, #3
 800c21a:	2801      	cmp	r0, #1
 800c21c:	d00c      	beq.n	800c238 <sin+0x60>
 800c21e:	2802      	cmp	r0, #2
 800c220:	d011      	beq.n	800c246 <sin+0x6e>
 800c222:	b9e8      	cbnz	r0, 800c260 <sin+0x88>
 800c224:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c228:	ed9d 0b00 	vldr	d0, [sp]
 800c22c:	2001      	movs	r0, #1
 800c22e:	f000 fa13 	bl	800c658 <__kernel_sin>
 800c232:	ec51 0b10 	vmov	r0, r1, d0
 800c236:	e7e6      	b.n	800c206 <sin+0x2e>
 800c238:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c23c:	ed9d 0b00 	vldr	d0, [sp]
 800c240:	f000 f942 	bl	800c4c8 <__kernel_cos>
 800c244:	e7f5      	b.n	800c232 <sin+0x5a>
 800c246:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c24a:	ed9d 0b00 	vldr	d0, [sp]
 800c24e:	2001      	movs	r0, #1
 800c250:	f000 fa02 	bl	800c658 <__kernel_sin>
 800c254:	ec53 2b10 	vmov	r2, r3, d0
 800c258:	4610      	mov	r0, r2
 800c25a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c25e:	e7d2      	b.n	800c206 <sin+0x2e>
 800c260:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c264:	ed9d 0b00 	vldr	d0, [sp]
 800c268:	f000 f92e 	bl	800c4c8 <__kernel_cos>
 800c26c:	e7f2      	b.n	800c254 <sin+0x7c>
 800c26e:	bf00      	nop
	...
 800c278:	3fe921fb 	.word	0x3fe921fb
 800c27c:	7fefffff 	.word	0x7fefffff

0800c280 <tan>:
 800c280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c282:	ec53 2b10 	vmov	r2, r3, d0
 800c286:	4816      	ldr	r0, [pc, #88]	@ (800c2e0 <tan+0x60>)
 800c288:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c28c:	4281      	cmp	r1, r0
 800c28e:	d807      	bhi.n	800c2a0 <tan+0x20>
 800c290:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 800c2d8 <tan+0x58>
 800c294:	2001      	movs	r0, #1
 800c296:	b005      	add	sp, #20
 800c298:	f85d eb04 	ldr.w	lr, [sp], #4
 800c29c:	f000 ba98 	b.w	800c7d0 <__kernel_tan>
 800c2a0:	4810      	ldr	r0, [pc, #64]	@ (800c2e4 <tan+0x64>)
 800c2a2:	4281      	cmp	r1, r0
 800c2a4:	d908      	bls.n	800c2b8 <tan+0x38>
 800c2a6:	4610      	mov	r0, r2
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	f7f3 ff9d 	bl	80001e8 <__aeabi_dsub>
 800c2ae:	ec41 0b10 	vmov	d0, r0, r1
 800c2b2:	b005      	add	sp, #20
 800c2b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2b8:	4668      	mov	r0, sp
 800c2ba:	f001 fe09 	bl	800ded0 <__ieee754_rem_pio2>
 800c2be:	0040      	lsls	r0, r0, #1
 800c2c0:	f000 0002 	and.w	r0, r0, #2
 800c2c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2c8:	ed9d 0b00 	vldr	d0, [sp]
 800c2cc:	f1c0 0001 	rsb	r0, r0, #1
 800c2d0:	f000 fa7e 	bl	800c7d0 <__kernel_tan>
 800c2d4:	e7ed      	b.n	800c2b2 <tan+0x32>
 800c2d6:	bf00      	nop
	...
 800c2e0:	3fe921fb 	.word	0x3fe921fb
 800c2e4:	7fefffff 	.word	0x7fefffff

0800c2e8 <finite>:
 800c2e8:	b082      	sub	sp, #8
 800c2ea:	ed8d 0b00 	vstr	d0, [sp]
 800c2ee:	9801      	ldr	r0, [sp, #4]
 800c2f0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800c2f4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c2f8:	0fc0      	lsrs	r0, r0, #31
 800c2fa:	b002      	add	sp, #8
 800c2fc:	4770      	bx	lr
	...

0800c300 <nan>:
 800c300:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c308 <nan+0x8>
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	00000000 	.word	0x00000000
 800c30c:	7ff80000 	.word	0x7ff80000

0800c310 <__ieee754_sqrt>:
 800c310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c314:	4a68      	ldr	r2, [pc, #416]	@ (800c4b8 <__ieee754_sqrt+0x1a8>)
 800c316:	ec55 4b10 	vmov	r4, r5, d0
 800c31a:	43aa      	bics	r2, r5
 800c31c:	462b      	mov	r3, r5
 800c31e:	4621      	mov	r1, r4
 800c320:	d110      	bne.n	800c344 <__ieee754_sqrt+0x34>
 800c322:	4622      	mov	r2, r4
 800c324:	4620      	mov	r0, r4
 800c326:	4629      	mov	r1, r5
 800c328:	f7f4 f916 	bl	8000558 <__aeabi_dmul>
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	4620      	mov	r0, r4
 800c332:	4629      	mov	r1, r5
 800c334:	f7f3 ff5a 	bl	80001ec <__adddf3>
 800c338:	4604      	mov	r4, r0
 800c33a:	460d      	mov	r5, r1
 800c33c:	ec45 4b10 	vmov	d0, r4, r5
 800c340:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c344:	2d00      	cmp	r5, #0
 800c346:	dc0e      	bgt.n	800c366 <__ieee754_sqrt+0x56>
 800c348:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c34c:	4322      	orrs	r2, r4
 800c34e:	d0f5      	beq.n	800c33c <__ieee754_sqrt+0x2c>
 800c350:	b19d      	cbz	r5, 800c37a <__ieee754_sqrt+0x6a>
 800c352:	4622      	mov	r2, r4
 800c354:	4620      	mov	r0, r4
 800c356:	4629      	mov	r1, r5
 800c358:	f7f3 ff46 	bl	80001e8 <__aeabi_dsub>
 800c35c:	4602      	mov	r2, r0
 800c35e:	460b      	mov	r3, r1
 800c360:	f7f4 fa24 	bl	80007ac <__aeabi_ddiv>
 800c364:	e7e8      	b.n	800c338 <__ieee754_sqrt+0x28>
 800c366:	152a      	asrs	r2, r5, #20
 800c368:	d115      	bne.n	800c396 <__ieee754_sqrt+0x86>
 800c36a:	2000      	movs	r0, #0
 800c36c:	e009      	b.n	800c382 <__ieee754_sqrt+0x72>
 800c36e:	0acb      	lsrs	r3, r1, #11
 800c370:	3a15      	subs	r2, #21
 800c372:	0549      	lsls	r1, r1, #21
 800c374:	2b00      	cmp	r3, #0
 800c376:	d0fa      	beq.n	800c36e <__ieee754_sqrt+0x5e>
 800c378:	e7f7      	b.n	800c36a <__ieee754_sqrt+0x5a>
 800c37a:	462a      	mov	r2, r5
 800c37c:	e7fa      	b.n	800c374 <__ieee754_sqrt+0x64>
 800c37e:	005b      	lsls	r3, r3, #1
 800c380:	3001      	adds	r0, #1
 800c382:	02dc      	lsls	r4, r3, #11
 800c384:	d5fb      	bpl.n	800c37e <__ieee754_sqrt+0x6e>
 800c386:	1e44      	subs	r4, r0, #1
 800c388:	1b12      	subs	r2, r2, r4
 800c38a:	f1c0 0420 	rsb	r4, r0, #32
 800c38e:	fa21 f404 	lsr.w	r4, r1, r4
 800c392:	4323      	orrs	r3, r4
 800c394:	4081      	lsls	r1, r0
 800c396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c39a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c39e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c3a2:	07d2      	lsls	r2, r2, #31
 800c3a4:	bf5c      	itt	pl
 800c3a6:	005b      	lslpl	r3, r3, #1
 800c3a8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c3ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c3b0:	bf58      	it	pl
 800c3b2:	0049      	lslpl	r1, r1, #1
 800c3b4:	2600      	movs	r6, #0
 800c3b6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c3ba:	106d      	asrs	r5, r5, #1
 800c3bc:	0049      	lsls	r1, r1, #1
 800c3be:	2016      	movs	r0, #22
 800c3c0:	4632      	mov	r2, r6
 800c3c2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c3c6:	1917      	adds	r7, r2, r4
 800c3c8:	429f      	cmp	r7, r3
 800c3ca:	bfde      	ittt	le
 800c3cc:	193a      	addle	r2, r7, r4
 800c3ce:	1bdb      	suble	r3, r3, r7
 800c3d0:	1936      	addle	r6, r6, r4
 800c3d2:	0fcf      	lsrs	r7, r1, #31
 800c3d4:	3801      	subs	r0, #1
 800c3d6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c3da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c3de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c3e2:	d1f0      	bne.n	800c3c6 <__ieee754_sqrt+0xb6>
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	2720      	movs	r7, #32
 800c3e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	eb00 0e0c 	add.w	lr, r0, ip
 800c3f2:	db02      	blt.n	800c3fa <__ieee754_sqrt+0xea>
 800c3f4:	d113      	bne.n	800c41e <__ieee754_sqrt+0x10e>
 800c3f6:	458e      	cmp	lr, r1
 800c3f8:	d811      	bhi.n	800c41e <__ieee754_sqrt+0x10e>
 800c3fa:	f1be 0f00 	cmp.w	lr, #0
 800c3fe:	eb0e 000c 	add.w	r0, lr, ip
 800c402:	da42      	bge.n	800c48a <__ieee754_sqrt+0x17a>
 800c404:	2800      	cmp	r0, #0
 800c406:	db40      	blt.n	800c48a <__ieee754_sqrt+0x17a>
 800c408:	f102 0801 	add.w	r8, r2, #1
 800c40c:	1a9b      	subs	r3, r3, r2
 800c40e:	458e      	cmp	lr, r1
 800c410:	bf88      	it	hi
 800c412:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c416:	eba1 010e 	sub.w	r1, r1, lr
 800c41a:	4464      	add	r4, ip
 800c41c:	4642      	mov	r2, r8
 800c41e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c422:	3f01      	subs	r7, #1
 800c424:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c428:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c42c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c430:	d1dc      	bne.n	800c3ec <__ieee754_sqrt+0xdc>
 800c432:	4319      	orrs	r1, r3
 800c434:	d01b      	beq.n	800c46e <__ieee754_sqrt+0x15e>
 800c436:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c4bc <__ieee754_sqrt+0x1ac>
 800c43a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c4c0 <__ieee754_sqrt+0x1b0>
 800c43e:	e9da 0100 	ldrd	r0, r1, [sl]
 800c442:	e9db 2300 	ldrd	r2, r3, [fp]
 800c446:	f7f3 fecf 	bl	80001e8 <__aeabi_dsub>
 800c44a:	e9da 8900 	ldrd	r8, r9, [sl]
 800c44e:	4602      	mov	r2, r0
 800c450:	460b      	mov	r3, r1
 800c452:	4640      	mov	r0, r8
 800c454:	4649      	mov	r1, r9
 800c456:	f7f4 fafb 	bl	8000a50 <__aeabi_dcmple>
 800c45a:	b140      	cbz	r0, 800c46e <__ieee754_sqrt+0x15e>
 800c45c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c460:	e9da 0100 	ldrd	r0, r1, [sl]
 800c464:	e9db 2300 	ldrd	r2, r3, [fp]
 800c468:	d111      	bne.n	800c48e <__ieee754_sqrt+0x17e>
 800c46a:	3601      	adds	r6, #1
 800c46c:	463c      	mov	r4, r7
 800c46e:	1072      	asrs	r2, r6, #1
 800c470:	0863      	lsrs	r3, r4, #1
 800c472:	07f1      	lsls	r1, r6, #31
 800c474:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c478:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c47c:	bf48      	it	mi
 800c47e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c482:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c486:	4618      	mov	r0, r3
 800c488:	e756      	b.n	800c338 <__ieee754_sqrt+0x28>
 800c48a:	4690      	mov	r8, r2
 800c48c:	e7be      	b.n	800c40c <__ieee754_sqrt+0xfc>
 800c48e:	f7f3 fead 	bl	80001ec <__adddf3>
 800c492:	e9da 8900 	ldrd	r8, r9, [sl]
 800c496:	4602      	mov	r2, r0
 800c498:	460b      	mov	r3, r1
 800c49a:	4640      	mov	r0, r8
 800c49c:	4649      	mov	r1, r9
 800c49e:	f7f4 facd 	bl	8000a3c <__aeabi_dcmplt>
 800c4a2:	b120      	cbz	r0, 800c4ae <__ieee754_sqrt+0x19e>
 800c4a4:	1ca0      	adds	r0, r4, #2
 800c4a6:	bf08      	it	eq
 800c4a8:	3601      	addeq	r6, #1
 800c4aa:	3402      	adds	r4, #2
 800c4ac:	e7df      	b.n	800c46e <__ieee754_sqrt+0x15e>
 800c4ae:	1c63      	adds	r3, r4, #1
 800c4b0:	f023 0401 	bic.w	r4, r3, #1
 800c4b4:	e7db      	b.n	800c46e <__ieee754_sqrt+0x15e>
 800c4b6:	bf00      	nop
 800c4b8:	7ff00000 	.word	0x7ff00000
 800c4bc:	20000108 	.word	0x20000108
 800c4c0:	20000100 	.word	0x20000100
 800c4c4:	00000000 	.word	0x00000000

0800c4c8 <__kernel_cos>:
 800c4c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4cc:	ec57 6b10 	vmov	r6, r7, d0
 800c4d0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c4d4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800c4d8:	ed8d 1b00 	vstr	d1, [sp]
 800c4dc:	d206      	bcs.n	800c4ec <__kernel_cos+0x24>
 800c4de:	4630      	mov	r0, r6
 800c4e0:	4639      	mov	r1, r7
 800c4e2:	f7f4 fae9 	bl	8000ab8 <__aeabi_d2iz>
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	f000 8088 	beq.w	800c5fc <__kernel_cos+0x134>
 800c4ec:	4632      	mov	r2, r6
 800c4ee:	463b      	mov	r3, r7
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	4639      	mov	r1, r7
 800c4f4:	f7f4 f830 	bl	8000558 <__aeabi_dmul>
 800c4f8:	4b51      	ldr	r3, [pc, #324]	@ (800c640 <__kernel_cos+0x178>)
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	4604      	mov	r4, r0
 800c4fe:	460d      	mov	r5, r1
 800c500:	f7f4 f82a 	bl	8000558 <__aeabi_dmul>
 800c504:	a340      	add	r3, pc, #256	@ (adr r3, 800c608 <__kernel_cos+0x140>)
 800c506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50a:	4682      	mov	sl, r0
 800c50c:	468b      	mov	fp, r1
 800c50e:	4620      	mov	r0, r4
 800c510:	4629      	mov	r1, r5
 800c512:	f7f4 f821 	bl	8000558 <__aeabi_dmul>
 800c516:	a33e      	add	r3, pc, #248	@ (adr r3, 800c610 <__kernel_cos+0x148>)
 800c518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51c:	f7f3 fe66 	bl	80001ec <__adddf3>
 800c520:	4622      	mov	r2, r4
 800c522:	462b      	mov	r3, r5
 800c524:	f7f4 f818 	bl	8000558 <__aeabi_dmul>
 800c528:	a33b      	add	r3, pc, #236	@ (adr r3, 800c618 <__kernel_cos+0x150>)
 800c52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52e:	f7f3 fe5b 	bl	80001e8 <__aeabi_dsub>
 800c532:	4622      	mov	r2, r4
 800c534:	462b      	mov	r3, r5
 800c536:	f7f4 f80f 	bl	8000558 <__aeabi_dmul>
 800c53a:	a339      	add	r3, pc, #228	@ (adr r3, 800c620 <__kernel_cos+0x158>)
 800c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c540:	f7f3 fe54 	bl	80001ec <__adddf3>
 800c544:	4622      	mov	r2, r4
 800c546:	462b      	mov	r3, r5
 800c548:	f7f4 f806 	bl	8000558 <__aeabi_dmul>
 800c54c:	a336      	add	r3, pc, #216	@ (adr r3, 800c628 <__kernel_cos+0x160>)
 800c54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c552:	f7f3 fe49 	bl	80001e8 <__aeabi_dsub>
 800c556:	4622      	mov	r2, r4
 800c558:	462b      	mov	r3, r5
 800c55a:	f7f3 fffd 	bl	8000558 <__aeabi_dmul>
 800c55e:	a334      	add	r3, pc, #208	@ (adr r3, 800c630 <__kernel_cos+0x168>)
 800c560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c564:	f7f3 fe42 	bl	80001ec <__adddf3>
 800c568:	4622      	mov	r2, r4
 800c56a:	462b      	mov	r3, r5
 800c56c:	f7f3 fff4 	bl	8000558 <__aeabi_dmul>
 800c570:	4622      	mov	r2, r4
 800c572:	462b      	mov	r3, r5
 800c574:	f7f3 fff0 	bl	8000558 <__aeabi_dmul>
 800c578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c57c:	4604      	mov	r4, r0
 800c57e:	460d      	mov	r5, r1
 800c580:	4630      	mov	r0, r6
 800c582:	4639      	mov	r1, r7
 800c584:	f7f3 ffe8 	bl	8000558 <__aeabi_dmul>
 800c588:	460b      	mov	r3, r1
 800c58a:	4602      	mov	r2, r0
 800c58c:	4629      	mov	r1, r5
 800c58e:	4620      	mov	r0, r4
 800c590:	f7f3 fe2a 	bl	80001e8 <__aeabi_dsub>
 800c594:	4b2b      	ldr	r3, [pc, #172]	@ (800c644 <__kernel_cos+0x17c>)
 800c596:	4598      	cmp	r8, r3
 800c598:	4606      	mov	r6, r0
 800c59a:	460f      	mov	r7, r1
 800c59c:	d810      	bhi.n	800c5c0 <__kernel_cos+0xf8>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	4650      	mov	r0, sl
 800c5a4:	4659      	mov	r1, fp
 800c5a6:	f7f3 fe1f 	bl	80001e8 <__aeabi_dsub>
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	4926      	ldr	r1, [pc, #152]	@ (800c648 <__kernel_cos+0x180>)
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	2000      	movs	r0, #0
 800c5b2:	f7f3 fe19 	bl	80001e8 <__aeabi_dsub>
 800c5b6:	ec41 0b10 	vmov	d0, r0, r1
 800c5ba:	b003      	add	sp, #12
 800c5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c0:	4b22      	ldr	r3, [pc, #136]	@ (800c64c <__kernel_cos+0x184>)
 800c5c2:	4921      	ldr	r1, [pc, #132]	@ (800c648 <__kernel_cos+0x180>)
 800c5c4:	4598      	cmp	r8, r3
 800c5c6:	bf8c      	ite	hi
 800c5c8:	4d21      	ldrhi	r5, [pc, #132]	@ (800c650 <__kernel_cos+0x188>)
 800c5ca:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800c5ce:	2400      	movs	r4, #0
 800c5d0:	4622      	mov	r2, r4
 800c5d2:	462b      	mov	r3, r5
 800c5d4:	2000      	movs	r0, #0
 800c5d6:	f7f3 fe07 	bl	80001e8 <__aeabi_dsub>
 800c5da:	4622      	mov	r2, r4
 800c5dc:	4680      	mov	r8, r0
 800c5de:	4689      	mov	r9, r1
 800c5e0:	462b      	mov	r3, r5
 800c5e2:	4650      	mov	r0, sl
 800c5e4:	4659      	mov	r1, fp
 800c5e6:	f7f3 fdff 	bl	80001e8 <__aeabi_dsub>
 800c5ea:	4632      	mov	r2, r6
 800c5ec:	463b      	mov	r3, r7
 800c5ee:	f7f3 fdfb 	bl	80001e8 <__aeabi_dsub>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	4640      	mov	r0, r8
 800c5f8:	4649      	mov	r1, r9
 800c5fa:	e7da      	b.n	800c5b2 <__kernel_cos+0xea>
 800c5fc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800c638 <__kernel_cos+0x170>
 800c600:	e7db      	b.n	800c5ba <__kernel_cos+0xf2>
 800c602:	bf00      	nop
 800c604:	f3af 8000 	nop.w
 800c608:	be8838d4 	.word	0xbe8838d4
 800c60c:	bda8fae9 	.word	0xbda8fae9
 800c610:	bdb4b1c4 	.word	0xbdb4b1c4
 800c614:	3e21ee9e 	.word	0x3e21ee9e
 800c618:	809c52ad 	.word	0x809c52ad
 800c61c:	3e927e4f 	.word	0x3e927e4f
 800c620:	19cb1590 	.word	0x19cb1590
 800c624:	3efa01a0 	.word	0x3efa01a0
 800c628:	16c15177 	.word	0x16c15177
 800c62c:	3f56c16c 	.word	0x3f56c16c
 800c630:	5555554c 	.word	0x5555554c
 800c634:	3fa55555 	.word	0x3fa55555
 800c638:	00000000 	.word	0x00000000
 800c63c:	3ff00000 	.word	0x3ff00000
 800c640:	3fe00000 	.word	0x3fe00000
 800c644:	3fd33332 	.word	0x3fd33332
 800c648:	3ff00000 	.word	0x3ff00000
 800c64c:	3fe90000 	.word	0x3fe90000
 800c650:	3fd20000 	.word	0x3fd20000
 800c654:	00000000 	.word	0x00000000

0800c658 <__kernel_sin>:
 800c658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65c:	ec55 4b10 	vmov	r4, r5, d0
 800c660:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c664:	b085      	sub	sp, #20
 800c666:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c66a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c66e:	4680      	mov	r8, r0
 800c670:	d205      	bcs.n	800c67e <__kernel_sin+0x26>
 800c672:	4620      	mov	r0, r4
 800c674:	4629      	mov	r1, r5
 800c676:	f7f4 fa1f 	bl	8000ab8 <__aeabi_d2iz>
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d052      	beq.n	800c724 <__kernel_sin+0xcc>
 800c67e:	4622      	mov	r2, r4
 800c680:	462b      	mov	r3, r5
 800c682:	4620      	mov	r0, r4
 800c684:	4629      	mov	r1, r5
 800c686:	f7f3 ff67 	bl	8000558 <__aeabi_dmul>
 800c68a:	4682      	mov	sl, r0
 800c68c:	468b      	mov	fp, r1
 800c68e:	4602      	mov	r2, r0
 800c690:	460b      	mov	r3, r1
 800c692:	4620      	mov	r0, r4
 800c694:	4629      	mov	r1, r5
 800c696:	f7f3 ff5f 	bl	8000558 <__aeabi_dmul>
 800c69a:	a342      	add	r3, pc, #264	@ (adr r3, 800c7a4 <__kernel_sin+0x14c>)
 800c69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a0:	e9cd 0100 	strd	r0, r1, [sp]
 800c6a4:	4650      	mov	r0, sl
 800c6a6:	4659      	mov	r1, fp
 800c6a8:	f7f3 ff56 	bl	8000558 <__aeabi_dmul>
 800c6ac:	a33f      	add	r3, pc, #252	@ (adr r3, 800c7ac <__kernel_sin+0x154>)
 800c6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b2:	f7f3 fd99 	bl	80001e8 <__aeabi_dsub>
 800c6b6:	4652      	mov	r2, sl
 800c6b8:	465b      	mov	r3, fp
 800c6ba:	f7f3 ff4d 	bl	8000558 <__aeabi_dmul>
 800c6be:	a33d      	add	r3, pc, #244	@ (adr r3, 800c7b4 <__kernel_sin+0x15c>)
 800c6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c4:	f7f3 fd92 	bl	80001ec <__adddf3>
 800c6c8:	4652      	mov	r2, sl
 800c6ca:	465b      	mov	r3, fp
 800c6cc:	f7f3 ff44 	bl	8000558 <__aeabi_dmul>
 800c6d0:	a33a      	add	r3, pc, #232	@ (adr r3, 800c7bc <__kernel_sin+0x164>)
 800c6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d6:	f7f3 fd87 	bl	80001e8 <__aeabi_dsub>
 800c6da:	4652      	mov	r2, sl
 800c6dc:	465b      	mov	r3, fp
 800c6de:	f7f3 ff3b 	bl	8000558 <__aeabi_dmul>
 800c6e2:	a338      	add	r3, pc, #224	@ (adr r3, 800c7c4 <__kernel_sin+0x16c>)
 800c6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e8:	f7f3 fd80 	bl	80001ec <__adddf3>
 800c6ec:	4606      	mov	r6, r0
 800c6ee:	460f      	mov	r7, r1
 800c6f0:	f1b8 0f00 	cmp.w	r8, #0
 800c6f4:	d11b      	bne.n	800c72e <__kernel_sin+0xd6>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	4650      	mov	r0, sl
 800c6fc:	4659      	mov	r1, fp
 800c6fe:	f7f3 ff2b 	bl	8000558 <__aeabi_dmul>
 800c702:	a325      	add	r3, pc, #148	@ (adr r3, 800c798 <__kernel_sin+0x140>)
 800c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c708:	f7f3 fd6e 	bl	80001e8 <__aeabi_dsub>
 800c70c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c710:	f7f3 ff22 	bl	8000558 <__aeabi_dmul>
 800c714:	4602      	mov	r2, r0
 800c716:	460b      	mov	r3, r1
 800c718:	4620      	mov	r0, r4
 800c71a:	4629      	mov	r1, r5
 800c71c:	f7f3 fd66 	bl	80001ec <__adddf3>
 800c720:	4604      	mov	r4, r0
 800c722:	460d      	mov	r5, r1
 800c724:	ec45 4b10 	vmov	d0, r4, r5
 800c728:	b005      	add	sp, #20
 800c72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c732:	4b1b      	ldr	r3, [pc, #108]	@ (800c7a0 <__kernel_sin+0x148>)
 800c734:	2200      	movs	r2, #0
 800c736:	f7f3 ff0f 	bl	8000558 <__aeabi_dmul>
 800c73a:	4632      	mov	r2, r6
 800c73c:	4680      	mov	r8, r0
 800c73e:	4689      	mov	r9, r1
 800c740:	463b      	mov	r3, r7
 800c742:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c746:	f7f3 ff07 	bl	8000558 <__aeabi_dmul>
 800c74a:	4602      	mov	r2, r0
 800c74c:	460b      	mov	r3, r1
 800c74e:	4640      	mov	r0, r8
 800c750:	4649      	mov	r1, r9
 800c752:	f7f3 fd49 	bl	80001e8 <__aeabi_dsub>
 800c756:	4652      	mov	r2, sl
 800c758:	465b      	mov	r3, fp
 800c75a:	f7f3 fefd 	bl	8000558 <__aeabi_dmul>
 800c75e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c762:	f7f3 fd41 	bl	80001e8 <__aeabi_dsub>
 800c766:	a30c      	add	r3, pc, #48	@ (adr r3, 800c798 <__kernel_sin+0x140>)
 800c768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76c:	4606      	mov	r6, r0
 800c76e:	460f      	mov	r7, r1
 800c770:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c774:	f7f3 fef0 	bl	8000558 <__aeabi_dmul>
 800c778:	4602      	mov	r2, r0
 800c77a:	460b      	mov	r3, r1
 800c77c:	4630      	mov	r0, r6
 800c77e:	4639      	mov	r1, r7
 800c780:	f7f3 fd34 	bl	80001ec <__adddf3>
 800c784:	4602      	mov	r2, r0
 800c786:	460b      	mov	r3, r1
 800c788:	4620      	mov	r0, r4
 800c78a:	4629      	mov	r1, r5
 800c78c:	f7f3 fd2c 	bl	80001e8 <__aeabi_dsub>
 800c790:	e7c6      	b.n	800c720 <__kernel_sin+0xc8>
 800c792:	bf00      	nop
 800c794:	f3af 8000 	nop.w
 800c798:	55555549 	.word	0x55555549
 800c79c:	3fc55555 	.word	0x3fc55555
 800c7a0:	3fe00000 	.word	0x3fe00000
 800c7a4:	5acfd57c 	.word	0x5acfd57c
 800c7a8:	3de5d93a 	.word	0x3de5d93a
 800c7ac:	8a2b9ceb 	.word	0x8a2b9ceb
 800c7b0:	3e5ae5e6 	.word	0x3e5ae5e6
 800c7b4:	57b1fe7d 	.word	0x57b1fe7d
 800c7b8:	3ec71de3 	.word	0x3ec71de3
 800c7bc:	19c161d5 	.word	0x19c161d5
 800c7c0:	3f2a01a0 	.word	0x3f2a01a0
 800c7c4:	1110f8a6 	.word	0x1110f8a6
 800c7c8:	3f811111 	.word	0x3f811111
 800c7cc:	00000000 	.word	0x00000000

0800c7d0 <__kernel_tan>:
 800c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	ec5b ab10 	vmov	sl, fp, d0
 800c7d8:	4bdb      	ldr	r3, [pc, #876]	@ (800cb48 <__kernel_tan+0x378>)
 800c7da:	b089      	sub	sp, #36	@ 0x24
 800c7dc:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 800c7e0:	429f      	cmp	r7, r3
 800c7e2:	ec59 8b11 	vmov	r8, r9, d1
 800c7e6:	4606      	mov	r6, r0
 800c7e8:	f8cd b008 	str.w	fp, [sp, #8]
 800c7ec:	d85d      	bhi.n	800c8aa <__kernel_tan+0xda>
 800c7ee:	4650      	mov	r0, sl
 800c7f0:	4659      	mov	r1, fp
 800c7f2:	f7f4 f961 	bl	8000ab8 <__aeabi_d2iz>
 800c7f6:	4605      	mov	r5, r0
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	d17c      	bne.n	800c8f6 <__kernel_tan+0x126>
 800c7fc:	1c73      	adds	r3, r6, #1
 800c7fe:	4652      	mov	r2, sl
 800c800:	4313      	orrs	r3, r2
 800c802:	433b      	orrs	r3, r7
 800c804:	d110      	bne.n	800c828 <__kernel_tan+0x58>
 800c806:	ec4b ab10 	vmov	d0, sl, fp
 800c80a:	f7ff fcdd 	bl	800c1c8 <fabs>
 800c80e:	49cf      	ldr	r1, [pc, #828]	@ (800cb4c <__kernel_tan+0x37c>)
 800c810:	ec53 2b10 	vmov	r2, r3, d0
 800c814:	2000      	movs	r0, #0
 800c816:	f7f3 ffc9 	bl	80007ac <__aeabi_ddiv>
 800c81a:	4682      	mov	sl, r0
 800c81c:	468b      	mov	fp, r1
 800c81e:	ec4b ab10 	vmov	d0, sl, fp
 800c822:	b009      	add	sp, #36	@ 0x24
 800c824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c828:	2e01      	cmp	r6, #1
 800c82a:	d0f8      	beq.n	800c81e <__kernel_tan+0x4e>
 800c82c:	4642      	mov	r2, r8
 800c82e:	464b      	mov	r3, r9
 800c830:	4650      	mov	r0, sl
 800c832:	4659      	mov	r1, fp
 800c834:	f7f3 fcda 	bl	80001ec <__adddf3>
 800c838:	4602      	mov	r2, r0
 800c83a:	460b      	mov	r3, r1
 800c83c:	460f      	mov	r7, r1
 800c83e:	2000      	movs	r0, #0
 800c840:	49c3      	ldr	r1, [pc, #780]	@ (800cb50 <__kernel_tan+0x380>)
 800c842:	f7f3 ffb3 	bl	80007ac <__aeabi_ddiv>
 800c846:	e9cd 0100 	strd	r0, r1, [sp]
 800c84a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c84e:	462e      	mov	r6, r5
 800c850:	4652      	mov	r2, sl
 800c852:	462c      	mov	r4, r5
 800c854:	4630      	mov	r0, r6
 800c856:	461d      	mov	r5, r3
 800c858:	4639      	mov	r1, r7
 800c85a:	465b      	mov	r3, fp
 800c85c:	f7f3 fcc4 	bl	80001e8 <__aeabi_dsub>
 800c860:	4602      	mov	r2, r0
 800c862:	460b      	mov	r3, r1
 800c864:	4640      	mov	r0, r8
 800c866:	4649      	mov	r1, r9
 800c868:	f7f3 fcbe 	bl	80001e8 <__aeabi_dsub>
 800c86c:	4632      	mov	r2, r6
 800c86e:	462b      	mov	r3, r5
 800c870:	f7f3 fe72 	bl	8000558 <__aeabi_dmul>
 800c874:	4632      	mov	r2, r6
 800c876:	4682      	mov	sl, r0
 800c878:	468b      	mov	fp, r1
 800c87a:	462b      	mov	r3, r5
 800c87c:	4630      	mov	r0, r6
 800c87e:	4639      	mov	r1, r7
 800c880:	f7f3 fe6a 	bl	8000558 <__aeabi_dmul>
 800c884:	4bb1      	ldr	r3, [pc, #708]	@ (800cb4c <__kernel_tan+0x37c>)
 800c886:	2200      	movs	r2, #0
 800c888:	f7f3 fcb0 	bl	80001ec <__adddf3>
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	4650      	mov	r0, sl
 800c892:	4659      	mov	r1, fp
 800c894:	f7f3 fcaa 	bl	80001ec <__adddf3>
 800c898:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c89c:	f7f3 fe5c 	bl	8000558 <__aeabi_dmul>
 800c8a0:	4622      	mov	r2, r4
 800c8a2:	462b      	mov	r3, r5
 800c8a4:	f7f3 fca2 	bl	80001ec <__adddf3>
 800c8a8:	e7b7      	b.n	800c81a <__kernel_tan+0x4a>
 800c8aa:	4baa      	ldr	r3, [pc, #680]	@ (800cb54 <__kernel_tan+0x384>)
 800c8ac:	429f      	cmp	r7, r3
 800c8ae:	d922      	bls.n	800c8f6 <__kernel_tan+0x126>
 800c8b0:	9b02      	ldr	r3, [sp, #8]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	da05      	bge.n	800c8c2 <__kernel_tan+0xf2>
 800c8b6:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c8ba:	469b      	mov	fp, r3
 800c8bc:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800c8c0:	4699      	mov	r9, r3
 800c8c2:	4652      	mov	r2, sl
 800c8c4:	465b      	mov	r3, fp
 800c8c6:	a182      	add	r1, pc, #520	@ (adr r1, 800cad0 <__kernel_tan+0x300>)
 800c8c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8cc:	f7f3 fc8c 	bl	80001e8 <__aeabi_dsub>
 800c8d0:	4642      	mov	r2, r8
 800c8d2:	464b      	mov	r3, r9
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	460d      	mov	r5, r1
 800c8d8:	a17f      	add	r1, pc, #508	@ (adr r1, 800cad8 <__kernel_tan+0x308>)
 800c8da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8de:	f7f3 fc83 	bl	80001e8 <__aeabi_dsub>
 800c8e2:	4622      	mov	r2, r4
 800c8e4:	462b      	mov	r3, r5
 800c8e6:	f7f3 fc81 	bl	80001ec <__adddf3>
 800c8ea:	f04f 0800 	mov.w	r8, #0
 800c8ee:	4682      	mov	sl, r0
 800c8f0:	468b      	mov	fp, r1
 800c8f2:	f04f 0900 	mov.w	r9, #0
 800c8f6:	4652      	mov	r2, sl
 800c8f8:	465b      	mov	r3, fp
 800c8fa:	4650      	mov	r0, sl
 800c8fc:	4659      	mov	r1, fp
 800c8fe:	f7f3 fe2b 	bl	8000558 <__aeabi_dmul>
 800c902:	4602      	mov	r2, r0
 800c904:	460b      	mov	r3, r1
 800c906:	e9cd 2300 	strd	r2, r3, [sp]
 800c90a:	f7f3 fe25 	bl	8000558 <__aeabi_dmul>
 800c90e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c912:	4604      	mov	r4, r0
 800c914:	460d      	mov	r5, r1
 800c916:	4650      	mov	r0, sl
 800c918:	4659      	mov	r1, fp
 800c91a:	f7f3 fe1d 	bl	8000558 <__aeabi_dmul>
 800c91e:	a370      	add	r3, pc, #448	@ (adr r3, 800cae0 <__kernel_tan+0x310>)
 800c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c928:	4620      	mov	r0, r4
 800c92a:	4629      	mov	r1, r5
 800c92c:	f7f3 fe14 	bl	8000558 <__aeabi_dmul>
 800c930:	a36d      	add	r3, pc, #436	@ (adr r3, 800cae8 <__kernel_tan+0x318>)
 800c932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c936:	f7f3 fc59 	bl	80001ec <__adddf3>
 800c93a:	4622      	mov	r2, r4
 800c93c:	462b      	mov	r3, r5
 800c93e:	f7f3 fe0b 	bl	8000558 <__aeabi_dmul>
 800c942:	a36b      	add	r3, pc, #428	@ (adr r3, 800caf0 <__kernel_tan+0x320>)
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	f7f3 fc50 	bl	80001ec <__adddf3>
 800c94c:	4622      	mov	r2, r4
 800c94e:	462b      	mov	r3, r5
 800c950:	f7f3 fe02 	bl	8000558 <__aeabi_dmul>
 800c954:	a368      	add	r3, pc, #416	@ (adr r3, 800caf8 <__kernel_tan+0x328>)
 800c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95a:	f7f3 fc47 	bl	80001ec <__adddf3>
 800c95e:	4622      	mov	r2, r4
 800c960:	462b      	mov	r3, r5
 800c962:	f7f3 fdf9 	bl	8000558 <__aeabi_dmul>
 800c966:	a366      	add	r3, pc, #408	@ (adr r3, 800cb00 <__kernel_tan+0x330>)
 800c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96c:	f7f3 fc3e 	bl	80001ec <__adddf3>
 800c970:	4622      	mov	r2, r4
 800c972:	462b      	mov	r3, r5
 800c974:	f7f3 fdf0 	bl	8000558 <__aeabi_dmul>
 800c978:	a363      	add	r3, pc, #396	@ (adr r3, 800cb08 <__kernel_tan+0x338>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	f7f3 fc35 	bl	80001ec <__adddf3>
 800c982:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c986:	f7f3 fde7 	bl	8000558 <__aeabi_dmul>
 800c98a:	a361      	add	r3, pc, #388	@ (adr r3, 800cb10 <__kernel_tan+0x340>)
 800c98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c990:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c994:	4620      	mov	r0, r4
 800c996:	4629      	mov	r1, r5
 800c998:	f7f3 fdde 	bl	8000558 <__aeabi_dmul>
 800c99c:	a35e      	add	r3, pc, #376	@ (adr r3, 800cb18 <__kernel_tan+0x348>)
 800c99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a2:	f7f3 fc23 	bl	80001ec <__adddf3>
 800c9a6:	4622      	mov	r2, r4
 800c9a8:	462b      	mov	r3, r5
 800c9aa:	f7f3 fdd5 	bl	8000558 <__aeabi_dmul>
 800c9ae:	a35c      	add	r3, pc, #368	@ (adr r3, 800cb20 <__kernel_tan+0x350>)
 800c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b4:	f7f3 fc1a 	bl	80001ec <__adddf3>
 800c9b8:	4622      	mov	r2, r4
 800c9ba:	462b      	mov	r3, r5
 800c9bc:	f7f3 fdcc 	bl	8000558 <__aeabi_dmul>
 800c9c0:	a359      	add	r3, pc, #356	@ (adr r3, 800cb28 <__kernel_tan+0x358>)
 800c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c6:	f7f3 fc11 	bl	80001ec <__adddf3>
 800c9ca:	4622      	mov	r2, r4
 800c9cc:	462b      	mov	r3, r5
 800c9ce:	f7f3 fdc3 	bl	8000558 <__aeabi_dmul>
 800c9d2:	a357      	add	r3, pc, #348	@ (adr r3, 800cb30 <__kernel_tan+0x360>)
 800c9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d8:	f7f3 fc08 	bl	80001ec <__adddf3>
 800c9dc:	4622      	mov	r2, r4
 800c9de:	462b      	mov	r3, r5
 800c9e0:	f7f3 fdba 	bl	8000558 <__aeabi_dmul>
 800c9e4:	a354      	add	r3, pc, #336	@ (adr r3, 800cb38 <__kernel_tan+0x368>)
 800c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ea:	f7f3 fbff 	bl	80001ec <__adddf3>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9f6:	f7f3 fbf9 	bl	80001ec <__adddf3>
 800c9fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9fe:	f7f3 fdab 	bl	8000558 <__aeabi_dmul>
 800ca02:	4642      	mov	r2, r8
 800ca04:	464b      	mov	r3, r9
 800ca06:	f7f3 fbf1 	bl	80001ec <__adddf3>
 800ca0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca0e:	f7f3 fda3 	bl	8000558 <__aeabi_dmul>
 800ca12:	4642      	mov	r2, r8
 800ca14:	464b      	mov	r3, r9
 800ca16:	f7f3 fbe9 	bl	80001ec <__adddf3>
 800ca1a:	a349      	add	r3, pc, #292	@ (adr r3, 800cb40 <__kernel_tan+0x370>)
 800ca1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca20:	4604      	mov	r4, r0
 800ca22:	460d      	mov	r5, r1
 800ca24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ca28:	f7f3 fd96 	bl	8000558 <__aeabi_dmul>
 800ca2c:	4622      	mov	r2, r4
 800ca2e:	462b      	mov	r3, r5
 800ca30:	f7f3 fbdc 	bl	80001ec <__adddf3>
 800ca34:	e9cd 0100 	strd	r0, r1, [sp]
 800ca38:	460b      	mov	r3, r1
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	4659      	mov	r1, fp
 800ca3e:	4650      	mov	r0, sl
 800ca40:	f7f3 fbd4 	bl	80001ec <__adddf3>
 800ca44:	4b43      	ldr	r3, [pc, #268]	@ (800cb54 <__kernel_tan+0x384>)
 800ca46:	429f      	cmp	r7, r3
 800ca48:	4604      	mov	r4, r0
 800ca4a:	460d      	mov	r5, r1
 800ca4c:	f240 8084 	bls.w	800cb58 <__kernel_tan+0x388>
 800ca50:	4630      	mov	r0, r6
 800ca52:	f7f3 fd17 	bl	8000484 <__aeabi_i2d>
 800ca56:	4622      	mov	r2, r4
 800ca58:	4680      	mov	r8, r0
 800ca5a:	4689      	mov	r9, r1
 800ca5c:	462b      	mov	r3, r5
 800ca5e:	4620      	mov	r0, r4
 800ca60:	4629      	mov	r1, r5
 800ca62:	f7f3 fd79 	bl	8000558 <__aeabi_dmul>
 800ca66:	4642      	mov	r2, r8
 800ca68:	4606      	mov	r6, r0
 800ca6a:	460f      	mov	r7, r1
 800ca6c:	464b      	mov	r3, r9
 800ca6e:	4620      	mov	r0, r4
 800ca70:	4629      	mov	r1, r5
 800ca72:	f7f3 fbbb 	bl	80001ec <__adddf3>
 800ca76:	4602      	mov	r2, r0
 800ca78:	460b      	mov	r3, r1
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	4639      	mov	r1, r7
 800ca7e:	f7f3 fe95 	bl	80007ac <__aeabi_ddiv>
 800ca82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca86:	f7f3 fbaf 	bl	80001e8 <__aeabi_dsub>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	4650      	mov	r0, sl
 800ca90:	4659      	mov	r1, fp
 800ca92:	f7f3 fba9 	bl	80001e8 <__aeabi_dsub>
 800ca96:	4602      	mov	r2, r0
 800ca98:	460b      	mov	r3, r1
 800ca9a:	f7f3 fba7 	bl	80001ec <__adddf3>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	4640      	mov	r0, r8
 800caa4:	4649      	mov	r1, r9
 800caa6:	f7f3 fb9f 	bl	80001e8 <__aeabi_dsub>
 800caaa:	9b02      	ldr	r3, [sp, #8]
 800caac:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800cab0:	f00a 0a02 	and.w	sl, sl, #2
 800cab4:	4604      	mov	r4, r0
 800cab6:	f1ca 0001 	rsb	r0, sl, #1
 800caba:	460d      	mov	r5, r1
 800cabc:	f7f3 fce2 	bl	8000484 <__aeabi_i2d>
 800cac0:	4602      	mov	r2, r0
 800cac2:	460b      	mov	r3, r1
 800cac4:	4620      	mov	r0, r4
 800cac6:	4629      	mov	r1, r5
 800cac8:	f7f3 fd46 	bl	8000558 <__aeabi_dmul>
 800cacc:	e6a5      	b.n	800c81a <__kernel_tan+0x4a>
 800cace:	bf00      	nop
 800cad0:	54442d18 	.word	0x54442d18
 800cad4:	3fe921fb 	.word	0x3fe921fb
 800cad8:	33145c07 	.word	0x33145c07
 800cadc:	3c81a626 	.word	0x3c81a626
 800cae0:	74bf7ad4 	.word	0x74bf7ad4
 800cae4:	3efb2a70 	.word	0x3efb2a70
 800cae8:	32f0a7e9 	.word	0x32f0a7e9
 800caec:	3f12b80f 	.word	0x3f12b80f
 800caf0:	1a8d1068 	.word	0x1a8d1068
 800caf4:	3f3026f7 	.word	0x3f3026f7
 800caf8:	fee08315 	.word	0xfee08315
 800cafc:	3f57dbc8 	.word	0x3f57dbc8
 800cb00:	e96e8493 	.word	0xe96e8493
 800cb04:	3f8226e3 	.word	0x3f8226e3
 800cb08:	1bb341fe 	.word	0x1bb341fe
 800cb0c:	3faba1ba 	.word	0x3faba1ba
 800cb10:	db605373 	.word	0xdb605373
 800cb14:	bef375cb 	.word	0xbef375cb
 800cb18:	a03792a6 	.word	0xa03792a6
 800cb1c:	3f147e88 	.word	0x3f147e88
 800cb20:	f2f26501 	.word	0xf2f26501
 800cb24:	3f4344d8 	.word	0x3f4344d8
 800cb28:	c9560328 	.word	0xc9560328
 800cb2c:	3f6d6d22 	.word	0x3f6d6d22
 800cb30:	8406d637 	.word	0x8406d637
 800cb34:	3f9664f4 	.word	0x3f9664f4
 800cb38:	1110fe7a 	.word	0x1110fe7a
 800cb3c:	3fc11111 	.word	0x3fc11111
 800cb40:	55555563 	.word	0x55555563
 800cb44:	3fd55555 	.word	0x3fd55555
 800cb48:	3e2fffff 	.word	0x3e2fffff
 800cb4c:	3ff00000 	.word	0x3ff00000
 800cb50:	bff00000 	.word	0xbff00000
 800cb54:	3fe59427 	.word	0x3fe59427
 800cb58:	2e01      	cmp	r6, #1
 800cb5a:	d033      	beq.n	800cbc4 <__kernel_tan+0x3f4>
 800cb5c:	f04f 0800 	mov.w	r8, #0
 800cb60:	4689      	mov	r9, r1
 800cb62:	4602      	mov	r2, r0
 800cb64:	460b      	mov	r3, r1
 800cb66:	2000      	movs	r0, #0
 800cb68:	4918      	ldr	r1, [pc, #96]	@ (800cbcc <__kernel_tan+0x3fc>)
 800cb6a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800cb6e:	f7f3 fe1d 	bl	80007ac <__aeabi_ddiv>
 800cb72:	4652      	mov	r2, sl
 800cb74:	460f      	mov	r7, r1
 800cb76:	465b      	mov	r3, fp
 800cb78:	4606      	mov	r6, r0
 800cb7a:	460d      	mov	r5, r1
 800cb7c:	4640      	mov	r0, r8
 800cb7e:	4649      	mov	r1, r9
 800cb80:	f7f3 fb32 	bl	80001e8 <__aeabi_dsub>
 800cb84:	4602      	mov	r2, r0
 800cb86:	460b      	mov	r3, r1
 800cb88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb8c:	f7f3 fb2c 	bl	80001e8 <__aeabi_dsub>
 800cb90:	4642      	mov	r2, r8
 800cb92:	463b      	mov	r3, r7
 800cb94:	f7f3 fce0 	bl	8000558 <__aeabi_dmul>
 800cb98:	4642      	mov	r2, r8
 800cb9a:	4682      	mov	sl, r0
 800cb9c:	468b      	mov	fp, r1
 800cb9e:	463b      	mov	r3, r7
 800cba0:	4640      	mov	r0, r8
 800cba2:	4649      	mov	r1, r9
 800cba4:	f7f3 fcd8 	bl	8000558 <__aeabi_dmul>
 800cba8:	4b09      	ldr	r3, [pc, #36]	@ (800cbd0 <__kernel_tan+0x400>)
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f7f3 fb1e 	bl	80001ec <__adddf3>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	4650      	mov	r0, sl
 800cbb6:	4659      	mov	r1, fp
 800cbb8:	f7f3 fb18 	bl	80001ec <__adddf3>
 800cbbc:	4644      	mov	r4, r8
 800cbbe:	4632      	mov	r2, r6
 800cbc0:	463b      	mov	r3, r7
 800cbc2:	e66b      	b.n	800c89c <__kernel_tan+0xcc>
 800cbc4:	4682      	mov	sl, r0
 800cbc6:	468b      	mov	fp, r1
 800cbc8:	e629      	b.n	800c81e <__kernel_tan+0x4e>
 800cbca:	bf00      	nop
 800cbcc:	bff00000 	.word	0xbff00000
 800cbd0:	3ff00000 	.word	0x3ff00000
 800cbd4:	00000000 	.word	0x00000000

0800cbd8 <__ieee754_acos>:
 800cbd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbdc:	ec55 4b10 	vmov	r4, r5, d0
 800cbe0:	49b7      	ldr	r1, [pc, #732]	@ (800cec0 <__ieee754_acos+0x2e8>)
 800cbe2:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800cbe6:	428b      	cmp	r3, r1
 800cbe8:	d919      	bls.n	800cc1e <__ieee754_acos+0x46>
 800cbea:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800cbee:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800cbf2:	4323      	orrs	r3, r4
 800cbf4:	d106      	bne.n	800cc04 <__ieee754_acos+0x2c>
 800cbf6:	2d00      	cmp	r5, #0
 800cbf8:	f340 8210 	ble.w	800d01c <__ieee754_acos+0x444>
 800cbfc:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 800ce50 <__ieee754_acos+0x278>
 800cc00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc04:	4622      	mov	r2, r4
 800cc06:	462b      	mov	r3, r5
 800cc08:	4620      	mov	r0, r4
 800cc0a:	4629      	mov	r1, r5
 800cc0c:	f7f3 faec 	bl	80001e8 <__aeabi_dsub>
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
 800cc14:	f7f3 fdca 	bl	80007ac <__aeabi_ddiv>
 800cc18:	ec41 0b10 	vmov	d0, r0, r1
 800cc1c:	e7f0      	b.n	800cc00 <__ieee754_acos+0x28>
 800cc1e:	49a9      	ldr	r1, [pc, #676]	@ (800cec4 <__ieee754_acos+0x2ec>)
 800cc20:	428b      	cmp	r3, r1
 800cc22:	f200 8085 	bhi.w	800cd30 <__ieee754_acos+0x158>
 800cc26:	4aa8      	ldr	r2, [pc, #672]	@ (800cec8 <__ieee754_acos+0x2f0>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	f240 81fa 	bls.w	800d022 <__ieee754_acos+0x44a>
 800cc2e:	4622      	mov	r2, r4
 800cc30:	462b      	mov	r3, r5
 800cc32:	4620      	mov	r0, r4
 800cc34:	4629      	mov	r1, r5
 800cc36:	f7f3 fc8f 	bl	8000558 <__aeabi_dmul>
 800cc3a:	a387      	add	r3, pc, #540	@ (adr r3, 800ce58 <__ieee754_acos+0x280>)
 800cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc40:	4606      	mov	r6, r0
 800cc42:	460f      	mov	r7, r1
 800cc44:	f7f3 fc88 	bl	8000558 <__aeabi_dmul>
 800cc48:	a385      	add	r3, pc, #532	@ (adr r3, 800ce60 <__ieee754_acos+0x288>)
 800cc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4e:	f7f3 facd 	bl	80001ec <__adddf3>
 800cc52:	4632      	mov	r2, r6
 800cc54:	463b      	mov	r3, r7
 800cc56:	f7f3 fc7f 	bl	8000558 <__aeabi_dmul>
 800cc5a:	a383      	add	r3, pc, #524	@ (adr r3, 800ce68 <__ieee754_acos+0x290>)
 800cc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc60:	f7f3 fac2 	bl	80001e8 <__aeabi_dsub>
 800cc64:	4632      	mov	r2, r6
 800cc66:	463b      	mov	r3, r7
 800cc68:	f7f3 fc76 	bl	8000558 <__aeabi_dmul>
 800cc6c:	a380      	add	r3, pc, #512	@ (adr r3, 800ce70 <__ieee754_acos+0x298>)
 800cc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc72:	f7f3 fabb 	bl	80001ec <__adddf3>
 800cc76:	4632      	mov	r2, r6
 800cc78:	463b      	mov	r3, r7
 800cc7a:	f7f3 fc6d 	bl	8000558 <__aeabi_dmul>
 800cc7e:	a37e      	add	r3, pc, #504	@ (adr r3, 800ce78 <__ieee754_acos+0x2a0>)
 800cc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc84:	f7f3 fab0 	bl	80001e8 <__aeabi_dsub>
 800cc88:	4632      	mov	r2, r6
 800cc8a:	463b      	mov	r3, r7
 800cc8c:	f7f3 fc64 	bl	8000558 <__aeabi_dmul>
 800cc90:	a37b      	add	r3, pc, #492	@ (adr r3, 800ce80 <__ieee754_acos+0x2a8>)
 800cc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc96:	f7f3 faa9 	bl	80001ec <__adddf3>
 800cc9a:	4632      	mov	r2, r6
 800cc9c:	463b      	mov	r3, r7
 800cc9e:	f7f3 fc5b 	bl	8000558 <__aeabi_dmul>
 800cca2:	a379      	add	r3, pc, #484	@ (adr r3, 800ce88 <__ieee754_acos+0x2b0>)
 800cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca8:	4680      	mov	r8, r0
 800ccaa:	4689      	mov	r9, r1
 800ccac:	4630      	mov	r0, r6
 800ccae:	4639      	mov	r1, r7
 800ccb0:	f7f3 fc52 	bl	8000558 <__aeabi_dmul>
 800ccb4:	a376      	add	r3, pc, #472	@ (adr r3, 800ce90 <__ieee754_acos+0x2b8>)
 800ccb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccba:	f7f3 fa95 	bl	80001e8 <__aeabi_dsub>
 800ccbe:	4632      	mov	r2, r6
 800ccc0:	463b      	mov	r3, r7
 800ccc2:	f7f3 fc49 	bl	8000558 <__aeabi_dmul>
 800ccc6:	a374      	add	r3, pc, #464	@ (adr r3, 800ce98 <__ieee754_acos+0x2c0>)
 800ccc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cccc:	f7f3 fa8e 	bl	80001ec <__adddf3>
 800ccd0:	4632      	mov	r2, r6
 800ccd2:	463b      	mov	r3, r7
 800ccd4:	f7f3 fc40 	bl	8000558 <__aeabi_dmul>
 800ccd8:	a371      	add	r3, pc, #452	@ (adr r3, 800cea0 <__ieee754_acos+0x2c8>)
 800ccda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccde:	f7f3 fa83 	bl	80001e8 <__aeabi_dsub>
 800cce2:	4632      	mov	r2, r6
 800cce4:	463b      	mov	r3, r7
 800cce6:	f7f3 fc37 	bl	8000558 <__aeabi_dmul>
 800ccea:	4b78      	ldr	r3, [pc, #480]	@ (800cecc <__ieee754_acos+0x2f4>)
 800ccec:	2200      	movs	r2, #0
 800ccee:	f7f3 fa7d 	bl	80001ec <__adddf3>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	4640      	mov	r0, r8
 800ccf8:	4649      	mov	r1, r9
 800ccfa:	f7f3 fd57 	bl	80007ac <__aeabi_ddiv>
 800ccfe:	4622      	mov	r2, r4
 800cd00:	462b      	mov	r3, r5
 800cd02:	f7f3 fc29 	bl	8000558 <__aeabi_dmul>
 800cd06:	4602      	mov	r2, r0
 800cd08:	460b      	mov	r3, r1
 800cd0a:	a167      	add	r1, pc, #412	@ (adr r1, 800cea8 <__ieee754_acos+0x2d0>)
 800cd0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd10:	f7f3 fa6a 	bl	80001e8 <__aeabi_dsub>
 800cd14:	4602      	mov	r2, r0
 800cd16:	460b      	mov	r3, r1
 800cd18:	4620      	mov	r0, r4
 800cd1a:	4629      	mov	r1, r5
 800cd1c:	f7f3 fa64 	bl	80001e8 <__aeabi_dsub>
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	a162      	add	r1, pc, #392	@ (adr r1, 800ceb0 <__ieee754_acos+0x2d8>)
 800cd26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd2a:	f7f3 fa5d 	bl	80001e8 <__aeabi_dsub>
 800cd2e:	e773      	b.n	800cc18 <__ieee754_acos+0x40>
 800cd30:	2d00      	cmp	r5, #0
 800cd32:	f280 80cf 	bge.w	800ced4 <__ieee754_acos+0x2fc>
 800cd36:	4b65      	ldr	r3, [pc, #404]	@ (800cecc <__ieee754_acos+0x2f4>)
 800cd38:	2200      	movs	r2, #0
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	4629      	mov	r1, r5
 800cd3e:	f7f3 fa55 	bl	80001ec <__adddf3>
 800cd42:	4b63      	ldr	r3, [pc, #396]	@ (800ced0 <__ieee754_acos+0x2f8>)
 800cd44:	2200      	movs	r2, #0
 800cd46:	f7f3 fc07 	bl	8000558 <__aeabi_dmul>
 800cd4a:	a343      	add	r3, pc, #268	@ (adr r3, 800ce58 <__ieee754_acos+0x280>)
 800cd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd50:	4604      	mov	r4, r0
 800cd52:	460d      	mov	r5, r1
 800cd54:	f7f3 fc00 	bl	8000558 <__aeabi_dmul>
 800cd58:	a341      	add	r3, pc, #260	@ (adr r3, 800ce60 <__ieee754_acos+0x288>)
 800cd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5e:	f7f3 fa45 	bl	80001ec <__adddf3>
 800cd62:	4622      	mov	r2, r4
 800cd64:	462b      	mov	r3, r5
 800cd66:	f7f3 fbf7 	bl	8000558 <__aeabi_dmul>
 800cd6a:	a33f      	add	r3, pc, #252	@ (adr r3, 800ce68 <__ieee754_acos+0x290>)
 800cd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd70:	f7f3 fa3a 	bl	80001e8 <__aeabi_dsub>
 800cd74:	4622      	mov	r2, r4
 800cd76:	462b      	mov	r3, r5
 800cd78:	f7f3 fbee 	bl	8000558 <__aeabi_dmul>
 800cd7c:	a33c      	add	r3, pc, #240	@ (adr r3, 800ce70 <__ieee754_acos+0x298>)
 800cd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd82:	f7f3 fa33 	bl	80001ec <__adddf3>
 800cd86:	4622      	mov	r2, r4
 800cd88:	462b      	mov	r3, r5
 800cd8a:	f7f3 fbe5 	bl	8000558 <__aeabi_dmul>
 800cd8e:	a33a      	add	r3, pc, #232	@ (adr r3, 800ce78 <__ieee754_acos+0x2a0>)
 800cd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd94:	f7f3 fa28 	bl	80001e8 <__aeabi_dsub>
 800cd98:	4622      	mov	r2, r4
 800cd9a:	462b      	mov	r3, r5
 800cd9c:	f7f3 fbdc 	bl	8000558 <__aeabi_dmul>
 800cda0:	a337      	add	r3, pc, #220	@ (adr r3, 800ce80 <__ieee754_acos+0x2a8>)
 800cda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda6:	f7f3 fa21 	bl	80001ec <__adddf3>
 800cdaa:	4622      	mov	r2, r4
 800cdac:	462b      	mov	r3, r5
 800cdae:	f7f3 fbd3 	bl	8000558 <__aeabi_dmul>
 800cdb2:	a335      	add	r3, pc, #212	@ (adr r3, 800ce88 <__ieee754_acos+0x2b0>)
 800cdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb8:	4606      	mov	r6, r0
 800cdba:	460f      	mov	r7, r1
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	4629      	mov	r1, r5
 800cdc0:	f7f3 fbca 	bl	8000558 <__aeabi_dmul>
 800cdc4:	a332      	add	r3, pc, #200	@ (adr r3, 800ce90 <__ieee754_acos+0x2b8>)
 800cdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdca:	f7f3 fa0d 	bl	80001e8 <__aeabi_dsub>
 800cdce:	4622      	mov	r2, r4
 800cdd0:	462b      	mov	r3, r5
 800cdd2:	f7f3 fbc1 	bl	8000558 <__aeabi_dmul>
 800cdd6:	a330      	add	r3, pc, #192	@ (adr r3, 800ce98 <__ieee754_acos+0x2c0>)
 800cdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cddc:	f7f3 fa06 	bl	80001ec <__adddf3>
 800cde0:	4622      	mov	r2, r4
 800cde2:	462b      	mov	r3, r5
 800cde4:	f7f3 fbb8 	bl	8000558 <__aeabi_dmul>
 800cde8:	a32d      	add	r3, pc, #180	@ (adr r3, 800cea0 <__ieee754_acos+0x2c8>)
 800cdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdee:	f7f3 f9fb 	bl	80001e8 <__aeabi_dsub>
 800cdf2:	4622      	mov	r2, r4
 800cdf4:	462b      	mov	r3, r5
 800cdf6:	f7f3 fbaf 	bl	8000558 <__aeabi_dmul>
 800cdfa:	4b34      	ldr	r3, [pc, #208]	@ (800cecc <__ieee754_acos+0x2f4>)
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f7f3 f9f5 	bl	80001ec <__adddf3>
 800ce02:	ec45 4b10 	vmov	d0, r4, r5
 800ce06:	4680      	mov	r8, r0
 800ce08:	4689      	mov	r9, r1
 800ce0a:	f7ff fa81 	bl	800c310 <__ieee754_sqrt>
 800ce0e:	ec55 4b10 	vmov	r4, r5, d0
 800ce12:	4642      	mov	r2, r8
 800ce14:	464b      	mov	r3, r9
 800ce16:	4630      	mov	r0, r6
 800ce18:	4639      	mov	r1, r7
 800ce1a:	f7f3 fcc7 	bl	80007ac <__aeabi_ddiv>
 800ce1e:	4622      	mov	r2, r4
 800ce20:	462b      	mov	r3, r5
 800ce22:	f7f3 fb99 	bl	8000558 <__aeabi_dmul>
 800ce26:	a320      	add	r3, pc, #128	@ (adr r3, 800cea8 <__ieee754_acos+0x2d0>)
 800ce28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2c:	f7f3 f9dc 	bl	80001e8 <__aeabi_dsub>
 800ce30:	4622      	mov	r2, r4
 800ce32:	462b      	mov	r3, r5
 800ce34:	f7f3 f9da 	bl	80001ec <__adddf3>
 800ce38:	4602      	mov	r2, r0
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	f7f3 f9d6 	bl	80001ec <__adddf3>
 800ce40:	4602      	mov	r2, r0
 800ce42:	460b      	mov	r3, r1
 800ce44:	a11c      	add	r1, pc, #112	@ (adr r1, 800ceb8 <__ieee754_acos+0x2e0>)
 800ce46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce4a:	e76e      	b.n	800cd2a <__ieee754_acos+0x152>
 800ce4c:	f3af 8000 	nop.w
	...
 800ce58:	0dfdf709 	.word	0x0dfdf709
 800ce5c:	3f023de1 	.word	0x3f023de1
 800ce60:	7501b288 	.word	0x7501b288
 800ce64:	3f49efe0 	.word	0x3f49efe0
 800ce68:	b5688f3b 	.word	0xb5688f3b
 800ce6c:	3fa48228 	.word	0x3fa48228
 800ce70:	0e884455 	.word	0x0e884455
 800ce74:	3fc9c155 	.word	0x3fc9c155
 800ce78:	03eb6f7d 	.word	0x03eb6f7d
 800ce7c:	3fd4d612 	.word	0x3fd4d612
 800ce80:	55555555 	.word	0x55555555
 800ce84:	3fc55555 	.word	0x3fc55555
 800ce88:	b12e9282 	.word	0xb12e9282
 800ce8c:	3fb3b8c5 	.word	0x3fb3b8c5
 800ce90:	1b8d0159 	.word	0x1b8d0159
 800ce94:	3fe6066c 	.word	0x3fe6066c
 800ce98:	9c598ac8 	.word	0x9c598ac8
 800ce9c:	40002ae5 	.word	0x40002ae5
 800cea0:	1c8a2d4b 	.word	0x1c8a2d4b
 800cea4:	40033a27 	.word	0x40033a27
 800cea8:	33145c07 	.word	0x33145c07
 800ceac:	3c91a626 	.word	0x3c91a626
 800ceb0:	54442d18 	.word	0x54442d18
 800ceb4:	3ff921fb 	.word	0x3ff921fb
 800ceb8:	54442d18 	.word	0x54442d18
 800cebc:	400921fb 	.word	0x400921fb
 800cec0:	3fefffff 	.word	0x3fefffff
 800cec4:	3fdfffff 	.word	0x3fdfffff
 800cec8:	3c600000 	.word	0x3c600000
 800cecc:	3ff00000 	.word	0x3ff00000
 800ced0:	3fe00000 	.word	0x3fe00000
 800ced4:	4622      	mov	r2, r4
 800ced6:	462b      	mov	r3, r5
 800ced8:	496b      	ldr	r1, [pc, #428]	@ (800d088 <__ieee754_acos+0x4b0>)
 800ceda:	2000      	movs	r0, #0
 800cedc:	f7f3 f984 	bl	80001e8 <__aeabi_dsub>
 800cee0:	4b6a      	ldr	r3, [pc, #424]	@ (800d08c <__ieee754_acos+0x4b4>)
 800cee2:	2200      	movs	r2, #0
 800cee4:	f7f3 fb38 	bl	8000558 <__aeabi_dmul>
 800cee8:	4604      	mov	r4, r0
 800ceea:	460d      	mov	r5, r1
 800ceec:	ec45 4b10 	vmov	d0, r4, r5
 800cef0:	f7ff fa0e 	bl	800c310 <__ieee754_sqrt>
 800cef4:	a34c      	add	r3, pc, #304	@ (adr r3, 800d028 <__ieee754_acos+0x450>)
 800cef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cefa:	4620      	mov	r0, r4
 800cefc:	4629      	mov	r1, r5
 800cefe:	ec59 8b10 	vmov	r8, r9, d0
 800cf02:	f7f3 fb29 	bl	8000558 <__aeabi_dmul>
 800cf06:	a34a      	add	r3, pc, #296	@ (adr r3, 800d030 <__ieee754_acos+0x458>)
 800cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0c:	f7f3 f96e 	bl	80001ec <__adddf3>
 800cf10:	4622      	mov	r2, r4
 800cf12:	462b      	mov	r3, r5
 800cf14:	f7f3 fb20 	bl	8000558 <__aeabi_dmul>
 800cf18:	a347      	add	r3, pc, #284	@ (adr r3, 800d038 <__ieee754_acos+0x460>)
 800cf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1e:	f7f3 f963 	bl	80001e8 <__aeabi_dsub>
 800cf22:	4622      	mov	r2, r4
 800cf24:	462b      	mov	r3, r5
 800cf26:	f7f3 fb17 	bl	8000558 <__aeabi_dmul>
 800cf2a:	a345      	add	r3, pc, #276	@ (adr r3, 800d040 <__ieee754_acos+0x468>)
 800cf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf30:	f7f3 f95c 	bl	80001ec <__adddf3>
 800cf34:	4622      	mov	r2, r4
 800cf36:	462b      	mov	r3, r5
 800cf38:	f7f3 fb0e 	bl	8000558 <__aeabi_dmul>
 800cf3c:	a342      	add	r3, pc, #264	@ (adr r3, 800d048 <__ieee754_acos+0x470>)
 800cf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf42:	f7f3 f951 	bl	80001e8 <__aeabi_dsub>
 800cf46:	4622      	mov	r2, r4
 800cf48:	462b      	mov	r3, r5
 800cf4a:	f7f3 fb05 	bl	8000558 <__aeabi_dmul>
 800cf4e:	a340      	add	r3, pc, #256	@ (adr r3, 800d050 <__ieee754_acos+0x478>)
 800cf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf54:	f7f3 f94a 	bl	80001ec <__adddf3>
 800cf58:	4622      	mov	r2, r4
 800cf5a:	462b      	mov	r3, r5
 800cf5c:	f7f3 fafc 	bl	8000558 <__aeabi_dmul>
 800cf60:	a33d      	add	r3, pc, #244	@ (adr r3, 800d058 <__ieee754_acos+0x480>)
 800cf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf66:	4682      	mov	sl, r0
 800cf68:	468b      	mov	fp, r1
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	4629      	mov	r1, r5
 800cf6e:	f7f3 faf3 	bl	8000558 <__aeabi_dmul>
 800cf72:	a33b      	add	r3, pc, #236	@ (adr r3, 800d060 <__ieee754_acos+0x488>)
 800cf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf78:	f7f3 f936 	bl	80001e8 <__aeabi_dsub>
 800cf7c:	4622      	mov	r2, r4
 800cf7e:	462b      	mov	r3, r5
 800cf80:	f7f3 faea 	bl	8000558 <__aeabi_dmul>
 800cf84:	a338      	add	r3, pc, #224	@ (adr r3, 800d068 <__ieee754_acos+0x490>)
 800cf86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8a:	f7f3 f92f 	bl	80001ec <__adddf3>
 800cf8e:	4622      	mov	r2, r4
 800cf90:	462b      	mov	r3, r5
 800cf92:	f7f3 fae1 	bl	8000558 <__aeabi_dmul>
 800cf96:	a336      	add	r3, pc, #216	@ (adr r3, 800d070 <__ieee754_acos+0x498>)
 800cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9c:	f7f3 f924 	bl	80001e8 <__aeabi_dsub>
 800cfa0:	4622      	mov	r2, r4
 800cfa2:	462b      	mov	r3, r5
 800cfa4:	f7f3 fad8 	bl	8000558 <__aeabi_dmul>
 800cfa8:	4b37      	ldr	r3, [pc, #220]	@ (800d088 <__ieee754_acos+0x4b0>)
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f7f3 f91e 	bl	80001ec <__adddf3>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	4650      	mov	r0, sl
 800cfb6:	4659      	mov	r1, fp
 800cfb8:	f7f3 fbf8 	bl	80007ac <__aeabi_ddiv>
 800cfbc:	4642      	mov	r2, r8
 800cfbe:	464b      	mov	r3, r9
 800cfc0:	f7f3 faca 	bl	8000558 <__aeabi_dmul>
 800cfc4:	2600      	movs	r6, #0
 800cfc6:	4682      	mov	sl, r0
 800cfc8:	468b      	mov	fp, r1
 800cfca:	4632      	mov	r2, r6
 800cfcc:	464b      	mov	r3, r9
 800cfce:	4630      	mov	r0, r6
 800cfd0:	4649      	mov	r1, r9
 800cfd2:	f7f3 fac1 	bl	8000558 <__aeabi_dmul>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	460b      	mov	r3, r1
 800cfda:	4620      	mov	r0, r4
 800cfdc:	4629      	mov	r1, r5
 800cfde:	f7f3 f903 	bl	80001e8 <__aeabi_dsub>
 800cfe2:	4632      	mov	r2, r6
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	460d      	mov	r5, r1
 800cfe8:	464b      	mov	r3, r9
 800cfea:	4640      	mov	r0, r8
 800cfec:	4649      	mov	r1, r9
 800cfee:	f7f3 f8fd 	bl	80001ec <__adddf3>
 800cff2:	4602      	mov	r2, r0
 800cff4:	460b      	mov	r3, r1
 800cff6:	4620      	mov	r0, r4
 800cff8:	4629      	mov	r1, r5
 800cffa:	f7f3 fbd7 	bl	80007ac <__aeabi_ddiv>
 800cffe:	4602      	mov	r2, r0
 800d000:	460b      	mov	r3, r1
 800d002:	4650      	mov	r0, sl
 800d004:	4659      	mov	r1, fp
 800d006:	f7f3 f8f1 	bl	80001ec <__adddf3>
 800d00a:	4632      	mov	r2, r6
 800d00c:	464b      	mov	r3, r9
 800d00e:	f7f3 f8ed 	bl	80001ec <__adddf3>
 800d012:	4602      	mov	r2, r0
 800d014:	460b      	mov	r3, r1
 800d016:	f7f3 f8e9 	bl	80001ec <__adddf3>
 800d01a:	e5fd      	b.n	800cc18 <__ieee754_acos+0x40>
 800d01c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800d078 <__ieee754_acos+0x4a0>
 800d020:	e5ee      	b.n	800cc00 <__ieee754_acos+0x28>
 800d022:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800d080 <__ieee754_acos+0x4a8>
 800d026:	e5eb      	b.n	800cc00 <__ieee754_acos+0x28>
 800d028:	0dfdf709 	.word	0x0dfdf709
 800d02c:	3f023de1 	.word	0x3f023de1
 800d030:	7501b288 	.word	0x7501b288
 800d034:	3f49efe0 	.word	0x3f49efe0
 800d038:	b5688f3b 	.word	0xb5688f3b
 800d03c:	3fa48228 	.word	0x3fa48228
 800d040:	0e884455 	.word	0x0e884455
 800d044:	3fc9c155 	.word	0x3fc9c155
 800d048:	03eb6f7d 	.word	0x03eb6f7d
 800d04c:	3fd4d612 	.word	0x3fd4d612
 800d050:	55555555 	.word	0x55555555
 800d054:	3fc55555 	.word	0x3fc55555
 800d058:	b12e9282 	.word	0xb12e9282
 800d05c:	3fb3b8c5 	.word	0x3fb3b8c5
 800d060:	1b8d0159 	.word	0x1b8d0159
 800d064:	3fe6066c 	.word	0x3fe6066c
 800d068:	9c598ac8 	.word	0x9c598ac8
 800d06c:	40002ae5 	.word	0x40002ae5
 800d070:	1c8a2d4b 	.word	0x1c8a2d4b
 800d074:	40033a27 	.word	0x40033a27
 800d078:	54442d18 	.word	0x54442d18
 800d07c:	400921fb 	.word	0x400921fb
 800d080:	54442d18 	.word	0x54442d18
 800d084:	3ff921fb 	.word	0x3ff921fb
 800d088:	3ff00000 	.word	0x3ff00000
 800d08c:	3fe00000 	.word	0x3fe00000

0800d090 <__ieee754_atan2>:
 800d090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d094:	ec57 6b11 	vmov	r6, r7, d1
 800d098:	4273      	negs	r3, r6
 800d09a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800d218 <__ieee754_atan2+0x188>
 800d09e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800d0a2:	4333      	orrs	r3, r6
 800d0a4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d0a8:	4543      	cmp	r3, r8
 800d0aa:	ec51 0b10 	vmov	r0, r1, d0
 800d0ae:	4635      	mov	r5, r6
 800d0b0:	d809      	bhi.n	800d0c6 <__ieee754_atan2+0x36>
 800d0b2:	4244      	negs	r4, r0
 800d0b4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d0b8:	4304      	orrs	r4, r0
 800d0ba:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d0be:	4544      	cmp	r4, r8
 800d0c0:	468e      	mov	lr, r1
 800d0c2:	4681      	mov	r9, r0
 800d0c4:	d907      	bls.n	800d0d6 <__ieee754_atan2+0x46>
 800d0c6:	4632      	mov	r2, r6
 800d0c8:	463b      	mov	r3, r7
 800d0ca:	f7f3 f88f 	bl	80001ec <__adddf3>
 800d0ce:	ec41 0b10 	vmov	d0, r0, r1
 800d0d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0d6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800d0da:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800d0de:	4334      	orrs	r4, r6
 800d0e0:	d103      	bne.n	800d0ea <__ieee754_atan2+0x5a>
 800d0e2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0e6:	f7fe be83 	b.w	800bdf0 <atan>
 800d0ea:	17bc      	asrs	r4, r7, #30
 800d0ec:	f004 0402 	and.w	r4, r4, #2
 800d0f0:	ea53 0909 	orrs.w	r9, r3, r9
 800d0f4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d0f8:	d107      	bne.n	800d10a <__ieee754_atan2+0x7a>
 800d0fa:	2c02      	cmp	r4, #2
 800d0fc:	d05f      	beq.n	800d1be <__ieee754_atan2+0x12e>
 800d0fe:	2c03      	cmp	r4, #3
 800d100:	d1e5      	bne.n	800d0ce <__ieee754_atan2+0x3e>
 800d102:	a141      	add	r1, pc, #260	@ (adr r1, 800d208 <__ieee754_atan2+0x178>)
 800d104:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d108:	e7e1      	b.n	800d0ce <__ieee754_atan2+0x3e>
 800d10a:	4315      	orrs	r5, r2
 800d10c:	d106      	bne.n	800d11c <__ieee754_atan2+0x8c>
 800d10e:	f1be 0f00 	cmp.w	lr, #0
 800d112:	da5f      	bge.n	800d1d4 <__ieee754_atan2+0x144>
 800d114:	a13e      	add	r1, pc, #248	@ (adr r1, 800d210 <__ieee754_atan2+0x180>)
 800d116:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d11a:	e7d8      	b.n	800d0ce <__ieee754_atan2+0x3e>
 800d11c:	4542      	cmp	r2, r8
 800d11e:	d10f      	bne.n	800d140 <__ieee754_atan2+0xb0>
 800d120:	4293      	cmp	r3, r2
 800d122:	f104 34ff 	add.w	r4, r4, #4294967295
 800d126:	d107      	bne.n	800d138 <__ieee754_atan2+0xa8>
 800d128:	2c02      	cmp	r4, #2
 800d12a:	d84c      	bhi.n	800d1c6 <__ieee754_atan2+0x136>
 800d12c:	4b34      	ldr	r3, [pc, #208]	@ (800d200 <__ieee754_atan2+0x170>)
 800d12e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d132:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d136:	e7ca      	b.n	800d0ce <__ieee754_atan2+0x3e>
 800d138:	2c02      	cmp	r4, #2
 800d13a:	d848      	bhi.n	800d1ce <__ieee754_atan2+0x13e>
 800d13c:	4b31      	ldr	r3, [pc, #196]	@ (800d204 <__ieee754_atan2+0x174>)
 800d13e:	e7f6      	b.n	800d12e <__ieee754_atan2+0x9e>
 800d140:	4543      	cmp	r3, r8
 800d142:	d0e4      	beq.n	800d10e <__ieee754_atan2+0x7e>
 800d144:	1a9b      	subs	r3, r3, r2
 800d146:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800d14a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d14e:	da1e      	bge.n	800d18e <__ieee754_atan2+0xfe>
 800d150:	2f00      	cmp	r7, #0
 800d152:	da01      	bge.n	800d158 <__ieee754_atan2+0xc8>
 800d154:	323c      	adds	r2, #60	@ 0x3c
 800d156:	db1e      	blt.n	800d196 <__ieee754_atan2+0x106>
 800d158:	4632      	mov	r2, r6
 800d15a:	463b      	mov	r3, r7
 800d15c:	f7f3 fb26 	bl	80007ac <__aeabi_ddiv>
 800d160:	ec41 0b10 	vmov	d0, r0, r1
 800d164:	f7ff f830 	bl	800c1c8 <fabs>
 800d168:	f7fe fe42 	bl	800bdf0 <atan>
 800d16c:	ec51 0b10 	vmov	r0, r1, d0
 800d170:	2c01      	cmp	r4, #1
 800d172:	d013      	beq.n	800d19c <__ieee754_atan2+0x10c>
 800d174:	2c02      	cmp	r4, #2
 800d176:	d015      	beq.n	800d1a4 <__ieee754_atan2+0x114>
 800d178:	2c00      	cmp	r4, #0
 800d17a:	d0a8      	beq.n	800d0ce <__ieee754_atan2+0x3e>
 800d17c:	a318      	add	r3, pc, #96	@ (adr r3, 800d1e0 <__ieee754_atan2+0x150>)
 800d17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d182:	f7f3 f831 	bl	80001e8 <__aeabi_dsub>
 800d186:	a318      	add	r3, pc, #96	@ (adr r3, 800d1e8 <__ieee754_atan2+0x158>)
 800d188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18c:	e014      	b.n	800d1b8 <__ieee754_atan2+0x128>
 800d18e:	a118      	add	r1, pc, #96	@ (adr r1, 800d1f0 <__ieee754_atan2+0x160>)
 800d190:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d194:	e7ec      	b.n	800d170 <__ieee754_atan2+0xe0>
 800d196:	2000      	movs	r0, #0
 800d198:	2100      	movs	r1, #0
 800d19a:	e7e9      	b.n	800d170 <__ieee754_atan2+0xe0>
 800d19c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	e794      	b.n	800d0ce <__ieee754_atan2+0x3e>
 800d1a4:	a30e      	add	r3, pc, #56	@ (adr r3, 800d1e0 <__ieee754_atan2+0x150>)
 800d1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1aa:	f7f3 f81d 	bl	80001e8 <__aeabi_dsub>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	a10d      	add	r1, pc, #52	@ (adr r1, 800d1e8 <__ieee754_atan2+0x158>)
 800d1b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1b8:	f7f3 f816 	bl	80001e8 <__aeabi_dsub>
 800d1bc:	e787      	b.n	800d0ce <__ieee754_atan2+0x3e>
 800d1be:	a10a      	add	r1, pc, #40	@ (adr r1, 800d1e8 <__ieee754_atan2+0x158>)
 800d1c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1c4:	e783      	b.n	800d0ce <__ieee754_atan2+0x3e>
 800d1c6:	a10c      	add	r1, pc, #48	@ (adr r1, 800d1f8 <__ieee754_atan2+0x168>)
 800d1c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1cc:	e77f      	b.n	800d0ce <__ieee754_atan2+0x3e>
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	2100      	movs	r1, #0
 800d1d2:	e77c      	b.n	800d0ce <__ieee754_atan2+0x3e>
 800d1d4:	a106      	add	r1, pc, #24	@ (adr r1, 800d1f0 <__ieee754_atan2+0x160>)
 800d1d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1da:	e778      	b.n	800d0ce <__ieee754_atan2+0x3e>
 800d1dc:	f3af 8000 	nop.w
 800d1e0:	33145c07 	.word	0x33145c07
 800d1e4:	3ca1a626 	.word	0x3ca1a626
 800d1e8:	54442d18 	.word	0x54442d18
 800d1ec:	400921fb 	.word	0x400921fb
 800d1f0:	54442d18 	.word	0x54442d18
 800d1f4:	3ff921fb 	.word	0x3ff921fb
 800d1f8:	54442d18 	.word	0x54442d18
 800d1fc:	3fe921fb 	.word	0x3fe921fb
 800d200:	0800edf0 	.word	0x0800edf0
 800d204:	0800edd8 	.word	0x0800edd8
 800d208:	54442d18 	.word	0x54442d18
 800d20c:	c00921fb 	.word	0xc00921fb
 800d210:	54442d18 	.word	0x54442d18
 800d214:	bff921fb 	.word	0xbff921fb
 800d218:	7ff00000 	.word	0x7ff00000

0800d21c <__ieee754_hypot>:
 800d21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d220:	ec51 0b10 	vmov	r0, r1, d0
 800d224:	ec53 2b11 	vmov	r2, r3, d1
 800d228:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 800d22c:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800d230:	42a5      	cmp	r5, r4
 800d232:	b087      	sub	sp, #28
 800d234:	da05      	bge.n	800d242 <__ieee754_hypot+0x26>
 800d236:	462e      	mov	r6, r5
 800d238:	4625      	mov	r5, r4
 800d23a:	4634      	mov	r4, r6
 800d23c:	4606      	mov	r6, r0
 800d23e:	4610      	mov	r0, r2
 800d240:	4632      	mov	r2, r6
 800d242:	1b2b      	subs	r3, r5, r4
 800d244:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 800d248:	4629      	mov	r1, r5
 800d24a:	4682      	mov	sl, r0
 800d24c:	46ab      	mov	fp, r5
 800d24e:	4616      	mov	r6, r2
 800d250:	4627      	mov	r7, r4
 800d252:	dd05      	ble.n	800d260 <__ieee754_hypot+0x44>
 800d254:	4623      	mov	r3, r4
 800d256:	f7f2 ffc9 	bl	80001ec <__adddf3>
 800d25a:	4682      	mov	sl, r0
 800d25c:	468b      	mov	fp, r1
 800d25e:	e016      	b.n	800d28e <__ieee754_hypot+0x72>
 800d260:	4b75      	ldr	r3, [pc, #468]	@ (800d438 <__ieee754_hypot+0x21c>)
 800d262:	429d      	cmp	r5, r3
 800d264:	f340 8096 	ble.w	800d394 <__ieee754_hypot+0x178>
 800d268:	4b74      	ldr	r3, [pc, #464]	@ (800d43c <__ieee754_hypot+0x220>)
 800d26a:	429d      	cmp	r5, r3
 800d26c:	dd14      	ble.n	800d298 <__ieee754_hypot+0x7c>
 800d26e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d272:	4305      	orrs	r5, r0
 800d274:	d004      	beq.n	800d280 <__ieee754_hypot+0x64>
 800d276:	4623      	mov	r3, r4
 800d278:	f7f2 ffb8 	bl	80001ec <__adddf3>
 800d27c:	4682      	mov	sl, r0
 800d27e:	468b      	mov	fp, r1
 800d280:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 800d284:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 800d288:	4334      	orrs	r4, r6
 800d28a:	f000 80d2 	beq.w	800d432 <__ieee754_hypot+0x216>
 800d28e:	ec4b ab10 	vmov	d0, sl, fp
 800d292:	b007      	add	sp, #28
 800d294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d298:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 800d29c:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 800d2a0:	46ab      	mov	fp, r5
 800d2a2:	4627      	mov	r7, r4
 800d2a4:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800d2a8:	9301      	str	r3, [sp, #4]
 800d2aa:	4b65      	ldr	r3, [pc, #404]	@ (800d440 <__ieee754_hypot+0x224>)
 800d2ac:	429c      	cmp	r4, r3
 800d2ae:	dc19      	bgt.n	800d2e4 <__ieee754_hypot+0xc8>
 800d2b0:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800d2b4:	da70      	bge.n	800d398 <__ieee754_hypot+0x17c>
 800d2b6:	4633      	mov	r3, r6
 800d2b8:	4323      	orrs	r3, r4
 800d2ba:	d0e8      	beq.n	800d28e <__ieee754_hypot+0x72>
 800d2bc:	4b61      	ldr	r3, [pc, #388]	@ (800d444 <__ieee754_hypot+0x228>)
 800d2be:	2200      	movs	r2, #0
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	4639      	mov	r1, r7
 800d2c4:	f7f3 f948 	bl	8000558 <__aeabi_dmul>
 800d2c8:	4b5e      	ldr	r3, [pc, #376]	@ (800d444 <__ieee754_hypot+0x228>)
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	460f      	mov	r7, r1
 800d2ce:	4650      	mov	r0, sl
 800d2d0:	4659      	mov	r1, fp
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f7f3 f940 	bl	8000558 <__aeabi_dmul>
 800d2d8:	9b01      	ldr	r3, [sp, #4]
 800d2da:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800d2de:	4682      	mov	sl, r0
 800d2e0:	468b      	mov	fp, r1
 800d2e2:	9301      	str	r3, [sp, #4]
 800d2e4:	4632      	mov	r2, r6
 800d2e6:	463b      	mov	r3, r7
 800d2e8:	4650      	mov	r0, sl
 800d2ea:	4659      	mov	r1, fp
 800d2ec:	f7f2 ff7c 	bl	80001e8 <__aeabi_dsub>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	4680      	mov	r8, r0
 800d2f6:	4689      	mov	r9, r1
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	4639      	mov	r1, r7
 800d2fc:	f7f3 fb9e 	bl	8000a3c <__aeabi_dcmplt>
 800d300:	2200      	movs	r2, #0
 800d302:	2800      	cmp	r0, #0
 800d304:	d053      	beq.n	800d3ae <__ieee754_hypot+0x192>
 800d306:	462b      	mov	r3, r5
 800d308:	4610      	mov	r0, r2
 800d30a:	4629      	mov	r1, r5
 800d30c:	4614      	mov	r4, r2
 800d30e:	f7f3 f923 	bl	8000558 <__aeabi_dmul>
 800d312:	4632      	mov	r2, r6
 800d314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d318:	463b      	mov	r3, r7
 800d31a:	4630      	mov	r0, r6
 800d31c:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800d320:	f7f3 f91a 	bl	8000558 <__aeabi_dmul>
 800d324:	4622      	mov	r2, r4
 800d326:	4606      	mov	r6, r0
 800d328:	460f      	mov	r7, r1
 800d32a:	462b      	mov	r3, r5
 800d32c:	4650      	mov	r0, sl
 800d32e:	4659      	mov	r1, fp
 800d330:	f7f2 ff5c 	bl	80001ec <__adddf3>
 800d334:	4622      	mov	r2, r4
 800d336:	4680      	mov	r8, r0
 800d338:	4689      	mov	r9, r1
 800d33a:	462b      	mov	r3, r5
 800d33c:	4650      	mov	r0, sl
 800d33e:	4659      	mov	r1, fp
 800d340:	f7f2 ff52 	bl	80001e8 <__aeabi_dsub>
 800d344:	4602      	mov	r2, r0
 800d346:	460b      	mov	r3, r1
 800d348:	4640      	mov	r0, r8
 800d34a:	4649      	mov	r1, r9
 800d34c:	f7f3 f904 	bl	8000558 <__aeabi_dmul>
 800d350:	4602      	mov	r2, r0
 800d352:	460b      	mov	r3, r1
 800d354:	4630      	mov	r0, r6
 800d356:	4639      	mov	r1, r7
 800d358:	f7f2 ff46 	bl	80001e8 <__aeabi_dsub>
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d364:	f7f2 ff40 	bl	80001e8 <__aeabi_dsub>
 800d368:	ec41 0b10 	vmov	d0, r0, r1
 800d36c:	f7fe ffd0 	bl	800c310 <__ieee754_sqrt>
 800d370:	9b01      	ldr	r3, [sp, #4]
 800d372:	ec5b ab10 	vmov	sl, fp, d0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d089      	beq.n	800d28e <__ieee754_hypot+0x72>
 800d37a:	051b      	lsls	r3, r3, #20
 800d37c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d380:	2000      	movs	r0, #0
 800d382:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800d386:	4602      	mov	r2, r0
 800d388:	460b      	mov	r3, r1
 800d38a:	4650      	mov	r0, sl
 800d38c:	4659      	mov	r1, fp
 800d38e:	f7f3 f8e3 	bl	8000558 <__aeabi_dmul>
 800d392:	e762      	b.n	800d25a <__ieee754_hypot+0x3e>
 800d394:	2300      	movs	r3, #0
 800d396:	e787      	b.n	800d2a8 <__ieee754_hypot+0x8c>
 800d398:	9b01      	ldr	r3, [sp, #4]
 800d39a:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 800d39e:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 800d3a2:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800d3a6:	9301      	str	r3, [sp, #4]
 800d3a8:	46ab      	mov	fp, r5
 800d3aa:	4627      	mov	r7, r4
 800d3ac:	e79a      	b.n	800d2e4 <__ieee754_hypot+0xc8>
 800d3ae:	4623      	mov	r3, r4
 800d3b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d3b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 800d3be:	4614      	mov	r4, r2
 800d3c0:	461d      	mov	r5, r3
 800d3c2:	f7f3 f8c9 	bl	8000558 <__aeabi_dmul>
 800d3c6:	4642      	mov	r2, r8
 800d3c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3cc:	464b      	mov	r3, r9
 800d3ce:	4640      	mov	r0, r8
 800d3d0:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 800d3d4:	f7f3 f8c0 	bl	8000558 <__aeabi_dmul>
 800d3d8:	4652      	mov	r2, sl
 800d3da:	465b      	mov	r3, fp
 800d3dc:	4680      	mov	r8, r0
 800d3de:	4689      	mov	r9, r1
 800d3e0:	4650      	mov	r0, sl
 800d3e2:	4659      	mov	r1, fp
 800d3e4:	f7f2 ff02 	bl	80001ec <__adddf3>
 800d3e8:	4622      	mov	r2, r4
 800d3ea:	462b      	mov	r3, r5
 800d3ec:	f7f2 fefc 	bl	80001e8 <__aeabi_dsub>
 800d3f0:	4632      	mov	r2, r6
 800d3f2:	463b      	mov	r3, r7
 800d3f4:	f7f3 f8b0 	bl	8000558 <__aeabi_dmul>
 800d3f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d3fc:	4682      	mov	sl, r0
 800d3fe:	468b      	mov	fp, r1
 800d400:	4630      	mov	r0, r6
 800d402:	4639      	mov	r1, r7
 800d404:	f7f2 fef0 	bl	80001e8 <__aeabi_dsub>
 800d408:	4622      	mov	r2, r4
 800d40a:	462b      	mov	r3, r5
 800d40c:	f7f3 f8a4 	bl	8000558 <__aeabi_dmul>
 800d410:	4602      	mov	r2, r0
 800d412:	460b      	mov	r3, r1
 800d414:	4650      	mov	r0, sl
 800d416:	4659      	mov	r1, fp
 800d418:	f7f2 fee8 	bl	80001ec <__adddf3>
 800d41c:	4602      	mov	r2, r0
 800d41e:	460b      	mov	r3, r1
 800d420:	4640      	mov	r0, r8
 800d422:	4649      	mov	r1, r9
 800d424:	f7f2 fee0 	bl	80001e8 <__aeabi_dsub>
 800d428:	4602      	mov	r2, r0
 800d42a:	460b      	mov	r3, r1
 800d42c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d430:	e798      	b.n	800d364 <__ieee754_hypot+0x148>
 800d432:	46b2      	mov	sl, r6
 800d434:	46bb      	mov	fp, r7
 800d436:	e72a      	b.n	800d28e <__ieee754_hypot+0x72>
 800d438:	5f300000 	.word	0x5f300000
 800d43c:	7fefffff 	.word	0x7fefffff
 800d440:	20afffff 	.word	0x20afffff
 800d444:	7fd00000 	.word	0x7fd00000

0800d448 <__ieee754_pow>:
 800d448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d44c:	b091      	sub	sp, #68	@ 0x44
 800d44e:	ed8d 1b00 	vstr	d1, [sp]
 800d452:	e9dd 1900 	ldrd	r1, r9, [sp]
 800d456:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800d45a:	ea5a 0001 	orrs.w	r0, sl, r1
 800d45e:	ec57 6b10 	vmov	r6, r7, d0
 800d462:	d113      	bne.n	800d48c <__ieee754_pow+0x44>
 800d464:	19b3      	adds	r3, r6, r6
 800d466:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800d46a:	4152      	adcs	r2, r2
 800d46c:	4298      	cmp	r0, r3
 800d46e:	4b98      	ldr	r3, [pc, #608]	@ (800d6d0 <__ieee754_pow+0x288>)
 800d470:	4193      	sbcs	r3, r2
 800d472:	f080 84ea 	bcs.w	800de4a <__ieee754_pow+0xa02>
 800d476:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d47a:	4630      	mov	r0, r6
 800d47c:	4639      	mov	r1, r7
 800d47e:	f7f2 feb5 	bl	80001ec <__adddf3>
 800d482:	ec41 0b10 	vmov	d0, r0, r1
 800d486:	b011      	add	sp, #68	@ 0x44
 800d488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d48c:	4a91      	ldr	r2, [pc, #580]	@ (800d6d4 <__ieee754_pow+0x28c>)
 800d48e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d492:	4590      	cmp	r8, r2
 800d494:	463d      	mov	r5, r7
 800d496:	4633      	mov	r3, r6
 800d498:	d806      	bhi.n	800d4a8 <__ieee754_pow+0x60>
 800d49a:	d101      	bne.n	800d4a0 <__ieee754_pow+0x58>
 800d49c:	2e00      	cmp	r6, #0
 800d49e:	d1ea      	bne.n	800d476 <__ieee754_pow+0x2e>
 800d4a0:	4592      	cmp	sl, r2
 800d4a2:	d801      	bhi.n	800d4a8 <__ieee754_pow+0x60>
 800d4a4:	d10e      	bne.n	800d4c4 <__ieee754_pow+0x7c>
 800d4a6:	b169      	cbz	r1, 800d4c4 <__ieee754_pow+0x7c>
 800d4a8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800d4ac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800d4b0:	431d      	orrs	r5, r3
 800d4b2:	d1e0      	bne.n	800d476 <__ieee754_pow+0x2e>
 800d4b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d4b8:	18db      	adds	r3, r3, r3
 800d4ba:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800d4be:	4152      	adcs	r2, r2
 800d4c0:	429d      	cmp	r5, r3
 800d4c2:	e7d4      	b.n	800d46e <__ieee754_pow+0x26>
 800d4c4:	2d00      	cmp	r5, #0
 800d4c6:	46c3      	mov	fp, r8
 800d4c8:	da3a      	bge.n	800d540 <__ieee754_pow+0xf8>
 800d4ca:	4a83      	ldr	r2, [pc, #524]	@ (800d6d8 <__ieee754_pow+0x290>)
 800d4cc:	4592      	cmp	sl, r2
 800d4ce:	d84d      	bhi.n	800d56c <__ieee754_pow+0x124>
 800d4d0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800d4d4:	4592      	cmp	sl, r2
 800d4d6:	f240 84c7 	bls.w	800de68 <__ieee754_pow+0xa20>
 800d4da:	ea4f 522a 	mov.w	r2, sl, asr #20
 800d4de:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800d4e2:	2a14      	cmp	r2, #20
 800d4e4:	dd0f      	ble.n	800d506 <__ieee754_pow+0xbe>
 800d4e6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800d4ea:	fa21 f402 	lsr.w	r4, r1, r2
 800d4ee:	fa04 f202 	lsl.w	r2, r4, r2
 800d4f2:	428a      	cmp	r2, r1
 800d4f4:	f040 84b8 	bne.w	800de68 <__ieee754_pow+0xa20>
 800d4f8:	f004 0401 	and.w	r4, r4, #1
 800d4fc:	f1c4 0402 	rsb	r4, r4, #2
 800d500:	2900      	cmp	r1, #0
 800d502:	d158      	bne.n	800d5b6 <__ieee754_pow+0x16e>
 800d504:	e00e      	b.n	800d524 <__ieee754_pow+0xdc>
 800d506:	2900      	cmp	r1, #0
 800d508:	d154      	bne.n	800d5b4 <__ieee754_pow+0x16c>
 800d50a:	f1c2 0214 	rsb	r2, r2, #20
 800d50e:	fa4a f402 	asr.w	r4, sl, r2
 800d512:	fa04 f202 	lsl.w	r2, r4, r2
 800d516:	4552      	cmp	r2, sl
 800d518:	f040 84a3 	bne.w	800de62 <__ieee754_pow+0xa1a>
 800d51c:	f004 0401 	and.w	r4, r4, #1
 800d520:	f1c4 0402 	rsb	r4, r4, #2
 800d524:	4a6d      	ldr	r2, [pc, #436]	@ (800d6dc <__ieee754_pow+0x294>)
 800d526:	4592      	cmp	sl, r2
 800d528:	d12e      	bne.n	800d588 <__ieee754_pow+0x140>
 800d52a:	f1b9 0f00 	cmp.w	r9, #0
 800d52e:	f280 8494 	bge.w	800de5a <__ieee754_pow+0xa12>
 800d532:	496a      	ldr	r1, [pc, #424]	@ (800d6dc <__ieee754_pow+0x294>)
 800d534:	4632      	mov	r2, r6
 800d536:	463b      	mov	r3, r7
 800d538:	2000      	movs	r0, #0
 800d53a:	f7f3 f937 	bl	80007ac <__aeabi_ddiv>
 800d53e:	e7a0      	b.n	800d482 <__ieee754_pow+0x3a>
 800d540:	2400      	movs	r4, #0
 800d542:	bbc1      	cbnz	r1, 800d5b6 <__ieee754_pow+0x16e>
 800d544:	4a63      	ldr	r2, [pc, #396]	@ (800d6d4 <__ieee754_pow+0x28c>)
 800d546:	4592      	cmp	sl, r2
 800d548:	d1ec      	bne.n	800d524 <__ieee754_pow+0xdc>
 800d54a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800d54e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800d552:	431a      	orrs	r2, r3
 800d554:	f000 8479 	beq.w	800de4a <__ieee754_pow+0xa02>
 800d558:	4b61      	ldr	r3, [pc, #388]	@ (800d6e0 <__ieee754_pow+0x298>)
 800d55a:	4598      	cmp	r8, r3
 800d55c:	d908      	bls.n	800d570 <__ieee754_pow+0x128>
 800d55e:	f1b9 0f00 	cmp.w	r9, #0
 800d562:	f2c0 8476 	blt.w	800de52 <__ieee754_pow+0xa0a>
 800d566:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d56a:	e78a      	b.n	800d482 <__ieee754_pow+0x3a>
 800d56c:	2402      	movs	r4, #2
 800d56e:	e7e8      	b.n	800d542 <__ieee754_pow+0xfa>
 800d570:	f1b9 0f00 	cmp.w	r9, #0
 800d574:	f04f 0000 	mov.w	r0, #0
 800d578:	f04f 0100 	mov.w	r1, #0
 800d57c:	da81      	bge.n	800d482 <__ieee754_pow+0x3a>
 800d57e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d582:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d586:	e77c      	b.n	800d482 <__ieee754_pow+0x3a>
 800d588:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800d58c:	d106      	bne.n	800d59c <__ieee754_pow+0x154>
 800d58e:	4632      	mov	r2, r6
 800d590:	463b      	mov	r3, r7
 800d592:	4630      	mov	r0, r6
 800d594:	4639      	mov	r1, r7
 800d596:	f7f2 ffdf 	bl	8000558 <__aeabi_dmul>
 800d59a:	e772      	b.n	800d482 <__ieee754_pow+0x3a>
 800d59c:	4a51      	ldr	r2, [pc, #324]	@ (800d6e4 <__ieee754_pow+0x29c>)
 800d59e:	4591      	cmp	r9, r2
 800d5a0:	d109      	bne.n	800d5b6 <__ieee754_pow+0x16e>
 800d5a2:	2d00      	cmp	r5, #0
 800d5a4:	db07      	blt.n	800d5b6 <__ieee754_pow+0x16e>
 800d5a6:	ec47 6b10 	vmov	d0, r6, r7
 800d5aa:	b011      	add	sp, #68	@ 0x44
 800d5ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b0:	f7fe beae 	b.w	800c310 <__ieee754_sqrt>
 800d5b4:	2400      	movs	r4, #0
 800d5b6:	ec47 6b10 	vmov	d0, r6, r7
 800d5ba:	9302      	str	r3, [sp, #8]
 800d5bc:	f7fe fe04 	bl	800c1c8 <fabs>
 800d5c0:	9b02      	ldr	r3, [sp, #8]
 800d5c2:	ec51 0b10 	vmov	r0, r1, d0
 800d5c6:	bb53      	cbnz	r3, 800d61e <__ieee754_pow+0x1d6>
 800d5c8:	4b44      	ldr	r3, [pc, #272]	@ (800d6dc <__ieee754_pow+0x294>)
 800d5ca:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d002      	beq.n	800d5d8 <__ieee754_pow+0x190>
 800d5d2:	f1b8 0f00 	cmp.w	r8, #0
 800d5d6:	d122      	bne.n	800d61e <__ieee754_pow+0x1d6>
 800d5d8:	f1b9 0f00 	cmp.w	r9, #0
 800d5dc:	da05      	bge.n	800d5ea <__ieee754_pow+0x1a2>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	2000      	movs	r0, #0
 800d5e4:	493d      	ldr	r1, [pc, #244]	@ (800d6dc <__ieee754_pow+0x294>)
 800d5e6:	f7f3 f8e1 	bl	80007ac <__aeabi_ddiv>
 800d5ea:	2d00      	cmp	r5, #0
 800d5ec:	f6bf af49 	bge.w	800d482 <__ieee754_pow+0x3a>
 800d5f0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800d5f4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800d5f8:	ea58 0804 	orrs.w	r8, r8, r4
 800d5fc:	d108      	bne.n	800d610 <__ieee754_pow+0x1c8>
 800d5fe:	4602      	mov	r2, r0
 800d600:	460b      	mov	r3, r1
 800d602:	4610      	mov	r0, r2
 800d604:	4619      	mov	r1, r3
 800d606:	f7f2 fdef 	bl	80001e8 <__aeabi_dsub>
 800d60a:	4602      	mov	r2, r0
 800d60c:	460b      	mov	r3, r1
 800d60e:	e794      	b.n	800d53a <__ieee754_pow+0xf2>
 800d610:	2c01      	cmp	r4, #1
 800d612:	f47f af36 	bne.w	800d482 <__ieee754_pow+0x3a>
 800d616:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d61a:	4619      	mov	r1, r3
 800d61c:	e731      	b.n	800d482 <__ieee754_pow+0x3a>
 800d61e:	0feb      	lsrs	r3, r5, #31
 800d620:	3b01      	subs	r3, #1
 800d622:	ea53 0204 	orrs.w	r2, r3, r4
 800d626:	d102      	bne.n	800d62e <__ieee754_pow+0x1e6>
 800d628:	4632      	mov	r2, r6
 800d62a:	463b      	mov	r3, r7
 800d62c:	e7e9      	b.n	800d602 <__ieee754_pow+0x1ba>
 800d62e:	3c01      	subs	r4, #1
 800d630:	431c      	orrs	r4, r3
 800d632:	d016      	beq.n	800d662 <__ieee754_pow+0x21a>
 800d634:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800d6c0 <__ieee754_pow+0x278>
 800d638:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800d63c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d640:	f240 8112 	bls.w	800d868 <__ieee754_pow+0x420>
 800d644:	4b28      	ldr	r3, [pc, #160]	@ (800d6e8 <__ieee754_pow+0x2a0>)
 800d646:	459a      	cmp	sl, r3
 800d648:	4b25      	ldr	r3, [pc, #148]	@ (800d6e0 <__ieee754_pow+0x298>)
 800d64a:	d916      	bls.n	800d67a <__ieee754_pow+0x232>
 800d64c:	4598      	cmp	r8, r3
 800d64e:	d80b      	bhi.n	800d668 <__ieee754_pow+0x220>
 800d650:	f1b9 0f00 	cmp.w	r9, #0
 800d654:	da0b      	bge.n	800d66e <__ieee754_pow+0x226>
 800d656:	2000      	movs	r0, #0
 800d658:	b011      	add	sp, #68	@ 0x44
 800d65a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d65e:	f000 bee7 	b.w	800e430 <__math_oflow>
 800d662:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800d6c8 <__ieee754_pow+0x280>
 800d666:	e7e7      	b.n	800d638 <__ieee754_pow+0x1f0>
 800d668:	f1b9 0f00 	cmp.w	r9, #0
 800d66c:	dcf3      	bgt.n	800d656 <__ieee754_pow+0x20e>
 800d66e:	2000      	movs	r0, #0
 800d670:	b011      	add	sp, #68	@ 0x44
 800d672:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d676:	f000 bed3 	b.w	800e420 <__math_uflow>
 800d67a:	4598      	cmp	r8, r3
 800d67c:	d20c      	bcs.n	800d698 <__ieee754_pow+0x250>
 800d67e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d682:	2200      	movs	r2, #0
 800d684:	2300      	movs	r3, #0
 800d686:	f7f3 f9d9 	bl	8000a3c <__aeabi_dcmplt>
 800d68a:	3800      	subs	r0, #0
 800d68c:	bf18      	it	ne
 800d68e:	2001      	movne	r0, #1
 800d690:	f1b9 0f00 	cmp.w	r9, #0
 800d694:	daec      	bge.n	800d670 <__ieee754_pow+0x228>
 800d696:	e7df      	b.n	800d658 <__ieee754_pow+0x210>
 800d698:	4b10      	ldr	r3, [pc, #64]	@ (800d6dc <__ieee754_pow+0x294>)
 800d69a:	4598      	cmp	r8, r3
 800d69c:	f04f 0200 	mov.w	r2, #0
 800d6a0:	d924      	bls.n	800d6ec <__ieee754_pow+0x2a4>
 800d6a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	f7f3 f9c8 	bl	8000a3c <__aeabi_dcmplt>
 800d6ac:	3800      	subs	r0, #0
 800d6ae:	bf18      	it	ne
 800d6b0:	2001      	movne	r0, #1
 800d6b2:	f1b9 0f00 	cmp.w	r9, #0
 800d6b6:	dccf      	bgt.n	800d658 <__ieee754_pow+0x210>
 800d6b8:	e7da      	b.n	800d670 <__ieee754_pow+0x228>
 800d6ba:	bf00      	nop
 800d6bc:	f3af 8000 	nop.w
 800d6c0:	00000000 	.word	0x00000000
 800d6c4:	3ff00000 	.word	0x3ff00000
 800d6c8:	00000000 	.word	0x00000000
 800d6cc:	bff00000 	.word	0xbff00000
 800d6d0:	fff00000 	.word	0xfff00000
 800d6d4:	7ff00000 	.word	0x7ff00000
 800d6d8:	433fffff 	.word	0x433fffff
 800d6dc:	3ff00000 	.word	0x3ff00000
 800d6e0:	3fefffff 	.word	0x3fefffff
 800d6e4:	3fe00000 	.word	0x3fe00000
 800d6e8:	43f00000 	.word	0x43f00000
 800d6ec:	4b5a      	ldr	r3, [pc, #360]	@ (800d858 <__ieee754_pow+0x410>)
 800d6ee:	f7f2 fd7b 	bl	80001e8 <__aeabi_dsub>
 800d6f2:	a351      	add	r3, pc, #324	@ (adr r3, 800d838 <__ieee754_pow+0x3f0>)
 800d6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	460d      	mov	r5, r1
 800d6fc:	f7f2 ff2c 	bl	8000558 <__aeabi_dmul>
 800d700:	a34f      	add	r3, pc, #316	@ (adr r3, 800d840 <__ieee754_pow+0x3f8>)
 800d702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d706:	4606      	mov	r6, r0
 800d708:	460f      	mov	r7, r1
 800d70a:	4620      	mov	r0, r4
 800d70c:	4629      	mov	r1, r5
 800d70e:	f7f2 ff23 	bl	8000558 <__aeabi_dmul>
 800d712:	4b52      	ldr	r3, [pc, #328]	@ (800d85c <__ieee754_pow+0x414>)
 800d714:	4682      	mov	sl, r0
 800d716:	468b      	mov	fp, r1
 800d718:	2200      	movs	r2, #0
 800d71a:	4620      	mov	r0, r4
 800d71c:	4629      	mov	r1, r5
 800d71e:	f7f2 ff1b 	bl	8000558 <__aeabi_dmul>
 800d722:	4602      	mov	r2, r0
 800d724:	460b      	mov	r3, r1
 800d726:	a148      	add	r1, pc, #288	@ (adr r1, 800d848 <__ieee754_pow+0x400>)
 800d728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d72c:	f7f2 fd5c 	bl	80001e8 <__aeabi_dsub>
 800d730:	4622      	mov	r2, r4
 800d732:	462b      	mov	r3, r5
 800d734:	f7f2 ff10 	bl	8000558 <__aeabi_dmul>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	2000      	movs	r0, #0
 800d73e:	4948      	ldr	r1, [pc, #288]	@ (800d860 <__ieee754_pow+0x418>)
 800d740:	f7f2 fd52 	bl	80001e8 <__aeabi_dsub>
 800d744:	4622      	mov	r2, r4
 800d746:	4680      	mov	r8, r0
 800d748:	4689      	mov	r9, r1
 800d74a:	462b      	mov	r3, r5
 800d74c:	4620      	mov	r0, r4
 800d74e:	4629      	mov	r1, r5
 800d750:	f7f2 ff02 	bl	8000558 <__aeabi_dmul>
 800d754:	4602      	mov	r2, r0
 800d756:	460b      	mov	r3, r1
 800d758:	4640      	mov	r0, r8
 800d75a:	4649      	mov	r1, r9
 800d75c:	f7f2 fefc 	bl	8000558 <__aeabi_dmul>
 800d760:	a33b      	add	r3, pc, #236	@ (adr r3, 800d850 <__ieee754_pow+0x408>)
 800d762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d766:	f7f2 fef7 	bl	8000558 <__aeabi_dmul>
 800d76a:	4602      	mov	r2, r0
 800d76c:	460b      	mov	r3, r1
 800d76e:	4650      	mov	r0, sl
 800d770:	4659      	mov	r1, fp
 800d772:	f7f2 fd39 	bl	80001e8 <__aeabi_dsub>
 800d776:	4602      	mov	r2, r0
 800d778:	460b      	mov	r3, r1
 800d77a:	4680      	mov	r8, r0
 800d77c:	4689      	mov	r9, r1
 800d77e:	4630      	mov	r0, r6
 800d780:	4639      	mov	r1, r7
 800d782:	f7f2 fd33 	bl	80001ec <__adddf3>
 800d786:	2400      	movs	r4, #0
 800d788:	4632      	mov	r2, r6
 800d78a:	463b      	mov	r3, r7
 800d78c:	4620      	mov	r0, r4
 800d78e:	460d      	mov	r5, r1
 800d790:	f7f2 fd2a 	bl	80001e8 <__aeabi_dsub>
 800d794:	4602      	mov	r2, r0
 800d796:	460b      	mov	r3, r1
 800d798:	4640      	mov	r0, r8
 800d79a:	4649      	mov	r1, r9
 800d79c:	f7f2 fd24 	bl	80001e8 <__aeabi_dsub>
 800d7a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	9304      	str	r3, [sp, #16]
 800d7ac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d7b0:	4606      	mov	r6, r0
 800d7b2:	460f      	mov	r7, r1
 800d7b4:	4652      	mov	r2, sl
 800d7b6:	465b      	mov	r3, fp
 800d7b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7bc:	f7f2 fd14 	bl	80001e8 <__aeabi_dsub>
 800d7c0:	4622      	mov	r2, r4
 800d7c2:	462b      	mov	r3, r5
 800d7c4:	f7f2 fec8 	bl	8000558 <__aeabi_dmul>
 800d7c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7cc:	4680      	mov	r8, r0
 800d7ce:	4689      	mov	r9, r1
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	4639      	mov	r1, r7
 800d7d4:	f7f2 fec0 	bl	8000558 <__aeabi_dmul>
 800d7d8:	4602      	mov	r2, r0
 800d7da:	460b      	mov	r3, r1
 800d7dc:	4640      	mov	r0, r8
 800d7de:	4649      	mov	r1, r9
 800d7e0:	f7f2 fd04 	bl	80001ec <__adddf3>
 800d7e4:	4652      	mov	r2, sl
 800d7e6:	465b      	mov	r3, fp
 800d7e8:	4606      	mov	r6, r0
 800d7ea:	460f      	mov	r7, r1
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	4629      	mov	r1, r5
 800d7f0:	f7f2 feb2 	bl	8000558 <__aeabi_dmul>
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	4680      	mov	r8, r0
 800d7fa:	4689      	mov	r9, r1
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	4639      	mov	r1, r7
 800d800:	f7f2 fcf4 	bl	80001ec <__adddf3>
 800d804:	4b17      	ldr	r3, [pc, #92]	@ (800d864 <__ieee754_pow+0x41c>)
 800d806:	4299      	cmp	r1, r3
 800d808:	4604      	mov	r4, r0
 800d80a:	460d      	mov	r5, r1
 800d80c:	468a      	mov	sl, r1
 800d80e:	468b      	mov	fp, r1
 800d810:	f340 82ef 	ble.w	800ddf2 <__ieee754_pow+0x9aa>
 800d814:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800d818:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800d81c:	4303      	orrs	r3, r0
 800d81e:	f000 81e8 	beq.w	800dbf2 <__ieee754_pow+0x7aa>
 800d822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d826:	2200      	movs	r2, #0
 800d828:	2300      	movs	r3, #0
 800d82a:	f7f3 f907 	bl	8000a3c <__aeabi_dcmplt>
 800d82e:	3800      	subs	r0, #0
 800d830:	bf18      	it	ne
 800d832:	2001      	movne	r0, #1
 800d834:	e710      	b.n	800d658 <__ieee754_pow+0x210>
 800d836:	bf00      	nop
 800d838:	60000000 	.word	0x60000000
 800d83c:	3ff71547 	.word	0x3ff71547
 800d840:	f85ddf44 	.word	0xf85ddf44
 800d844:	3e54ae0b 	.word	0x3e54ae0b
 800d848:	55555555 	.word	0x55555555
 800d84c:	3fd55555 	.word	0x3fd55555
 800d850:	652b82fe 	.word	0x652b82fe
 800d854:	3ff71547 	.word	0x3ff71547
 800d858:	3ff00000 	.word	0x3ff00000
 800d85c:	3fd00000 	.word	0x3fd00000
 800d860:	3fe00000 	.word	0x3fe00000
 800d864:	408fffff 	.word	0x408fffff
 800d868:	4bd5      	ldr	r3, [pc, #852]	@ (800dbc0 <__ieee754_pow+0x778>)
 800d86a:	402b      	ands	r3, r5
 800d86c:	2200      	movs	r2, #0
 800d86e:	b92b      	cbnz	r3, 800d87c <__ieee754_pow+0x434>
 800d870:	4bd4      	ldr	r3, [pc, #848]	@ (800dbc4 <__ieee754_pow+0x77c>)
 800d872:	f7f2 fe71 	bl	8000558 <__aeabi_dmul>
 800d876:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800d87a:	468b      	mov	fp, r1
 800d87c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800d880:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d884:	4413      	add	r3, r2
 800d886:	930a      	str	r3, [sp, #40]	@ 0x28
 800d888:	4bcf      	ldr	r3, [pc, #828]	@ (800dbc8 <__ieee754_pow+0x780>)
 800d88a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800d88e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800d892:	459b      	cmp	fp, r3
 800d894:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d898:	dd08      	ble.n	800d8ac <__ieee754_pow+0x464>
 800d89a:	4bcc      	ldr	r3, [pc, #816]	@ (800dbcc <__ieee754_pow+0x784>)
 800d89c:	459b      	cmp	fp, r3
 800d89e:	f340 81a5 	ble.w	800dbec <__ieee754_pow+0x7a4>
 800d8a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d8a8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800d8ac:	f04f 0a00 	mov.w	sl, #0
 800d8b0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d8b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d8b6:	4bc6      	ldr	r3, [pc, #792]	@ (800dbd0 <__ieee754_pow+0x788>)
 800d8b8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d8bc:	ed93 7b00 	vldr	d7, [r3]
 800d8c0:	4629      	mov	r1, r5
 800d8c2:	ec53 2b17 	vmov	r2, r3, d7
 800d8c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d8ca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d8ce:	f7f2 fc8b 	bl	80001e8 <__aeabi_dsub>
 800d8d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d8d6:	4606      	mov	r6, r0
 800d8d8:	460f      	mov	r7, r1
 800d8da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8de:	f7f2 fc85 	bl	80001ec <__adddf3>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	2000      	movs	r0, #0
 800d8e8:	49ba      	ldr	r1, [pc, #744]	@ (800dbd4 <__ieee754_pow+0x78c>)
 800d8ea:	f7f2 ff5f 	bl	80007ac <__aeabi_ddiv>
 800d8ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	4639      	mov	r1, r7
 800d8fa:	f7f2 fe2d 	bl	8000558 <__aeabi_dmul>
 800d8fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d902:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800d906:	106d      	asrs	r5, r5, #1
 800d908:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800d90c:	f04f 0b00 	mov.w	fp, #0
 800d910:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800d914:	4661      	mov	r1, ip
 800d916:	2200      	movs	r2, #0
 800d918:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800d91c:	4658      	mov	r0, fp
 800d91e:	46e1      	mov	r9, ip
 800d920:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800d924:	4614      	mov	r4, r2
 800d926:	461d      	mov	r5, r3
 800d928:	f7f2 fe16 	bl	8000558 <__aeabi_dmul>
 800d92c:	4602      	mov	r2, r0
 800d92e:	460b      	mov	r3, r1
 800d930:	4630      	mov	r0, r6
 800d932:	4639      	mov	r1, r7
 800d934:	f7f2 fc58 	bl	80001e8 <__aeabi_dsub>
 800d938:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d93c:	4606      	mov	r6, r0
 800d93e:	460f      	mov	r7, r1
 800d940:	4620      	mov	r0, r4
 800d942:	4629      	mov	r1, r5
 800d944:	f7f2 fc50 	bl	80001e8 <__aeabi_dsub>
 800d948:	4602      	mov	r2, r0
 800d94a:	460b      	mov	r3, r1
 800d94c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d950:	f7f2 fc4a 	bl	80001e8 <__aeabi_dsub>
 800d954:	465a      	mov	r2, fp
 800d956:	464b      	mov	r3, r9
 800d958:	f7f2 fdfe 	bl	8000558 <__aeabi_dmul>
 800d95c:	4602      	mov	r2, r0
 800d95e:	460b      	mov	r3, r1
 800d960:	4630      	mov	r0, r6
 800d962:	4639      	mov	r1, r7
 800d964:	f7f2 fc40 	bl	80001e8 <__aeabi_dsub>
 800d968:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d96c:	f7f2 fdf4 	bl	8000558 <__aeabi_dmul>
 800d970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d974:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d978:	4610      	mov	r0, r2
 800d97a:	4619      	mov	r1, r3
 800d97c:	f7f2 fdec 	bl	8000558 <__aeabi_dmul>
 800d980:	a37d      	add	r3, pc, #500	@ (adr r3, 800db78 <__ieee754_pow+0x730>)
 800d982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d986:	4604      	mov	r4, r0
 800d988:	460d      	mov	r5, r1
 800d98a:	f7f2 fde5 	bl	8000558 <__aeabi_dmul>
 800d98e:	a37c      	add	r3, pc, #496	@ (adr r3, 800db80 <__ieee754_pow+0x738>)
 800d990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d994:	f7f2 fc2a 	bl	80001ec <__adddf3>
 800d998:	4622      	mov	r2, r4
 800d99a:	462b      	mov	r3, r5
 800d99c:	f7f2 fddc 	bl	8000558 <__aeabi_dmul>
 800d9a0:	a379      	add	r3, pc, #484	@ (adr r3, 800db88 <__ieee754_pow+0x740>)
 800d9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a6:	f7f2 fc21 	bl	80001ec <__adddf3>
 800d9aa:	4622      	mov	r2, r4
 800d9ac:	462b      	mov	r3, r5
 800d9ae:	f7f2 fdd3 	bl	8000558 <__aeabi_dmul>
 800d9b2:	a377      	add	r3, pc, #476	@ (adr r3, 800db90 <__ieee754_pow+0x748>)
 800d9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b8:	f7f2 fc18 	bl	80001ec <__adddf3>
 800d9bc:	4622      	mov	r2, r4
 800d9be:	462b      	mov	r3, r5
 800d9c0:	f7f2 fdca 	bl	8000558 <__aeabi_dmul>
 800d9c4:	a374      	add	r3, pc, #464	@ (adr r3, 800db98 <__ieee754_pow+0x750>)
 800d9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ca:	f7f2 fc0f 	bl	80001ec <__adddf3>
 800d9ce:	4622      	mov	r2, r4
 800d9d0:	462b      	mov	r3, r5
 800d9d2:	f7f2 fdc1 	bl	8000558 <__aeabi_dmul>
 800d9d6:	a372      	add	r3, pc, #456	@ (adr r3, 800dba0 <__ieee754_pow+0x758>)
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	f7f2 fc06 	bl	80001ec <__adddf3>
 800d9e0:	4622      	mov	r2, r4
 800d9e2:	4606      	mov	r6, r0
 800d9e4:	460f      	mov	r7, r1
 800d9e6:	462b      	mov	r3, r5
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	4629      	mov	r1, r5
 800d9ec:	f7f2 fdb4 	bl	8000558 <__aeabi_dmul>
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	4639      	mov	r1, r7
 800d9f8:	f7f2 fdae 	bl	8000558 <__aeabi_dmul>
 800d9fc:	465a      	mov	r2, fp
 800d9fe:	4604      	mov	r4, r0
 800da00:	460d      	mov	r5, r1
 800da02:	464b      	mov	r3, r9
 800da04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da08:	f7f2 fbf0 	bl	80001ec <__adddf3>
 800da0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da10:	f7f2 fda2 	bl	8000558 <__aeabi_dmul>
 800da14:	4622      	mov	r2, r4
 800da16:	462b      	mov	r3, r5
 800da18:	f7f2 fbe8 	bl	80001ec <__adddf3>
 800da1c:	465a      	mov	r2, fp
 800da1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800da22:	464b      	mov	r3, r9
 800da24:	4658      	mov	r0, fp
 800da26:	4649      	mov	r1, r9
 800da28:	f7f2 fd96 	bl	8000558 <__aeabi_dmul>
 800da2c:	4b6a      	ldr	r3, [pc, #424]	@ (800dbd8 <__ieee754_pow+0x790>)
 800da2e:	2200      	movs	r2, #0
 800da30:	4606      	mov	r6, r0
 800da32:	460f      	mov	r7, r1
 800da34:	f7f2 fbda 	bl	80001ec <__adddf3>
 800da38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800da3c:	f7f2 fbd6 	bl	80001ec <__adddf3>
 800da40:	46d8      	mov	r8, fp
 800da42:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800da46:	460d      	mov	r5, r1
 800da48:	465a      	mov	r2, fp
 800da4a:	460b      	mov	r3, r1
 800da4c:	4640      	mov	r0, r8
 800da4e:	4649      	mov	r1, r9
 800da50:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800da54:	f7f2 fd80 	bl	8000558 <__aeabi_dmul>
 800da58:	465c      	mov	r4, fp
 800da5a:	4680      	mov	r8, r0
 800da5c:	4689      	mov	r9, r1
 800da5e:	4b5e      	ldr	r3, [pc, #376]	@ (800dbd8 <__ieee754_pow+0x790>)
 800da60:	2200      	movs	r2, #0
 800da62:	4620      	mov	r0, r4
 800da64:	4629      	mov	r1, r5
 800da66:	f7f2 fbbf 	bl	80001e8 <__aeabi_dsub>
 800da6a:	4632      	mov	r2, r6
 800da6c:	463b      	mov	r3, r7
 800da6e:	f7f2 fbbb 	bl	80001e8 <__aeabi_dsub>
 800da72:	4602      	mov	r2, r0
 800da74:	460b      	mov	r3, r1
 800da76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800da7a:	f7f2 fbb5 	bl	80001e8 <__aeabi_dsub>
 800da7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da82:	f7f2 fd69 	bl	8000558 <__aeabi_dmul>
 800da86:	4622      	mov	r2, r4
 800da88:	4606      	mov	r6, r0
 800da8a:	460f      	mov	r7, r1
 800da8c:	462b      	mov	r3, r5
 800da8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da92:	f7f2 fd61 	bl	8000558 <__aeabi_dmul>
 800da96:	4602      	mov	r2, r0
 800da98:	460b      	mov	r3, r1
 800da9a:	4630      	mov	r0, r6
 800da9c:	4639      	mov	r1, r7
 800da9e:	f7f2 fba5 	bl	80001ec <__adddf3>
 800daa2:	4606      	mov	r6, r0
 800daa4:	460f      	mov	r7, r1
 800daa6:	4602      	mov	r2, r0
 800daa8:	460b      	mov	r3, r1
 800daaa:	4640      	mov	r0, r8
 800daac:	4649      	mov	r1, r9
 800daae:	f7f2 fb9d 	bl	80001ec <__adddf3>
 800dab2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800dab6:	a33c      	add	r3, pc, #240	@ (adr r3, 800dba8 <__ieee754_pow+0x760>)
 800dab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dabc:	4658      	mov	r0, fp
 800dabe:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800dac2:	460d      	mov	r5, r1
 800dac4:	f7f2 fd48 	bl	8000558 <__aeabi_dmul>
 800dac8:	465c      	mov	r4, fp
 800daca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dace:	4642      	mov	r2, r8
 800dad0:	464b      	mov	r3, r9
 800dad2:	4620      	mov	r0, r4
 800dad4:	4629      	mov	r1, r5
 800dad6:	f7f2 fb87 	bl	80001e8 <__aeabi_dsub>
 800dada:	4602      	mov	r2, r0
 800dadc:	460b      	mov	r3, r1
 800dade:	4630      	mov	r0, r6
 800dae0:	4639      	mov	r1, r7
 800dae2:	f7f2 fb81 	bl	80001e8 <__aeabi_dsub>
 800dae6:	a332      	add	r3, pc, #200	@ (adr r3, 800dbb0 <__ieee754_pow+0x768>)
 800dae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daec:	f7f2 fd34 	bl	8000558 <__aeabi_dmul>
 800daf0:	a331      	add	r3, pc, #196	@ (adr r3, 800dbb8 <__ieee754_pow+0x770>)
 800daf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf6:	4606      	mov	r6, r0
 800daf8:	460f      	mov	r7, r1
 800dafa:	4620      	mov	r0, r4
 800dafc:	4629      	mov	r1, r5
 800dafe:	f7f2 fd2b 	bl	8000558 <__aeabi_dmul>
 800db02:	4602      	mov	r2, r0
 800db04:	460b      	mov	r3, r1
 800db06:	4630      	mov	r0, r6
 800db08:	4639      	mov	r1, r7
 800db0a:	f7f2 fb6f 	bl	80001ec <__adddf3>
 800db0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db10:	4b32      	ldr	r3, [pc, #200]	@ (800dbdc <__ieee754_pow+0x794>)
 800db12:	4413      	add	r3, r2
 800db14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db18:	f7f2 fb68 	bl	80001ec <__adddf3>
 800db1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800db20:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800db22:	f7f2 fcaf 	bl	8000484 <__aeabi_i2d>
 800db26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db28:	4b2d      	ldr	r3, [pc, #180]	@ (800dbe0 <__ieee754_pow+0x798>)
 800db2a:	4413      	add	r3, r2
 800db2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db30:	4606      	mov	r6, r0
 800db32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800db36:	460f      	mov	r7, r1
 800db38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800db3c:	f7f2 fb56 	bl	80001ec <__adddf3>
 800db40:	4642      	mov	r2, r8
 800db42:	464b      	mov	r3, r9
 800db44:	f7f2 fb52 	bl	80001ec <__adddf3>
 800db48:	4632      	mov	r2, r6
 800db4a:	463b      	mov	r3, r7
 800db4c:	f7f2 fb4e 	bl	80001ec <__adddf3>
 800db50:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800db54:	4632      	mov	r2, r6
 800db56:	463b      	mov	r3, r7
 800db58:	4658      	mov	r0, fp
 800db5a:	460d      	mov	r5, r1
 800db5c:	f7f2 fb44 	bl	80001e8 <__aeabi_dsub>
 800db60:	4642      	mov	r2, r8
 800db62:	464b      	mov	r3, r9
 800db64:	f7f2 fb40 	bl	80001e8 <__aeabi_dsub>
 800db68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db6c:	f7f2 fb3c 	bl	80001e8 <__aeabi_dsub>
 800db70:	465c      	mov	r4, fp
 800db72:	4602      	mov	r2, r0
 800db74:	e036      	b.n	800dbe4 <__ieee754_pow+0x79c>
 800db76:	bf00      	nop
 800db78:	4a454eef 	.word	0x4a454eef
 800db7c:	3fca7e28 	.word	0x3fca7e28
 800db80:	93c9db65 	.word	0x93c9db65
 800db84:	3fcd864a 	.word	0x3fcd864a
 800db88:	a91d4101 	.word	0xa91d4101
 800db8c:	3fd17460 	.word	0x3fd17460
 800db90:	518f264d 	.word	0x518f264d
 800db94:	3fd55555 	.word	0x3fd55555
 800db98:	db6fabff 	.word	0xdb6fabff
 800db9c:	3fdb6db6 	.word	0x3fdb6db6
 800dba0:	33333303 	.word	0x33333303
 800dba4:	3fe33333 	.word	0x3fe33333
 800dba8:	e0000000 	.word	0xe0000000
 800dbac:	3feec709 	.word	0x3feec709
 800dbb0:	dc3a03fd 	.word	0xdc3a03fd
 800dbb4:	3feec709 	.word	0x3feec709
 800dbb8:	145b01f5 	.word	0x145b01f5
 800dbbc:	be3e2fe0 	.word	0xbe3e2fe0
 800dbc0:	7ff00000 	.word	0x7ff00000
 800dbc4:	43400000 	.word	0x43400000
 800dbc8:	0003988e 	.word	0x0003988e
 800dbcc:	000bb679 	.word	0x000bb679
 800dbd0:	0800ee28 	.word	0x0800ee28
 800dbd4:	3ff00000 	.word	0x3ff00000
 800dbd8:	40080000 	.word	0x40080000
 800dbdc:	0800ee08 	.word	0x0800ee08
 800dbe0:	0800ee18 	.word	0x0800ee18
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbea:	e5d7      	b.n	800d79c <__ieee754_pow+0x354>
 800dbec:	f04f 0a01 	mov.w	sl, #1
 800dbf0:	e65e      	b.n	800d8b0 <__ieee754_pow+0x468>
 800dbf2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800dec4 <__ieee754_pow+0xa7c>)
 800dbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf8:	4630      	mov	r0, r6
 800dbfa:	4639      	mov	r1, r7
 800dbfc:	f7f2 faf6 	bl	80001ec <__adddf3>
 800dc00:	4642      	mov	r2, r8
 800dc02:	e9cd 0100 	strd	r0, r1, [sp]
 800dc06:	464b      	mov	r3, r9
 800dc08:	4620      	mov	r0, r4
 800dc0a:	4629      	mov	r1, r5
 800dc0c:	f7f2 faec 	bl	80001e8 <__aeabi_dsub>
 800dc10:	4602      	mov	r2, r0
 800dc12:	460b      	mov	r3, r1
 800dc14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc18:	f7f2 ff2e 	bl	8000a78 <__aeabi_dcmpgt>
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	f47f ae00 	bne.w	800d822 <__ieee754_pow+0x3da>
 800dc22:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800dc26:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800dc2a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800dc2e:	fa43 fa0a 	asr.w	sl, r3, sl
 800dc32:	44da      	add	sl, fp
 800dc34:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800dc38:	489d      	ldr	r0, [pc, #628]	@ (800deb0 <__ieee754_pow+0xa68>)
 800dc3a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800dc3e:	4108      	asrs	r0, r1
 800dc40:	ea00 030a 	and.w	r3, r0, sl
 800dc44:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800dc48:	f1c1 0114 	rsb	r1, r1, #20
 800dc4c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800dc50:	fa4a fa01 	asr.w	sl, sl, r1
 800dc54:	f1bb 0f00 	cmp.w	fp, #0
 800dc58:	4640      	mov	r0, r8
 800dc5a:	4649      	mov	r1, r9
 800dc5c:	f04f 0200 	mov.w	r2, #0
 800dc60:	bfb8      	it	lt
 800dc62:	f1ca 0a00 	rsblt	sl, sl, #0
 800dc66:	f7f2 fabf 	bl	80001e8 <__aeabi_dsub>
 800dc6a:	4680      	mov	r8, r0
 800dc6c:	4689      	mov	r9, r1
 800dc6e:	4632      	mov	r2, r6
 800dc70:	463b      	mov	r3, r7
 800dc72:	4640      	mov	r0, r8
 800dc74:	4649      	mov	r1, r9
 800dc76:	f7f2 fab9 	bl	80001ec <__adddf3>
 800dc7a:	2400      	movs	r4, #0
 800dc7c:	a37c      	add	r3, pc, #496	@ (adr r3, 800de70 <__ieee754_pow+0xa28>)
 800dc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc82:	4620      	mov	r0, r4
 800dc84:	460d      	mov	r5, r1
 800dc86:	f7f2 fc67 	bl	8000558 <__aeabi_dmul>
 800dc8a:	4642      	mov	r2, r8
 800dc8c:	e9cd 0100 	strd	r0, r1, [sp]
 800dc90:	464b      	mov	r3, r9
 800dc92:	4620      	mov	r0, r4
 800dc94:	4629      	mov	r1, r5
 800dc96:	f7f2 faa7 	bl	80001e8 <__aeabi_dsub>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	4630      	mov	r0, r6
 800dca0:	4639      	mov	r1, r7
 800dca2:	f7f2 faa1 	bl	80001e8 <__aeabi_dsub>
 800dca6:	a374      	add	r3, pc, #464	@ (adr r3, 800de78 <__ieee754_pow+0xa30>)
 800dca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcac:	f7f2 fc54 	bl	8000558 <__aeabi_dmul>
 800dcb0:	a373      	add	r3, pc, #460	@ (adr r3, 800de80 <__ieee754_pow+0xa38>)
 800dcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb6:	4680      	mov	r8, r0
 800dcb8:	4689      	mov	r9, r1
 800dcba:	4620      	mov	r0, r4
 800dcbc:	4629      	mov	r1, r5
 800dcbe:	f7f2 fc4b 	bl	8000558 <__aeabi_dmul>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	4640      	mov	r0, r8
 800dcc8:	4649      	mov	r1, r9
 800dcca:	f7f2 fa8f 	bl	80001ec <__adddf3>
 800dcce:	4604      	mov	r4, r0
 800dcd0:	460d      	mov	r5, r1
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcda:	f7f2 fa87 	bl	80001ec <__adddf3>
 800dcde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dce2:	4680      	mov	r8, r0
 800dce4:	4689      	mov	r9, r1
 800dce6:	f7f2 fa7f 	bl	80001e8 <__aeabi_dsub>
 800dcea:	4602      	mov	r2, r0
 800dcec:	460b      	mov	r3, r1
 800dcee:	4620      	mov	r0, r4
 800dcf0:	4629      	mov	r1, r5
 800dcf2:	f7f2 fa79 	bl	80001e8 <__aeabi_dsub>
 800dcf6:	4642      	mov	r2, r8
 800dcf8:	4606      	mov	r6, r0
 800dcfa:	460f      	mov	r7, r1
 800dcfc:	464b      	mov	r3, r9
 800dcfe:	4640      	mov	r0, r8
 800dd00:	4649      	mov	r1, r9
 800dd02:	f7f2 fc29 	bl	8000558 <__aeabi_dmul>
 800dd06:	a360      	add	r3, pc, #384	@ (adr r3, 800de88 <__ieee754_pow+0xa40>)
 800dd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	460d      	mov	r5, r1
 800dd10:	f7f2 fc22 	bl	8000558 <__aeabi_dmul>
 800dd14:	a35e      	add	r3, pc, #376	@ (adr r3, 800de90 <__ieee754_pow+0xa48>)
 800dd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1a:	f7f2 fa65 	bl	80001e8 <__aeabi_dsub>
 800dd1e:	4622      	mov	r2, r4
 800dd20:	462b      	mov	r3, r5
 800dd22:	f7f2 fc19 	bl	8000558 <__aeabi_dmul>
 800dd26:	a35c      	add	r3, pc, #368	@ (adr r3, 800de98 <__ieee754_pow+0xa50>)
 800dd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2c:	f7f2 fa5e 	bl	80001ec <__adddf3>
 800dd30:	4622      	mov	r2, r4
 800dd32:	462b      	mov	r3, r5
 800dd34:	f7f2 fc10 	bl	8000558 <__aeabi_dmul>
 800dd38:	a359      	add	r3, pc, #356	@ (adr r3, 800dea0 <__ieee754_pow+0xa58>)
 800dd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3e:	f7f2 fa53 	bl	80001e8 <__aeabi_dsub>
 800dd42:	4622      	mov	r2, r4
 800dd44:	462b      	mov	r3, r5
 800dd46:	f7f2 fc07 	bl	8000558 <__aeabi_dmul>
 800dd4a:	a357      	add	r3, pc, #348	@ (adr r3, 800dea8 <__ieee754_pow+0xa60>)
 800dd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd50:	f7f2 fa4c 	bl	80001ec <__adddf3>
 800dd54:	4622      	mov	r2, r4
 800dd56:	462b      	mov	r3, r5
 800dd58:	f7f2 fbfe 	bl	8000558 <__aeabi_dmul>
 800dd5c:	4602      	mov	r2, r0
 800dd5e:	460b      	mov	r3, r1
 800dd60:	4640      	mov	r0, r8
 800dd62:	4649      	mov	r1, r9
 800dd64:	f7f2 fa40 	bl	80001e8 <__aeabi_dsub>
 800dd68:	4604      	mov	r4, r0
 800dd6a:	460d      	mov	r5, r1
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	460b      	mov	r3, r1
 800dd70:	4640      	mov	r0, r8
 800dd72:	4649      	mov	r1, r9
 800dd74:	f7f2 fbf0 	bl	8000558 <__aeabi_dmul>
 800dd78:	2200      	movs	r2, #0
 800dd7a:	e9cd 0100 	strd	r0, r1, [sp]
 800dd7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dd82:	4620      	mov	r0, r4
 800dd84:	4629      	mov	r1, r5
 800dd86:	f7f2 fa2f 	bl	80001e8 <__aeabi_dsub>
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd92:	f7f2 fd0b 	bl	80007ac <__aeabi_ddiv>
 800dd96:	4632      	mov	r2, r6
 800dd98:	4604      	mov	r4, r0
 800dd9a:	460d      	mov	r5, r1
 800dd9c:	463b      	mov	r3, r7
 800dd9e:	4640      	mov	r0, r8
 800dda0:	4649      	mov	r1, r9
 800dda2:	f7f2 fbd9 	bl	8000558 <__aeabi_dmul>
 800dda6:	4632      	mov	r2, r6
 800dda8:	463b      	mov	r3, r7
 800ddaa:	f7f2 fa1f 	bl	80001ec <__adddf3>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	4629      	mov	r1, r5
 800ddb6:	f7f2 fa17 	bl	80001e8 <__aeabi_dsub>
 800ddba:	4642      	mov	r2, r8
 800ddbc:	464b      	mov	r3, r9
 800ddbe:	f7f2 fa13 	bl	80001e8 <__aeabi_dsub>
 800ddc2:	460b      	mov	r3, r1
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	493b      	ldr	r1, [pc, #236]	@ (800deb4 <__ieee754_pow+0xa6c>)
 800ddc8:	2000      	movs	r0, #0
 800ddca:	f7f2 fa0d 	bl	80001e8 <__aeabi_dsub>
 800ddce:	ec41 0b10 	vmov	d0, r0, r1
 800ddd2:	ee10 3a90 	vmov	r3, s1
 800ddd6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ddda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ddde:	da30      	bge.n	800de42 <__ieee754_pow+0x9fa>
 800dde0:	4650      	mov	r0, sl
 800dde2:	f000 fa71 	bl	800e2c8 <scalbn>
 800dde6:	ec51 0b10 	vmov	r0, r1, d0
 800ddea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ddee:	f7ff bbd2 	b.w	800d596 <__ieee754_pow+0x14e>
 800ddf2:	4c31      	ldr	r4, [pc, #196]	@ (800deb8 <__ieee754_pow+0xa70>)
 800ddf4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ddf8:	42a3      	cmp	r3, r4
 800ddfa:	d91a      	bls.n	800de32 <__ieee754_pow+0x9ea>
 800ddfc:	4b2f      	ldr	r3, [pc, #188]	@ (800debc <__ieee754_pow+0xa74>)
 800ddfe:	440b      	add	r3, r1
 800de00:	4303      	orrs	r3, r0
 800de02:	d009      	beq.n	800de18 <__ieee754_pow+0x9d0>
 800de04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de08:	2200      	movs	r2, #0
 800de0a:	2300      	movs	r3, #0
 800de0c:	f7f2 fe16 	bl	8000a3c <__aeabi_dcmplt>
 800de10:	3800      	subs	r0, #0
 800de12:	bf18      	it	ne
 800de14:	2001      	movne	r0, #1
 800de16:	e42b      	b.n	800d670 <__ieee754_pow+0x228>
 800de18:	4642      	mov	r2, r8
 800de1a:	464b      	mov	r3, r9
 800de1c:	f7f2 f9e4 	bl	80001e8 <__aeabi_dsub>
 800de20:	4632      	mov	r2, r6
 800de22:	463b      	mov	r3, r7
 800de24:	f7f2 fe1e 	bl	8000a64 <__aeabi_dcmpge>
 800de28:	2800      	cmp	r0, #0
 800de2a:	d1eb      	bne.n	800de04 <__ieee754_pow+0x9bc>
 800de2c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800decc <__ieee754_pow+0xa84>
 800de30:	e6f7      	b.n	800dc22 <__ieee754_pow+0x7da>
 800de32:	469a      	mov	sl, r3
 800de34:	4b22      	ldr	r3, [pc, #136]	@ (800dec0 <__ieee754_pow+0xa78>)
 800de36:	459a      	cmp	sl, r3
 800de38:	f63f aef3 	bhi.w	800dc22 <__ieee754_pow+0x7da>
 800de3c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800de40:	e715      	b.n	800dc6e <__ieee754_pow+0x826>
 800de42:	ec51 0b10 	vmov	r0, r1, d0
 800de46:	4619      	mov	r1, r3
 800de48:	e7cf      	b.n	800ddea <__ieee754_pow+0x9a2>
 800de4a:	491a      	ldr	r1, [pc, #104]	@ (800deb4 <__ieee754_pow+0xa6c>)
 800de4c:	2000      	movs	r0, #0
 800de4e:	f7ff bb18 	b.w	800d482 <__ieee754_pow+0x3a>
 800de52:	2000      	movs	r0, #0
 800de54:	2100      	movs	r1, #0
 800de56:	f7ff bb14 	b.w	800d482 <__ieee754_pow+0x3a>
 800de5a:	4630      	mov	r0, r6
 800de5c:	4639      	mov	r1, r7
 800de5e:	f7ff bb10 	b.w	800d482 <__ieee754_pow+0x3a>
 800de62:	460c      	mov	r4, r1
 800de64:	f7ff bb5e 	b.w	800d524 <__ieee754_pow+0xdc>
 800de68:	2400      	movs	r4, #0
 800de6a:	f7ff bb49 	b.w	800d500 <__ieee754_pow+0xb8>
 800de6e:	bf00      	nop
 800de70:	00000000 	.word	0x00000000
 800de74:	3fe62e43 	.word	0x3fe62e43
 800de78:	fefa39ef 	.word	0xfefa39ef
 800de7c:	3fe62e42 	.word	0x3fe62e42
 800de80:	0ca86c39 	.word	0x0ca86c39
 800de84:	be205c61 	.word	0xbe205c61
 800de88:	72bea4d0 	.word	0x72bea4d0
 800de8c:	3e663769 	.word	0x3e663769
 800de90:	c5d26bf1 	.word	0xc5d26bf1
 800de94:	3ebbbd41 	.word	0x3ebbbd41
 800de98:	af25de2c 	.word	0xaf25de2c
 800de9c:	3f11566a 	.word	0x3f11566a
 800dea0:	16bebd93 	.word	0x16bebd93
 800dea4:	3f66c16c 	.word	0x3f66c16c
 800dea8:	5555553e 	.word	0x5555553e
 800deac:	3fc55555 	.word	0x3fc55555
 800deb0:	fff00000 	.word	0xfff00000
 800deb4:	3ff00000 	.word	0x3ff00000
 800deb8:	4090cbff 	.word	0x4090cbff
 800debc:	3f6f3400 	.word	0x3f6f3400
 800dec0:	3fe00000 	.word	0x3fe00000
 800dec4:	652b82fe 	.word	0x652b82fe
 800dec8:	3c971547 	.word	0x3c971547
 800decc:	4090cc00 	.word	0x4090cc00

0800ded0 <__ieee754_rem_pio2>:
 800ded0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ded4:	ec57 6b10 	vmov	r6, r7, d0
 800ded8:	4bc5      	ldr	r3, [pc, #788]	@ (800e1f0 <__ieee754_rem_pio2+0x320>)
 800deda:	b08d      	sub	sp, #52	@ 0x34
 800dedc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800dee0:	4598      	cmp	r8, r3
 800dee2:	4604      	mov	r4, r0
 800dee4:	9704      	str	r7, [sp, #16]
 800dee6:	d807      	bhi.n	800def8 <__ieee754_rem_pio2+0x28>
 800dee8:	2200      	movs	r2, #0
 800deea:	2300      	movs	r3, #0
 800deec:	ed80 0b00 	vstr	d0, [r0]
 800def0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800def4:	2500      	movs	r5, #0
 800def6:	e028      	b.n	800df4a <__ieee754_rem_pio2+0x7a>
 800def8:	4bbe      	ldr	r3, [pc, #760]	@ (800e1f4 <__ieee754_rem_pio2+0x324>)
 800defa:	4598      	cmp	r8, r3
 800defc:	d878      	bhi.n	800dff0 <__ieee754_rem_pio2+0x120>
 800defe:	9b04      	ldr	r3, [sp, #16]
 800df00:	4dbd      	ldr	r5, [pc, #756]	@ (800e1f8 <__ieee754_rem_pio2+0x328>)
 800df02:	2b00      	cmp	r3, #0
 800df04:	4630      	mov	r0, r6
 800df06:	a3ac      	add	r3, pc, #688	@ (adr r3, 800e1b8 <__ieee754_rem_pio2+0x2e8>)
 800df08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0c:	4639      	mov	r1, r7
 800df0e:	dd38      	ble.n	800df82 <__ieee754_rem_pio2+0xb2>
 800df10:	f7f2 f96a 	bl	80001e8 <__aeabi_dsub>
 800df14:	45a8      	cmp	r8, r5
 800df16:	4606      	mov	r6, r0
 800df18:	460f      	mov	r7, r1
 800df1a:	d01a      	beq.n	800df52 <__ieee754_rem_pio2+0x82>
 800df1c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800e1c0 <__ieee754_rem_pio2+0x2f0>)
 800df1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df22:	f7f2 f961 	bl	80001e8 <__aeabi_dsub>
 800df26:	4602      	mov	r2, r0
 800df28:	460b      	mov	r3, r1
 800df2a:	4680      	mov	r8, r0
 800df2c:	4689      	mov	r9, r1
 800df2e:	4630      	mov	r0, r6
 800df30:	4639      	mov	r1, r7
 800df32:	f7f2 f959 	bl	80001e8 <__aeabi_dsub>
 800df36:	a3a2      	add	r3, pc, #648	@ (adr r3, 800e1c0 <__ieee754_rem_pio2+0x2f0>)
 800df38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3c:	f7f2 f954 	bl	80001e8 <__aeabi_dsub>
 800df40:	e9c4 8900 	strd	r8, r9, [r4]
 800df44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800df48:	2501      	movs	r5, #1
 800df4a:	4628      	mov	r0, r5
 800df4c:	b00d      	add	sp, #52	@ 0x34
 800df4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df52:	a39d      	add	r3, pc, #628	@ (adr r3, 800e1c8 <__ieee754_rem_pio2+0x2f8>)
 800df54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df58:	f7f2 f946 	bl	80001e8 <__aeabi_dsub>
 800df5c:	a39c      	add	r3, pc, #624	@ (adr r3, 800e1d0 <__ieee754_rem_pio2+0x300>)
 800df5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df62:	4606      	mov	r6, r0
 800df64:	460f      	mov	r7, r1
 800df66:	f7f2 f93f 	bl	80001e8 <__aeabi_dsub>
 800df6a:	4602      	mov	r2, r0
 800df6c:	460b      	mov	r3, r1
 800df6e:	4680      	mov	r8, r0
 800df70:	4689      	mov	r9, r1
 800df72:	4630      	mov	r0, r6
 800df74:	4639      	mov	r1, r7
 800df76:	f7f2 f937 	bl	80001e8 <__aeabi_dsub>
 800df7a:	a395      	add	r3, pc, #596	@ (adr r3, 800e1d0 <__ieee754_rem_pio2+0x300>)
 800df7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df80:	e7dc      	b.n	800df3c <__ieee754_rem_pio2+0x6c>
 800df82:	f7f2 f933 	bl	80001ec <__adddf3>
 800df86:	45a8      	cmp	r8, r5
 800df88:	4606      	mov	r6, r0
 800df8a:	460f      	mov	r7, r1
 800df8c:	d018      	beq.n	800dfc0 <__ieee754_rem_pio2+0xf0>
 800df8e:	a38c      	add	r3, pc, #560	@ (adr r3, 800e1c0 <__ieee754_rem_pio2+0x2f0>)
 800df90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df94:	f7f2 f92a 	bl	80001ec <__adddf3>
 800df98:	4602      	mov	r2, r0
 800df9a:	460b      	mov	r3, r1
 800df9c:	4680      	mov	r8, r0
 800df9e:	4689      	mov	r9, r1
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	4639      	mov	r1, r7
 800dfa4:	f7f2 f920 	bl	80001e8 <__aeabi_dsub>
 800dfa8:	a385      	add	r3, pc, #532	@ (adr r3, 800e1c0 <__ieee754_rem_pio2+0x2f0>)
 800dfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfae:	f7f2 f91d 	bl	80001ec <__adddf3>
 800dfb2:	f04f 35ff 	mov.w	r5, #4294967295
 800dfb6:	e9c4 8900 	strd	r8, r9, [r4]
 800dfba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dfbe:	e7c4      	b.n	800df4a <__ieee754_rem_pio2+0x7a>
 800dfc0:	a381      	add	r3, pc, #516	@ (adr r3, 800e1c8 <__ieee754_rem_pio2+0x2f8>)
 800dfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc6:	f7f2 f911 	bl	80001ec <__adddf3>
 800dfca:	a381      	add	r3, pc, #516	@ (adr r3, 800e1d0 <__ieee754_rem_pio2+0x300>)
 800dfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd0:	4606      	mov	r6, r0
 800dfd2:	460f      	mov	r7, r1
 800dfd4:	f7f2 f90a 	bl	80001ec <__adddf3>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	460b      	mov	r3, r1
 800dfdc:	4680      	mov	r8, r0
 800dfde:	4689      	mov	r9, r1
 800dfe0:	4630      	mov	r0, r6
 800dfe2:	4639      	mov	r1, r7
 800dfe4:	f7f2 f900 	bl	80001e8 <__aeabi_dsub>
 800dfe8:	a379      	add	r3, pc, #484	@ (adr r3, 800e1d0 <__ieee754_rem_pio2+0x300>)
 800dfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfee:	e7de      	b.n	800dfae <__ieee754_rem_pio2+0xde>
 800dff0:	4b82      	ldr	r3, [pc, #520]	@ (800e1fc <__ieee754_rem_pio2+0x32c>)
 800dff2:	4598      	cmp	r8, r3
 800dff4:	f200 80d1 	bhi.w	800e19a <__ieee754_rem_pio2+0x2ca>
 800dff8:	f7fe f8e6 	bl	800c1c8 <fabs>
 800dffc:	ec57 6b10 	vmov	r6, r7, d0
 800e000:	a375      	add	r3, pc, #468	@ (adr r3, 800e1d8 <__ieee754_rem_pio2+0x308>)
 800e002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e006:	4630      	mov	r0, r6
 800e008:	4639      	mov	r1, r7
 800e00a:	f7f2 faa5 	bl	8000558 <__aeabi_dmul>
 800e00e:	4b7c      	ldr	r3, [pc, #496]	@ (800e200 <__ieee754_rem_pio2+0x330>)
 800e010:	2200      	movs	r2, #0
 800e012:	f7f2 f8eb 	bl	80001ec <__adddf3>
 800e016:	f7f2 fd4f 	bl	8000ab8 <__aeabi_d2iz>
 800e01a:	4605      	mov	r5, r0
 800e01c:	f7f2 fa32 	bl	8000484 <__aeabi_i2d>
 800e020:	4602      	mov	r2, r0
 800e022:	460b      	mov	r3, r1
 800e024:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e028:	a363      	add	r3, pc, #396	@ (adr r3, 800e1b8 <__ieee754_rem_pio2+0x2e8>)
 800e02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02e:	f7f2 fa93 	bl	8000558 <__aeabi_dmul>
 800e032:	4602      	mov	r2, r0
 800e034:	460b      	mov	r3, r1
 800e036:	4630      	mov	r0, r6
 800e038:	4639      	mov	r1, r7
 800e03a:	f7f2 f8d5 	bl	80001e8 <__aeabi_dsub>
 800e03e:	a360      	add	r3, pc, #384	@ (adr r3, 800e1c0 <__ieee754_rem_pio2+0x2f0>)
 800e040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e044:	4682      	mov	sl, r0
 800e046:	468b      	mov	fp, r1
 800e048:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e04c:	f7f2 fa84 	bl	8000558 <__aeabi_dmul>
 800e050:	2d1f      	cmp	r5, #31
 800e052:	4606      	mov	r6, r0
 800e054:	460f      	mov	r7, r1
 800e056:	dc0c      	bgt.n	800e072 <__ieee754_rem_pio2+0x1a2>
 800e058:	4b6a      	ldr	r3, [pc, #424]	@ (800e204 <__ieee754_rem_pio2+0x334>)
 800e05a:	1e6a      	subs	r2, r5, #1
 800e05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e060:	4543      	cmp	r3, r8
 800e062:	d006      	beq.n	800e072 <__ieee754_rem_pio2+0x1a2>
 800e064:	4632      	mov	r2, r6
 800e066:	463b      	mov	r3, r7
 800e068:	4650      	mov	r0, sl
 800e06a:	4659      	mov	r1, fp
 800e06c:	f7f2 f8bc 	bl	80001e8 <__aeabi_dsub>
 800e070:	e00e      	b.n	800e090 <__ieee754_rem_pio2+0x1c0>
 800e072:	463b      	mov	r3, r7
 800e074:	4632      	mov	r2, r6
 800e076:	4650      	mov	r0, sl
 800e078:	4659      	mov	r1, fp
 800e07a:	f7f2 f8b5 	bl	80001e8 <__aeabi_dsub>
 800e07e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e082:	9305      	str	r3, [sp, #20]
 800e084:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e088:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e08c:	2b10      	cmp	r3, #16
 800e08e:	dc02      	bgt.n	800e096 <__ieee754_rem_pio2+0x1c6>
 800e090:	e9c4 0100 	strd	r0, r1, [r4]
 800e094:	e039      	b.n	800e10a <__ieee754_rem_pio2+0x23a>
 800e096:	a34c      	add	r3, pc, #304	@ (adr r3, 800e1c8 <__ieee754_rem_pio2+0x2f8>)
 800e098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0a0:	f7f2 fa5a 	bl	8000558 <__aeabi_dmul>
 800e0a4:	4606      	mov	r6, r0
 800e0a6:	460f      	mov	r7, r1
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	4650      	mov	r0, sl
 800e0ae:	4659      	mov	r1, fp
 800e0b0:	f7f2 f89a 	bl	80001e8 <__aeabi_dsub>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	4680      	mov	r8, r0
 800e0ba:	4689      	mov	r9, r1
 800e0bc:	4650      	mov	r0, sl
 800e0be:	4659      	mov	r1, fp
 800e0c0:	f7f2 f892 	bl	80001e8 <__aeabi_dsub>
 800e0c4:	4632      	mov	r2, r6
 800e0c6:	463b      	mov	r3, r7
 800e0c8:	f7f2 f88e 	bl	80001e8 <__aeabi_dsub>
 800e0cc:	a340      	add	r3, pc, #256	@ (adr r3, 800e1d0 <__ieee754_rem_pio2+0x300>)
 800e0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d2:	4606      	mov	r6, r0
 800e0d4:	460f      	mov	r7, r1
 800e0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0da:	f7f2 fa3d 	bl	8000558 <__aeabi_dmul>
 800e0de:	4632      	mov	r2, r6
 800e0e0:	463b      	mov	r3, r7
 800e0e2:	f7f2 f881 	bl	80001e8 <__aeabi_dsub>
 800e0e6:	4602      	mov	r2, r0
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	4606      	mov	r6, r0
 800e0ec:	460f      	mov	r7, r1
 800e0ee:	4640      	mov	r0, r8
 800e0f0:	4649      	mov	r1, r9
 800e0f2:	f7f2 f879 	bl	80001e8 <__aeabi_dsub>
 800e0f6:	9a05      	ldr	r2, [sp, #20]
 800e0f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e0fc:	1ad3      	subs	r3, r2, r3
 800e0fe:	2b31      	cmp	r3, #49	@ 0x31
 800e100:	dc20      	bgt.n	800e144 <__ieee754_rem_pio2+0x274>
 800e102:	e9c4 0100 	strd	r0, r1, [r4]
 800e106:	46c2      	mov	sl, r8
 800e108:	46cb      	mov	fp, r9
 800e10a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e10e:	4650      	mov	r0, sl
 800e110:	4642      	mov	r2, r8
 800e112:	464b      	mov	r3, r9
 800e114:	4659      	mov	r1, fp
 800e116:	f7f2 f867 	bl	80001e8 <__aeabi_dsub>
 800e11a:	463b      	mov	r3, r7
 800e11c:	4632      	mov	r2, r6
 800e11e:	f7f2 f863 	bl	80001e8 <__aeabi_dsub>
 800e122:	9b04      	ldr	r3, [sp, #16]
 800e124:	2b00      	cmp	r3, #0
 800e126:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e12a:	f6bf af0e 	bge.w	800df4a <__ieee754_rem_pio2+0x7a>
 800e12e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800e132:	6063      	str	r3, [r4, #4]
 800e134:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e138:	f8c4 8000 	str.w	r8, [r4]
 800e13c:	60a0      	str	r0, [r4, #8]
 800e13e:	60e3      	str	r3, [r4, #12]
 800e140:	426d      	negs	r5, r5
 800e142:	e702      	b.n	800df4a <__ieee754_rem_pio2+0x7a>
 800e144:	a326      	add	r3, pc, #152	@ (adr r3, 800e1e0 <__ieee754_rem_pio2+0x310>)
 800e146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e14e:	f7f2 fa03 	bl	8000558 <__aeabi_dmul>
 800e152:	4606      	mov	r6, r0
 800e154:	460f      	mov	r7, r1
 800e156:	4602      	mov	r2, r0
 800e158:	460b      	mov	r3, r1
 800e15a:	4640      	mov	r0, r8
 800e15c:	4649      	mov	r1, r9
 800e15e:	f7f2 f843 	bl	80001e8 <__aeabi_dsub>
 800e162:	4602      	mov	r2, r0
 800e164:	460b      	mov	r3, r1
 800e166:	4682      	mov	sl, r0
 800e168:	468b      	mov	fp, r1
 800e16a:	4640      	mov	r0, r8
 800e16c:	4649      	mov	r1, r9
 800e16e:	f7f2 f83b 	bl	80001e8 <__aeabi_dsub>
 800e172:	4632      	mov	r2, r6
 800e174:	463b      	mov	r3, r7
 800e176:	f7f2 f837 	bl	80001e8 <__aeabi_dsub>
 800e17a:	a31b      	add	r3, pc, #108	@ (adr r3, 800e1e8 <__ieee754_rem_pio2+0x318>)
 800e17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e180:	4606      	mov	r6, r0
 800e182:	460f      	mov	r7, r1
 800e184:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e188:	f7f2 f9e6 	bl	8000558 <__aeabi_dmul>
 800e18c:	4632      	mov	r2, r6
 800e18e:	463b      	mov	r3, r7
 800e190:	f7f2 f82a 	bl	80001e8 <__aeabi_dsub>
 800e194:	4606      	mov	r6, r0
 800e196:	460f      	mov	r7, r1
 800e198:	e764      	b.n	800e064 <__ieee754_rem_pio2+0x194>
 800e19a:	4b1b      	ldr	r3, [pc, #108]	@ (800e208 <__ieee754_rem_pio2+0x338>)
 800e19c:	4598      	cmp	r8, r3
 800e19e:	d935      	bls.n	800e20c <__ieee754_rem_pio2+0x33c>
 800e1a0:	4632      	mov	r2, r6
 800e1a2:	463b      	mov	r3, r7
 800e1a4:	4630      	mov	r0, r6
 800e1a6:	4639      	mov	r1, r7
 800e1a8:	f7f2 f81e 	bl	80001e8 <__aeabi_dsub>
 800e1ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e1b0:	e9c4 0100 	strd	r0, r1, [r4]
 800e1b4:	e69e      	b.n	800def4 <__ieee754_rem_pio2+0x24>
 800e1b6:	bf00      	nop
 800e1b8:	54400000 	.word	0x54400000
 800e1bc:	3ff921fb 	.word	0x3ff921fb
 800e1c0:	1a626331 	.word	0x1a626331
 800e1c4:	3dd0b461 	.word	0x3dd0b461
 800e1c8:	1a600000 	.word	0x1a600000
 800e1cc:	3dd0b461 	.word	0x3dd0b461
 800e1d0:	2e037073 	.word	0x2e037073
 800e1d4:	3ba3198a 	.word	0x3ba3198a
 800e1d8:	6dc9c883 	.word	0x6dc9c883
 800e1dc:	3fe45f30 	.word	0x3fe45f30
 800e1e0:	2e000000 	.word	0x2e000000
 800e1e4:	3ba3198a 	.word	0x3ba3198a
 800e1e8:	252049c1 	.word	0x252049c1
 800e1ec:	397b839a 	.word	0x397b839a
 800e1f0:	3fe921fb 	.word	0x3fe921fb
 800e1f4:	4002d97b 	.word	0x4002d97b
 800e1f8:	3ff921fb 	.word	0x3ff921fb
 800e1fc:	413921fb 	.word	0x413921fb
 800e200:	3fe00000 	.word	0x3fe00000
 800e204:	0800ee38 	.word	0x0800ee38
 800e208:	7fefffff 	.word	0x7fefffff
 800e20c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800e210:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800e214:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800e218:	4630      	mov	r0, r6
 800e21a:	460f      	mov	r7, r1
 800e21c:	f7f2 fc4c 	bl	8000ab8 <__aeabi_d2iz>
 800e220:	f7f2 f930 	bl	8000484 <__aeabi_i2d>
 800e224:	4602      	mov	r2, r0
 800e226:	460b      	mov	r3, r1
 800e228:	4630      	mov	r0, r6
 800e22a:	4639      	mov	r1, r7
 800e22c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e230:	f7f1 ffda 	bl	80001e8 <__aeabi_dsub>
 800e234:	4b22      	ldr	r3, [pc, #136]	@ (800e2c0 <__ieee754_rem_pio2+0x3f0>)
 800e236:	2200      	movs	r2, #0
 800e238:	f7f2 f98e 	bl	8000558 <__aeabi_dmul>
 800e23c:	460f      	mov	r7, r1
 800e23e:	4606      	mov	r6, r0
 800e240:	f7f2 fc3a 	bl	8000ab8 <__aeabi_d2iz>
 800e244:	f7f2 f91e 	bl	8000484 <__aeabi_i2d>
 800e248:	4602      	mov	r2, r0
 800e24a:	460b      	mov	r3, r1
 800e24c:	4630      	mov	r0, r6
 800e24e:	4639      	mov	r1, r7
 800e250:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e254:	f7f1 ffc8 	bl	80001e8 <__aeabi_dsub>
 800e258:	4b19      	ldr	r3, [pc, #100]	@ (800e2c0 <__ieee754_rem_pio2+0x3f0>)
 800e25a:	2200      	movs	r2, #0
 800e25c:	f7f2 f97c 	bl	8000558 <__aeabi_dmul>
 800e260:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800e264:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800e268:	f04f 0803 	mov.w	r8, #3
 800e26c:	2600      	movs	r6, #0
 800e26e:	2700      	movs	r7, #0
 800e270:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800e274:	4632      	mov	r2, r6
 800e276:	463b      	mov	r3, r7
 800e278:	46c2      	mov	sl, r8
 800e27a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e27e:	f7f2 fbd3 	bl	8000a28 <__aeabi_dcmpeq>
 800e282:	2800      	cmp	r0, #0
 800e284:	d1f4      	bne.n	800e270 <__ieee754_rem_pio2+0x3a0>
 800e286:	4b0f      	ldr	r3, [pc, #60]	@ (800e2c4 <__ieee754_rem_pio2+0x3f4>)
 800e288:	9301      	str	r3, [sp, #4]
 800e28a:	2302      	movs	r3, #2
 800e28c:	9300      	str	r3, [sp, #0]
 800e28e:	462a      	mov	r2, r5
 800e290:	4653      	mov	r3, sl
 800e292:	4621      	mov	r1, r4
 800e294:	a806      	add	r0, sp, #24
 800e296:	f000 f8d3 	bl	800e440 <__kernel_rem_pio2>
 800e29a:	9b04      	ldr	r3, [sp, #16]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	4605      	mov	r5, r0
 800e2a0:	f6bf ae53 	bge.w	800df4a <__ieee754_rem_pio2+0x7a>
 800e2a4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800e2a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e2ac:	e9c4 2300 	strd	r2, r3, [r4]
 800e2b0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800e2b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e2b8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800e2bc:	e740      	b.n	800e140 <__ieee754_rem_pio2+0x270>
 800e2be:	bf00      	nop
 800e2c0:	41700000 	.word	0x41700000
 800e2c4:	0800eeb8 	.word	0x0800eeb8

0800e2c8 <scalbn>:
 800e2c8:	b570      	push	{r4, r5, r6, lr}
 800e2ca:	ec55 4b10 	vmov	r4, r5, d0
 800e2ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e2d2:	4606      	mov	r6, r0
 800e2d4:	462b      	mov	r3, r5
 800e2d6:	b991      	cbnz	r1, 800e2fe <scalbn+0x36>
 800e2d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e2dc:	4323      	orrs	r3, r4
 800e2de:	d03d      	beq.n	800e35c <scalbn+0x94>
 800e2e0:	4b35      	ldr	r3, [pc, #212]	@ (800e3b8 <scalbn+0xf0>)
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	4629      	mov	r1, r5
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f7f2 f936 	bl	8000558 <__aeabi_dmul>
 800e2ec:	4b33      	ldr	r3, [pc, #204]	@ (800e3bc <scalbn+0xf4>)
 800e2ee:	429e      	cmp	r6, r3
 800e2f0:	4604      	mov	r4, r0
 800e2f2:	460d      	mov	r5, r1
 800e2f4:	da0f      	bge.n	800e316 <scalbn+0x4e>
 800e2f6:	a328      	add	r3, pc, #160	@ (adr r3, 800e398 <scalbn+0xd0>)
 800e2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fc:	e01e      	b.n	800e33c <scalbn+0x74>
 800e2fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e302:	4291      	cmp	r1, r2
 800e304:	d10b      	bne.n	800e31e <scalbn+0x56>
 800e306:	4622      	mov	r2, r4
 800e308:	4620      	mov	r0, r4
 800e30a:	4629      	mov	r1, r5
 800e30c:	f7f1 ff6e 	bl	80001ec <__adddf3>
 800e310:	4604      	mov	r4, r0
 800e312:	460d      	mov	r5, r1
 800e314:	e022      	b.n	800e35c <scalbn+0x94>
 800e316:	460b      	mov	r3, r1
 800e318:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e31c:	3936      	subs	r1, #54	@ 0x36
 800e31e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e322:	4296      	cmp	r6, r2
 800e324:	dd0d      	ble.n	800e342 <scalbn+0x7a>
 800e326:	2d00      	cmp	r5, #0
 800e328:	a11d      	add	r1, pc, #116	@ (adr r1, 800e3a0 <scalbn+0xd8>)
 800e32a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e32e:	da02      	bge.n	800e336 <scalbn+0x6e>
 800e330:	a11d      	add	r1, pc, #116	@ (adr r1, 800e3a8 <scalbn+0xe0>)
 800e332:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e336:	a31a      	add	r3, pc, #104	@ (adr r3, 800e3a0 <scalbn+0xd8>)
 800e338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33c:	f7f2 f90c 	bl	8000558 <__aeabi_dmul>
 800e340:	e7e6      	b.n	800e310 <scalbn+0x48>
 800e342:	1872      	adds	r2, r6, r1
 800e344:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e348:	428a      	cmp	r2, r1
 800e34a:	dcec      	bgt.n	800e326 <scalbn+0x5e>
 800e34c:	2a00      	cmp	r2, #0
 800e34e:	dd08      	ble.n	800e362 <scalbn+0x9a>
 800e350:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e354:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e358:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e35c:	ec45 4b10 	vmov	d0, r4, r5
 800e360:	bd70      	pop	{r4, r5, r6, pc}
 800e362:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e366:	da08      	bge.n	800e37a <scalbn+0xb2>
 800e368:	2d00      	cmp	r5, #0
 800e36a:	a10b      	add	r1, pc, #44	@ (adr r1, 800e398 <scalbn+0xd0>)
 800e36c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e370:	dac1      	bge.n	800e2f6 <scalbn+0x2e>
 800e372:	a10f      	add	r1, pc, #60	@ (adr r1, 800e3b0 <scalbn+0xe8>)
 800e374:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e378:	e7bd      	b.n	800e2f6 <scalbn+0x2e>
 800e37a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e37e:	3236      	adds	r2, #54	@ 0x36
 800e380:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e384:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e388:	4620      	mov	r0, r4
 800e38a:	4b0d      	ldr	r3, [pc, #52]	@ (800e3c0 <scalbn+0xf8>)
 800e38c:	4629      	mov	r1, r5
 800e38e:	2200      	movs	r2, #0
 800e390:	e7d4      	b.n	800e33c <scalbn+0x74>
 800e392:	bf00      	nop
 800e394:	f3af 8000 	nop.w
 800e398:	c2f8f359 	.word	0xc2f8f359
 800e39c:	01a56e1f 	.word	0x01a56e1f
 800e3a0:	8800759c 	.word	0x8800759c
 800e3a4:	7e37e43c 	.word	0x7e37e43c
 800e3a8:	8800759c 	.word	0x8800759c
 800e3ac:	fe37e43c 	.word	0xfe37e43c
 800e3b0:	c2f8f359 	.word	0xc2f8f359
 800e3b4:	81a56e1f 	.word	0x81a56e1f
 800e3b8:	43500000 	.word	0x43500000
 800e3bc:	ffff3cb0 	.word	0xffff3cb0
 800e3c0:	3c900000 	.word	0x3c900000

0800e3c4 <with_errno>:
 800e3c4:	b510      	push	{r4, lr}
 800e3c6:	ed2d 8b02 	vpush	{d8}
 800e3ca:	eeb0 8a40 	vmov.f32	s16, s0
 800e3ce:	eef0 8a60 	vmov.f32	s17, s1
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	f7fd fb76 	bl	800bac4 <__errno>
 800e3d8:	eeb0 0a48 	vmov.f32	s0, s16
 800e3dc:	eef0 0a68 	vmov.f32	s1, s17
 800e3e0:	ecbd 8b02 	vpop	{d8}
 800e3e4:	6004      	str	r4, [r0, #0]
 800e3e6:	bd10      	pop	{r4, pc}

0800e3e8 <xflow>:
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	b507      	push	{r0, r1, r2, lr}
 800e3ec:	ec51 0b10 	vmov	r0, r1, d0
 800e3f0:	b183      	cbz	r3, 800e414 <xflow+0x2c>
 800e3f2:	4602      	mov	r2, r0
 800e3f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e3f8:	e9cd 2300 	strd	r2, r3, [sp]
 800e3fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e400:	f7f2 f8aa 	bl	8000558 <__aeabi_dmul>
 800e404:	ec41 0b10 	vmov	d0, r0, r1
 800e408:	2022      	movs	r0, #34	@ 0x22
 800e40a:	b003      	add	sp, #12
 800e40c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e410:	f7ff bfd8 	b.w	800e3c4 <with_errno>
 800e414:	4602      	mov	r2, r0
 800e416:	460b      	mov	r3, r1
 800e418:	e7ee      	b.n	800e3f8 <xflow+0x10>
 800e41a:	0000      	movs	r0, r0
 800e41c:	0000      	movs	r0, r0
	...

0800e420 <__math_uflow>:
 800e420:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e428 <__math_uflow+0x8>
 800e424:	f7ff bfe0 	b.w	800e3e8 <xflow>
 800e428:	00000000 	.word	0x00000000
 800e42c:	10000000 	.word	0x10000000

0800e430 <__math_oflow>:
 800e430:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e438 <__math_oflow+0x8>
 800e434:	f7ff bfd8 	b.w	800e3e8 <xflow>
 800e438:	00000000 	.word	0x00000000
 800e43c:	70000000 	.word	0x70000000

0800e440 <__kernel_rem_pio2>:
 800e440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e444:	ed2d 8b02 	vpush	{d8}
 800e448:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800e44c:	f112 0f14 	cmn.w	r2, #20
 800e450:	9306      	str	r3, [sp, #24]
 800e452:	9104      	str	r1, [sp, #16]
 800e454:	4bbe      	ldr	r3, [pc, #760]	@ (800e750 <__kernel_rem_pio2+0x310>)
 800e456:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800e458:	9008      	str	r0, [sp, #32]
 800e45a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e45e:	9300      	str	r3, [sp, #0]
 800e460:	9b06      	ldr	r3, [sp, #24]
 800e462:	f103 33ff 	add.w	r3, r3, #4294967295
 800e466:	bfa8      	it	ge
 800e468:	1ed4      	subge	r4, r2, #3
 800e46a:	9305      	str	r3, [sp, #20]
 800e46c:	bfb2      	itee	lt
 800e46e:	2400      	movlt	r4, #0
 800e470:	2318      	movge	r3, #24
 800e472:	fb94 f4f3 	sdivge	r4, r4, r3
 800e476:	f06f 0317 	mvn.w	r3, #23
 800e47a:	fb04 3303 	mla	r3, r4, r3, r3
 800e47e:	eb03 0b02 	add.w	fp, r3, r2
 800e482:	9b00      	ldr	r3, [sp, #0]
 800e484:	9a05      	ldr	r2, [sp, #20]
 800e486:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800e740 <__kernel_rem_pio2+0x300>
 800e48a:	eb03 0802 	add.w	r8, r3, r2
 800e48e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800e490:	1aa7      	subs	r7, r4, r2
 800e492:	ae20      	add	r6, sp, #128	@ 0x80
 800e494:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e498:	2500      	movs	r5, #0
 800e49a:	4545      	cmp	r5, r8
 800e49c:	dd13      	ble.n	800e4c6 <__kernel_rem_pio2+0x86>
 800e49e:	9b06      	ldr	r3, [sp, #24]
 800e4a0:	aa20      	add	r2, sp, #128	@ 0x80
 800e4a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e4a6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800e4aa:	f04f 0800 	mov.w	r8, #0
 800e4ae:	9b00      	ldr	r3, [sp, #0]
 800e4b0:	4598      	cmp	r8, r3
 800e4b2:	dc31      	bgt.n	800e518 <__kernel_rem_pio2+0xd8>
 800e4b4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800e740 <__kernel_rem_pio2+0x300>
 800e4b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e4bc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e4c0:	462f      	mov	r7, r5
 800e4c2:	2600      	movs	r6, #0
 800e4c4:	e01b      	b.n	800e4fe <__kernel_rem_pio2+0xbe>
 800e4c6:	42ef      	cmn	r7, r5
 800e4c8:	d407      	bmi.n	800e4da <__kernel_rem_pio2+0x9a>
 800e4ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e4ce:	f7f1 ffd9 	bl	8000484 <__aeabi_i2d>
 800e4d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e4d6:	3501      	adds	r5, #1
 800e4d8:	e7df      	b.n	800e49a <__kernel_rem_pio2+0x5a>
 800e4da:	ec51 0b18 	vmov	r0, r1, d8
 800e4de:	e7f8      	b.n	800e4d2 <__kernel_rem_pio2+0x92>
 800e4e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e4e8:	f7f2 f836 	bl	8000558 <__aeabi_dmul>
 800e4ec:	4602      	mov	r2, r0
 800e4ee:	460b      	mov	r3, r1
 800e4f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4f4:	f7f1 fe7a 	bl	80001ec <__adddf3>
 800e4f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4fc:	3601      	adds	r6, #1
 800e4fe:	9b05      	ldr	r3, [sp, #20]
 800e500:	429e      	cmp	r6, r3
 800e502:	f1a7 0708 	sub.w	r7, r7, #8
 800e506:	ddeb      	ble.n	800e4e0 <__kernel_rem_pio2+0xa0>
 800e508:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e50c:	f108 0801 	add.w	r8, r8, #1
 800e510:	ecaa 7b02 	vstmia	sl!, {d7}
 800e514:	3508      	adds	r5, #8
 800e516:	e7ca      	b.n	800e4ae <__kernel_rem_pio2+0x6e>
 800e518:	9b00      	ldr	r3, [sp, #0]
 800e51a:	f8dd 8000 	ldr.w	r8, [sp]
 800e51e:	aa0c      	add	r2, sp, #48	@ 0x30
 800e520:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e524:	930a      	str	r3, [sp, #40]	@ 0x28
 800e526:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800e528:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e52c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e52e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800e532:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e534:	ab98      	add	r3, sp, #608	@ 0x260
 800e536:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e53a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800e53e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e542:	ac0c      	add	r4, sp, #48	@ 0x30
 800e544:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e546:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800e54a:	46a1      	mov	r9, r4
 800e54c:	46c2      	mov	sl, r8
 800e54e:	f1ba 0f00 	cmp.w	sl, #0
 800e552:	f1a5 0508 	sub.w	r5, r5, #8
 800e556:	dc77      	bgt.n	800e648 <__kernel_rem_pio2+0x208>
 800e558:	4658      	mov	r0, fp
 800e55a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e55e:	f7ff feb3 	bl	800e2c8 <scalbn>
 800e562:	ec57 6b10 	vmov	r6, r7, d0
 800e566:	2200      	movs	r2, #0
 800e568:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800e56c:	4630      	mov	r0, r6
 800e56e:	4639      	mov	r1, r7
 800e570:	f7f1 fff2 	bl	8000558 <__aeabi_dmul>
 800e574:	ec41 0b10 	vmov	d0, r0, r1
 800e578:	f000 faba 	bl	800eaf0 <floor>
 800e57c:	4b75      	ldr	r3, [pc, #468]	@ (800e754 <__kernel_rem_pio2+0x314>)
 800e57e:	ec51 0b10 	vmov	r0, r1, d0
 800e582:	2200      	movs	r2, #0
 800e584:	f7f1 ffe8 	bl	8000558 <__aeabi_dmul>
 800e588:	4602      	mov	r2, r0
 800e58a:	460b      	mov	r3, r1
 800e58c:	4630      	mov	r0, r6
 800e58e:	4639      	mov	r1, r7
 800e590:	f7f1 fe2a 	bl	80001e8 <__aeabi_dsub>
 800e594:	460f      	mov	r7, r1
 800e596:	4606      	mov	r6, r0
 800e598:	f7f2 fa8e 	bl	8000ab8 <__aeabi_d2iz>
 800e59c:	9002      	str	r0, [sp, #8]
 800e59e:	f7f1 ff71 	bl	8000484 <__aeabi_i2d>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	4630      	mov	r0, r6
 800e5a8:	4639      	mov	r1, r7
 800e5aa:	f7f1 fe1d 	bl	80001e8 <__aeabi_dsub>
 800e5ae:	f1bb 0f00 	cmp.w	fp, #0
 800e5b2:	4606      	mov	r6, r0
 800e5b4:	460f      	mov	r7, r1
 800e5b6:	dd6c      	ble.n	800e692 <__kernel_rem_pio2+0x252>
 800e5b8:	f108 31ff 	add.w	r1, r8, #4294967295
 800e5bc:	ab0c      	add	r3, sp, #48	@ 0x30
 800e5be:	9d02      	ldr	r5, [sp, #8]
 800e5c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5c4:	f1cb 0018 	rsb	r0, fp, #24
 800e5c8:	fa43 f200 	asr.w	r2, r3, r0
 800e5cc:	4415      	add	r5, r2
 800e5ce:	4082      	lsls	r2, r0
 800e5d0:	1a9b      	subs	r3, r3, r2
 800e5d2:	aa0c      	add	r2, sp, #48	@ 0x30
 800e5d4:	9502      	str	r5, [sp, #8]
 800e5d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e5da:	f1cb 0217 	rsb	r2, fp, #23
 800e5de:	fa43 f902 	asr.w	r9, r3, r2
 800e5e2:	f1b9 0f00 	cmp.w	r9, #0
 800e5e6:	dd64      	ble.n	800e6b2 <__kernel_rem_pio2+0x272>
 800e5e8:	9b02      	ldr	r3, [sp, #8]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	9302      	str	r3, [sp, #8]
 800e5f0:	4615      	mov	r5, r2
 800e5f2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800e5f6:	4590      	cmp	r8, r2
 800e5f8:	f300 80b8 	bgt.w	800e76c <__kernel_rem_pio2+0x32c>
 800e5fc:	f1bb 0f00 	cmp.w	fp, #0
 800e600:	dd07      	ble.n	800e612 <__kernel_rem_pio2+0x1d2>
 800e602:	f1bb 0f01 	cmp.w	fp, #1
 800e606:	f000 80bf 	beq.w	800e788 <__kernel_rem_pio2+0x348>
 800e60a:	f1bb 0f02 	cmp.w	fp, #2
 800e60e:	f000 80c6 	beq.w	800e79e <__kernel_rem_pio2+0x35e>
 800e612:	f1b9 0f02 	cmp.w	r9, #2
 800e616:	d14c      	bne.n	800e6b2 <__kernel_rem_pio2+0x272>
 800e618:	4632      	mov	r2, r6
 800e61a:	463b      	mov	r3, r7
 800e61c:	494e      	ldr	r1, [pc, #312]	@ (800e758 <__kernel_rem_pio2+0x318>)
 800e61e:	2000      	movs	r0, #0
 800e620:	f7f1 fde2 	bl	80001e8 <__aeabi_dsub>
 800e624:	4606      	mov	r6, r0
 800e626:	460f      	mov	r7, r1
 800e628:	2d00      	cmp	r5, #0
 800e62a:	d042      	beq.n	800e6b2 <__kernel_rem_pio2+0x272>
 800e62c:	4658      	mov	r0, fp
 800e62e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800e748 <__kernel_rem_pio2+0x308>
 800e632:	f7ff fe49 	bl	800e2c8 <scalbn>
 800e636:	4630      	mov	r0, r6
 800e638:	4639      	mov	r1, r7
 800e63a:	ec53 2b10 	vmov	r2, r3, d0
 800e63e:	f7f1 fdd3 	bl	80001e8 <__aeabi_dsub>
 800e642:	4606      	mov	r6, r0
 800e644:	460f      	mov	r7, r1
 800e646:	e034      	b.n	800e6b2 <__kernel_rem_pio2+0x272>
 800e648:	4b44      	ldr	r3, [pc, #272]	@ (800e75c <__kernel_rem_pio2+0x31c>)
 800e64a:	2200      	movs	r2, #0
 800e64c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e650:	f7f1 ff82 	bl	8000558 <__aeabi_dmul>
 800e654:	f7f2 fa30 	bl	8000ab8 <__aeabi_d2iz>
 800e658:	f7f1 ff14 	bl	8000484 <__aeabi_i2d>
 800e65c:	4b40      	ldr	r3, [pc, #256]	@ (800e760 <__kernel_rem_pio2+0x320>)
 800e65e:	2200      	movs	r2, #0
 800e660:	4606      	mov	r6, r0
 800e662:	460f      	mov	r7, r1
 800e664:	f7f1 ff78 	bl	8000558 <__aeabi_dmul>
 800e668:	4602      	mov	r2, r0
 800e66a:	460b      	mov	r3, r1
 800e66c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e670:	f7f1 fdba 	bl	80001e8 <__aeabi_dsub>
 800e674:	f7f2 fa20 	bl	8000ab8 <__aeabi_d2iz>
 800e678:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e67c:	f849 0b04 	str.w	r0, [r9], #4
 800e680:	4639      	mov	r1, r7
 800e682:	4630      	mov	r0, r6
 800e684:	f7f1 fdb2 	bl	80001ec <__adddf3>
 800e688:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e68c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e690:	e75d      	b.n	800e54e <__kernel_rem_pio2+0x10e>
 800e692:	d107      	bne.n	800e6a4 <__kernel_rem_pio2+0x264>
 800e694:	f108 33ff 	add.w	r3, r8, #4294967295
 800e698:	aa0c      	add	r2, sp, #48	@ 0x30
 800e69a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e69e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800e6a2:	e79e      	b.n	800e5e2 <__kernel_rem_pio2+0x1a2>
 800e6a4:	4b2f      	ldr	r3, [pc, #188]	@ (800e764 <__kernel_rem_pio2+0x324>)
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f7f2 f9dc 	bl	8000a64 <__aeabi_dcmpge>
 800e6ac:	2800      	cmp	r0, #0
 800e6ae:	d143      	bne.n	800e738 <__kernel_rem_pio2+0x2f8>
 800e6b0:	4681      	mov	r9, r0
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	4630      	mov	r0, r6
 800e6b8:	4639      	mov	r1, r7
 800e6ba:	f7f2 f9b5 	bl	8000a28 <__aeabi_dcmpeq>
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	f000 80bf 	beq.w	800e842 <__kernel_rem_pio2+0x402>
 800e6c4:	f108 33ff 	add.w	r3, r8, #4294967295
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	9900      	ldr	r1, [sp, #0]
 800e6cc:	428b      	cmp	r3, r1
 800e6ce:	da6e      	bge.n	800e7ae <__kernel_rem_pio2+0x36e>
 800e6d0:	2a00      	cmp	r2, #0
 800e6d2:	f000 8089 	beq.w	800e7e8 <__kernel_rem_pio2+0x3a8>
 800e6d6:	f108 38ff 	add.w	r8, r8, #4294967295
 800e6da:	ab0c      	add	r3, sp, #48	@ 0x30
 800e6dc:	f1ab 0b18 	sub.w	fp, fp, #24
 800e6e0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d0f6      	beq.n	800e6d6 <__kernel_rem_pio2+0x296>
 800e6e8:	4658      	mov	r0, fp
 800e6ea:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800e748 <__kernel_rem_pio2+0x308>
 800e6ee:	f7ff fdeb 	bl	800e2c8 <scalbn>
 800e6f2:	f108 0301 	add.w	r3, r8, #1
 800e6f6:	00da      	lsls	r2, r3, #3
 800e6f8:	9205      	str	r2, [sp, #20]
 800e6fa:	ec55 4b10 	vmov	r4, r5, d0
 800e6fe:	aa70      	add	r2, sp, #448	@ 0x1c0
 800e700:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800e75c <__kernel_rem_pio2+0x31c>
 800e704:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800e708:	4646      	mov	r6, r8
 800e70a:	f04f 0a00 	mov.w	sl, #0
 800e70e:	2e00      	cmp	r6, #0
 800e710:	f280 80cf 	bge.w	800e8b2 <__kernel_rem_pio2+0x472>
 800e714:	4644      	mov	r4, r8
 800e716:	2c00      	cmp	r4, #0
 800e718:	f2c0 80fd 	blt.w	800e916 <__kernel_rem_pio2+0x4d6>
 800e71c:	4b12      	ldr	r3, [pc, #72]	@ (800e768 <__kernel_rem_pio2+0x328>)
 800e71e:	461f      	mov	r7, r3
 800e720:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e722:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e726:	9306      	str	r3, [sp, #24]
 800e728:	f04f 0a00 	mov.w	sl, #0
 800e72c:	f04f 0b00 	mov.w	fp, #0
 800e730:	2600      	movs	r6, #0
 800e732:	eba8 0504 	sub.w	r5, r8, r4
 800e736:	e0e2      	b.n	800e8fe <__kernel_rem_pio2+0x4be>
 800e738:	f04f 0902 	mov.w	r9, #2
 800e73c:	e754      	b.n	800e5e8 <__kernel_rem_pio2+0x1a8>
 800e73e:	bf00      	nop
	...
 800e74c:	3ff00000 	.word	0x3ff00000
 800e750:	0800f000 	.word	0x0800f000
 800e754:	40200000 	.word	0x40200000
 800e758:	3ff00000 	.word	0x3ff00000
 800e75c:	3e700000 	.word	0x3e700000
 800e760:	41700000 	.word	0x41700000
 800e764:	3fe00000 	.word	0x3fe00000
 800e768:	0800efc0 	.word	0x0800efc0
 800e76c:	f854 3b04 	ldr.w	r3, [r4], #4
 800e770:	b945      	cbnz	r5, 800e784 <__kernel_rem_pio2+0x344>
 800e772:	b123      	cbz	r3, 800e77e <__kernel_rem_pio2+0x33e>
 800e774:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800e778:	f844 3c04 	str.w	r3, [r4, #-4]
 800e77c:	2301      	movs	r3, #1
 800e77e:	3201      	adds	r2, #1
 800e780:	461d      	mov	r5, r3
 800e782:	e738      	b.n	800e5f6 <__kernel_rem_pio2+0x1b6>
 800e784:	1acb      	subs	r3, r1, r3
 800e786:	e7f7      	b.n	800e778 <__kernel_rem_pio2+0x338>
 800e788:	f108 32ff 	add.w	r2, r8, #4294967295
 800e78c:	ab0c      	add	r3, sp, #48	@ 0x30
 800e78e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e792:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e796:	a90c      	add	r1, sp, #48	@ 0x30
 800e798:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e79c:	e739      	b.n	800e612 <__kernel_rem_pio2+0x1d2>
 800e79e:	f108 32ff 	add.w	r2, r8, #4294967295
 800e7a2:	ab0c      	add	r3, sp, #48	@ 0x30
 800e7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e7ac:	e7f3      	b.n	800e796 <__kernel_rem_pio2+0x356>
 800e7ae:	a90c      	add	r1, sp, #48	@ 0x30
 800e7b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e7b4:	3b01      	subs	r3, #1
 800e7b6:	430a      	orrs	r2, r1
 800e7b8:	e787      	b.n	800e6ca <__kernel_rem_pio2+0x28a>
 800e7ba:	3401      	adds	r4, #1
 800e7bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e7c0:	2a00      	cmp	r2, #0
 800e7c2:	d0fa      	beq.n	800e7ba <__kernel_rem_pio2+0x37a>
 800e7c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e7ca:	eb0d 0503 	add.w	r5, sp, r3
 800e7ce:	9b06      	ldr	r3, [sp, #24]
 800e7d0:	aa20      	add	r2, sp, #128	@ 0x80
 800e7d2:	4443      	add	r3, r8
 800e7d4:	f108 0701 	add.w	r7, r8, #1
 800e7d8:	3d98      	subs	r5, #152	@ 0x98
 800e7da:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800e7de:	4444      	add	r4, r8
 800e7e0:	42bc      	cmp	r4, r7
 800e7e2:	da04      	bge.n	800e7ee <__kernel_rem_pio2+0x3ae>
 800e7e4:	46a0      	mov	r8, r4
 800e7e6:	e6a2      	b.n	800e52e <__kernel_rem_pio2+0xee>
 800e7e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7ea:	2401      	movs	r4, #1
 800e7ec:	e7e6      	b.n	800e7bc <__kernel_rem_pio2+0x37c>
 800e7ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7f0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e7f4:	f7f1 fe46 	bl	8000484 <__aeabi_i2d>
 800e7f8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800eac0 <__kernel_rem_pio2+0x680>
 800e7fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e800:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e804:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e808:	46b2      	mov	sl, r6
 800e80a:	f04f 0800 	mov.w	r8, #0
 800e80e:	9b05      	ldr	r3, [sp, #20]
 800e810:	4598      	cmp	r8, r3
 800e812:	dd05      	ble.n	800e820 <__kernel_rem_pio2+0x3e0>
 800e814:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e818:	3701      	adds	r7, #1
 800e81a:	eca5 7b02 	vstmia	r5!, {d7}
 800e81e:	e7df      	b.n	800e7e0 <__kernel_rem_pio2+0x3a0>
 800e820:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800e824:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e828:	f7f1 fe96 	bl	8000558 <__aeabi_dmul>
 800e82c:	4602      	mov	r2, r0
 800e82e:	460b      	mov	r3, r1
 800e830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e834:	f7f1 fcda 	bl	80001ec <__adddf3>
 800e838:	f108 0801 	add.w	r8, r8, #1
 800e83c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e840:	e7e5      	b.n	800e80e <__kernel_rem_pio2+0x3ce>
 800e842:	f1cb 0000 	rsb	r0, fp, #0
 800e846:	ec47 6b10 	vmov	d0, r6, r7
 800e84a:	f7ff fd3d 	bl	800e2c8 <scalbn>
 800e84e:	ec55 4b10 	vmov	r4, r5, d0
 800e852:	4b9d      	ldr	r3, [pc, #628]	@ (800eac8 <__kernel_rem_pio2+0x688>)
 800e854:	2200      	movs	r2, #0
 800e856:	4620      	mov	r0, r4
 800e858:	4629      	mov	r1, r5
 800e85a:	f7f2 f903 	bl	8000a64 <__aeabi_dcmpge>
 800e85e:	b300      	cbz	r0, 800e8a2 <__kernel_rem_pio2+0x462>
 800e860:	4b9a      	ldr	r3, [pc, #616]	@ (800eacc <__kernel_rem_pio2+0x68c>)
 800e862:	2200      	movs	r2, #0
 800e864:	4620      	mov	r0, r4
 800e866:	4629      	mov	r1, r5
 800e868:	f7f1 fe76 	bl	8000558 <__aeabi_dmul>
 800e86c:	f7f2 f924 	bl	8000ab8 <__aeabi_d2iz>
 800e870:	4606      	mov	r6, r0
 800e872:	f7f1 fe07 	bl	8000484 <__aeabi_i2d>
 800e876:	4b94      	ldr	r3, [pc, #592]	@ (800eac8 <__kernel_rem_pio2+0x688>)
 800e878:	2200      	movs	r2, #0
 800e87a:	f7f1 fe6d 	bl	8000558 <__aeabi_dmul>
 800e87e:	460b      	mov	r3, r1
 800e880:	4602      	mov	r2, r0
 800e882:	4629      	mov	r1, r5
 800e884:	4620      	mov	r0, r4
 800e886:	f7f1 fcaf 	bl	80001e8 <__aeabi_dsub>
 800e88a:	f7f2 f915 	bl	8000ab8 <__aeabi_d2iz>
 800e88e:	ab0c      	add	r3, sp, #48	@ 0x30
 800e890:	f10b 0b18 	add.w	fp, fp, #24
 800e894:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e898:	f108 0801 	add.w	r8, r8, #1
 800e89c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e8a0:	e722      	b.n	800e6e8 <__kernel_rem_pio2+0x2a8>
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	4629      	mov	r1, r5
 800e8a6:	f7f2 f907 	bl	8000ab8 <__aeabi_d2iz>
 800e8aa:	ab0c      	add	r3, sp, #48	@ 0x30
 800e8ac:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e8b0:	e71a      	b.n	800e6e8 <__kernel_rem_pio2+0x2a8>
 800e8b2:	ab0c      	add	r3, sp, #48	@ 0x30
 800e8b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e8b8:	f7f1 fde4 	bl	8000484 <__aeabi_i2d>
 800e8bc:	4622      	mov	r2, r4
 800e8be:	462b      	mov	r3, r5
 800e8c0:	f7f1 fe4a 	bl	8000558 <__aeabi_dmul>
 800e8c4:	4652      	mov	r2, sl
 800e8c6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800e8ca:	465b      	mov	r3, fp
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	4629      	mov	r1, r5
 800e8d0:	f7f1 fe42 	bl	8000558 <__aeabi_dmul>
 800e8d4:	3e01      	subs	r6, #1
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	460d      	mov	r5, r1
 800e8da:	e718      	b.n	800e70e <__kernel_rem_pio2+0x2ce>
 800e8dc:	9906      	ldr	r1, [sp, #24]
 800e8de:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800e8e2:	9106      	str	r1, [sp, #24]
 800e8e4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800e8e8:	f7f1 fe36 	bl	8000558 <__aeabi_dmul>
 800e8ec:	4602      	mov	r2, r0
 800e8ee:	460b      	mov	r3, r1
 800e8f0:	4650      	mov	r0, sl
 800e8f2:	4659      	mov	r1, fp
 800e8f4:	f7f1 fc7a 	bl	80001ec <__adddf3>
 800e8f8:	3601      	adds	r6, #1
 800e8fa:	4682      	mov	sl, r0
 800e8fc:	468b      	mov	fp, r1
 800e8fe:	9b00      	ldr	r3, [sp, #0]
 800e900:	429e      	cmp	r6, r3
 800e902:	dc01      	bgt.n	800e908 <__kernel_rem_pio2+0x4c8>
 800e904:	42b5      	cmp	r5, r6
 800e906:	dae9      	bge.n	800e8dc <__kernel_rem_pio2+0x49c>
 800e908:	ab48      	add	r3, sp, #288	@ 0x120
 800e90a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e90e:	e9c5 ab00 	strd	sl, fp, [r5]
 800e912:	3c01      	subs	r4, #1
 800e914:	e6ff      	b.n	800e716 <__kernel_rem_pio2+0x2d6>
 800e916:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e918:	2b02      	cmp	r3, #2
 800e91a:	dc0b      	bgt.n	800e934 <__kernel_rem_pio2+0x4f4>
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	dc39      	bgt.n	800e994 <__kernel_rem_pio2+0x554>
 800e920:	d05d      	beq.n	800e9de <__kernel_rem_pio2+0x59e>
 800e922:	9b02      	ldr	r3, [sp, #8]
 800e924:	f003 0007 	and.w	r0, r3, #7
 800e928:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800e92c:	ecbd 8b02 	vpop	{d8}
 800e930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e934:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e936:	2b03      	cmp	r3, #3
 800e938:	d1f3      	bne.n	800e922 <__kernel_rem_pio2+0x4e2>
 800e93a:	9b05      	ldr	r3, [sp, #20]
 800e93c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e940:	eb0d 0403 	add.w	r4, sp, r3
 800e944:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800e948:	4625      	mov	r5, r4
 800e94a:	46c2      	mov	sl, r8
 800e94c:	f1ba 0f00 	cmp.w	sl, #0
 800e950:	f1a5 0508 	sub.w	r5, r5, #8
 800e954:	dc6b      	bgt.n	800ea2e <__kernel_rem_pio2+0x5ee>
 800e956:	4645      	mov	r5, r8
 800e958:	2d01      	cmp	r5, #1
 800e95a:	f1a4 0408 	sub.w	r4, r4, #8
 800e95e:	f300 8087 	bgt.w	800ea70 <__kernel_rem_pio2+0x630>
 800e962:	9c05      	ldr	r4, [sp, #20]
 800e964:	ab48      	add	r3, sp, #288	@ 0x120
 800e966:	441c      	add	r4, r3
 800e968:	2000      	movs	r0, #0
 800e96a:	2100      	movs	r1, #0
 800e96c:	f1b8 0f01 	cmp.w	r8, #1
 800e970:	f300 809c 	bgt.w	800eaac <__kernel_rem_pio2+0x66c>
 800e974:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800e978:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800e97c:	f1b9 0f00 	cmp.w	r9, #0
 800e980:	f040 80a6 	bne.w	800ead0 <__kernel_rem_pio2+0x690>
 800e984:	9b04      	ldr	r3, [sp, #16]
 800e986:	e9c3 7800 	strd	r7, r8, [r3]
 800e98a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e98e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e992:	e7c6      	b.n	800e922 <__kernel_rem_pio2+0x4e2>
 800e994:	9d05      	ldr	r5, [sp, #20]
 800e996:	ab48      	add	r3, sp, #288	@ 0x120
 800e998:	441d      	add	r5, r3
 800e99a:	4644      	mov	r4, r8
 800e99c:	2000      	movs	r0, #0
 800e99e:	2100      	movs	r1, #0
 800e9a0:	2c00      	cmp	r4, #0
 800e9a2:	da35      	bge.n	800ea10 <__kernel_rem_pio2+0x5d0>
 800e9a4:	f1b9 0f00 	cmp.w	r9, #0
 800e9a8:	d038      	beq.n	800ea1c <__kernel_rem_pio2+0x5dc>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e9b0:	9c04      	ldr	r4, [sp, #16]
 800e9b2:	e9c4 2300 	strd	r2, r3, [r4]
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800e9be:	f7f1 fc13 	bl	80001e8 <__aeabi_dsub>
 800e9c2:	ad4a      	add	r5, sp, #296	@ 0x128
 800e9c4:	2401      	movs	r4, #1
 800e9c6:	45a0      	cmp	r8, r4
 800e9c8:	da2b      	bge.n	800ea22 <__kernel_rem_pio2+0x5e2>
 800e9ca:	f1b9 0f00 	cmp.w	r9, #0
 800e9ce:	d002      	beq.n	800e9d6 <__kernel_rem_pio2+0x596>
 800e9d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	9b04      	ldr	r3, [sp, #16]
 800e9d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e9dc:	e7a1      	b.n	800e922 <__kernel_rem_pio2+0x4e2>
 800e9de:	9c05      	ldr	r4, [sp, #20]
 800e9e0:	ab48      	add	r3, sp, #288	@ 0x120
 800e9e2:	441c      	add	r4, r3
 800e9e4:	2000      	movs	r0, #0
 800e9e6:	2100      	movs	r1, #0
 800e9e8:	f1b8 0f00 	cmp.w	r8, #0
 800e9ec:	da09      	bge.n	800ea02 <__kernel_rem_pio2+0x5c2>
 800e9ee:	f1b9 0f00 	cmp.w	r9, #0
 800e9f2:	d002      	beq.n	800e9fa <__kernel_rem_pio2+0x5ba>
 800e9f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	9b04      	ldr	r3, [sp, #16]
 800e9fc:	e9c3 0100 	strd	r0, r1, [r3]
 800ea00:	e78f      	b.n	800e922 <__kernel_rem_pio2+0x4e2>
 800ea02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ea06:	f7f1 fbf1 	bl	80001ec <__adddf3>
 800ea0a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea0e:	e7eb      	b.n	800e9e8 <__kernel_rem_pio2+0x5a8>
 800ea10:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ea14:	f7f1 fbea 	bl	80001ec <__adddf3>
 800ea18:	3c01      	subs	r4, #1
 800ea1a:	e7c1      	b.n	800e9a0 <__kernel_rem_pio2+0x560>
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	460b      	mov	r3, r1
 800ea20:	e7c6      	b.n	800e9b0 <__kernel_rem_pio2+0x570>
 800ea22:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ea26:	f7f1 fbe1 	bl	80001ec <__adddf3>
 800ea2a:	3401      	adds	r4, #1
 800ea2c:	e7cb      	b.n	800e9c6 <__kernel_rem_pio2+0x586>
 800ea2e:	ed95 7b00 	vldr	d7, [r5]
 800ea32:	ed8d 7b00 	vstr	d7, [sp]
 800ea36:	ed95 7b02 	vldr	d7, [r5, #8]
 800ea3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea3e:	ec53 2b17 	vmov	r2, r3, d7
 800ea42:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ea46:	f7f1 fbd1 	bl	80001ec <__adddf3>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	4606      	mov	r6, r0
 800ea50:	460f      	mov	r7, r1
 800ea52:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea56:	f7f1 fbc7 	bl	80001e8 <__aeabi_dsub>
 800ea5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea5e:	f7f1 fbc5 	bl	80001ec <__adddf3>
 800ea62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea66:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800ea6a:	e9c5 6700 	strd	r6, r7, [r5]
 800ea6e:	e76d      	b.n	800e94c <__kernel_rem_pio2+0x50c>
 800ea70:	ed94 7b00 	vldr	d7, [r4]
 800ea74:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800ea78:	ec51 0b17 	vmov	r0, r1, d7
 800ea7c:	4652      	mov	r2, sl
 800ea7e:	465b      	mov	r3, fp
 800ea80:	ed8d 7b00 	vstr	d7, [sp]
 800ea84:	f7f1 fbb2 	bl	80001ec <__adddf3>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	4606      	mov	r6, r0
 800ea8e:	460f      	mov	r7, r1
 800ea90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea94:	f7f1 fba8 	bl	80001e8 <__aeabi_dsub>
 800ea98:	4652      	mov	r2, sl
 800ea9a:	465b      	mov	r3, fp
 800ea9c:	f7f1 fba6 	bl	80001ec <__adddf3>
 800eaa0:	3d01      	subs	r5, #1
 800eaa2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eaa6:	e9c4 6700 	strd	r6, r7, [r4]
 800eaaa:	e755      	b.n	800e958 <__kernel_rem_pio2+0x518>
 800eaac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eab0:	f7f1 fb9c 	bl	80001ec <__adddf3>
 800eab4:	f108 38ff 	add.w	r8, r8, #4294967295
 800eab8:	e758      	b.n	800e96c <__kernel_rem_pio2+0x52c>
 800eaba:	bf00      	nop
 800eabc:	f3af 8000 	nop.w
	...
 800eac8:	41700000 	.word	0x41700000
 800eacc:	3e700000 	.word	0x3e700000
 800ead0:	9b04      	ldr	r3, [sp, #16]
 800ead2:	9a04      	ldr	r2, [sp, #16]
 800ead4:	601f      	str	r7, [r3, #0]
 800ead6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800eada:	605c      	str	r4, [r3, #4]
 800eadc:	609d      	str	r5, [r3, #8]
 800eade:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800eae2:	60d3      	str	r3, [r2, #12]
 800eae4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eae8:	6110      	str	r0, [r2, #16]
 800eaea:	6153      	str	r3, [r2, #20]
 800eaec:	e719      	b.n	800e922 <__kernel_rem_pio2+0x4e2>
 800eaee:	bf00      	nop

0800eaf0 <floor>:
 800eaf0:	ec51 0b10 	vmov	r0, r1, d0
 800eaf4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eaf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eafc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800eb00:	2e13      	cmp	r6, #19
 800eb02:	460c      	mov	r4, r1
 800eb04:	4605      	mov	r5, r0
 800eb06:	4680      	mov	r8, r0
 800eb08:	dc34      	bgt.n	800eb74 <floor+0x84>
 800eb0a:	2e00      	cmp	r6, #0
 800eb0c:	da17      	bge.n	800eb3e <floor+0x4e>
 800eb0e:	a332      	add	r3, pc, #200	@ (adr r3, 800ebd8 <floor+0xe8>)
 800eb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb14:	f7f1 fb6a 	bl	80001ec <__adddf3>
 800eb18:	2200      	movs	r2, #0
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	f7f1 ffac 	bl	8000a78 <__aeabi_dcmpgt>
 800eb20:	b150      	cbz	r0, 800eb38 <floor+0x48>
 800eb22:	2c00      	cmp	r4, #0
 800eb24:	da55      	bge.n	800ebd2 <floor+0xe2>
 800eb26:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800eb2a:	432c      	orrs	r4, r5
 800eb2c:	2500      	movs	r5, #0
 800eb2e:	42ac      	cmp	r4, r5
 800eb30:	4c2b      	ldr	r4, [pc, #172]	@ (800ebe0 <floor+0xf0>)
 800eb32:	bf08      	it	eq
 800eb34:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800eb38:	4621      	mov	r1, r4
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	e023      	b.n	800eb86 <floor+0x96>
 800eb3e:	4f29      	ldr	r7, [pc, #164]	@ (800ebe4 <floor+0xf4>)
 800eb40:	4137      	asrs	r7, r6
 800eb42:	ea01 0307 	and.w	r3, r1, r7
 800eb46:	4303      	orrs	r3, r0
 800eb48:	d01d      	beq.n	800eb86 <floor+0x96>
 800eb4a:	a323      	add	r3, pc, #140	@ (adr r3, 800ebd8 <floor+0xe8>)
 800eb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb50:	f7f1 fb4c 	bl	80001ec <__adddf3>
 800eb54:	2200      	movs	r2, #0
 800eb56:	2300      	movs	r3, #0
 800eb58:	f7f1 ff8e 	bl	8000a78 <__aeabi_dcmpgt>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	d0eb      	beq.n	800eb38 <floor+0x48>
 800eb60:	2c00      	cmp	r4, #0
 800eb62:	bfbe      	ittt	lt
 800eb64:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800eb68:	4133      	asrlt	r3, r6
 800eb6a:	18e4      	addlt	r4, r4, r3
 800eb6c:	ea24 0407 	bic.w	r4, r4, r7
 800eb70:	2500      	movs	r5, #0
 800eb72:	e7e1      	b.n	800eb38 <floor+0x48>
 800eb74:	2e33      	cmp	r6, #51	@ 0x33
 800eb76:	dd0a      	ble.n	800eb8e <floor+0x9e>
 800eb78:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800eb7c:	d103      	bne.n	800eb86 <floor+0x96>
 800eb7e:	4602      	mov	r2, r0
 800eb80:	460b      	mov	r3, r1
 800eb82:	f7f1 fb33 	bl	80001ec <__adddf3>
 800eb86:	ec41 0b10 	vmov	d0, r0, r1
 800eb8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb8e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800eb92:	f04f 37ff 	mov.w	r7, #4294967295
 800eb96:	40df      	lsrs	r7, r3
 800eb98:	4207      	tst	r7, r0
 800eb9a:	d0f4      	beq.n	800eb86 <floor+0x96>
 800eb9c:	a30e      	add	r3, pc, #56	@ (adr r3, 800ebd8 <floor+0xe8>)
 800eb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba2:	f7f1 fb23 	bl	80001ec <__adddf3>
 800eba6:	2200      	movs	r2, #0
 800eba8:	2300      	movs	r3, #0
 800ebaa:	f7f1 ff65 	bl	8000a78 <__aeabi_dcmpgt>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	d0c2      	beq.n	800eb38 <floor+0x48>
 800ebb2:	2c00      	cmp	r4, #0
 800ebb4:	da0a      	bge.n	800ebcc <floor+0xdc>
 800ebb6:	2e14      	cmp	r6, #20
 800ebb8:	d101      	bne.n	800ebbe <floor+0xce>
 800ebba:	3401      	adds	r4, #1
 800ebbc:	e006      	b.n	800ebcc <floor+0xdc>
 800ebbe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	40b3      	lsls	r3, r6
 800ebc6:	441d      	add	r5, r3
 800ebc8:	4545      	cmp	r5, r8
 800ebca:	d3f6      	bcc.n	800ebba <floor+0xca>
 800ebcc:	ea25 0507 	bic.w	r5, r5, r7
 800ebd0:	e7b2      	b.n	800eb38 <floor+0x48>
 800ebd2:	2500      	movs	r5, #0
 800ebd4:	462c      	mov	r4, r5
 800ebd6:	e7af      	b.n	800eb38 <floor+0x48>
 800ebd8:	8800759c 	.word	0x8800759c
 800ebdc:	7e37e43c 	.word	0x7e37e43c
 800ebe0:	bff00000 	.word	0xbff00000
 800ebe4:	000fffff 	.word	0x000fffff

0800ebe8 <_init>:
 800ebe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebea:	bf00      	nop
 800ebec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebee:	bc08      	pop	{r3}
 800ebf0:	469e      	mov	lr, r3
 800ebf2:	4770      	bx	lr

0800ebf4 <_fini>:
 800ebf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebf6:	bf00      	nop
 800ebf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ebfa:	bc08      	pop	{r3}
 800ebfc:	469e      	mov	lr, r3
 800ebfe:	4770      	bx	lr
