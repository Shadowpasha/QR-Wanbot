
QR_Wanbot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f520  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800f6c0  0800f6c0  000106c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb20  0800fb20  00011118  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb20  0800fb20  00010b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb28  0800fb28  00011118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb28  0800fb28  00010b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fb2c  0800fb2c  00010b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000118  20000000  0800fb30  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006060  20000118  0800fc48  00011118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006178  0800fc48  00011178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011118  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019136  00000000  00000000  00011148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c35  00000000  00000000  0002a27e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0002deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef5  00000000  00000000  0002f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d21  00000000  00000000  0003010d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ea9  00000000  00000000  00049e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094905  00000000  00000000  00063cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f85dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e58  00000000  00000000  000f8620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000fe478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000118 	.word	0x20000118
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f6a8 	.word	0x0800f6a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000011c 	.word	0x2000011c
 80001dc:	0800f6a8 	.word	0x0800f6a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MPUInit>:
 */

#include "MPU6050.h"


void MPUInit(MPU6050_t *mpu6050, I2C_HandleTypeDef *hi2c,uint8_t rate, uint8_t AccelerometerSensitivity, uint8_t GyroscopeSensitivity, float sample_time, float alpha){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	@ 0x30
 8000f8c:	af04      	add	r7, sp, #16
 8000f8e:	6178      	str	r0, [r7, #20]
 8000f90:	6139      	str	r1, [r7, #16]
 8000f92:	4611      	mov	r1, r2
 8000f94:	461a      	mov	r2, r3
 8000f96:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f9a:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	73bb      	strb	r3, [r7, #14]

	uint8_t data;
	uint8_t temp;
	mpu6050->hi2c = hi2c;
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	601a      	str	r2, [r3, #0]
	mpu6050->alpha = alpha;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	641a      	str	r2, [r3, #64]	@ 0x40
	mpu6050->sample_time = sample_time;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	63da      	str	r2, [r3, #60]	@ 0x3c


	data = 0x00;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	77fb      	strb	r3, [r7, #31]
	HAL_I2C_Mem_Write(mpu6050->hi2c, (uint16_t)0xD0, MPU6050_PWR_MGMT_1, 1,&data, 1, 500);
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	f107 031f 	add.w	r3, r7, #31
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	226b      	movs	r2, #107	@ 0x6b
 8000fd4:	21d0      	movs	r1, #208	@ 0xd0
 8000fd6:	f005 fc21 	bl	800681c <HAL_I2C_Mem_Write>

	/* Set sample rate to 1kHz */
	data = rate;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	77fb      	strb	r3, [r7, #31]
	HAL_I2C_Mem_Write(mpu6050->hi2c, (uint16_t)0xD0, MPU6050_SMPLRT_DIV, 1,&data, 1, 500);
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	6818      	ldr	r0, [r3, #0]
 8000fe2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	f107 031f 	add.w	r3, r7, #31
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	2219      	movs	r2, #25
 8000ff6:	21d0      	movs	r1, #208	@ 0xd0
 8000ff8:	f005 fc10 	bl	800681c <HAL_I2C_Mem_Write>

	/* Config accelerometer */
	uint8_t reg = MPU6050_ACCEL_CONFIG;
 8000ffc:	231c      	movs	r3, #28
 8000ffe:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(mpu6050->hi2c, (uint16_t)0xD0, &reg, 1, 500);
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	f107 021d 	add.w	r2, r7, #29
 8001008:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	21d0      	movs	r1, #208	@ 0xd0
 8001012:	f005 f8d3 	bl	80061bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(mpu6050->hi2c, (uint16_t)0xD0, &temp, 1, 500);
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	f107 021e 	add.w	r2, r7, #30
 800101e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2301      	movs	r3, #1
 8001026:	21d0      	movs	r1, #208	@ 0xd0
 8001028:	f005 f9c6 	bl	80063b8 <HAL_I2C_Master_Receive>
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 800102c:	7fbb      	ldrb	r3, [r7, #30]
 800102e:	b25b      	sxtb	r3, r3
 8001030:	f023 0318 	bic.w	r3, r3, #24
 8001034:	b25a      	sxtb	r2, r3
 8001036:	7bbb      	ldrb	r3, [r7, #14]
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	b25b      	sxtb	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	b25b      	sxtb	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	77bb      	strb	r3, [r7, #30]
	HAL_I2C_Master_Transmit(mpu6050->hi2c, (uint16_t)0xD0,&temp, 1, 500);
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	f107 021e 	add.w	r2, r7, #30
 800104c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	21d0      	movs	r1, #208	@ 0xd0
 8001056:	f005 f8b1 	bl	80061bc <HAL_I2C_Master_Transmit>

	switch (AccelerometerSensitivity) {
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	2b03      	cmp	r3, #3
 800105e:	d81f      	bhi.n	80010a0 <MPUInit+0x118>
 8001060:	a201      	add	r2, pc, #4	@ (adr r2, 8001068 <MPUInit+0xe0>)
 8001062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001066:	bf00      	nop
 8001068:	08001079 	.word	0x08001079
 800106c:	08001083 	.word	0x08001083
 8001070:	0800108d 	.word	0x0800108d
 8001074:	08001097 	.word	0x08001097
	case MPU6050_Accelerometer_2G:
		mpu6050->Acc_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	f04f 5262 	mov.w	r2, #947912704	@ 0x38800000
 800107e:	621a      	str	r2, [r3, #32]
		break;
 8001080:	e00f      	b.n	80010a2 <MPUInit+0x11a>
	case MPU6050_Accelerometer_4G:
		mpu6050->Acc_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f04f 5264 	mov.w	r2, #956301312	@ 0x39000000
 8001088:	621a      	str	r2, [r3, #32]
		break;
 800108a:	e00a      	b.n	80010a2 <MPUInit+0x11a>
	case MPU6050_Accelerometer_8G:
		mpu6050->Acc_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f04f 5266 	mov.w	r2, #964689920	@ 0x39800000
 8001092:	621a      	str	r2, [r3, #32]
		break;
 8001094:	e005      	b.n	80010a2 <MPUInit+0x11a>
	case MPU6050_Accelerometer_16G:
		mpu6050->Acc_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f04f 5268 	mov.w	r2, #973078528	@ 0x3a000000
 800109c:	621a      	str	r2, [r3, #32]
		break;
 800109e:	e000      	b.n	80010a2 <MPUInit+0x11a>
	default:
		break;
 80010a0:	bf00      	nop
	}

	/* Config Gyroscope */
	reg = MPU6050_GYRO_CONFIG;
 80010a2:	231b      	movs	r3, #27
 80010a4:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(mpu6050->hi2c, (uint16_t)0xD0, &reg, 1, 500);
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	6818      	ldr	r0, [r3, #0]
 80010aa:	f107 021d 	add.w	r2, r7, #29
 80010ae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2301      	movs	r3, #1
 80010b6:	21d0      	movs	r1, #208	@ 0xd0
 80010b8:	f005 f880 	bl	80061bc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(mpu6050->hi2c, (uint16_t)0xD0, &temp, 1, 500);
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	f107 021e 	add.w	r2, r7, #30
 80010c4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	2301      	movs	r3, #1
 80010cc:	21d0      	movs	r1, #208	@ 0xd0
 80010ce:	f005 f973 	bl	80063b8 <HAL_I2C_Master_Receive>
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity  << 3;
 80010d2:	7fbb      	ldrb	r3, [r7, #30]
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	f023 0318 	bic.w	r3, r3, #24
 80010da:	b25a      	sxtb	r2, r3
 80010dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	77bb      	strb	r3, [r7, #30]
	HAL_I2C_Master_Transmit(mpu6050->hi2c, (uint16_t)0xD0,&temp, 1, 500);
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	6818      	ldr	r0, [r3, #0]
 80010f0:	f107 021e 	add.w	r2, r7, #30
 80010f4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2301      	movs	r3, #1
 80010fc:	21d0      	movs	r1, #208	@ 0xd0
 80010fe:	f005 f85d 	bl	80061bc <HAL_I2C_Master_Transmit>

	switch (GyroscopeSensitivity) {
 8001102:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001106:	2b03      	cmp	r3, #3
 8001108:	d81a      	bhi.n	8001140 <MPUInit+0x1b8>
 800110a:	a201      	add	r2, pc, #4	@ (adr r2, 8001110 <MPUInit+0x188>)
 800110c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001110:	08001121 	.word	0x08001121
 8001114:	08001129 	.word	0x08001129
 8001118:	08001131 	.word	0x08001131
 800111c:	08001139 	.word	0x08001139
	case MPU6050_Gyroscope_250s:
		mpu6050->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	4a0a      	ldr	r2, [pc, #40]	@ (800114c <MPUInit+0x1c4>)
 8001124:	61da      	str	r2, [r3, #28]
		break;
 8001126:	e00c      	b.n	8001142 <MPUInit+0x1ba>
	case MPU6050_Gyroscope_500s:
		mpu6050->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	4a09      	ldr	r2, [pc, #36]	@ (8001150 <MPUInit+0x1c8>)
 800112c:	61da      	str	r2, [r3, #28]
		break;
 800112e:	e008      	b.n	8001142 <MPUInit+0x1ba>
	case MPU6050_Gyroscope_1000s:
		mpu6050->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <MPUInit+0x1cc>)
 8001134:	61da      	str	r2, [r3, #28]
		break;
 8001136:	e004      	b.n	8001142 <MPUInit+0x1ba>
	case MPU6050_Gyroscope_2000s:
		mpu6050->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	4a07      	ldr	r2, [pc, #28]	@ (8001158 <MPUInit+0x1d0>)
 800113c:	61da      	str	r2, [r3, #28]
		break;
 800113e:	e000      	b.n	8001142 <MPUInit+0x1ba>
	default:
		break;
 8001140:	bf00      	nop
	}

}
 8001142:	bf00      	nop
 8001144:	3720      	adds	r7, #32
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	3bfa232d 	.word	0x3bfa232d
 8001150:	3c7a232d 	.word	0x3c7a232d
 8001154:	3cf9c190 	.word	0x3cf9c190
 8001158:	3d79c190 	.word	0x3d79c190

0800115c <MPUSetOffsets>:

void MPUSetOffsets(MPU6050_t *mpu6050, int16_t ACCx, int16_t ACCy, int16_t ACCz, int16_t GYROx, int16_t GYROy, int16_t GYROz){
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	4608      	mov	r0, r1
 8001166:	4611      	mov	r1, r2
 8001168:	461a      	mov	r2, r3
 800116a:	4603      	mov	r3, r0
 800116c:	817b      	strh	r3, [r7, #10]
 800116e:	460b      	mov	r3, r1
 8001170:	813b      	strh	r3, [r7, #8]
 8001172:	4613      	mov	r3, r2
 8001174:	80fb      	strh	r3, [r7, #6]

	mpu6050->Acc_offsets[0] = ACCx;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	897a      	ldrh	r2, [r7, #10]
 800117a:	82da      	strh	r2, [r3, #22]
	mpu6050->Acc_offsets[1] = ACCy;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	893a      	ldrh	r2, [r7, #8]
 8001180:	831a      	strh	r2, [r3, #24]
	mpu6050->Acc_offsets[2] = ACCz;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	88fa      	ldrh	r2, [r7, #6]
 8001186:	835a      	strh	r2, [r3, #26]

	mpu6050->Gyro_offsets[0] = GYROx;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	8b3a      	ldrh	r2, [r7, #24]
 800118c:	821a      	strh	r2, [r3, #16]
	mpu6050->Gyro_offsets[1] = GYROy;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	8bba      	ldrh	r2, [r7, #28]
 8001192:	825a      	strh	r2, [r3, #18]
	mpu6050->Gyro_offsets[2] = GYROz;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	8c3a      	ldrh	r2, [r7, #32]
 8001198:	829a      	strh	r2, [r3, #20]

}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <MPUReqAccGyro>:

void MPUReqAccGyro(MPU6050_t *mpu6050){
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b088      	sub	sp, #32
 80011aa:	af04      	add	r7, sp, #16
 80011ac:	6078      	str	r0, [r7, #4]

	uint8_t buff[6];

	HAL_I2C_Mem_Read(mpu6050->hi2c, (uint16_t)0xD0, MPU6050_ACCEL_XOUT_H, 1, buff, 6, 5);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	2305      	movs	r3, #5
 80011b4:	9302      	str	r3, [sp, #8]
 80011b6:	2306      	movs	r3, #6
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2301      	movs	r3, #1
 80011c2:	223b      	movs	r2, #59	@ 0x3b
 80011c4:	21d0      	movs	r1, #208	@ 0xd0
 80011c6:	f005 fc23 	bl	8006a10 <HAL_I2C_Mem_Read>

	mpu6050->Accx = (int16_t)(buff[0] << 8 | buff[1]);
 80011ca:	7a3b      	ldrb	r3, [r7, #8]
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	7a7b      	ldrb	r3, [r7, #9]
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	809a      	strh	r2, [r3, #4]
	mpu6050->Accy = (int16_t)(buff[2] << 8 | buff[3]);
 80011dc:	7abb      	ldrb	r3, [r7, #10]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	7afb      	ldrb	r3, [r7, #11]
 80011e4:	b21b      	sxth	r3, r3
 80011e6:	4313      	orrs	r3, r2
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	80da      	strh	r2, [r3, #6]
	mpu6050->Accz = (int16_t)(buff[4] << 8 | buff[5]);
 80011ee:	7b3b      	ldrb	r3, [r7, #12]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	7b7b      	ldrb	r3, [r7, #13]
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	811a      	strh	r2, [r3, #8]

	mpu6050->Acc_f[0] = (mpu6050->Accx + mpu6050->Acc_offsets[0]) * mpu6050->Acc_Mult;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001206:	461a      	mov	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800120e:	4413      	add	r3, r2
 8001210:	ee07 3a90 	vmov	s15, r3
 8001214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	edd3 7a08 	vldr	s15, [r3, #32]
 800121e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	mpu6050->Acc_f[1] = (mpu6050->Accy + mpu6050->Acc_offsets[1]) * mpu6050->Acc_Mult;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800122e:	461a      	mov	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001236:	4413      	add	r3, r2
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	edd3 7a08 	vldr	s15, [r3, #32]
 8001246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	mpu6050->Acc_f[2] = (mpu6050->Accz + mpu6050->Acc_offsets[2]) * mpu6050->Acc_Mult;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001256:	461a      	mov	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800125e:	4413      	add	r3, r2
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	edd3 7a08 	vldr	s15, [r3, #32]
 800126e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	HAL_I2C_Mem_Read(mpu6050->hi2c, (uint16_t)0xD0, MPU6050_GYRO_XOUT_H, 1, buff, 6, 5);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	2305      	movs	r3, #5
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	2306      	movs	r3, #6
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	2243      	movs	r2, #67	@ 0x43
 800128e:	21d0      	movs	r1, #208	@ 0xd0
 8001290:	f005 fbbe 	bl	8006a10 <HAL_I2C_Mem_Read>

	mpu6050->Gyrox = (int16_t)(buff[0] << 8 | buff[1]);
 8001294:	7a3b      	ldrb	r3, [r7, #8]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	7a7b      	ldrb	r3, [r7, #9]
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	815a      	strh	r2, [r3, #10]
	mpu6050->Gyroy = (int16_t)(buff[2] << 8 | buff[3]);
 80012a6:	7abb      	ldrb	r3, [r7, #10]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	7afb      	ldrb	r3, [r7, #11]
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	819a      	strh	r2, [r3, #12]
	mpu6050->Gyroz = (int16_t)(buff[4] << 8 | buff[5]);
 80012b8:	7b3b      	ldrb	r3, [r7, #12]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	7b7b      	ldrb	r3, [r7, #13]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	81da      	strh	r2, [r3, #14]

	mpu6050->Gyro_f[0] = (mpu6050->Gyrox + mpu6050->Gyro_offsets[0]) * mpu6050->Gyro_Mult;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80012d0:	461a      	mov	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80012d8:	4413      	add	r3, r2
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80012e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	mpu6050->Gyro_f[1] = (mpu6050->Gyroy + mpu6050->Gyro_offsets[1]) * mpu6050->Gyro_Mult;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001300:	4413      	add	r3, r2
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	mpu6050->Gyro_f[2] = (mpu6050->Gyroz + mpu6050->Gyro_offsets[2]) * mpu6050->Gyro_Mult;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001320:	461a      	mov	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001328:	4413      	add	r3, r2
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	edd3 7a07 	vldr	s15, [r3, #28]
 8001338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	0000      	movs	r0, r0
 800134c:	0000      	movs	r0, r0
	...

08001350 <CompPitchRoll>:


void CompPitchRoll(MPU6050_t *mpu6050){
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

	if(mpu6050->Acc_f[1] && mpu6050->Acc_f[2] && mpu6050->Acc_f[0]){
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800135e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001366:	f000 809d 	beq.w	80014a4 <CompPitchRoll+0x154>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001370:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001378:	f000 8094 	beq.w	80014a4 <CompPitchRoll+0x154>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001382:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138a:	f000 808b 	beq.w	80014a4 <CompPitchRoll+0x154>
		float acc_pitch = atan ((mpu6050->Acc_f[1]) / (mpu6050->Acc_f[2])) *  57.3248;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800139a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800139e:	ee16 0a90 	vmov	r0, s13
 80013a2:	f7ff f8d9 	bl	8000558 <__aeabi_f2d>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	ec43 2b10 	vmov	d0, r2, r3
 80013ae:	f00b fa7f 	bl	800c8b0 <atan>
 80013b2:	ec51 0b10 	vmov	r0, r1, d0
 80013b6:	a33e      	add	r3, pc, #248	@ (adr r3, 80014b0 <CompPitchRoll+0x160>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff f924 	bl	8000608 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fc16 	bl	8000bf8 <__aeabi_d2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	60fb      	str	r3, [r7, #12]
		float acc_roll = - atan ((mpu6050->Acc_f[0]) / (mpu6050->Acc_f[2])) * 57.3248;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80013dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013e0:	ee16 0a90 	vmov	r0, s13
 80013e4:	f7ff f8b8 	bl	8000558 <__aeabi_f2d>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	ec43 2b10 	vmov	d0, r2, r3
 80013f0:	f00b fa5e 	bl	800c8b0 <atan>
 80013f4:	ec53 2b10 	vmov	r2, r3, d0
 80013f8:	4614      	mov	r4, r2
 80013fa:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80013fe:	a32c      	add	r3, pc, #176	@ (adr r3, 80014b0 <CompPitchRoll+0x160>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	4620      	mov	r0, r4
 8001406:	4629      	mov	r1, r5
 8001408:	f7ff f8fe 	bl	8000608 <__aeabi_dmul>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	f7ff fbf0 	bl	8000bf8 <__aeabi_d2f>
 8001418:	4603      	mov	r3, r0
 800141a:	60bb      	str	r3, [r7, #8]

		mpu6050->pitch = (acc_pitch * mpu6050->alpha) + ((mpu6050->pitch + mpu6050->Gyro_f[0]*mpu6050->sample_time)*(1-mpu6050->alpha));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001422:	edd7 7a03 	vldr	s15, [r7, #12]
 8001426:	ee27 7a27 	vmul.f32	s14, s14, s15
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	ed93 6a0c 	vldr	s12, [r3, #48]	@ 0x30
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800143c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001440:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800144a:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800144e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001452:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		mpu6050->roll = (acc_roll * mpu6050->alpha) + ((mpu6050->roll + mpu6050->Gyro_f[1]*mpu6050->sample_time)*(1-mpu6050->alpha));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001466:	edd7 7a02 	vldr	s15, [r7, #8]
 800146a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	ed93 6a0d 	vldr	s12, [r3, #52]	@ 0x34
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001480:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001484:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800148e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001492:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001496:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	}

}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bdb0      	pop	{r4, r5, r7, pc}
 80014ac:	f3af 8000 	nop.w
 80014b0:	0be0ded3 	.word	0x0be0ded3
 80014b4:	404ca993 	.word	0x404ca993

080014b8 <ServoDriverInit>:
 * 						  hi2cx        				      Pointer to I2C handle
 * 						  _i2caddr				          Address of the Servo Driver
 * Function Return		: NONE
 * Function Example		:   ServoDriverInit(&srv_drv,&hi2c2,0x40);
 */
void ServoDriverInit(Srv_Drv_t *srv_drvx,I2C_HandleTypeDef *hi2cx,uint16_t _i2caddr){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	4613      	mov	r3, r2
 80014c4:	80fb      	strh	r3, [r7, #6]

	srv_drvx->_i2caddr = _i2caddr;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	88fa      	ldrh	r2, [r7, #6]
 80014ca:	801a      	strh	r2, [r3, #0]
	srv_drvx->hi2cx = hi2cx;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	605a      	str	r2, [r3, #4]

	ServoDriverReset(srv_drvx);
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f000 f8d0 	bl	8001678 <ServoDriverReset>

	ServoDriverSetPWMFreq(srv_drvx,50);
 80014d8:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 80014ec <ServoDriverInit+0x34>
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 f807 	bl	80014f0 <ServoDriverSetPWMFreq>
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	42480000 	.word	0x42480000

080014f0 <ServoDriverSetPWMFreq>:
 *						  srv_drvx                         Pointer to Servo Driver struct
 * 						  freq        				      Frequency between 1 and 3500
 * Function Return		: NONE
 * Function Example		:  ServoDriverSetPWMFreq(&srv_drv,1000);
 */
void ServoDriverSetPWMFreq(Srv_Drv_t *srv_drvx,float freq){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	ed87 0a02 	vstr	s0, [r7, #8]

	if(freq<1)
 80014fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001500:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	d503      	bpl.n	8001516 <ServoDriverSetPWMFreq+0x26>
		freq=1;
 800150e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	e00a      	b.n	800152c <ServoDriverSetPWMFreq+0x3c>
	else if(freq>3500)   // Datasheet limit is 3052=50MHz/(4*4096)
 8001516:	edd7 7a02 	vldr	s15, [r7, #8]
 800151a:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001658 <ServoDriverSetPWMFreq+0x168>
 800151e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001526:	dd01      	ble.n	800152c <ServoDriverSetPWMFreq+0x3c>
		freq=3500;
 8001528:	4b4c      	ldr	r3, [pc, #304]	@ (800165c <ServoDriverSetPWMFreq+0x16c>)
 800152a:	60bb      	str	r3, [r7, #8]

	float prescaleval = ((26000000 / (freq * 4096.0)) + 0.5) - 1;
 800152c:	68b8      	ldr	r0, [r7, #8]
 800152e:	f7ff f813 	bl	8000558 <__aeabi_f2d>
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b4a      	ldr	r3, [pc, #296]	@ (8001660 <ServoDriverSetPWMFreq+0x170>)
 8001538:	f7ff f866 	bl	8000608 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	a143      	add	r1, pc, #268	@ (adr r1, 8001650 <ServoDriverSetPWMFreq+0x160>)
 8001542:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001546:	f7ff f989 	bl	800085c <__aeabi_ddiv>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4b43      	ldr	r3, [pc, #268]	@ (8001664 <ServoDriverSetPWMFreq+0x174>)
 8001558:	f7fe fea0 	bl	800029c <__adddf3>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	4b3f      	ldr	r3, [pc, #252]	@ (8001668 <ServoDriverSetPWMFreq+0x178>)
 800156a:	f7fe fe95 	bl	8000298 <__aeabi_dsub>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fb3f 	bl	8000bf8 <__aeabi_d2f>
 800157a:	4603      	mov	r3, r0
 800157c:	617b      	str	r3, [r7, #20]
	  if (prescaleval < PCA9685_PRESCALE_MIN)
 800157e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001582:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001586:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	d501      	bpl.n	8001594 <ServoDriverSetPWMFreq+0xa4>
	    prescaleval = PCA9685_PRESCALE_MIN;
 8001590:	4b36      	ldr	r3, [pc, #216]	@ (800166c <ServoDriverSetPWMFreq+0x17c>)
 8001592:	617b      	str	r3, [r7, #20]
	  if (prescaleval > PCA9685_PRESCALE_MAX)
 8001594:	edd7 7a05 	vldr	s15, [r7, #20]
 8001598:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001670 <ServoDriverSetPWMFreq+0x180>
 800159c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a4:	dd01      	ble.n	80015aa <ServoDriverSetPWMFreq+0xba>
	    prescaleval = PCA9685_PRESCALE_MAX;
 80015a6:	4b33      	ldr	r3, [pc, #204]	@ (8001674 <ServoDriverSetPWMFreq+0x184>)
 80015a8:	617b      	str	r3, [r7, #20]
	  uint8_t prescale = (uint8_t)prescaleval;
 80015aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015b2:	edc7 7a01 	vstr	s15, [r7, #4]
 80015b6:	793b      	ldrb	r3, [r7, #4]
 80015b8:	74fb      	strb	r3, [r7, #19]

	  uint8_t oldmode = I2CReadReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6858      	ldr	r0, [r3, #4]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2200      	movs	r2, #0
 80015c6:	4619      	mov	r1, r3
 80015c8:	f000 f8ca 	bl	8001760 <I2CReadReg8>
 80015cc:	4603      	mov	r3, r0
 80015ce:	74bb      	strb	r3, [r7, #18]

	  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP;
 80015d0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80015d4:	f003 036f 	and.w	r3, r3, #111	@ 0x6f
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	747b      	strb	r3, [r7, #17]


	  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1,newmode);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6858      	ldr	r0, [r3, #4]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	b2d9      	uxtb	r1, r3
 80015ec:	7c7b      	ldrb	r3, [r7, #17]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f000 f895 	bl	800171e <I2CWriteReg8>

	  HAL_Delay(5);
 80015f4:	2005      	movs	r0, #5
 80015f6:	f004 f937 	bl	8005868 <HAL_Delay>

	  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_PRESCALE,prescale);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6858      	ldr	r0, [r3, #4]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	b2d9      	uxtb	r1, r3
 8001604:	7cfb      	ldrb	r3, [r7, #19]
 8001606:	22fe      	movs	r2, #254	@ 0xfe
 8001608:	f000 f889 	bl	800171e <I2CWriteReg8>

	  HAL_Delay(5);
 800160c:	2005      	movs	r0, #5
 800160e:	f004 f92b 	bl	8005868 <HAL_Delay>

	  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1,oldmode);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6858      	ldr	r0, [r3, #4]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	b2d9      	uxtb	r1, r3
 800161c:	7cbb      	ldrb	r3, [r7, #18]
 800161e:	2200      	movs	r2, #0
 8001620:	f000 f87d 	bl	800171e <I2CWriteReg8>

	  HAL_Delay(5);
 8001624:	2005      	movs	r0, #5
 8001626:	f004 f91f 	bl	8005868 <HAL_Delay>

	  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1,(oldmode | MODE1_RESTART | MODE1_AI));
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6858      	ldr	r0, [r3, #4]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	b2d9      	uxtb	r1, r3
 8001634:	7cbb      	ldrb	r3, [r7, #18]
 8001636:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2200      	movs	r2, #0
 800163e:	f000 f86e 	bl	800171e <I2CWriteReg8>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	f3af 8000 	nop.w
 8001650:	00000000 	.word	0x00000000
 8001654:	4178cba8 	.word	0x4178cba8
 8001658:	455ac000 	.word	0x455ac000
 800165c:	455ac000 	.word	0x455ac000
 8001660:	40b00000 	.word	0x40b00000
 8001664:	3fe00000 	.word	0x3fe00000
 8001668:	3ff00000 	.word	0x3ff00000
 800166c:	40400000 	.word	0x40400000
 8001670:	437f0000 	.word	0x437f0000
 8001674:	437f0000 	.word	0x437f0000

08001678 <ServoDriverReset>:
 *
 *						  srv_drvx                         Pointer to Servo Driver struct
 * Function Return		: NONE
 * Function Example		:  ServoDriverReset(&srv_drv);
 */
void ServoDriverReset(Srv_Drv_t *srv_drvx){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1,MODE1_RESTART);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6858      	ldr	r0, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	b2d9      	uxtb	r1, r3
 800168a:	2380      	movs	r3, #128	@ 0x80
 800168c:	2200      	movs	r2, #0
 800168e:	f000 f846 	bl	800171e <I2CWriteReg8>
//	I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE2,MODE2_OUTDRV);
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <ServoDriverSetOnOff_Multi>:
 *						  on 							  Time to set the wave to high from (0 to 4095)
 *						  off                             Time to set the wave to low (0 to 4095)
 * Function Return		: NONE
 * Function Example		:  ServoDriverSetOnOff(&srv_drv,0,0,1024);  // 25% duty cycle
 */
void ServoDriverSetOnOff_Multi(Srv_Drv_t *srv_drvx, uint8_t start_channel, uint8_t num, uint16_t pulses[]){
 800169a:	b580      	push	{r7, lr}
 800169c:	b088      	sub	sp, #32
 800169e:	af02      	add	r7, sp, #8
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	72fb      	strb	r3, [r7, #11]
 80016a8:	4613      	mov	r3, r2
 80016aa:	72bb      	strb	r3, [r7, #10]

	uint8_t data[5];

	for (uint8_t i = 0; i < num; i++){
 80016ac:	2300      	movs	r3, #0
 80016ae:	75fb      	strb	r3, [r7, #23]
 80016b0:	e02c      	b.n	800170c <ServoDriverSetOnOff_Multi+0x72>
		data[0] = PCA9685_LED0_ON_L + (4 * (start_channel+i));
 80016b2:	7afa      	ldrb	r2, [r7, #11]
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	4413      	add	r3, r2
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	3306      	adds	r3, #6
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	743b      	strb	r3, [r7, #16]
		data[1] = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	747b      	strb	r3, [r7, #17]
		data[2] = 0 >> 8;
 80016c8:	2300      	movs	r3, #0
 80016ca:	74bb      	strb	r3, [r7, #18]
		data[3] = pulses[i];
 80016cc:	7dfb      	ldrb	r3, [r7, #23]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	74fb      	strb	r3, [r7, #19]
		data[4] = pulses[i] >> 8;
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	753b      	strb	r3, [r7, #20]
		HAL_I2C_Master_Transmit(srv_drvx->hi2cx,srv_drvx->_i2caddr<<1,data,5,20);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6858      	ldr	r0, [r3, #4]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	b299      	uxth	r1, r3
 80016f8:	f107 0210 	add.w	r2, r7, #16
 80016fc:	2314      	movs	r3, #20
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2305      	movs	r3, #5
 8001702:	f004 fd5b 	bl	80061bc <HAL_I2C_Master_Transmit>
	for (uint8_t i = 0; i < num; i++){
 8001706:	7dfb      	ldrb	r3, [r7, #23]
 8001708:	3301      	adds	r3, #1
 800170a:	75fb      	strb	r3, [r7, #23]
 800170c:	7dfa      	ldrb	r2, [r7, #23]
 800170e:	7abb      	ldrb	r3, [r7, #10]
 8001710:	429a      	cmp	r2, r3
 8001712:	d3ce      	bcc.n	80016b2 <ServoDriverSetOnOff_Multi+0x18>
	}


}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <I2CWriteReg8>:
  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE2,newmode);

}

void I2CWriteReg8(I2C_HandleTypeDef *hi2cx, uint8_t slave_addr,uint8_t register_pointer, uint8_t register_value)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af04      	add	r7, sp, #16
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	4608      	mov	r0, r1
 8001728:	4611      	mov	r1, r2
 800172a:	461a      	mov	r2, r3
 800172c:	4603      	mov	r3, r0
 800172e:	70fb      	strb	r3, [r7, #3]
 8001730:	460b      	mov	r3, r1
 8001732:	70bb      	strb	r3, [r7, #2]
 8001734:	4613      	mov	r3, r2
 8001736:	707b      	strb	r3, [r7, #1]

    if(HAL_I2C_Mem_Write(hi2cx,slave_addr<<1,(uint8_t)register_pointer, I2C_MEMADD_SIZE_8BIT, (uint8_t*)(&register_value), 1, 10) != HAL_OK)
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	b29b      	uxth	r3, r3
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	b299      	uxth	r1, r3
 8001740:	78bb      	ldrb	r3, [r7, #2]
 8001742:	b29a      	uxth	r2, r3
 8001744:	230a      	movs	r3, #10
 8001746:	9302      	str	r3, [sp, #8]
 8001748:	2301      	movs	r3, #1
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	1c7b      	adds	r3, r7, #1
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2301      	movs	r3, #1
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f005 f862 	bl	800681c <HAL_I2C_Mem_Write>
    {
        // Error handling, for example re-initialization of the I2C peripheral
    }
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <I2CReadReg8>:

uint8_t I2CReadReg8(I2C_HandleTypeDef *hi2cx, uint8_t slave_addr,uint8_t register_pointer)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af04      	add	r7, sp, #16
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
 800176c:	4613      	mov	r3, r2
 800176e:	70bb      	strb	r3, [r7, #2]
	    uint8_t return_value;

	    /* Check the communication status */
	    if(HAL_I2C_Mem_Read(hi2cx,slave_addr<<1, (uint8_t)register_pointer, I2C_MEMADD_SIZE_8BIT, &return_value, 1, 10) != HAL_OK)
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	b29b      	uxth	r3, r3
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	b299      	uxth	r1, r3
 8001778:	78bb      	ldrb	r3, [r7, #2]
 800177a:	b29a      	uxth	r2, r3
 800177c:	230a      	movs	r3, #10
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2301      	movs	r3, #1
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	f107 030f 	add.w	r3, r7, #15
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f005 f93f 	bl	8006a10 <HAL_I2C_Mem_Read>
	    {
	    	//Error handling, for example re-initialization of the I2C peripheral
	    }

	    return return_value;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of MainTask */
	MainTaskHandle = osThreadNew(Mainfunc, NULL, &MainTask_attributes);
 80017a0:	4a08      	ldr	r2, [pc, #32]	@ (80017c4 <MX_FREERTOS_Init+0x28>)
 80017a2:	2100      	movs	r1, #0
 80017a4:	4808      	ldr	r0, [pc, #32]	@ (80017c8 <MX_FREERTOS_Init+0x2c>)
 80017a6:	f007 fce9 	bl	800917c <osThreadNew>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4a07      	ldr	r2, [pc, #28]	@ (80017cc <MX_FREERTOS_Init+0x30>)
 80017ae:	6013      	str	r3, [r2, #0]

	/* creation of CalcTask */
	CalcTaskHandle = osThreadNew(CalcFunc, NULL, &CalcTask_attributes);
 80017b0:	4a07      	ldr	r2, [pc, #28]	@ (80017d0 <MX_FREERTOS_Init+0x34>)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4807      	ldr	r0, [pc, #28]	@ (80017d4 <MX_FREERTOS_Init+0x38>)
 80017b6:	f007 fce1 	bl	800917c <osThreadNew>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4a06      	ldr	r2, [pc, #24]	@ (80017d8 <MX_FREERTOS_Init+0x3c>)
 80017be:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	0800f710 	.word	0x0800f710
 80017c8:	080017e1 	.word	0x080017e1
 80017cc:	20000328 	.word	0x20000328
 80017d0:	0800f734 	.word	0x0800f734
 80017d4:	08001ad1 	.word	0x08001ad1
 80017d8:	2000032c 	.word	0x2000032c
 80017dc:	00000000 	.word	0x00000000

080017e0 <Mainfunc>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Mainfunc */
void Mainfunc(void *argument)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af02      	add	r7, sp, #8
 80017e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Mainfunc */
	Rise();
 80017e8:	f003 fb52 	bl	8004e90 <Rise>
	mode = TROT;
 80017ec:	4b9e      	ldr	r3, [pc, #632]	@ (8001a68 <Mainfunc+0x288>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Init(&huart1);
 80017f2:	489e      	ldr	r0, [pc, #632]	@ (8001a6c <Mainfunc+0x28c>)
 80017f4:	f006 fc9a 	bl	800812c <HAL_UART_Init>
	HAL_UART_Receive_IT(&huart1, &rx, 1);
 80017f8:	2201      	movs	r2, #1
 80017fa:	499d      	ldr	r1, [pc, #628]	@ (8001a70 <Mainfunc+0x290>)
 80017fc:	489b      	ldr	r0, [pc, #620]	@ (8001a6c <Mainfunc+0x28c>)
 80017fe:	f006 fd1b 	bl	8008238 <HAL_UART_Receive_IT>
	for(;;)
	{
		X_setpoint = J1y * step_length;
 8001802:	4b9c      	ldr	r3, [pc, #624]	@ (8001a74 <Mainfunc+0x294>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800180e:	4b9a      	ldr	r3, [pc, #616]	@ (8001a78 <Mainfunc+0x298>)
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001818:	4b98      	ldr	r3, [pc, #608]	@ (8001a7c <Mainfunc+0x29c>)
 800181a:	edc3 7a00 	vstr	s15, [r3]
		Y_setpoint = J1x * step_length * 0.75;
 800181e:	4b98      	ldr	r3, [pc, #608]	@ (8001a80 <Mainfunc+0x2a0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	ee07 3a90 	vmov	s15, r3
 8001826:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800182a:	4b93      	ldr	r3, [pc, #588]	@ (8001a78 <Mainfunc+0x298>)
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001834:	eeb6 7a08 	vmov.f32	s14, #104	@ 0x3f400000  0.750
 8001838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800183c:	4b91      	ldr	r3, [pc, #580]	@ (8001a84 <Mainfunc+0x2a4>)
 800183e:	edc3 7a00 	vstr	s15, [r3]
		if(X_setpoint != 0.0 || Y_setpoint != 0.0 || body_rotation[2] != 0){
 8001842:	4b8e      	ldr	r3, [pc, #568]	@ (8001a7c <Mainfunc+0x29c>)
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	eef5 7a40 	vcmp.f32	s15, #0.0
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	d10f      	bne.n	8001872 <Mainfunc+0x92>
 8001852:	4b8c      	ldr	r3, [pc, #560]	@ (8001a84 <Mainfunc+0x2a4>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	eef5 7a40 	vcmp.f32	s15, #0.0
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	d107      	bne.n	8001872 <Mainfunc+0x92>
 8001862:	4b89      	ldr	r3, [pc, #548]	@ (8001a88 <Mainfunc+0x2a8>)
 8001864:	edd3 7a02 	vldr	s15, [r3, #8]
 8001868:	eef5 7a40 	vcmp.f32	s15, #0.0
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	d02c      	beq.n	80018cc <Mainfunc+0xec>
			Gait_controller(ticks, X_setpoint, Y_setpoint);
 8001872:	4b86      	ldr	r3, [pc, #536]	@ (8001a8c <Mainfunc+0x2ac>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	4a81      	ldr	r2, [pc, #516]	@ (8001a7c <Mainfunc+0x29c>)
 8001878:	edd2 7a00 	vldr	s15, [r2]
 800187c:	4a81      	ldr	r2, [pc, #516]	@ (8001a84 <Mainfunc+0x2a4>)
 800187e:	ed92 7a00 	vldr	s14, [r2]
 8001882:	eef0 0a47 	vmov.f32	s1, s14
 8001886:	eeb0 0a67 	vmov.f32	s0, s15
 800188a:	4618      	mov	r0, r3
 800188c:	f001 fea2 	bl	80035d4 <Gait_controller>
			//			osSemaphoreRelease(sendSemaphoreHandle);
			ticks+=1;
 8001890:	4b7e      	ldr	r3, [pc, #504]	@ (8001a8c <Mainfunc+0x2ac>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b7c      	ldr	r3, [pc, #496]	@ (8001a8c <Mainfunc+0x2ac>)
 800189a:	701a      	strb	r2, [r3, #0]
			if ( mode == TROT){
 800189c:	4b72      	ldr	r3, [pc, #456]	@ (8001a68 <Mainfunc+0x288>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d107      	bne.n	80018b4 <Mainfunc+0xd4>
				if(ticks > 5)
 80018a4:	4b79      	ldr	r3, [pc, #484]	@ (8001a8c <Mainfunc+0x2ac>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b05      	cmp	r3, #5
 80018aa:	d912      	bls.n	80018d2 <Mainfunc+0xf2>
					ticks = 0;
 80018ac:	4b77      	ldr	r3, [pc, #476]	@ (8001a8c <Mainfunc+0x2ac>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
			if ( mode == TROT){
 80018b2:	e00e      	b.n	80018d2 <Mainfunc+0xf2>
			}else if (mode == WALK){
 80018b4:	4b6c      	ldr	r3, [pc, #432]	@ (8001a68 <Mainfunc+0x288>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10a      	bne.n	80018d2 <Mainfunc+0xf2>
				if(ticks > 10)
 80018bc:	4b73      	ldr	r3, [pc, #460]	@ (8001a8c <Mainfunc+0x2ac>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b0a      	cmp	r3, #10
 80018c2:	d906      	bls.n	80018d2 <Mainfunc+0xf2>
					ticks = 0;
 80018c4:	4b71      	ldr	r3, [pc, #452]	@ (8001a8c <Mainfunc+0x2ac>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
			if ( mode == TROT){
 80018ca:	e002      	b.n	80018d2 <Mainfunc+0xf2>
			}
		}else{
			Stand();
 80018cc:	f001 fdf8 	bl	80034c0 <Stand>
 80018d0:	e000      	b.n	80018d4 <Mainfunc+0xf4>
			if ( mode == TROT){
 80018d2:	bf00      	nop
		}

		req_body_rotation[0] = (0.0025 * J2y) * 57.3248;
 80018d4:	4b6e      	ldr	r3, [pc, #440]	@ (8001a90 <Mainfunc+0x2b0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe2b 	bl	8000534 <__aeabi_i2d>
 80018de:	a35e      	add	r3, pc, #376	@ (adr r3, 8001a58 <Mainfunc+0x278>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fe90 	bl	8000608 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	a35b      	add	r3, pc, #364	@ (adr r3, 8001a60 <Mainfunc+0x280>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe fe87 	bl	8000608 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f979 	bl	8000bf8 <__aeabi_d2f>
 8001906:	4603      	mov	r3, r0
 8001908:	4a62      	ldr	r2, [pc, #392]	@ (8001a94 <Mainfunc+0x2b4>)
 800190a:	6013      	str	r3, [r2, #0]
		req_body_rotation[1] = (0.0025 * J2x) * 57.3248;
 800190c:	4b62      	ldr	r3, [pc, #392]	@ (8001a98 <Mainfunc+0x2b8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe0f 	bl	8000534 <__aeabi_i2d>
 8001916:	a350      	add	r3, pc, #320	@ (adr r3, 8001a58 <Mainfunc+0x278>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7fe fe74 	bl	8000608 <__aeabi_dmul>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	a34d      	add	r3, pc, #308	@ (adr r3, 8001a60 <Mainfunc+0x280>)
 800192a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192e:	f7fe fe6b 	bl	8000608 <__aeabi_dmul>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff f95d 	bl	8000bf8 <__aeabi_d2f>
 800193e:	4603      	mov	r3, r0
 8001940:	4a54      	ldr	r2, [pc, #336]	@ (8001a94 <Mainfunc+0x2b4>)
 8001942:	6053      	str	r3, [r2, #4]

		if(pressed_button == L1){
 8001944:	4b55      	ldr	r3, [pc, #340]	@ (8001a9c <Mainfunc+0x2bc>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b08      	cmp	r3, #8
 800194a:	d103      	bne.n	8001954 <Mainfunc+0x174>
			body_rotation[2] = -0.17;
 800194c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a88 <Mainfunc+0x2a8>)
 800194e:	4a54      	ldr	r2, [pc, #336]	@ (8001aa0 <Mainfunc+0x2c0>)
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	e00b      	b.n	800196c <Mainfunc+0x18c>
		}else if (pressed_button == R1){
 8001954:	4b51      	ldr	r3, [pc, #324]	@ (8001a9c <Mainfunc+0x2bc>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b09      	cmp	r3, #9
 800195a:	d103      	bne.n	8001964 <Mainfunc+0x184>
			body_rotation[2] = 0.17;
 800195c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a88 <Mainfunc+0x2a8>)
 800195e:	4a51      	ldr	r2, [pc, #324]	@ (8001aa4 <Mainfunc+0x2c4>)
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	e003      	b.n	800196c <Mainfunc+0x18c>
		}else{
			body_rotation[2] = 0.0;
 8001964:	4b48      	ldr	r3, [pc, #288]	@ (8001a88 <Mainfunc+0x2a8>)
 8001966:	f04f 0200 	mov.w	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
		//		if (pressed_button == A){
		//			while(pressed_button == A);
		//			HiWave();
		//		}

		if (pressed_button == B){
 800196c:	4b4b      	ldr	r3, [pc, #300]	@ (8001a9c <Mainfunc+0x2bc>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d14b      	bne.n	8001a0c <Mainfunc+0x22c>
			//		HAL_UART_Transmit_IT(&huart1, data, strlen(data));
			while(pressed_button == B);
 8001974:	bf00      	nop
 8001976:	4b49      	ldr	r3, [pc, #292]	@ (8001a9c <Mainfunc+0x2bc>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d0fb      	beq.n	8001976 <Mainfunc+0x196>
			if(mode == TROT){
 800197e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a68 <Mainfunc+0x288>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d10c      	bne.n	80019a0 <Mainfunc+0x1c0>
				mode = WALK;
 8001986:	4b38      	ldr	r3, [pc, #224]	@ (8001a68 <Mainfunc+0x288>)
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
				ticks=0;
 800198c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a8c <Mainfunc+0x2ac>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
				step_height = 0.038;
 8001992:	4b45      	ldr	r3, [pc, #276]	@ (8001aa8 <Mainfunc+0x2c8>)
 8001994:	4a45      	ldr	r2, [pc, #276]	@ (8001aac <Mainfunc+0x2cc>)
 8001996:	601a      	str	r2, [r3, #0]
				step_length = 0.00032;
 8001998:	4b37      	ldr	r3, [pc, #220]	@ (8001a78 <Mainfunc+0x298>)
 800199a:	4a45      	ldr	r2, [pc, #276]	@ (8001ab0 <Mainfunc+0x2d0>)
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	e00f      	b.n	80019c0 <Mainfunc+0x1e0>
			}else if (mode == WALK){
 80019a0:	4b31      	ldr	r3, [pc, #196]	@ (8001a68 <Mainfunc+0x288>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10b      	bne.n	80019c0 <Mainfunc+0x1e0>
				mode = TROT;
 80019a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a68 <Mainfunc+0x288>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	701a      	strb	r2, [r3, #0]
				step_height = 0.042;
 80019ae:	4b3e      	ldr	r3, [pc, #248]	@ (8001aa8 <Mainfunc+0x2c8>)
 80019b0:	4a40      	ldr	r2, [pc, #256]	@ (8001ab4 <Mainfunc+0x2d4>)
 80019b2:	601a      	str	r2, [r3, #0]
				ticks=0;
 80019b4:	4b35      	ldr	r3, [pc, #212]	@ (8001a8c <Mainfunc+0x2ac>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
				step_length = 0.00028;
 80019ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001a78 <Mainfunc+0x298>)
 80019bc:	4a3e      	ldr	r2, [pc, #248]	@ (8001ab8 <Mainfunc+0x2d8>)
 80019be:	601a      	str	r2, [r3, #0]
			}

			sprintf(data,"%d %d %s 0\r\n",(int)(-mpu6050.roll), (int)(mpu6050.pitch), mode? "Trot":"Walk");
 80019c0:	4b3e      	ldr	r3, [pc, #248]	@ (8001abc <Mainfunc+0x2dc>)
 80019c2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80019c6:	eef1 7a67 	vneg.f32	s15, s15
 80019ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80019ce:	4b3b      	ldr	r3, [pc, #236]	@ (8001abc <Mainfunc+0x2dc>)
 80019d0:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80019d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d8:	4b23      	ldr	r3, [pc, #140]	@ (8001a68 <Mainfunc+0x288>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <Mainfunc+0x204>
 80019e0:	4b37      	ldr	r3, [pc, #220]	@ (8001ac0 <Mainfunc+0x2e0>)
 80019e2:	e000      	b.n	80019e6 <Mainfunc+0x206>
 80019e4:	4b37      	ldr	r3, [pc, #220]	@ (8001ac4 <Mainfunc+0x2e4>)
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	ee17 3a90 	vmov	r3, s15
 80019ec:	ee17 2a10 	vmov	r2, s14
 80019f0:	4935      	ldr	r1, [pc, #212]	@ (8001ac8 <Mainfunc+0x2e8>)
 80019f2:	4836      	ldr	r0, [pc, #216]	@ (8001acc <Mainfunc+0x2ec>)
 80019f4:	f00a f960 	bl	800bcb8 <siprintf>
			HAL_UART_Transmit_IT(&huart1, data, strlen(data));
 80019f8:	4834      	ldr	r0, [pc, #208]	@ (8001acc <Mainfunc+0x2ec>)
 80019fa:	f7fe fbf1 	bl	80001e0 <strlen>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	4931      	ldr	r1, [pc, #196]	@ (8001acc <Mainfunc+0x2ec>)
 8001a06:	4819      	ldr	r0, [pc, #100]	@ (8001a6c <Mainfunc+0x28c>)
 8001a08:	f006 fbe0 	bl	80081cc <HAL_UART_Transmit_IT>
		}

		if(ticks == 0 && ticks == 2 && ticks == 3 && ticks == 5 && mode == TROT){
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <Mainfunc+0x2ac>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d113      	bne.n	8001a3c <Mainfunc+0x25c>
 8001a14:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <Mainfunc+0x2ac>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d10f      	bne.n	8001a3c <Mainfunc+0x25c>
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <Mainfunc+0x2ac>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d10b      	bne.n	8001a3c <Mainfunc+0x25c>
 8001a24:	4b19      	ldr	r3, [pc, #100]	@ (8001a8c <Mainfunc+0x2ac>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d107      	bne.n	8001a3c <Mainfunc+0x25c>
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <Mainfunc+0x288>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d103      	bne.n	8001a3c <Mainfunc+0x25c>
			HAL_Delay(120);
 8001a34:	2078      	movs	r0, #120	@ 0x78
 8001a36:	f003 ff17 	bl	8005868 <HAL_Delay>
 8001a3a:	e00a      	b.n	8001a52 <Mainfunc+0x272>
		}else if (mode == TROT){
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <Mainfunc+0x288>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d103      	bne.n	8001a4c <Mainfunc+0x26c>
			HAL_Delay(175);
 8001a44:	20af      	movs	r0, #175	@ 0xaf
 8001a46:	f003 ff0f 	bl	8005868 <HAL_Delay>
 8001a4a:	e6da      	b.n	8001802 <Mainfunc+0x22>
		}else{
			HAL_Delay(250);
 8001a4c:	20fa      	movs	r0, #250	@ 0xfa
 8001a4e:	f003 ff0b 	bl	8005868 <HAL_Delay>
		X_setpoint = J1y * step_length;
 8001a52:	e6d6      	b.n	8001802 <Mainfunc+0x22>
 8001a54:	f3af 8000 	nop.w
 8001a58:	47ae147b 	.word	0x47ae147b
 8001a5c:	3f647ae1 	.word	0x3f647ae1
 8001a60:	0be0ded3 	.word	0x0be0ded3
 8001a64:	404ca993 	.word	0x404ca993
 8001a68:	20000324 	.word	0x20000324
 8001a6c:	200003dc 	.word	0x200003dc
 8001a70:	2000030e 	.word	0x2000030e
 8001a74:	20000318 	.word	0x20000318
 8001a78:	20000094 	.word	0x20000094
 8001a7c:	200002e0 	.word	0x200002e0
 8001a80:	20000314 	.word	0x20000314
 8001a84:	200002e4 	.word	0x200002e4
 8001a88:	200002b0 	.word	0x200002b0
 8001a8c:	20000311 	.word	0x20000311
 8001a90:	20000320 	.word	0x20000320
 8001a94:	200002bc 	.word	0x200002bc
 8001a98:	2000031c 	.word	0x2000031c
 8001a9c:	20000310 	.word	0x20000310
 8001aa0:	be2e147b 	.word	0xbe2e147b
 8001aa4:	3e2e147b 	.word	0x3e2e147b
 8001aa8:	20000090 	.word	0x20000090
 8001aac:	3d1ba5e3 	.word	0x3d1ba5e3
 8001ab0:	39a7c5ac 	.word	0x39a7c5ac
 8001ab4:	3d2c0831 	.word	0x3d2c0831
 8001ab8:	3992ccf7 	.word	0x3992ccf7
 8001abc:	2000013c 	.word	0x2000013c
 8001ac0:	0800f6d8 	.word	0x0800f6d8
 8001ac4:	0800f6e0 	.word	0x0800f6e0
 8001ac8:	0800f6e8 	.word	0x0800f6e8
 8001acc:	200002e8 	.word	0x200002e8

08001ad0 <CalcFunc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CalcFunc */
void CalcFunc(void *argument)
{
 8001ad0:	b5b0      	push	{r4, r5, r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af04      	add	r7, sp, #16
 8001ad6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN CalcFunc */
	FL_offsets[0] = 0.21;
 8001ad8:	4ba1      	ldr	r3, [pc, #644]	@ (8001d60 <CalcFunc+0x290>)
 8001ada:	4aa2      	ldr	r2, [pc, #648]	@ (8001d64 <CalcFunc+0x294>)
 8001adc:	601a      	str	r2, [r3, #0]
	FL_offsets[1] = -0.10;
 8001ade:	4ba0      	ldr	r3, [pc, #640]	@ (8001d60 <CalcFunc+0x290>)
 8001ae0:	4aa1      	ldr	r2, [pc, #644]	@ (8001d68 <CalcFunc+0x298>)
 8001ae2:	605a      	str	r2, [r3, #4]
	FL_offsets[2] = -0.26;
 8001ae4:	4b9e      	ldr	r3, [pc, #632]	@ (8001d60 <CalcFunc+0x290>)
 8001ae6:	4aa1      	ldr	r2, [pc, #644]	@ (8001d6c <CalcFunc+0x29c>)
 8001ae8:	609a      	str	r2, [r3, #8]
	FR_offsets[0] = -0.09;
 8001aea:	4ba1      	ldr	r3, [pc, #644]	@ (8001d70 <CalcFunc+0x2a0>)
 8001aec:	4aa1      	ldr	r2, [pc, #644]	@ (8001d74 <CalcFunc+0x2a4>)
 8001aee:	601a      	str	r2, [r3, #0]
	FR_offsets[1] = 0.02;
 8001af0:	4b9f      	ldr	r3, [pc, #636]	@ (8001d70 <CalcFunc+0x2a0>)
 8001af2:	4aa1      	ldr	r2, [pc, #644]	@ (8001d78 <CalcFunc+0x2a8>)
 8001af4:	605a      	str	r2, [r3, #4]
	FR_offsets[2] = -0.26;
 8001af6:	4b9e      	ldr	r3, [pc, #632]	@ (8001d70 <CalcFunc+0x2a0>)
 8001af8:	4a9c      	ldr	r2, [pc, #624]	@ (8001d6c <CalcFunc+0x29c>)
 8001afa:	609a      	str	r2, [r3, #8]
	BL_offsets[0] = 0.09;
 8001afc:	4b9f      	ldr	r3, [pc, #636]	@ (8001d7c <CalcFunc+0x2ac>)
 8001afe:	4aa0      	ldr	r2, [pc, #640]	@ (8001d80 <CalcFunc+0x2b0>)
 8001b00:	601a      	str	r2, [r3, #0]
	BL_offsets[1] = -0.08;
 8001b02:	4b9e      	ldr	r3, [pc, #632]	@ (8001d7c <CalcFunc+0x2ac>)
 8001b04:	4a9f      	ldr	r2, [pc, #636]	@ (8001d84 <CalcFunc+0x2b4>)
 8001b06:	605a      	str	r2, [r3, #4]
	BL_offsets[2] = -0.04;
 8001b08:	4b9c      	ldr	r3, [pc, #624]	@ (8001d7c <CalcFunc+0x2ac>)
 8001b0a:	4a9f      	ldr	r2, [pc, #636]	@ (8001d88 <CalcFunc+0x2b8>)
 8001b0c:	609a      	str	r2, [r3, #8]
	BR_offsets[0] = -0.01;
 8001b0e:	4b9f      	ldr	r3, [pc, #636]	@ (8001d8c <CalcFunc+0x2bc>)
 8001b10:	4a9f      	ldr	r2, [pc, #636]	@ (8001d90 <CalcFunc+0x2c0>)
 8001b12:	601a      	str	r2, [r3, #0]
	BR_offsets[1] = 0.15;
 8001b14:	4b9d      	ldr	r3, [pc, #628]	@ (8001d8c <CalcFunc+0x2bc>)
 8001b16:	4a9f      	ldr	r2, [pc, #636]	@ (8001d94 <CalcFunc+0x2c4>)
 8001b18:	605a      	str	r2, [r3, #4]
	BR_offsets[2] = 0.39;
 8001b1a:	4b9c      	ldr	r3, [pc, #624]	@ (8001d8c <CalcFunc+0x2bc>)
 8001b1c:	4a9e      	ldr	r2, [pc, #632]	@ (8001d98 <CalcFunc+0x2c8>)
 8001b1e:	609a      	str	r2, [r3, #8]
	ServoDriverInit(&pca9865, &hi2c1, SERVO_DRIVER_ADDRESS);
 8001b20:	2240      	movs	r2, #64	@ 0x40
 8001b22:	499e      	ldr	r1, [pc, #632]	@ (8001d9c <CalcFunc+0x2cc>)
 8001b24:	489e      	ldr	r0, [pc, #632]	@ (8001da0 <CalcFunc+0x2d0>)
 8001b26:	f7ff fcc7 	bl	80014b8 <ServoDriverInit>
	HAL_Delay(300);
 8001b2a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001b2e:	f003 fe9b 	bl	8005868 <HAL_Delay>
	MPUInit(&mpu6050, &hi2c2, MPU6050_DataRate_2KHz, MPU6050_Accelerometer_2G, MPU6050_Gyroscope_250s, 0.005, 0.5);
 8001b32:	2300      	movs	r3, #0
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8001b3a:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8001da4 <CalcFunc+0x2d4>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	2203      	movs	r2, #3
 8001b42:	4999      	ldr	r1, [pc, #612]	@ (8001da8 <CalcFunc+0x2d8>)
 8001b44:	4899      	ldr	r0, [pc, #612]	@ (8001dac <CalcFunc+0x2dc>)
 8001b46:	f7ff fa1f 	bl	8000f88 <MPUInit>
	MPUSetOffsets(&mpu6050, -944, -600, -590, 1130, 16, 923);
 8001b4a:	f240 339b 	movw	r3, #923	@ 0x39b
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	2310      	movs	r3, #16
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	f240 436a 	movw	r3, #1130	@ 0x46a
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	4b95      	ldr	r3, [pc, #596]	@ (8001db0 <CalcFunc+0x2e0>)
 8001b5c:	4a95      	ldr	r2, [pc, #596]	@ (8001db4 <CalcFunc+0x2e4>)
 8001b5e:	4996      	ldr	r1, [pc, #600]	@ (8001db8 <CalcFunc+0x2e8>)
 8001b60:	4892      	ldr	r0, [pc, #584]	@ (8001dac <CalcFunc+0x2dc>)
 8001b62:	f7ff fafb 	bl	800115c <MPUSetOffsets>
	SPIDInit(&pid_pitch, &pitch_error, &pitch_output, 0.01, 1.0, 0.3, 0.21, 0.02, 0.004, 1.0/30.0, 0.2);
 8001b66:	eddf 3a95 	vldr	s7, [pc, #596]	@ 8001dbc <CalcFunc+0x2ec>
 8001b6a:	ed9f 3a95 	vldr	s6, [pc, #596]	@ 8001dc0 <CalcFunc+0x2f0>
 8001b6e:	eddf 2a95 	vldr	s5, [pc, #596]	@ 8001dc4 <CalcFunc+0x2f4>
 8001b72:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 8001dc8 <CalcFunc+0x2f8>
 8001b76:	eddf 1a95 	vldr	s3, [pc, #596]	@ 8001dcc <CalcFunc+0x2fc>
 8001b7a:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 8001dd0 <CalcFunc+0x300>
 8001b7e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001b82:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 8001dd4 <CalcFunc+0x304>
 8001b86:	4a94      	ldr	r2, [pc, #592]	@ (8001dd8 <CalcFunc+0x308>)
 8001b88:	4994      	ldr	r1, [pc, #592]	@ (8001ddc <CalcFunc+0x30c>)
 8001b8a:	4895      	ldr	r0, [pc, #596]	@ (8001de0 <CalcFunc+0x310>)
 8001b8c:	f003 fb9c 	bl	80052c8 <SPIDInit>
	SPIDInit(&pid_roll, &roll_error, &roll_output, 0.01, 1.0, 0.3, 0.21, 0.02, 0.004, 1.0/30.0, 0.2);
 8001b90:	eddf 3a8a 	vldr	s7, [pc, #552]	@ 8001dbc <CalcFunc+0x2ec>
 8001b94:	ed9f 3a8a 	vldr	s6, [pc, #552]	@ 8001dc0 <CalcFunc+0x2f0>
 8001b98:	eddf 2a8a 	vldr	s5, [pc, #552]	@ 8001dc4 <CalcFunc+0x2f4>
 8001b9c:	ed9f 2a8a 	vldr	s4, [pc, #552]	@ 8001dc8 <CalcFunc+0x2f8>
 8001ba0:	eddf 1a8a 	vldr	s3, [pc, #552]	@ 8001dcc <CalcFunc+0x2fc>
 8001ba4:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 8001dd0 <CalcFunc+0x300>
 8001ba8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001bac:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 8001dd4 <CalcFunc+0x304>
 8001bb0:	4a8c      	ldr	r2, [pc, #560]	@ (8001de4 <CalcFunc+0x314>)
 8001bb2:	498d      	ldr	r1, [pc, #564]	@ (8001de8 <CalcFunc+0x318>)
 8001bb4:	488d      	ldr	r0, [pc, #564]	@ (8001dec <CalcFunc+0x31c>)
 8001bb6:	f003 fb87 	bl	80052c8 <SPIDInit>

	/* Infinite loop */
	for(;;)
	{
		//		osSemaphoreAcquire(sendSemaphoreHandle, osWaitForever);
		MPUReqAccGyro(&mpu6050);
 8001bba:	487c      	ldr	r0, [pc, #496]	@ (8001dac <CalcFunc+0x2dc>)
 8001bbc:	f7ff faf3 	bl	80011a6 <MPUReqAccGyro>
		CompPitchRoll(&mpu6050);
 8001bc0:	487a      	ldr	r0, [pc, #488]	@ (8001dac <CalcFunc+0x2dc>)
 8001bc2:	f7ff fbc5 	bl	8001350 <CompPitchRoll>
		pitch_error = req_body_rotation[0] - (-mpu6050.roll + 0.75);  // Increase to move back
 8001bc6:	4b8a      	ldr	r3, [pc, #552]	@ (8001df0 <CalcFunc+0x320>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcc4 	bl	8000558 <__aeabi_f2d>
 8001bd0:	4604      	mov	r4, r0
 8001bd2:	460d      	mov	r5, r1
 8001bd4:	4b75      	ldr	r3, [pc, #468]	@ (8001dac <CalcFunc+0x2dc>)
 8001bd6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001bda:	eef1 7a67 	vneg.f32	s15, s15
 8001bde:	ee17 3a90 	vmov	r3, s15
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fcb8 	bl	8000558 <__aeabi_f2d>
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	4b81      	ldr	r3, [pc, #516]	@ (8001df4 <CalcFunc+0x324>)
 8001bee:	f7fe fb55 	bl	800029c <__adddf3>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	4629      	mov	r1, r5
 8001bfa:	f7fe fb4d 	bl	8000298 <__aeabi_dsub>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7fe fff7 	bl	8000bf8 <__aeabi_d2f>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4a73      	ldr	r2, [pc, #460]	@ (8001ddc <CalcFunc+0x30c>)
 8001c0e:	6013      	str	r3, [r2, #0]
		roll_error = req_body_rotation[1] - (mpu6050.pitch - 11.0);  // decrease to tilt right
 8001c10:	4b77      	ldr	r3, [pc, #476]	@ (8001df0 <CalcFunc+0x320>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fc9f 	bl	8000558 <__aeabi_f2d>
 8001c1a:	4604      	mov	r4, r0
 8001c1c:	460d      	mov	r5, r1
 8001c1e:	4b63      	ldr	r3, [pc, #396]	@ (8001dac <CalcFunc+0x2dc>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fc98 	bl	8000558 <__aeabi_f2d>
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	4b72      	ldr	r3, [pc, #456]	@ (8001df8 <CalcFunc+0x328>)
 8001c2e:	f7fe fb33 	bl	8000298 <__aeabi_dsub>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4620      	mov	r0, r4
 8001c38:	4629      	mov	r1, r5
 8001c3a:	f7fe fb2d 	bl	8000298 <__aeabi_dsub>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe ffd7 	bl	8000bf8 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a66      	ldr	r2, [pc, #408]	@ (8001de8 <CalcFunc+0x318>)
 8001c4e:	6013      	str	r3, [r2, #0]
		SPIDLoop(&pid_pitch);
 8001c50:	4863      	ldr	r0, [pc, #396]	@ (8001de0 <CalcFunc+0x310>)
 8001c52:	f003 fb7f 	bl	8005354 <SPIDLoop>
		SPIDLoop(&pid_roll);
 8001c56:	4865      	ldr	r0, [pc, #404]	@ (8001dec <CalcFunc+0x31c>)
 8001c58:	f003 fb7c 	bl	8005354 <SPIDLoop>
		pitch_sum+=pitch_output;
 8001c5c:	4b67      	ldr	r3, [pc, #412]	@ (8001dfc <CalcFunc+0x32c>)
 8001c5e:	ed93 7a00 	vldr	s14, [r3]
 8001c62:	4b5d      	ldr	r3, [pc, #372]	@ (8001dd8 <CalcFunc+0x308>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6c:	4b63      	ldr	r3, [pc, #396]	@ (8001dfc <CalcFunc+0x32c>)
 8001c6e:	edc3 7a00 	vstr	s15, [r3]
		if (pitch_sum > 0.3) pitch_sum = 0.3;
 8001c72:	4b62      	ldr	r3, [pc, #392]	@ (8001dfc <CalcFunc+0x32c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fc6e 	bl	8000558 <__aeabi_f2d>
 8001c7c:	a334      	add	r3, pc, #208	@ (adr r3, 8001d50 <CalcFunc+0x280>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	f7fe ff51 	bl	8000b28 <__aeabi_dcmpgt>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <CalcFunc+0x1c2>
 8001c8c:	4b5b      	ldr	r3, [pc, #364]	@ (8001dfc <CalcFunc+0x32c>)
 8001c8e:	4a5c      	ldr	r2, [pc, #368]	@ (8001e00 <CalcFunc+0x330>)
 8001c90:	601a      	str	r2, [r3, #0]
		if (pitch_sum < -0.3) pitch_sum = -0.3;
 8001c92:	4b5a      	ldr	r3, [pc, #360]	@ (8001dfc <CalcFunc+0x32c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fc5e 	bl	8000558 <__aeabi_f2d>
 8001c9c:	a32e      	add	r3, pc, #184	@ (adr r3, 8001d58 <CalcFunc+0x288>)
 8001c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca2:	f7fe ff23 	bl	8000aec <__aeabi_dcmplt>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <CalcFunc+0x1e2>
 8001cac:	4b53      	ldr	r3, [pc, #332]	@ (8001dfc <CalcFunc+0x32c>)
 8001cae:	4a55      	ldr	r2, [pc, #340]	@ (8001e04 <CalcFunc+0x334>)
 8001cb0:	601a      	str	r2, [r3, #0]
		roll_sum+=roll_output;
 8001cb2:	4b55      	ldr	r3, [pc, #340]	@ (8001e08 <CalcFunc+0x338>)
 8001cb4:	ed93 7a00 	vldr	s14, [r3]
 8001cb8:	4b4a      	ldr	r3, [pc, #296]	@ (8001de4 <CalcFunc+0x314>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc2:	4b51      	ldr	r3, [pc, #324]	@ (8001e08 <CalcFunc+0x338>)
 8001cc4:	edc3 7a00 	vstr	s15, [r3]
		if (roll_sum > 0.3) roll_sum = 0.3;
 8001cc8:	4b4f      	ldr	r3, [pc, #316]	@ (8001e08 <CalcFunc+0x338>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc43 	bl	8000558 <__aeabi_f2d>
 8001cd2:	a31f      	add	r3, pc, #124	@ (adr r3, 8001d50 <CalcFunc+0x280>)
 8001cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd8:	f7fe ff26 	bl	8000b28 <__aeabi_dcmpgt>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <CalcFunc+0x218>
 8001ce2:	4b49      	ldr	r3, [pc, #292]	@ (8001e08 <CalcFunc+0x338>)
 8001ce4:	4a46      	ldr	r2, [pc, #280]	@ (8001e00 <CalcFunc+0x330>)
 8001ce6:	601a      	str	r2, [r3, #0]
		if (roll_sum < -0.3) roll_sum = -0.3;
 8001ce8:	4b47      	ldr	r3, [pc, #284]	@ (8001e08 <CalcFunc+0x338>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fc33 	bl	8000558 <__aeabi_f2d>
 8001cf2:	a319      	add	r3, pc, #100	@ (adr r3, 8001d58 <CalcFunc+0x288>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fef8 	bl	8000aec <__aeabi_dcmplt>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <CalcFunc+0x238>
 8001d02:	4b41      	ldr	r3, [pc, #260]	@ (8001e08 <CalcFunc+0x338>)
 8001d04:	4a3f      	ldr	r2, [pc, #252]	@ (8001e04 <CalcFunc+0x334>)
 8001d06:	601a      	str	r2, [r3, #0]

		body_rotation[0]= pitch_sum;
 8001d08:	4b3c      	ldr	r3, [pc, #240]	@ (8001dfc <CalcFunc+0x32c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a3f      	ldr	r2, [pc, #252]	@ (8001e0c <CalcFunc+0x33c>)
 8001d0e:	6013      	str	r3, [r2, #0]
		body_rotation[1]= roll_sum;
 8001d10:	4b3d      	ldr	r3, [pc, #244]	@ (8001e08 <CalcFunc+0x338>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a3d      	ldr	r2, [pc, #244]	@ (8001e0c <CalcFunc+0x33c>)
 8001d16:	6053      	str	r3, [r2, #4]

		//		sprintf(data," Pitch: %d  Roll: %d \r\n", (int)(-mpu6050.roll), (int)(mpu6050.pitch));
		//				sprintf(data," %d %d \r\n",(int)J1y, (int)J1x);
		//		HAL_UART_Transmit_IT(&huart1, data, strlen(data));

		inverse_kinematics_all(FL_position,FR_position,BL_position, BR_position, FL_body_angles, FR_body_angles, BL_body_angles, BR_body_angles);
 8001d18:	4b3d      	ldr	r3, [pc, #244]	@ (8001e10 <CalcFunc+0x340>)
 8001d1a:	9303      	str	r3, [sp, #12]
 8001d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e14 <CalcFunc+0x344>)
 8001d1e:	9302      	str	r3, [sp, #8]
 8001d20:	4b3d      	ldr	r3, [pc, #244]	@ (8001e18 <CalcFunc+0x348>)
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	4b3d      	ldr	r3, [pc, #244]	@ (8001e1c <CalcFunc+0x34c>)
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	4b3d      	ldr	r3, [pc, #244]	@ (8001e20 <CalcFunc+0x350>)
 8001d2a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e24 <CalcFunc+0x354>)
 8001d2c:	493e      	ldr	r1, [pc, #248]	@ (8001e28 <CalcFunc+0x358>)
 8001d2e:	483f      	ldr	r0, [pc, #252]	@ (8001e2c <CalcFunc+0x35c>)
 8001d30:	f001 f846 	bl	8002dc0 <inverse_kinematics_all>
		load_angles();
 8001d34:	f001 fad6 	bl	80032e4 <load_angles>
		ServoDriverSetOnOff_Multi(&pca9865,0,12,pulses);
 8001d38:	4b3d      	ldr	r3, [pc, #244]	@ (8001e30 <CalcFunc+0x360>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4818      	ldr	r0, [pc, #96]	@ (8001da0 <CalcFunc+0x2d0>)
 8001d40:	f7ff fcab 	bl	800169a <ServoDriverSetOnOff_Multi>
		//		ServoDriverSetOnOff(&pca9865,1,0,pulses[1]);
		//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		HAL_Delay(10);
 8001d44:	200a      	movs	r0, #10
 8001d46:	f003 fd8f 	bl	8005868 <HAL_Delay>
		MPUReqAccGyro(&mpu6050);
 8001d4a:	e736      	b.n	8001bba <CalcFunc+0xea>
 8001d4c:	f3af 8000 	nop.w
 8001d50:	33333333 	.word	0x33333333
 8001d54:	3fd33333 	.word	0x3fd33333
 8001d58:	33333333 	.word	0x33333333
 8001d5c:	bfd33333 	.word	0xbfd33333
 8001d60:	20000220 	.word	0x20000220
 8001d64:	3e570a3d 	.word	0x3e570a3d
 8001d68:	bdcccccd 	.word	0xbdcccccd
 8001d6c:	be851eb8 	.word	0xbe851eb8
 8001d70:	2000022c 	.word	0x2000022c
 8001d74:	bdb851ec 	.word	0xbdb851ec
 8001d78:	3ca3d70a 	.word	0x3ca3d70a
 8001d7c:	20000238 	.word	0x20000238
 8001d80:	3db851ec 	.word	0x3db851ec
 8001d84:	bda3d70a 	.word	0xbda3d70a
 8001d88:	bd23d70a 	.word	0xbd23d70a
 8001d8c:	20000244 	.word	0x20000244
 8001d90:	bc23d70a 	.word	0xbc23d70a
 8001d94:	3e19999a 	.word	0x3e19999a
 8001d98:	3ec7ae14 	.word	0x3ec7ae14
 8001d9c:	20000330 	.word	0x20000330
 8001da0:	20000134 	.word	0x20000134
 8001da4:	3ba3d70a 	.word	0x3ba3d70a
 8001da8:	20000384 	.word	0x20000384
 8001dac:	2000013c 	.word	0x2000013c
 8001db0:	fffffdb2 	.word	0xfffffdb2
 8001db4:	fffffda8 	.word	0xfffffda8
 8001db8:	fffffc50 	.word	0xfffffc50
 8001dbc:	3e4ccccd 	.word	0x3e4ccccd
 8001dc0:	3d088889 	.word	0x3d088889
 8001dc4:	3b83126f 	.word	0x3b83126f
 8001dc8:	3ca3d70a 	.word	0x3ca3d70a
 8001dcc:	3e570a3d 	.word	0x3e570a3d
 8001dd0:	3e99999a 	.word	0x3e99999a
 8001dd4:	3c23d70a 	.word	0x3c23d70a
 8001dd8:	200002cc 	.word	0x200002cc
 8001ddc:	200002c8 	.word	0x200002c8
 8001de0:	20000198 	.word	0x20000198
 8001de4:	200002d8 	.word	0x200002d8
 8001de8:	200002d4 	.word	0x200002d4
 8001dec:	200001d0 	.word	0x200001d0
 8001df0:	200002bc 	.word	0x200002bc
 8001df4:	3fe80000 	.word	0x3fe80000
 8001df8:	40260000 	.word	0x40260000
 8001dfc:	200002d0 	.word	0x200002d0
 8001e00:	3e99999a 	.word	0x3e99999a
 8001e04:	be99999a 	.word	0xbe99999a
 8001e08:	200002dc 	.word	0x200002dc
 8001e0c:	200002b0 	.word	0x200002b0
 8001e10:	20000274 	.word	0x20000274
 8001e14:	20000268 	.word	0x20000268
 8001e18:	2000025c 	.word	0x2000025c
 8001e1c:	20000250 	.word	0x20000250
 8001e20:	20000024 	.word	0x20000024
 8001e24:	20000018 	.word	0x20000018
 8001e28:	2000000c 	.word	0x2000000c
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000208 	.word	0x20000208

08001e34 <HAL_UART_RxCpltCallback>:
	/* USER CODE END CalcFunc */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

	if(rx != '\n'){
 8001e3c:	4ba5      	ldr	r3, [pc, #660]	@ (80020d4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b0a      	cmp	r3, #10
 8001e42:	d00d      	beq.n	8001e60 <HAL_UART_RxCpltCallback+0x2c>
		data[rx_index] = rx;
 8001e44:	4ba4      	ldr	r3, [pc, #656]	@ (80020d8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4ba2      	ldr	r3, [pc, #648]	@ (80020d4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001e4c:	7819      	ldrb	r1, [r3, #0]
 8001e4e:	4ba3      	ldr	r3, [pc, #652]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 8001e50:	5499      	strb	r1, [r3, r2]
		rx_index +=1;
 8001e52:	4ba1      	ldr	r3, [pc, #644]	@ (80020d8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b9f      	ldr	r3, [pc, #636]	@ (80020d8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	e16c      	b.n	800213a <HAL_UART_RxCpltCallback+0x306>
	}else{
		data[rx_index] = rx;
 8001e60:	4b9d      	ldr	r3, [pc, #628]	@ (80020d8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	4b9b      	ldr	r3, [pc, #620]	@ (80020d4 <HAL_UART_RxCpltCallback+0x2a0>)
 8001e68:	7819      	ldrb	r1, [r3, #0]
 8001e6a:	4b9c      	ldr	r3, [pc, #624]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 8001e6c:	5499      	strb	r1, [r3, r2]
		rx_index = 0;
 8001e6e:	4b9a      	ldr	r3, [pc, #616]	@ (80020d8 <HAL_UART_RxCpltCallback+0x2a4>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]

		switch(data[0]){
 8001e74:	4b99      	ldr	r3, [pc, #612]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	3b41      	subs	r3, #65	@ 0x41
 8001e7a:	2b18      	cmp	r3, #24
 8001e7c:	f200 8158 	bhi.w	8002130 <HAL_UART_RxCpltCallback+0x2fc>
 8001e80:	a201      	add	r2, pc, #4	@ (adr r2, 8001e88 <HAL_UART_RxCpltCallback+0x54>)
 8001e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e86:	bf00      	nop
 8001e88:	08001eed 	.word	0x08001eed
 8001e8c:	08001ef5 	.word	0x08001ef5
 8001e90:	08001efd 	.word	0x08001efd
 8001e94:	08001f05 	.word	0x08001f05
 8001e98:	08002131 	.word	0x08002131
 8001e9c:	08002131 	.word	0x08002131
 8001ea0:	08002131 	.word	0x08002131
 8001ea4:	08002131 	.word	0x08002131
 8001ea8:	08002131 	.word	0x08002131
 8001eac:	08001fe5 	.word	0x08001fe5
 8001eb0:	08002131 	.word	0x08002131
 8001eb4:	08001f1d 	.word	0x08001f1d
 8001eb8:	08002131 	.word	0x08002131
 8001ebc:	08002131 	.word	0x08002131
 8001ec0:	08002131 	.word	0x08002131
 8001ec4:	08002131 	.word	0x08002131
 8001ec8:	08002131 	.word	0x08002131
 8001ecc:	08001f25 	.word	0x08001f25
 8001ed0:	08001f2d 	.word	0x08001f2d
 8001ed4:	08002131 	.word	0x08002131
 8001ed8:	08002131 	.word	0x08002131
 8001edc:	08002131 	.word	0x08002131
 8001ee0:	08002131 	.word	0x08002131
 8001ee4:	08001f0d 	.word	0x08001f0d
 8001ee8:	08001f15 	.word	0x08001f15
		case 'A' :
			pressed_button = A;
 8001eec:	4b7c      	ldr	r3, [pc, #496]	@ (80020e0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	701a      	strb	r2, [r3, #0]
			break;
 8001ef2:	e11d      	b.n	8002130 <HAL_UART_RxCpltCallback+0x2fc>
		case 'B' :
			pressed_button = B;
 8001ef4:	4b7a      	ldr	r3, [pc, #488]	@ (80020e0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	701a      	strb	r2, [r3, #0]
			break;
 8001efa:	e119      	b.n	8002130 <HAL_UART_RxCpltCallback+0x2fc>
		case 'C' :
			pressed_button = C;
 8001efc:	4b78      	ldr	r3, [pc, #480]	@ (80020e0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001efe:	2203      	movs	r2, #3
 8001f00:	701a      	strb	r2, [r3, #0]
			break;
 8001f02:	e115      	b.n	8002130 <HAL_UART_RxCpltCallback+0x2fc>
		case 'D' :
			pressed_button = D;
 8001f04:	4b76      	ldr	r3, [pc, #472]	@ (80020e0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001f06:	2204      	movs	r2, #4
 8001f08:	701a      	strb	r2, [r3, #0]
			break;
 8001f0a:	e111      	b.n	8002130 <HAL_UART_RxCpltCallback+0x2fc>
		case 'X' :
			pressed_button = X;
 8001f0c:	4b74      	ldr	r3, [pc, #464]	@ (80020e0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001f0e:	2205      	movs	r2, #5
 8001f10:	701a      	strb	r2, [r3, #0]
			break;
 8001f12:	e10d      	b.n	8002130 <HAL_UART_RxCpltCallback+0x2fc>
		case 'Y' :
			pressed_button = Y;
 8001f14:	4b72      	ldr	r3, [pc, #456]	@ (80020e0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001f16:	2206      	movs	r2, #6
 8001f18:	701a      	strb	r2, [r3, #0]
			break;
 8001f1a:	e109      	b.n	8002130 <HAL_UART_RxCpltCallback+0x2fc>
		case 'L' :
			pressed_button = L1;
 8001f1c:	4b70      	ldr	r3, [pc, #448]	@ (80020e0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001f1e:	2208      	movs	r2, #8
 8001f20:	701a      	strb	r2, [r3, #0]
			break;
 8001f22:	e105      	b.n	8002130 <HAL_UART_RxCpltCallback+0x2fc>
		case 'R' :
			pressed_button = R1;
 8001f24:	4b6e      	ldr	r3, [pc, #440]	@ (80020e0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001f26:	2209      	movs	r2, #9
 8001f28:	701a      	strb	r2, [r3, #0]
			break;
 8001f2a:	e101      	b.n	8002130 <HAL_UART_RxCpltCallback+0x2fc>
		case 'S' :
			if(data[1] == 'T'){
 8001f2c:	4b6b      	ldr	r3, [pc, #428]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 8001f2e:	785b      	ldrb	r3, [r3, #1]
 8001f30:	2b54      	cmp	r3, #84	@ 0x54
 8001f32:	d103      	bne.n	8001f3c <HAL_UART_RxCpltCallback+0x108>
				pressed_button = START;
 8001f34:	4b6a      	ldr	r3, [pc, #424]	@ (80020e0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001f36:	2207      	movs	r2, #7
 8001f38:	701a      	strb	r2, [r3, #0]
				J1x = 0.0;
				J1y = 0.0;
				J2y = 0.0;
				J2x = 0.0;
			}
			break;
 8001f3a:	e0f9      	b.n	8002130 <HAL_UART_RxCpltCallback+0x2fc>
			}else if(data[1] == '1'){
 8001f3c:	4b67      	ldr	r3, [pc, #412]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 8001f3e:	785b      	ldrb	r3, [r3, #1]
 8001f40:	2b31      	cmp	r3, #49	@ 0x31
 8001f42:	d11d      	bne.n	8001f80 <HAL_UART_RxCpltCallback+0x14c>
				uint8_t joy_index = 2;
 8001f44:	2302      	movs	r3, #2
 8001f46:	73fb      	strb	r3, [r7, #15]
				memset(num_conv,'_',6);
 8001f48:	2206      	movs	r2, #6
 8001f4a:	215f      	movs	r1, #95	@ 0x5f
 8001f4c:	4865      	ldr	r0, [pc, #404]	@ (80020e4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001f4e:	f009 fed3 	bl	800bcf8 <memset>
				while( data[joy_index] != '\n'){
 8001f52:	e008      	b.n	8001f66 <HAL_UART_RxCpltCallback+0x132>
					num_conv[joy_index] = data[joy_index];
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	4960      	ldr	r1, [pc, #384]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 8001f5a:	5c89      	ldrb	r1, [r1, r2]
 8001f5c:	4a61      	ldr	r2, [pc, #388]	@ (80020e4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001f5e:	54d1      	strb	r1, [r2, r3]
					joy_index+=1;
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	3301      	adds	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
				while( data[joy_index] != '\n'){
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	4a5c      	ldr	r2, [pc, #368]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 8001f6a:	5cd3      	ldrb	r3, [r2, r3]
 8001f6c:	2b0a      	cmp	r3, #10
 8001f6e:	d1f1      	bne.n	8001f54 <HAL_UART_RxCpltCallback+0x120>
				slider_speed = (uint8_t)(atoi(num_conv));
 8001f70:	485c      	ldr	r0, [pc, #368]	@ (80020e4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001f72:	f009 fe19 	bl	800bba8 <atoi>
 8001f76:	4603      	mov	r3, r0
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	4b5b      	ldr	r3, [pc, #364]	@ (80020e8 <HAL_UART_RxCpltCallback+0x2b4>)
 8001f7c:	701a      	strb	r2, [r3, #0]
			break;
 8001f7e:	e0d7      	b.n	8002130 <HAL_UART_RxCpltCallback+0x2fc>
			}else if(data[1] == '2'){
 8001f80:	4b56      	ldr	r3, [pc, #344]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 8001f82:	785b      	ldrb	r3, [r3, #1]
 8001f84:	2b32      	cmp	r3, #50	@ 0x32
 8001f86:	d11d      	bne.n	8001fc4 <HAL_UART_RxCpltCallback+0x190>
				uint8_t joy_index = 2;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	73bb      	strb	r3, [r7, #14]
				memset(num_conv,'_',6);
 8001f8c:	2206      	movs	r2, #6
 8001f8e:	215f      	movs	r1, #95	@ 0x5f
 8001f90:	4854      	ldr	r0, [pc, #336]	@ (80020e4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001f92:	f009 feb1 	bl	800bcf8 <memset>
				while( data[joy_index] != '\n'){
 8001f96:	e008      	b.n	8001faa <HAL_UART_RxCpltCallback+0x176>
					num_conv[joy_index] = data[joy_index];
 8001f98:	7bba      	ldrb	r2, [r7, #14]
 8001f9a:	7bbb      	ldrb	r3, [r7, #14]
 8001f9c:	494f      	ldr	r1, [pc, #316]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 8001f9e:	5c89      	ldrb	r1, [r1, r2]
 8001fa0:	4a50      	ldr	r2, [pc, #320]	@ (80020e4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001fa2:	54d1      	strb	r1, [r2, r3]
					joy_index+=1;
 8001fa4:	7bbb      	ldrb	r3, [r7, #14]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	73bb      	strb	r3, [r7, #14]
				while( data[joy_index] != '\n'){
 8001faa:	7bbb      	ldrb	r3, [r7, #14]
 8001fac:	4a4b      	ldr	r2, [pc, #300]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	2b0a      	cmp	r3, #10
 8001fb2:	d1f1      	bne.n	8001f98 <HAL_UART_RxCpltCallback+0x164>
				slider_angle = (uint8_t)(atoi(num_conv));
 8001fb4:	484b      	ldr	r0, [pc, #300]	@ (80020e4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001fb6:	f009 fdf7 	bl	800bba8 <atoi>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	4b4b      	ldr	r3, [pc, #300]	@ (80020ec <HAL_UART_RxCpltCallback+0x2b8>)
 8001fc0:	701a      	strb	r2, [r3, #0]
			break;
 8001fc2:	e0b5      	b.n	8002130 <HAL_UART_RxCpltCallback+0x2fc>
				pressed_button = STOP;
 8001fc4:	4b46      	ldr	r3, [pc, #280]	@ (80020e0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
				J1x = 0.0;
 8001fca:	4b49      	ldr	r3, [pc, #292]	@ (80020f0 <HAL_UART_RxCpltCallback+0x2bc>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
				J1y = 0.0;
 8001fd0:	4b48      	ldr	r3, [pc, #288]	@ (80020f4 <HAL_UART_RxCpltCallback+0x2c0>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
				J2y = 0.0;
 8001fd6:	4b48      	ldr	r3, [pc, #288]	@ (80020f8 <HAL_UART_RxCpltCallback+0x2c4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
				J2x = 0.0;
 8001fdc:	4b47      	ldr	r3, [pc, #284]	@ (80020fc <HAL_UART_RxCpltCallback+0x2c8>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
			break;
 8001fe2:	e0a5      	b.n	8002130 <HAL_UART_RxCpltCallback+0x2fc>
		case 'J':
			if(data[1] == '1'){
 8001fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 8001fe6:	785b      	ldrb	r3, [r3, #1]
 8001fe8:	2b31      	cmp	r3, #49	@ 0x31
 8001fea:	d143      	bne.n	8002074 <HAL_UART_RxCpltCallback+0x240>
				uint8_t joy_index = 2;
 8001fec:	2302      	movs	r3, #2
 8001fee:	737b      	strb	r3, [r7, #13]
				uint8_t second_index = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	733b      	strb	r3, [r7, #12]
				memset(num_conv,'_',6);
 8001ff4:	2206      	movs	r2, #6
 8001ff6:	215f      	movs	r1, #95	@ 0x5f
 8001ff8:	483a      	ldr	r0, [pc, #232]	@ (80020e4 <HAL_UART_RxCpltCallback+0x2b0>)
 8001ffa:	f009 fe7d 	bl	800bcf8 <memset>

				while( data[joy_index] != ' '){
 8001ffe:	e00b      	b.n	8002018 <HAL_UART_RxCpltCallback+0x1e4>
					num_conv[second_index] = data[joy_index];
 8002000:	7b7a      	ldrb	r2, [r7, #13]
 8002002:	7b3b      	ldrb	r3, [r7, #12]
 8002004:	4935      	ldr	r1, [pc, #212]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 8002006:	5c89      	ldrb	r1, [r1, r2]
 8002008:	4a36      	ldr	r2, [pc, #216]	@ (80020e4 <HAL_UART_RxCpltCallback+0x2b0>)
 800200a:	54d1      	strb	r1, [r2, r3]
					joy_index+=1;
 800200c:	7b7b      	ldrb	r3, [r7, #13]
 800200e:	3301      	adds	r3, #1
 8002010:	737b      	strb	r3, [r7, #13]
					second_index+=1;
 8002012:	7b3b      	ldrb	r3, [r7, #12]
 8002014:	3301      	adds	r3, #1
 8002016:	733b      	strb	r3, [r7, #12]
				while( data[joy_index] != ' '){
 8002018:	7b7b      	ldrb	r3, [r7, #13]
 800201a:	4a30      	ldr	r2, [pc, #192]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 800201c:	5cd3      	ldrb	r3, [r2, r3]
 800201e:	2b20      	cmp	r3, #32
 8002020:	d1ee      	bne.n	8002000 <HAL_UART_RxCpltCallback+0x1cc>
				}

				J1x = (atoi(num_conv));
 8002022:	4830      	ldr	r0, [pc, #192]	@ (80020e4 <HAL_UART_RxCpltCallback+0x2b0>)
 8002024:	f009 fdc0 	bl	800bba8 <atoi>
 8002028:	4603      	mov	r3, r0
 800202a:	4a31      	ldr	r2, [pc, #196]	@ (80020f0 <HAL_UART_RxCpltCallback+0x2bc>)
 800202c:	6013      	str	r3, [r2, #0]
				//				if(J1x > 100) J1x = 100;
				//				if(J1x < -100) J1x = -100;

				memset(num_conv,'_',6);
 800202e:	2206      	movs	r2, #6
 8002030:	215f      	movs	r1, #95	@ 0x5f
 8002032:	482c      	ldr	r0, [pc, #176]	@ (80020e4 <HAL_UART_RxCpltCallback+0x2b0>)
 8002034:	f009 fe60 	bl	800bcf8 <memset>

				second_index = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	733b      	strb	r3, [r7, #12]
				joy_index+=1;
 800203c:	7b7b      	ldrb	r3, [r7, #13]
 800203e:	3301      	adds	r3, #1
 8002040:	737b      	strb	r3, [r7, #13]

				while( data[joy_index] != '\n'){
 8002042:	e00b      	b.n	800205c <HAL_UART_RxCpltCallback+0x228>
					num_conv[second_index] = data[joy_index];
 8002044:	7b7a      	ldrb	r2, [r7, #13]
 8002046:	7b3b      	ldrb	r3, [r7, #12]
 8002048:	4924      	ldr	r1, [pc, #144]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 800204a:	5c89      	ldrb	r1, [r1, r2]
 800204c:	4a25      	ldr	r2, [pc, #148]	@ (80020e4 <HAL_UART_RxCpltCallback+0x2b0>)
 800204e:	54d1      	strb	r1, [r2, r3]
					joy_index+=1;
 8002050:	7b7b      	ldrb	r3, [r7, #13]
 8002052:	3301      	adds	r3, #1
 8002054:	737b      	strb	r3, [r7, #13]
					second_index+=1;
 8002056:	7b3b      	ldrb	r3, [r7, #12]
 8002058:	3301      	adds	r3, #1
 800205a:	733b      	strb	r3, [r7, #12]
				while( data[joy_index] != '\n'){
 800205c:	7b7b      	ldrb	r3, [r7, #13]
 800205e:	4a1f      	ldr	r2, [pc, #124]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 8002060:	5cd3      	ldrb	r3, [r2, r3]
 8002062:	2b0a      	cmp	r3, #10
 8002064:	d1ee      	bne.n	8002044 <HAL_UART_RxCpltCallback+0x210>
				}
				J1y = (atoi(num_conv));
 8002066:	481f      	ldr	r0, [pc, #124]	@ (80020e4 <HAL_UART_RxCpltCallback+0x2b0>)
 8002068:	f009 fd9e 	bl	800bba8 <atoi>
 800206c:	4603      	mov	r3, r0
 800206e:	4a21      	ldr	r2, [pc, #132]	@ (80020f4 <HAL_UART_RxCpltCallback+0x2c0>)
 8002070:	6013      	str	r3, [r2, #0]
				}
				J2y = (atoi(num_conv));
				//				if(J2y > 100) J2y = 100;
				//				if(J2y < -100) J2y = -100;
			}
			break;
 8002072:	e05c      	b.n	800212e <HAL_UART_RxCpltCallback+0x2fa>
			}else if(data[1] == '2'){
 8002074:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 8002076:	785b      	ldrb	r3, [r3, #1]
 8002078:	2b32      	cmp	r3, #50	@ 0x32
 800207a:	d158      	bne.n	800212e <HAL_UART_RxCpltCallback+0x2fa>
				uint8_t joy_index = 2;
 800207c:	2302      	movs	r3, #2
 800207e:	72fb      	strb	r3, [r7, #11]
				uint8_t second_index = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	72bb      	strb	r3, [r7, #10]
				memset(num_conv,'_',6);
 8002084:	2206      	movs	r2, #6
 8002086:	215f      	movs	r1, #95	@ 0x5f
 8002088:	4816      	ldr	r0, [pc, #88]	@ (80020e4 <HAL_UART_RxCpltCallback+0x2b0>)
 800208a:	f009 fe35 	bl	800bcf8 <memset>
				while( data[joy_index] != ' '){
 800208e:	e00b      	b.n	80020a8 <HAL_UART_RxCpltCallback+0x274>
					num_conv[second_index] = data[joy_index];
 8002090:	7afa      	ldrb	r2, [r7, #11]
 8002092:	7abb      	ldrb	r3, [r7, #10]
 8002094:	4911      	ldr	r1, [pc, #68]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 8002096:	5c89      	ldrb	r1, [r1, r2]
 8002098:	4a12      	ldr	r2, [pc, #72]	@ (80020e4 <HAL_UART_RxCpltCallback+0x2b0>)
 800209a:	54d1      	strb	r1, [r2, r3]
					joy_index+=1;
 800209c:	7afb      	ldrb	r3, [r7, #11]
 800209e:	3301      	adds	r3, #1
 80020a0:	72fb      	strb	r3, [r7, #11]
					second_index+=1;
 80020a2:	7abb      	ldrb	r3, [r7, #10]
 80020a4:	3301      	adds	r3, #1
 80020a6:	72bb      	strb	r3, [r7, #10]
				while( data[joy_index] != ' '){
 80020a8:	7afb      	ldrb	r3, [r7, #11]
 80020aa:	4a0c      	ldr	r2, [pc, #48]	@ (80020dc <HAL_UART_RxCpltCallback+0x2a8>)
 80020ac:	5cd3      	ldrb	r3, [r2, r3]
 80020ae:	2b20      	cmp	r3, #32
 80020b0:	d1ee      	bne.n	8002090 <HAL_UART_RxCpltCallback+0x25c>
				J2x = (atoi(num_conv));
 80020b2:	480c      	ldr	r0, [pc, #48]	@ (80020e4 <HAL_UART_RxCpltCallback+0x2b0>)
 80020b4:	f009 fd78 	bl	800bba8 <atoi>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4a10      	ldr	r2, [pc, #64]	@ (80020fc <HAL_UART_RxCpltCallback+0x2c8>)
 80020bc:	6013      	str	r3, [r2, #0]
				memset(num_conv,'_',6);
 80020be:	2206      	movs	r2, #6
 80020c0:	215f      	movs	r1, #95	@ 0x5f
 80020c2:	4808      	ldr	r0, [pc, #32]	@ (80020e4 <HAL_UART_RxCpltCallback+0x2b0>)
 80020c4:	f009 fe18 	bl	800bcf8 <memset>
				second_index = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	72bb      	strb	r3, [r7, #10]
				joy_index+=1;
 80020cc:	7afb      	ldrb	r3, [r7, #11]
 80020ce:	3301      	adds	r3, #1
 80020d0:	72fb      	strb	r3, [r7, #11]
				while( data[joy_index] != '\n'){
 80020d2:	e021      	b.n	8002118 <HAL_UART_RxCpltCallback+0x2e4>
 80020d4:	2000030e 	.word	0x2000030e
 80020d8:	2000030f 	.word	0x2000030f
 80020dc:	200002e8 	.word	0x200002e8
 80020e0:	20000310 	.word	0x20000310
 80020e4:	20000308 	.word	0x20000308
 80020e8:	20000312 	.word	0x20000312
 80020ec:	20000313 	.word	0x20000313
 80020f0:	20000314 	.word	0x20000314
 80020f4:	20000318 	.word	0x20000318
 80020f8:	20000320 	.word	0x20000320
 80020fc:	2000031c 	.word	0x2000031c
					num_conv[second_index] = data[joy_index];
 8002100:	7afa      	ldrb	r2, [r7, #11]
 8002102:	7abb      	ldrb	r3, [r7, #10]
 8002104:	4911      	ldr	r1, [pc, #68]	@ (800214c <HAL_UART_RxCpltCallback+0x318>)
 8002106:	5c89      	ldrb	r1, [r1, r2]
 8002108:	4a11      	ldr	r2, [pc, #68]	@ (8002150 <HAL_UART_RxCpltCallback+0x31c>)
 800210a:	54d1      	strb	r1, [r2, r3]
					joy_index+=1;
 800210c:	7afb      	ldrb	r3, [r7, #11]
 800210e:	3301      	adds	r3, #1
 8002110:	72fb      	strb	r3, [r7, #11]
					second_index+=1;
 8002112:	7abb      	ldrb	r3, [r7, #10]
 8002114:	3301      	adds	r3, #1
 8002116:	72bb      	strb	r3, [r7, #10]
				while( data[joy_index] != '\n'){
 8002118:	7afb      	ldrb	r3, [r7, #11]
 800211a:	4a0c      	ldr	r2, [pc, #48]	@ (800214c <HAL_UART_RxCpltCallback+0x318>)
 800211c:	5cd3      	ldrb	r3, [r2, r3]
 800211e:	2b0a      	cmp	r3, #10
 8002120:	d1ee      	bne.n	8002100 <HAL_UART_RxCpltCallback+0x2cc>
				J2y = (atoi(num_conv));
 8002122:	480b      	ldr	r0, [pc, #44]	@ (8002150 <HAL_UART_RxCpltCallback+0x31c>)
 8002124:	f009 fd40 	bl	800bba8 <atoi>
 8002128:	4603      	mov	r3, r0
 800212a:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <HAL_UART_RxCpltCallback+0x320>)
 800212c:	6013      	str	r3, [r2, #0]
			break;
 800212e:	bf00      	nop
		}
		memset(data,'0',20);
 8002130:	2214      	movs	r2, #20
 8002132:	2130      	movs	r1, #48	@ 0x30
 8002134:	4805      	ldr	r0, [pc, #20]	@ (800214c <HAL_UART_RxCpltCallback+0x318>)
 8002136:	f009 fddf 	bl	800bcf8 <memset>
	}

	HAL_UART_Receive_IT(&huart1, &rx, 1);
 800213a:	2201      	movs	r2, #1
 800213c:	4906      	ldr	r1, [pc, #24]	@ (8002158 <HAL_UART_RxCpltCallback+0x324>)
 800213e:	4807      	ldr	r0, [pc, #28]	@ (800215c <HAL_UART_RxCpltCallback+0x328>)
 8002140:	f006 f87a 	bl	8008238 <HAL_UART_Receive_IT>

}
 8002144:	bf00      	nop
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	200002e8 	.word	0x200002e8
 8002150:	20000308 	.word	0x20000308
 8002154:	20000320 	.word	0x20000320
 8002158:	2000030e 	.word	0x2000030e
 800215c:	200003dc 	.word	0x200003dc

08002160 <inverse_leg_kinematics>:

void inverse_leg_kinematics(float position[], float angles[], uint8_t leg_index, float rotation[]){
 8002160:	b5b0      	push	{r4, r5, r7, lr}
 8002162:	ed2d 8b02 	vpush	{d8}
 8002166:	b098      	sub	sp, #96	@ 0x60
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	71fb      	strb	r3, [r7, #7]

	if(position[0] == 0.0) position[0] = -0.00001;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002182:	d102      	bne.n	800218a <inverse_leg_kinematics+0x2a>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4a5e      	ldr	r2, [pc, #376]	@ (8002300 <inverse_leg_kinematics+0x1a0>)
 8002188:	601a      	str	r2, [r3, #0]
	if(position[1] == 0.0) position[1] = -0.00001;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3304      	adds	r3, #4
 800218e:	edd3 7a00 	vldr	s15, [r3]
 8002192:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219a:	d103      	bne.n	80021a4 <inverse_leg_kinematics+0x44>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3304      	adds	r3, #4
 80021a0:	4a57      	ldr	r2, [pc, #348]	@ (8002300 <inverse_leg_kinematics+0x1a0>)
 80021a2:	601a      	str	r2, [r3, #0]


	float pitch_offset = sin(rotation[0]) * (body_length/2);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f9d5 	bl	8000558 <__aeabi_f2d>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	ec43 2b10 	vmov	d0, r2, r3
 80021b6:	f00a fd6f 	bl	800cc98 <sin>
 80021ba:	ec51 0b10 	vmov	r0, r1, d0
 80021be:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80021c2:	4b50      	ldr	r3, [pc, #320]	@ (8002304 <inverse_leg_kinematics+0x1a4>)
 80021c4:	f7fe fa20 	bl	8000608 <__aeabi_dmul>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f7fe fd12 	bl	8000bf8 <__aeabi_d2f>
 80021d4:	4603      	mov	r3, r0
 80021d6:	653b      	str	r3, [r7, #80]	@ 0x50
	float x_pitch_offset = ((position[2] - pitch_offset) * tan(rotation[0])  * 0.2);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3308      	adds	r3, #8
 80021dc:	ed93 7a00 	vldr	s14, [r3]
 80021e0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80021e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021e8:	ee17 0a90 	vmov	r0, s15
 80021ec:	f7fe f9b4 	bl	8000558 <__aeabi_f2d>
 80021f0:	4604      	mov	r4, r0
 80021f2:	460d      	mov	r5, r1
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f9ad 	bl	8000558 <__aeabi_f2d>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	ec43 2b10 	vmov	d0, r2, r3
 8002206:	f00a fd9b 	bl	800cd40 <tan>
 800220a:	ec53 2b10 	vmov	r2, r3, d0
 800220e:	4620      	mov	r0, r4
 8002210:	4629      	mov	r1, r5
 8002212:	f7fe f9f9 	bl	8000608 <__aeabi_dmul>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	a334      	add	r3, pc, #208	@ (adr r3, 80022f0 <inverse_leg_kinematics+0x190>)
 8002220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002224:	f7fe f9f0 	bl	8000608 <__aeabi_dmul>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f7fe fce2 	bl	8000bf8 <__aeabi_d2f>
 8002234:	4603      	mov	r3, r0
 8002236:	64fb      	str	r3, [r7, #76]	@ 0x4c

	float roll_offset = sin(rotation[1]) * (body_width/2);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	3304      	adds	r3, #4
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f98a 	bl	8000558 <__aeabi_f2d>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	ec43 2b10 	vmov	d0, r2, r3
 800224c:	f00a fd24 	bl	800cc98 <sin>
 8002250:	ec51 0b10 	vmov	r0, r1, d0
 8002254:	a328      	add	r3, pc, #160	@ (adr r3, 80022f8 <inverse_leg_kinematics+0x198>)
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	f7fe f9d5 	bl	8000608 <__aeabi_dmul>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4610      	mov	r0, r2
 8002264:	4619      	mov	r1, r3
 8002266:	f7fe fcc7 	bl	8000bf8 <__aeabi_d2f>
 800226a:	4603      	mov	r3, r0
 800226c:	64bb      	str	r3, [r7, #72]	@ 0x48
	float y_roll_offset = ((position[2] - roll_offset) * tan(rotation[1]) * 0.2);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3308      	adds	r3, #8
 8002272:	ed93 7a00 	vldr	s14, [r3]
 8002276:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800227a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227e:	ee17 0a90 	vmov	r0, s15
 8002282:	f7fe f969 	bl	8000558 <__aeabi_f2d>
 8002286:	4604      	mov	r4, r0
 8002288:	460d      	mov	r5, r1
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	3304      	adds	r3, #4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe f961 	bl	8000558 <__aeabi_f2d>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	ec43 2b10 	vmov	d0, r2, r3
 800229e:	f00a fd4f 	bl	800cd40 <tan>
 80022a2:	ec53 2b10 	vmov	r2, r3, d0
 80022a6:	4620      	mov	r0, r4
 80022a8:	4629      	mov	r1, r5
 80022aa:	f7fe f9ad 	bl	8000608 <__aeabi_dmul>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4610      	mov	r0, r2
 80022b4:	4619      	mov	r1, r3
 80022b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80022f0 <inverse_leg_kinematics+0x190>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	f7fe f9a4 	bl	8000608 <__aeabi_dmul>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	f7fe fc96 	bl	8000bf8 <__aeabi_d2f>
 80022cc:	4603      	mov	r3, r0
 80022ce:	647b      	str	r3, [r7, #68]	@ 0x44
	float current_yaw,new_width, new_length, H_leg, new_yaw,new_height,new_x,new_y,H1y,H2y,phi, phi2,theta,Hx,trident ;

	switch(leg_index){
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	f200 8402 	bhi.w	8002ade <inverse_leg_kinematics+0x97e>
 80022da:	a201      	add	r2, pc, #4	@ (adr r2, 80022e0 <inverse_leg_kinematics+0x180>)
 80022dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e0:	08002309 	.word	0x08002309
 80022e4:	080024e9 	.word	0x080024e9
 80022e8:	080026dd 	.word	0x080026dd
 80022ec:	080028ed 	.word	0x080028ed
 80022f0:	9999999a 	.word	0x9999999a
 80022f4:	3fc99999 	.word	0x3fc99999
 80022f8:	9999999a 	.word	0x9999999a
 80022fc:	3fa99999 	.word	0x3fa99999
 8002300:	b727c5ac 	.word	0xb727c5ac
 8002304:	3fb33333 	.word	0x3fb33333
	case 1:
		new_height = position[2] - pitch_offset + roll_offset;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	3308      	adds	r3, #8
 800230c:	ed93 7a00 	vldr	s14, [r3]
 8002310:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002318:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800231c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002320:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		new_y = -position[1] + y_roll_offset + Y_offset;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3304      	adds	r3, #4
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002334:	ee17 0a90 	vmov	r0, s15
 8002338:	f7fe f90e 	bl	8000558 <__aeabi_f2d>
 800233c:	a3e2      	add	r3, pc, #904	@ (adr r3, 80026c8 <inverse_leg_kinematics+0x568>)
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	f7fd ffab 	bl	800029c <__adddf3>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	f7fe fc53 	bl	8000bf8 <__aeabi_d2f>
 8002352:	4603      	mov	r3, r0
 8002354:	657b      	str	r3, [r7, #84]	@ 0x54
		new_x = position[0] - x_pitch_offset - X_offset;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	ed93 7a00 	vldr	s14, [r3]
 800235c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002364:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		H_leg = hypot(-body_width/2.0 + new_y,body_length/2.0 + new_x);
 8002368:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800236a:	f7fe f8f5 	bl	8000558 <__aeabi_f2d>
 800236e:	a3d6      	add	r3, pc, #856	@ (adr r3, 80026c8 <inverse_leg_kinematics+0x568>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fd ff90 	bl	8000298 <__aeabi_dsub>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	ec43 2b18 	vmov	d8, r2, r3
 8002380:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002382:	f7fe f8e9 	bl	8000558 <__aeabi_f2d>
 8002386:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800238a:	4bd3      	ldr	r3, [pc, #844]	@ (80026d8 <inverse_leg_kinematics+0x578>)
 800238c:	f7fd ff86 	bl	800029c <__adddf3>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	ec43 2b17 	vmov	d7, r2, r3
 8002398:	eeb0 1a47 	vmov.f32	s2, s14
 800239c:	eef0 1a67 	vmov.f32	s3, s15
 80023a0:	eeb0 0a48 	vmov.f32	s0, s16
 80023a4:	eef0 0a68 	vmov.f32	s1, s17
 80023a8:	f00a f9b2 	bl	800c710 <hypot>
 80023ac:	ec53 2b10 	vmov	r2, r3, d0
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	f7fe fc20 	bl	8000bf8 <__aeabi_d2f>
 80023b8:	4603      	mov	r3, r0
 80023ba:	643b      	str	r3, [r7, #64]	@ 0x40
		current_yaw = atan2(body_length/2.0 + new_x, -body_width/2.0 + new_y);
 80023bc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80023be:	f7fe f8cb 	bl	8000558 <__aeabi_f2d>
 80023c2:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80023c6:	4bc4      	ldr	r3, [pc, #784]	@ (80026d8 <inverse_leg_kinematics+0x578>)
 80023c8:	f7fd ff68 	bl	800029c <__adddf3>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	ec43 2b18 	vmov	d8, r2, r3
 80023d4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80023d6:	f7fe f8bf 	bl	8000558 <__aeabi_f2d>
 80023da:	a3bb      	add	r3, pc, #748	@ (adr r3, 80026c8 <inverse_leg_kinematics+0x568>)
 80023dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e0:	f7fd ff5a 	bl	8000298 <__aeabi_dsub>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	ec43 2b17 	vmov	d7, r2, r3
 80023ec:	eeb0 1a47 	vmov.f32	s2, s14
 80023f0:	eef0 1a67 	vmov.f32	s3, s15
 80023f4:	eeb0 0a48 	vmov.f32	s0, s16
 80023f8:	eef0 0a68 	vmov.f32	s1, s17
 80023fc:	f00a f986 	bl	800c70c <atan2>
 8002400:	ec53 2b10 	vmov	r2, r3, d0
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	f7fe fbf6 	bl	8000bf8 <__aeabi_d2f>
 800240c:	4603      	mov	r3, r0
 800240e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		new_yaw = current_yaw + rotation[2];
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	3308      	adds	r3, #8
 8002414:	edd3 7a00 	vldr	s15, [r3]
 8002418:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800241c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002420:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		new_width = cos(new_yaw) * H_leg;
 8002424:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002426:	f7fe f897 	bl	8000558 <__aeabi_f2d>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	ec43 2b10 	vmov	d0, r2, r3
 8002432:	f00a fbd5 	bl	800cbe0 <cos>
 8002436:	ec55 4b10 	vmov	r4, r5, d0
 800243a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800243c:	f7fe f88c 	bl	8000558 <__aeabi_f2d>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4620      	mov	r0, r4
 8002446:	4629      	mov	r1, r5
 8002448:	f7fe f8de 	bl	8000608 <__aeabi_dmul>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4610      	mov	r0, r2
 8002452:	4619      	mov	r1, r3
 8002454:	f7fe fbd0 	bl	8000bf8 <__aeabi_d2f>
 8002458:	4603      	mov	r3, r0
 800245a:	637b      	str	r3, [r7, #52]	@ 0x34
		new_length = sin(new_yaw) * H_leg;
 800245c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800245e:	f7fe f87b 	bl	8000558 <__aeabi_f2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	ec43 2b10 	vmov	d0, r2, r3
 800246a:	f00a fc15 	bl	800cc98 <sin>
 800246e:	ec55 4b10 	vmov	r4, r5, d0
 8002472:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002474:	f7fe f870 	bl	8000558 <__aeabi_f2d>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4620      	mov	r0, r4
 800247e:	4629      	mov	r1, r5
 8002480:	f7fe f8c2 	bl	8000608 <__aeabi_dmul>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4610      	mov	r0, r2
 800248a:	4619      	mov	r1, r3
 800248c:	f7fe fbb4 	bl	8000bf8 <__aeabi_d2f>
 8002490:	4603      	mov	r3, r0
 8002492:	633b      	str	r3, [r7, #48]	@ 0x30
		new_x = new_length - body_length/2.0;
 8002494:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002496:	f7fe f85f 	bl	8000558 <__aeabi_f2d>
 800249a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800249e:	4b8e      	ldr	r3, [pc, #568]	@ (80026d8 <inverse_leg_kinematics+0x578>)
 80024a0:	f7fd fefa 	bl	8000298 <__aeabi_dsub>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	f7fe fba4 	bl	8000bf8 <__aeabi_d2f>
 80024b0:	4603      	mov	r3, r0
 80024b2:	65bb      	str	r3, [r7, #88]	@ 0x58
		new_y = new_width + body_width/2.0 - balance_offset;
 80024b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80024b6:	f7fe f84f 	bl	8000558 <__aeabi_f2d>
 80024ba:	a383      	add	r3, pc, #524	@ (adr r3, 80026c8 <inverse_leg_kinematics+0x568>)
 80024bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c0:	f7fd feec 	bl	800029c <__adddf3>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	a380      	add	r3, pc, #512	@ (adr r3, 80026d0 <inverse_leg_kinematics+0x570>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	f7fd fee1 	bl	8000298 <__aeabi_dsub>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4610      	mov	r0, r2
 80024dc:	4619      	mov	r1, r3
 80024de:	f7fe fb8b 	bl	8000bf8 <__aeabi_d2f>
 80024e2:	4603      	mov	r3, r0
 80024e4:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
 80024e6:	e2fa      	b.n	8002ade <inverse_leg_kinematics+0x97e>
	case 2:
		new_height = position[2] - pitch_offset - roll_offset;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3308      	adds	r3, #8
 80024ec:	ed93 7a00 	vldr	s14, [r3]
 80024f0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80024f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024f8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80024fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002500:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		new_y = position[1] - y_roll_offset + Y_offset;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	3304      	adds	r3, #4
 8002508:	ed93 7a00 	vldr	s14, [r3]
 800250c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002510:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002514:	ee17 0a90 	vmov	r0, s15
 8002518:	f7fe f81e 	bl	8000558 <__aeabi_f2d>
 800251c:	a36a      	add	r3, pc, #424	@ (adr r3, 80026c8 <inverse_leg_kinematics+0x568>)
 800251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002522:	f7fd febb 	bl	800029c <__adddf3>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	f7fe fb63 	bl	8000bf8 <__aeabi_d2f>
 8002532:	4603      	mov	r3, r0
 8002534:	657b      	str	r3, [r7, #84]	@ 0x54
		new_x = position[0] - x_pitch_offset - X_offset;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	ed93 7a00 	vldr	s14, [r3]
 800253c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002544:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		H_leg = hypot(body_width/2.0 + new_y,body_length/2.0 + new_x);
 8002548:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800254a:	f7fe f805 	bl	8000558 <__aeabi_f2d>
 800254e:	a35e      	add	r3, pc, #376	@ (adr r3, 80026c8 <inverse_leg_kinematics+0x568>)
 8002550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002554:	f7fd fea2 	bl	800029c <__adddf3>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	ec43 2b18 	vmov	d8, r2, r3
 8002560:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002562:	f7fd fff9 	bl	8000558 <__aeabi_f2d>
 8002566:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800256a:	4b5b      	ldr	r3, [pc, #364]	@ (80026d8 <inverse_leg_kinematics+0x578>)
 800256c:	f7fd fe96 	bl	800029c <__adddf3>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	ec43 2b17 	vmov	d7, r2, r3
 8002578:	eeb0 1a47 	vmov.f32	s2, s14
 800257c:	eef0 1a67 	vmov.f32	s3, s15
 8002580:	eeb0 0a48 	vmov.f32	s0, s16
 8002584:	eef0 0a68 	vmov.f32	s1, s17
 8002588:	f00a f8c2 	bl	800c710 <hypot>
 800258c:	ec53 2b10 	vmov	r2, r3, d0
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	f7fe fb30 	bl	8000bf8 <__aeabi_d2f>
 8002598:	4603      	mov	r3, r0
 800259a:	643b      	str	r3, [r7, #64]	@ 0x40
		current_yaw = atan2(body_length/2.0 + new_x, body_width/2.0 + new_y);
 800259c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800259e:	f7fd ffdb 	bl	8000558 <__aeabi_f2d>
 80025a2:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80025a6:	4b4c      	ldr	r3, [pc, #304]	@ (80026d8 <inverse_leg_kinematics+0x578>)
 80025a8:	f7fd fe78 	bl	800029c <__adddf3>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	ec43 2b18 	vmov	d8, r2, r3
 80025b4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80025b6:	f7fd ffcf 	bl	8000558 <__aeabi_f2d>
 80025ba:	a343      	add	r3, pc, #268	@ (adr r3, 80026c8 <inverse_leg_kinematics+0x568>)
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f7fd fe6c 	bl	800029c <__adddf3>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	ec43 2b17 	vmov	d7, r2, r3
 80025cc:	eeb0 1a47 	vmov.f32	s2, s14
 80025d0:	eef0 1a67 	vmov.f32	s3, s15
 80025d4:	eeb0 0a48 	vmov.f32	s0, s16
 80025d8:	eef0 0a68 	vmov.f32	s1, s17
 80025dc:	f00a f896 	bl	800c70c <atan2>
 80025e0:	ec53 2b10 	vmov	r2, r3, d0
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	f7fe fb06 	bl	8000bf8 <__aeabi_d2f>
 80025ec:	4603      	mov	r3, r0
 80025ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		new_yaw = current_yaw - rotation[2];
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	3308      	adds	r3, #8
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80025fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002600:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		new_width = cos(new_yaw) * H_leg;
 8002604:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002606:	f7fd ffa7 	bl	8000558 <__aeabi_f2d>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	ec43 2b10 	vmov	d0, r2, r3
 8002612:	f00a fae5 	bl	800cbe0 <cos>
 8002616:	ec55 4b10 	vmov	r4, r5, d0
 800261a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800261c:	f7fd ff9c 	bl	8000558 <__aeabi_f2d>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4620      	mov	r0, r4
 8002626:	4629      	mov	r1, r5
 8002628:	f7fd ffee 	bl	8000608 <__aeabi_dmul>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	f7fe fae0 	bl	8000bf8 <__aeabi_d2f>
 8002638:	4603      	mov	r3, r0
 800263a:	637b      	str	r3, [r7, #52]	@ 0x34
		new_length = sin(new_yaw) * H_leg;
 800263c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800263e:	f7fd ff8b 	bl	8000558 <__aeabi_f2d>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	ec43 2b10 	vmov	d0, r2, r3
 800264a:	f00a fb25 	bl	800cc98 <sin>
 800264e:	ec55 4b10 	vmov	r4, r5, d0
 8002652:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002654:	f7fd ff80 	bl	8000558 <__aeabi_f2d>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4620      	mov	r0, r4
 800265e:	4629      	mov	r1, r5
 8002660:	f7fd ffd2 	bl	8000608 <__aeabi_dmul>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	f7fe fac4 	bl	8000bf8 <__aeabi_d2f>
 8002670:	4603      	mov	r3, r0
 8002672:	633b      	str	r3, [r7, #48]	@ 0x30
		new_x = new_length - body_length/2.0;
 8002674:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002676:	f7fd ff6f 	bl	8000558 <__aeabi_f2d>
 800267a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800267e:	4b16      	ldr	r3, [pc, #88]	@ (80026d8 <inverse_leg_kinematics+0x578>)
 8002680:	f7fd fe0a 	bl	8000298 <__aeabi_dsub>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f7fe fab4 	bl	8000bf8 <__aeabi_d2f>
 8002690:	4603      	mov	r3, r0
 8002692:	65bb      	str	r3, [r7, #88]	@ 0x58
		new_y = new_width - body_width/2.0 - balance_offset;
 8002694:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002696:	f7fd ff5f 	bl	8000558 <__aeabi_f2d>
 800269a:	a30b      	add	r3, pc, #44	@ (adr r3, 80026c8 <inverse_leg_kinematics+0x568>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fd fdfa 	bl	8000298 <__aeabi_dsub>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	a308      	add	r3, pc, #32	@ (adr r3, 80026d0 <inverse_leg_kinematics+0x570>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fd fdf1 	bl	8000298 <__aeabi_dsub>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	f7fe fa9b 	bl	8000bf8 <__aeabi_d2f>
 80026c2:	4603      	mov	r3, r0
 80026c4:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
 80026c6:	e20a      	b.n	8002ade <inverse_leg_kinematics+0x97e>
 80026c8:	9999999a 	.word	0x9999999a
 80026cc:	3fa99999 	.word	0x3fa99999
 80026d0:	76c8b439 	.word	0x76c8b439
 80026d4:	3f8a9fbe 	.word	0x3f8a9fbe
 80026d8:	3fb33333 	.word	0x3fb33333
	case 3:
		new_height = position[2] + pitch_offset + roll_offset;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3308      	adds	r3, #8
 80026e0:	ed93 7a00 	vldr	s14, [r3]
 80026e4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80026e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ec:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80026f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f4:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		new_y = -position[1] + y_roll_offset + Y_offset;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3304      	adds	r3, #4
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002708:	ee17 0a90 	vmov	r0, s15
 800270c:	f7fd ff24 	bl	8000558 <__aeabi_f2d>
 8002710:	a36f      	add	r3, pc, #444	@ (adr r3, 80028d0 <inverse_leg_kinematics+0x770>)
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	f7fd fdc1 	bl	800029c <__adddf3>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	f7fe fa69 	bl	8000bf8 <__aeabi_d2f>
 8002726:	4603      	mov	r3, r0
 8002728:	657b      	str	r3, [r7, #84]	@ 0x54
		new_x = position[0] - x_pitch_offset - X_offset;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	ed93 7a00 	vldr	s14, [r3]
 8002730:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002738:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		H_leg = hypot(-body_width/2.0 + new_y,-body_length/2.0 + new_x);
 800273c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800273e:	f7fd ff0b 	bl	8000558 <__aeabi_f2d>
 8002742:	a363      	add	r3, pc, #396	@ (adr r3, 80028d0 <inverse_leg_kinematics+0x770>)
 8002744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002748:	f7fd fda6 	bl	8000298 <__aeabi_dsub>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	ec43 2b18 	vmov	d8, r2, r3
 8002754:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002756:	f7fd feff 	bl	8000558 <__aeabi_f2d>
 800275a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800275e:	4b62      	ldr	r3, [pc, #392]	@ (80028e8 <inverse_leg_kinematics+0x788>)
 8002760:	f7fd fd9a 	bl	8000298 <__aeabi_dsub>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	ec43 2b17 	vmov	d7, r2, r3
 800276c:	eeb0 1a47 	vmov.f32	s2, s14
 8002770:	eef0 1a67 	vmov.f32	s3, s15
 8002774:	eeb0 0a48 	vmov.f32	s0, s16
 8002778:	eef0 0a68 	vmov.f32	s1, s17
 800277c:	f009 ffc8 	bl	800c710 <hypot>
 8002780:	ec53 2b10 	vmov	r2, r3, d0
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f7fe fa36 	bl	8000bf8 <__aeabi_d2f>
 800278c:	4603      	mov	r3, r0
 800278e:	643b      	str	r3, [r7, #64]	@ 0x40
		current_yaw = atan2(-body_length/2.0 + new_x, -body_width/2.0 + new_y);
 8002790:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002792:	f7fd fee1 	bl	8000558 <__aeabi_f2d>
 8002796:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800279a:	4b53      	ldr	r3, [pc, #332]	@ (80028e8 <inverse_leg_kinematics+0x788>)
 800279c:	f7fd fd7c 	bl	8000298 <__aeabi_dsub>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	ec43 2b18 	vmov	d8, r2, r3
 80027a8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80027aa:	f7fd fed5 	bl	8000558 <__aeabi_f2d>
 80027ae:	a348      	add	r3, pc, #288	@ (adr r3, 80028d0 <inverse_leg_kinematics+0x770>)
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	f7fd fd70 	bl	8000298 <__aeabi_dsub>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	ec43 2b17 	vmov	d7, r2, r3
 80027c0:	eeb0 1a47 	vmov.f32	s2, s14
 80027c4:	eef0 1a67 	vmov.f32	s3, s15
 80027c8:	eeb0 0a48 	vmov.f32	s0, s16
 80027cc:	eef0 0a68 	vmov.f32	s1, s17
 80027d0:	f009 ff9c 	bl	800c70c <atan2>
 80027d4:	ec53 2b10 	vmov	r2, r3, d0
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	f7fe fa0c 	bl	8000bf8 <__aeabi_d2f>
 80027e0:	4603      	mov	r3, r0
 80027e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		new_yaw = current_yaw + rotation[2];
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	3308      	adds	r3, #8
 80027e8:	edd3 7a00 	vldr	s15, [r3]
 80027ec:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80027f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		new_width = cos(new_yaw) * H_leg;
 80027f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80027fa:	f7fd fead 	bl	8000558 <__aeabi_f2d>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	ec43 2b10 	vmov	d0, r2, r3
 8002806:	f00a f9eb 	bl	800cbe0 <cos>
 800280a:	ec55 4b10 	vmov	r4, r5, d0
 800280e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002810:	f7fd fea2 	bl	8000558 <__aeabi_f2d>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4620      	mov	r0, r4
 800281a:	4629      	mov	r1, r5
 800281c:	f7fd fef4 	bl	8000608 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	f7fe f9e6 	bl	8000bf8 <__aeabi_d2f>
 800282c:	4603      	mov	r3, r0
 800282e:	637b      	str	r3, [r7, #52]	@ 0x34
		new_length = sin(new_yaw) * H_leg;
 8002830:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002832:	f7fd fe91 	bl	8000558 <__aeabi_f2d>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	ec43 2b10 	vmov	d0, r2, r3
 800283e:	f00a fa2b 	bl	800cc98 <sin>
 8002842:	ec55 4b10 	vmov	r4, r5, d0
 8002846:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002848:	f7fd fe86 	bl	8000558 <__aeabi_f2d>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4620      	mov	r0, r4
 8002852:	4629      	mov	r1, r5
 8002854:	f7fd fed8 	bl	8000608 <__aeabi_dmul>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f7fe f9ca 	bl	8000bf8 <__aeabi_d2f>
 8002864:	4603      	mov	r3, r0
 8002866:	633b      	str	r3, [r7, #48]	@ 0x30
		new_x = new_length + body_length/2.0  - hind_lef_offest;
 8002868:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800286a:	f7fd fe75 	bl	8000558 <__aeabi_f2d>
 800286e:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002872:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <inverse_leg_kinematics+0x788>)
 8002874:	f7fd fd12 	bl	800029c <__adddf3>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	a315      	add	r3, pc, #84	@ (adr r3, 80028d8 <inverse_leg_kinematics+0x778>)
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	f7fd fd07 	bl	8000298 <__aeabi_dsub>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	f7fe f9b1 	bl	8000bf8 <__aeabi_d2f>
 8002896:	4603      	mov	r3, r0
 8002898:	65bb      	str	r3, [r7, #88]	@ 0x58
		new_y = new_width + body_width/2.0 - balance_offset;
 800289a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800289c:	f7fd fe5c 	bl	8000558 <__aeabi_f2d>
 80028a0:	a30b      	add	r3, pc, #44	@ (adr r3, 80028d0 <inverse_leg_kinematics+0x770>)
 80028a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a6:	f7fd fcf9 	bl	800029c <__adddf3>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	a30b      	add	r3, pc, #44	@ (adr r3, 80028e0 <inverse_leg_kinematics+0x780>)
 80028b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b8:	f7fd fcee 	bl	8000298 <__aeabi_dsub>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	f7fe f998 	bl	8000bf8 <__aeabi_d2f>
 80028c8:	4603      	mov	r3, r0
 80028ca:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
 80028cc:	e107      	b.n	8002ade <inverse_leg_kinematics+0x97e>
 80028ce:	bf00      	nop
 80028d0:	9999999a 	.word	0x9999999a
 80028d4:	3fa99999 	.word	0x3fa99999
 80028d8:	47ae147b 	.word	0x47ae147b
 80028dc:	3f947ae1 	.word	0x3f947ae1
 80028e0:	76c8b439 	.word	0x76c8b439
 80028e4:	3f8a9fbe 	.word	0x3f8a9fbe
 80028e8:	3fb33333 	.word	0x3fb33333
	case 4:
		new_height = position[2] + pitch_offset - roll_offset;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3308      	adds	r3, #8
 80028f0:	ed93 7a00 	vldr	s14, [r3]
 80028f4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80028f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028fc:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002900:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002904:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		new_y = position[1] - y_roll_offset + Y_offset;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3304      	adds	r3, #4
 800290c:	ed93 7a00 	vldr	s14, [r3]
 8002910:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002918:	ee17 0a90 	vmov	r0, s15
 800291c:	f7fd fe1c 	bl	8000558 <__aeabi_f2d>
 8002920:	a3e5      	add	r3, pc, #916	@ (adr r3, 8002cb8 <inverse_leg_kinematics+0xb58>)
 8002922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002926:	f7fd fcb9 	bl	800029c <__adddf3>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	f7fe f961 	bl	8000bf8 <__aeabi_d2f>
 8002936:	4603      	mov	r3, r0
 8002938:	657b      	str	r3, [r7, #84]	@ 0x54
		new_x = position[0] - x_pitch_offset - X_offset;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	ed93 7a00 	vldr	s14, [r3]
 8002940:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002948:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		H_leg = hypot(body_width/2.0 + new_y,-body_length/2.0 + new_x);
 800294c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800294e:	f7fd fe03 	bl	8000558 <__aeabi_f2d>
 8002952:	a3d9      	add	r3, pc, #868	@ (adr r3, 8002cb8 <inverse_leg_kinematics+0xb58>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	f7fd fca0 	bl	800029c <__adddf3>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	ec43 2b18 	vmov	d8, r2, r3
 8002964:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002966:	f7fd fdf7 	bl	8000558 <__aeabi_f2d>
 800296a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800296e:	4be2      	ldr	r3, [pc, #904]	@ (8002cf8 <inverse_leg_kinematics+0xb98>)
 8002970:	f7fd fc92 	bl	8000298 <__aeabi_dsub>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	ec43 2b17 	vmov	d7, r2, r3
 800297c:	eeb0 1a47 	vmov.f32	s2, s14
 8002980:	eef0 1a67 	vmov.f32	s3, s15
 8002984:	eeb0 0a48 	vmov.f32	s0, s16
 8002988:	eef0 0a68 	vmov.f32	s1, s17
 800298c:	f009 fec0 	bl	800c710 <hypot>
 8002990:	ec53 2b10 	vmov	r2, r3, d0
 8002994:	4610      	mov	r0, r2
 8002996:	4619      	mov	r1, r3
 8002998:	f7fe f92e 	bl	8000bf8 <__aeabi_d2f>
 800299c:	4603      	mov	r3, r0
 800299e:	643b      	str	r3, [r7, #64]	@ 0x40
		current_yaw = atan2(-body_length/2.0 + new_x, body_width/2.0 + new_y);
 80029a0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80029a2:	f7fd fdd9 	bl	8000558 <__aeabi_f2d>
 80029a6:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80029aa:	4bd3      	ldr	r3, [pc, #844]	@ (8002cf8 <inverse_leg_kinematics+0xb98>)
 80029ac:	f7fd fc74 	bl	8000298 <__aeabi_dsub>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	ec43 2b18 	vmov	d8, r2, r3
 80029b8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80029ba:	f7fd fdcd 	bl	8000558 <__aeabi_f2d>
 80029be:	a3be      	add	r3, pc, #760	@ (adr r3, 8002cb8 <inverse_leg_kinematics+0xb58>)
 80029c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c4:	f7fd fc6a 	bl	800029c <__adddf3>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	ec43 2b17 	vmov	d7, r2, r3
 80029d0:	eeb0 1a47 	vmov.f32	s2, s14
 80029d4:	eef0 1a67 	vmov.f32	s3, s15
 80029d8:	eeb0 0a48 	vmov.f32	s0, s16
 80029dc:	eef0 0a68 	vmov.f32	s1, s17
 80029e0:	f009 fe94 	bl	800c70c <atan2>
 80029e4:	ec53 2b10 	vmov	r2, r3, d0
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f7fe f904 	bl	8000bf8 <__aeabi_d2f>
 80029f0:	4603      	mov	r3, r0
 80029f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		new_yaw = current_yaw - rotation[2];
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	3308      	adds	r3, #8
 80029f8:	edd3 7a00 	vldr	s15, [r3]
 80029fc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a04:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		new_width = cos(new_yaw) * H_leg;
 8002a08:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002a0a:	f7fd fda5 	bl	8000558 <__aeabi_f2d>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	ec43 2b10 	vmov	d0, r2, r3
 8002a16:	f00a f8e3 	bl	800cbe0 <cos>
 8002a1a:	ec55 4b10 	vmov	r4, r5, d0
 8002a1e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002a20:	f7fd fd9a 	bl	8000558 <__aeabi_f2d>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4620      	mov	r0, r4
 8002a2a:	4629      	mov	r1, r5
 8002a2c:	f7fd fdec 	bl	8000608 <__aeabi_dmul>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	f7fe f8de 	bl	8000bf8 <__aeabi_d2f>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	637b      	str	r3, [r7, #52]	@ 0x34
		new_length = sin(new_yaw) * H_leg;
 8002a40:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002a42:	f7fd fd89 	bl	8000558 <__aeabi_f2d>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	ec43 2b10 	vmov	d0, r2, r3
 8002a4e:	f00a f923 	bl	800cc98 <sin>
 8002a52:	ec55 4b10 	vmov	r4, r5, d0
 8002a56:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002a58:	f7fd fd7e 	bl	8000558 <__aeabi_f2d>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4620      	mov	r0, r4
 8002a62:	4629      	mov	r1, r5
 8002a64:	f7fd fdd0 	bl	8000608 <__aeabi_dmul>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f7fe f8c2 	bl	8000bf8 <__aeabi_d2f>
 8002a74:	4603      	mov	r3, r0
 8002a76:	633b      	str	r3, [r7, #48]	@ 0x30
		new_x = new_length + body_length/2.0 - hind_lef_offest;
 8002a78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a7a:	f7fd fd6d 	bl	8000558 <__aeabi_f2d>
 8002a7e:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8002a82:	4b9d      	ldr	r3, [pc, #628]	@ (8002cf8 <inverse_leg_kinematics+0xb98>)
 8002a84:	f7fd fc0a 	bl	800029c <__adddf3>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4619      	mov	r1, r3
 8002a90:	a38b      	add	r3, pc, #556	@ (adr r3, 8002cc0 <inverse_leg_kinematics+0xb60>)
 8002a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a96:	f7fd fbff 	bl	8000298 <__aeabi_dsub>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	f7fe f8a9 	bl	8000bf8 <__aeabi_d2f>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
		new_y = new_width - body_width/2.0 - balance_offset;
 8002aaa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002aac:	f7fd fd54 	bl	8000558 <__aeabi_f2d>
 8002ab0:	a381      	add	r3, pc, #516	@ (adr r3, 8002cb8 <inverse_leg_kinematics+0xb58>)
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	f7fd fbef 	bl	8000298 <__aeabi_dsub>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	a381      	add	r3, pc, #516	@ (adr r3, 8002cc8 <inverse_leg_kinematics+0xb68>)
 8002ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac8:	f7fd fbe6 	bl	8000298 <__aeabi_dsub>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f7fe f890 	bl	8000bf8 <__aeabi_d2f>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	657b      	str	r3, [r7, #84]	@ 0x54
		break;
 8002adc:	bf00      	nop
	}

	H1y = hypot(new_y,new_height);
 8002ade:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002ae0:	f7fd fd3a 	bl	8000558 <__aeabi_f2d>
 8002ae4:	4604      	mov	r4, r0
 8002ae6:	460d      	mov	r5, r1
 8002ae8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002aea:	f7fd fd35 	bl	8000558 <__aeabi_f2d>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	ec43 2b11 	vmov	d1, r2, r3
 8002af6:	ec45 4b10 	vmov	d0, r4, r5
 8002afa:	f009 fe09 	bl	800c710 <hypot>
 8002afe:	ec53 2b10 	vmov	r2, r3, d0
 8002b02:	4610      	mov	r0, r2
 8002b04:	4619      	mov	r1, r3
 8002b06:	f7fe f877 	bl	8000bf8 <__aeabi_d2f>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	H2y = sqrt(pow(H1y,2)- pow(Y_offset,2));
 8002b0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b10:	f7fd fd22 	bl	8000558 <__aeabi_f2d>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	ed9f 1b6d 	vldr	d1, [pc, #436]	@ 8002cd0 <inverse_leg_kinematics+0xb70>
 8002b1c:	ec43 2b10 	vmov	d0, r2, r3
 8002b20:	f009 fe2a 	bl	800c778 <pow>
 8002b24:	ec51 0b10 	vmov	r0, r1, d0
 8002b28:	a36b      	add	r3, pc, #428	@ (adr r3, 8002cd8 <inverse_leg_kinematics+0xb78>)
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f7fd fbb3 	bl	8000298 <__aeabi_dsub>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	ec43 2b17 	vmov	d7, r2, r3
 8002b3a:	eeb0 0a47 	vmov.f32	s0, s14
 8002b3e:	eef0 0a67 	vmov.f32	s1, s15
 8002b42:	f009 fe89 	bl	800c858 <sqrt>
 8002b46:	ec53 2b10 	vmov	r2, r3, d0
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f7fe f853 	bl	8000bf8 <__aeabi_d2f>
 8002b52:	4603      	mov	r3, r0
 8002b54:	62bb      	str	r3, [r7, #40]	@ 0x28
	phi = atan2(new_y,new_height);
 8002b56:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002b58:	f7fd fcfe 	bl	8000558 <__aeabi_f2d>
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	460d      	mov	r5, r1
 8002b60:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8002b62:	f7fd fcf9 	bl	8000558 <__aeabi_f2d>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	ec43 2b11 	vmov	d1, r2, r3
 8002b6e:	ec45 4b10 	vmov	d0, r4, r5
 8002b72:	f009 fdcb 	bl	800c70c <atan2>
 8002b76:	ec53 2b10 	vmov	r2, r3, d0
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f7fe f83b 	bl	8000bf8 <__aeabi_d2f>
 8002b82:	4603      	mov	r3, r0
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
	phi2 = acos(Y_offset/H2y);
 8002b86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b88:	f7fd fce6 	bl	8000558 <__aeabi_f2d>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	a149      	add	r1, pc, #292	@ (adr r1, 8002cb8 <inverse_leg_kinematics+0xb58>)
 8002b92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b96:	f7fd fe61 	bl	800085c <__aeabi_ddiv>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	ec43 2b17 	vmov	d7, r2, r3
 8002ba2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ba6:	eef0 0a67 	vmov.f32	s1, s15
 8002baa:	f009 fd7b 	bl	800c6a4 <acos>
 8002bae:	ec53 2b10 	vmov	r2, r3, d0
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f7fe f81f 	bl	8000bf8 <__aeabi_d2f>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	623b      	str	r3, [r7, #32]
	angles[0] = phi  + phi2;
 8002bbe:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002bc2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	edc3 7a00 	vstr	s15, [r3]

	theta = atan2(new_x,H2y);
 8002bd0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002bd2:	f7fd fcc1 	bl	8000558 <__aeabi_f2d>
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	460d      	mov	r5, r1
 8002bda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bdc:	f7fd fcbc 	bl	8000558 <__aeabi_f2d>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	ec43 2b11 	vmov	d1, r2, r3
 8002be8:	ec45 4b10 	vmov	d0, r4, r5
 8002bec:	f009 fd8e 	bl	800c70c <atan2>
 8002bf0:	ec53 2b10 	vmov	r2, r3, d0
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f7fd fffe 	bl	8000bf8 <__aeabi_d2f>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	61fb      	str	r3, [r7, #28]
	Hx = hypot(new_x,H2y);
 8002c00:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002c02:	f7fd fca9 	bl	8000558 <__aeabi_f2d>
 8002c06:	4604      	mov	r4, r0
 8002c08:	460d      	mov	r5, r1
 8002c0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c0c:	f7fd fca4 	bl	8000558 <__aeabi_f2d>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	ec43 2b11 	vmov	d1, r2, r3
 8002c18:	ec45 4b10 	vmov	d0, r4, r5
 8002c1c:	f009 fd78 	bl	800c710 <hypot>
 8002c20:	ec53 2b10 	vmov	r2, r3, d0
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	f7fd ffe6 	bl	8000bf8 <__aeabi_d2f>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	61bb      	str	r3, [r7, #24]
	trident =  acos( (pow(Hx,2) + pow(upper_leg_len,2) - pow(lower_leg_len,2)) / (2 * Hx * upper_leg_len) );
 8002c30:	69b8      	ldr	r0, [r7, #24]
 8002c32:	f7fd fc91 	bl	8000558 <__aeabi_f2d>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	ed9f 1b25 	vldr	d1, [pc, #148]	@ 8002cd0 <inverse_leg_kinematics+0xb70>
 8002c3e:	ec43 2b10 	vmov	d0, r2, r3
 8002c42:	f009 fd99 	bl	800c778 <pow>
 8002c46:	ec51 0b10 	vmov	r0, r1, d0
 8002c4a:	a325      	add	r3, pc, #148	@ (adr r3, 8002ce0 <inverse_leg_kinematics+0xb80>)
 8002c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c50:	f7fd fb24 	bl	800029c <__adddf3>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	a322      	add	r3, pc, #136	@ (adr r3, 8002ce8 <inverse_leg_kinematics+0xb88>)
 8002c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c62:	f7fd fb19 	bl	8000298 <__aeabi_dsub>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4614      	mov	r4, r2
 8002c6c:	461d      	mov	r5, r3
 8002c6e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c76:	ee17 0a90 	vmov	r0, s15
 8002c7a:	f7fd fc6d 	bl	8000558 <__aeabi_f2d>
 8002c7e:	a31c      	add	r3, pc, #112	@ (adr r3, 8002cf0 <inverse_leg_kinematics+0xb90>)
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	f7fd fcc0 	bl	8000608 <__aeabi_dmul>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	4629      	mov	r1, r5
 8002c90:	f7fd fde4 	bl	800085c <__aeabi_ddiv>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	ec43 2b17 	vmov	d7, r2, r3
 8002c9c:	eeb0 0a47 	vmov.f32	s0, s14
 8002ca0:	eef0 0a67 	vmov.f32	s1, s15
 8002ca4:	f009 fcfe 	bl	800c6a4 <acos>
 8002ca8:	ec53 2b10 	vmov	r2, r3, d0
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	e024      	b.n	8002cfc <inverse_leg_kinematics+0xb9c>
 8002cb2:	bf00      	nop
 8002cb4:	f3af 8000 	nop.w
 8002cb8:	9999999a 	.word	0x9999999a
 8002cbc:	3fa99999 	.word	0x3fa99999
 8002cc0:	47ae147b 	.word	0x47ae147b
 8002cc4:	3f947ae1 	.word	0x3f947ae1
 8002cc8:	76c8b439 	.word	0x76c8b439
 8002ccc:	3f8a9fbe 	.word	0x3f8a9fbe
 8002cd0:	00000000 	.word	0x00000000
 8002cd4:	40000000 	.word	0x40000000
 8002cd8:	47ae147c 	.word	0x47ae147c
 8002cdc:	3f647ae1 	.word	0x3f647ae1
 8002ce0:	cd35a859 	.word	0xcd35a859
 8002ce4:	3f914e3b 	.word	0x3f914e3b
 8002ce8:	73eab368 	.word	0x73eab368
 8002cec:	3f8b15b5 	.word	0x3f8b15b5
 8002cf0:	0a3d70a4 	.word	0x0a3d70a4
 8002cf4:	3fc0a3d7 	.word	0x3fc0a3d7
 8002cf8:	3fb33333 	.word	0x3fb33333
 8002cfc:	f7fd ff7c 	bl	8000bf8 <__aeabi_d2f>
 8002d00:	4603      	mov	r3, r0
 8002d02:	617b      	str	r3, [r7, #20]
	angles[1] = trident - theta + 1.5707;
 8002d04:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d08:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d10:	ee17 0a90 	vmov	r0, s15
 8002d14:	f7fd fc20 	bl	8000558 <__aeabi_f2d>
 8002d18:	a323      	add	r3, pc, #140	@ (adr r3, 8002da8 <inverse_leg_kinematics+0xc48>)
 8002d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1e:	f7fd fabd 	bl	800029c <__adddf3>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1d1c      	adds	r4, r3, #4
 8002d2e:	f7fd ff63 	bl	8000bf8 <__aeabi_d2f>
 8002d32:	4603      	mov	r3, r0
 8002d34:	6023      	str	r3, [r4, #0]
	angles[2] = acos( (pow(lower_leg_len,2) + pow(upper_leg_len,2) - pow(Hx,2)) / (2 * lower_leg_len * upper_leg_len) );
 8002d36:	69b8      	ldr	r0, [r7, #24]
 8002d38:	f7fd fc0e 	bl	8000558 <__aeabi_f2d>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	ed9f 1b17 	vldr	d1, [pc, #92]	@ 8002da0 <inverse_leg_kinematics+0xc40>
 8002d44:	ec43 2b10 	vmov	d0, r2, r3
 8002d48:	f009 fd16 	bl	800c778 <pow>
 8002d4c:	ec53 2b10 	vmov	r2, r3, d0
 8002d50:	a117      	add	r1, pc, #92	@ (adr r1, 8002db0 <inverse_leg_kinematics+0xc50>)
 8002d52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d56:	f7fd fa9f 	bl	8000298 <__aeabi_dsub>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	4610      	mov	r0, r2
 8002d60:	4619      	mov	r1, r3
 8002d62:	a315      	add	r3, pc, #84	@ (adr r3, 8002db8 <inverse_leg_kinematics+0xc58>)
 8002d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d68:	f7fd fd78 	bl	800085c <__aeabi_ddiv>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	ec43 2b17 	vmov	d7, r2, r3
 8002d74:	eeb0 0a47 	vmov.f32	s0, s14
 8002d78:	eef0 0a67 	vmov.f32	s1, s15
 8002d7c:	f009 fc92 	bl	800c6a4 <acos>
 8002d80:	ec51 0b10 	vmov	r0, r1, d0
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f103 0408 	add.w	r4, r3, #8
 8002d8a:	f7fd ff35 	bl	8000bf8 <__aeabi_d2f>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	6023      	str	r3, [r4, #0]
	//	adjust_servo_angles(angles,leg_index);

}
 8002d92:	bf00      	nop
 8002d94:	3760      	adds	r7, #96	@ 0x60
 8002d96:	46bd      	mov	sp, r7
 8002d98:	ecbd 8b02 	vpop	{d8}
 8002d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	00000000 	.word	0x00000000
 8002da4:	40000000 	.word	0x40000000
 8002da8:	52bd3c36 	.word	0x52bd3c36
 8002dac:	3ff92196 	.word	0x3ff92196
 8002db0:	872b020d 	.word	0x872b020d
 8002db4:	3f9ed916 	.word	0x3f9ed916
 8002db8:	089a0276 	.word	0x089a0276
 8002dbc:	3f9e9e1b 	.word	0x3f9e9e1b

08002dc0 <inverse_kinematics_all>:


void inverse_kinematics_all(float FL_position[], float FR_position[], float BL_position[], float BR_position[], float FL_rotation[], float FR_rotation[], float BL_rotation[], float BR_rotation[]){
 8002dc0:	b5b0      	push	{r4, r5, r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]

	smoothed_FL_position[0] = (FL_position[0] * smoothing_var) + (prev_FL_position[0] * (1.0-smoothing_var));
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd fbc0 	bl	8000558 <__aeabi_f2d>
 8002dd8:	a3c1      	add	r3, pc, #772	@ (adr r3, 80030e0 <inverse_kinematics_all+0x320>)
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	f7fd fc13 	bl	8000608 <__aeabi_dmul>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4614      	mov	r4, r2
 8002de8:	461d      	mov	r5, r3
 8002dea:	4bbf      	ldr	r3, [pc, #764]	@ (80030e8 <inverse_kinematics_all+0x328>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fbb2 	bl	8000558 <__aeabi_f2d>
 8002df4:	a3b8      	add	r3, pc, #736	@ (adr r3, 80030d8 <inverse_kinematics_all+0x318>)
 8002df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfa:	f7fd fc05 	bl	8000608 <__aeabi_dmul>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4620      	mov	r0, r4
 8002e04:	4629      	mov	r1, r5
 8002e06:	f7fd fa49 	bl	800029c <__adddf3>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4610      	mov	r0, r2
 8002e10:	4619      	mov	r1, r3
 8002e12:	f7fd fef1 	bl	8000bf8 <__aeabi_d2f>
 8002e16:	4603      	mov	r3, r0
 8002e18:	4ab4      	ldr	r2, [pc, #720]	@ (80030ec <inverse_kinematics_all+0x32c>)
 8002e1a:	6013      	str	r3, [r2, #0]
	prev_FL_position[0] = smoothed_FL_position[0];
 8002e1c:	4bb3      	ldr	r3, [pc, #716]	@ (80030ec <inverse_kinematics_all+0x32c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4ab1      	ldr	r2, [pc, #708]	@ (80030e8 <inverse_kinematics_all+0x328>)
 8002e22:	6013      	str	r3, [r2, #0]

	smoothed_FL_position[1] = FL_position[1] * smoothing_var + prev_FL_position[1] * (1.0-smoothing_var);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	3304      	adds	r3, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fb94 	bl	8000558 <__aeabi_f2d>
 8002e30:	a3ab      	add	r3, pc, #684	@ (adr r3, 80030e0 <inverse_kinematics_all+0x320>)
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	f7fd fbe7 	bl	8000608 <__aeabi_dmul>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4614      	mov	r4, r2
 8002e40:	461d      	mov	r5, r3
 8002e42:	4ba9      	ldr	r3, [pc, #676]	@ (80030e8 <inverse_kinematics_all+0x328>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd fb86 	bl	8000558 <__aeabi_f2d>
 8002e4c:	a3a2      	add	r3, pc, #648	@ (adr r3, 80030d8 <inverse_kinematics_all+0x318>)
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	f7fd fbd9 	bl	8000608 <__aeabi_dmul>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	f7fd fa1d 	bl	800029c <__adddf3>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	f7fd fec5 	bl	8000bf8 <__aeabi_d2f>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4a9e      	ldr	r2, [pc, #632]	@ (80030ec <inverse_kinematics_all+0x32c>)
 8002e72:	6053      	str	r3, [r2, #4]
	prev_FL_position[1] = smoothed_FL_position[1];
 8002e74:	4b9d      	ldr	r3, [pc, #628]	@ (80030ec <inverse_kinematics_all+0x32c>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	4a9b      	ldr	r2, [pc, #620]	@ (80030e8 <inverse_kinematics_all+0x328>)
 8002e7a:	6053      	str	r3, [r2, #4]

	smoothed_FL_position[2] = FL_position[2] * smoothing_var + prev_FL_position[2] * (1.0-smoothing_var);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3308      	adds	r3, #8
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd fb68 	bl	8000558 <__aeabi_f2d>
 8002e88:	a395      	add	r3, pc, #596	@ (adr r3, 80030e0 <inverse_kinematics_all+0x320>)
 8002e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8e:	f7fd fbbb 	bl	8000608 <__aeabi_dmul>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4614      	mov	r4, r2
 8002e98:	461d      	mov	r5, r3
 8002e9a:	4b93      	ldr	r3, [pc, #588]	@ (80030e8 <inverse_kinematics_all+0x328>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd fb5a 	bl	8000558 <__aeabi_f2d>
 8002ea4:	a38c      	add	r3, pc, #560	@ (adr r3, 80030d8 <inverse_kinematics_all+0x318>)
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f7fd fbad 	bl	8000608 <__aeabi_dmul>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4620      	mov	r0, r4
 8002eb4:	4629      	mov	r1, r5
 8002eb6:	f7fd f9f1 	bl	800029c <__adddf3>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f7fd fe99 	bl	8000bf8 <__aeabi_d2f>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4a88      	ldr	r2, [pc, #544]	@ (80030ec <inverse_kinematics_all+0x32c>)
 8002eca:	6093      	str	r3, [r2, #8]
	prev_FL_position[2] = smoothed_FL_position[2];
 8002ecc:	4b87      	ldr	r3, [pc, #540]	@ (80030ec <inverse_kinematics_all+0x32c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4a85      	ldr	r2, [pc, #532]	@ (80030e8 <inverse_kinematics_all+0x328>)
 8002ed2:	6093      	str	r3, [r2, #8]

	smoothed_FR_position[0] = FR_position[0] * smoothing_var + prev_FR_position[0] * (1.0-smoothing_var);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fb3d 	bl	8000558 <__aeabi_f2d>
 8002ede:	a380      	add	r3, pc, #512	@ (adr r3, 80030e0 <inverse_kinematics_all+0x320>)
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	f7fd fb90 	bl	8000608 <__aeabi_dmul>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4614      	mov	r4, r2
 8002eee:	461d      	mov	r5, r3
 8002ef0:	4b7f      	ldr	r3, [pc, #508]	@ (80030f0 <inverse_kinematics_all+0x330>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd fb2f 	bl	8000558 <__aeabi_f2d>
 8002efa:	a377      	add	r3, pc, #476	@ (adr r3, 80030d8 <inverse_kinematics_all+0x318>)
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	f7fd fb82 	bl	8000608 <__aeabi_dmul>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4620      	mov	r0, r4
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	f7fd f9c6 	bl	800029c <__adddf3>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4610      	mov	r0, r2
 8002f16:	4619      	mov	r1, r3
 8002f18:	f7fd fe6e 	bl	8000bf8 <__aeabi_d2f>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4a75      	ldr	r2, [pc, #468]	@ (80030f4 <inverse_kinematics_all+0x334>)
 8002f20:	6013      	str	r3, [r2, #0]
	prev_FR_position[0] = smoothed_FR_position[0];
 8002f22:	4b74      	ldr	r3, [pc, #464]	@ (80030f4 <inverse_kinematics_all+0x334>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a72      	ldr	r2, [pc, #456]	@ (80030f0 <inverse_kinematics_all+0x330>)
 8002f28:	6013      	str	r3, [r2, #0]

	smoothed_FR_position[1] = FR_position[1] * smoothing_var + prev_FR_position[1] * (1.0-smoothing_var);
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fd fb11 	bl	8000558 <__aeabi_f2d>
 8002f36:	a36a      	add	r3, pc, #424	@ (adr r3, 80030e0 <inverse_kinematics_all+0x320>)
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f7fd fb64 	bl	8000608 <__aeabi_dmul>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4614      	mov	r4, r2
 8002f46:	461d      	mov	r5, r3
 8002f48:	4b69      	ldr	r3, [pc, #420]	@ (80030f0 <inverse_kinematics_all+0x330>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fd fb03 	bl	8000558 <__aeabi_f2d>
 8002f52:	a361      	add	r3, pc, #388	@ (adr r3, 80030d8 <inverse_kinematics_all+0x318>)
 8002f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f58:	f7fd fb56 	bl	8000608 <__aeabi_dmul>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4620      	mov	r0, r4
 8002f62:	4629      	mov	r1, r5
 8002f64:	f7fd f99a 	bl	800029c <__adddf3>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f7fd fe42 	bl	8000bf8 <__aeabi_d2f>
 8002f74:	4603      	mov	r3, r0
 8002f76:	4a5f      	ldr	r2, [pc, #380]	@ (80030f4 <inverse_kinematics_all+0x334>)
 8002f78:	6053      	str	r3, [r2, #4]
	prev_FR_position[1] = smoothed_FR_position[1];
 8002f7a:	4b5e      	ldr	r3, [pc, #376]	@ (80030f4 <inverse_kinematics_all+0x334>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4a5c      	ldr	r2, [pc, #368]	@ (80030f0 <inverse_kinematics_all+0x330>)
 8002f80:	6053      	str	r3, [r2, #4]

	smoothed_FR_position[2] = FR_position[2] * smoothing_var + prev_FR_position[2] * (1.0-smoothing_var);
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	3308      	adds	r3, #8
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd fae5 	bl	8000558 <__aeabi_f2d>
 8002f8e:	a354      	add	r3, pc, #336	@ (adr r3, 80030e0 <inverse_kinematics_all+0x320>)
 8002f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f94:	f7fd fb38 	bl	8000608 <__aeabi_dmul>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4614      	mov	r4, r2
 8002f9e:	461d      	mov	r5, r3
 8002fa0:	4b53      	ldr	r3, [pc, #332]	@ (80030f0 <inverse_kinematics_all+0x330>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd fad7 	bl	8000558 <__aeabi_f2d>
 8002faa:	a34b      	add	r3, pc, #300	@ (adr r3, 80030d8 <inverse_kinematics_all+0x318>)
 8002fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb0:	f7fd fb2a 	bl	8000608 <__aeabi_dmul>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4620      	mov	r0, r4
 8002fba:	4629      	mov	r1, r5
 8002fbc:	f7fd f96e 	bl	800029c <__adddf3>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f7fd fe16 	bl	8000bf8 <__aeabi_d2f>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	4a49      	ldr	r2, [pc, #292]	@ (80030f4 <inverse_kinematics_all+0x334>)
 8002fd0:	6093      	str	r3, [r2, #8]
	prev_FR_position[2] = smoothed_FR_position[2];
 8002fd2:	4b48      	ldr	r3, [pc, #288]	@ (80030f4 <inverse_kinematics_all+0x334>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	4a46      	ldr	r2, [pc, #280]	@ (80030f0 <inverse_kinematics_all+0x330>)
 8002fd8:	6093      	str	r3, [r2, #8]

	smoothed_BL_position[0] = BL_position[0] * smoothing_var + prev_BL_position[0] * (1.0-smoothing_var);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd faba 	bl	8000558 <__aeabi_f2d>
 8002fe4:	a33e      	add	r3, pc, #248	@ (adr r3, 80030e0 <inverse_kinematics_all+0x320>)
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	f7fd fb0d 	bl	8000608 <__aeabi_dmul>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4614      	mov	r4, r2
 8002ff4:	461d      	mov	r5, r3
 8002ff6:	4b40      	ldr	r3, [pc, #256]	@ (80030f8 <inverse_kinematics_all+0x338>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fd faac 	bl	8000558 <__aeabi_f2d>
 8003000:	a335      	add	r3, pc, #212	@ (adr r3, 80030d8 <inverse_kinematics_all+0x318>)
 8003002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003006:	f7fd faff 	bl	8000608 <__aeabi_dmul>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4620      	mov	r0, r4
 8003010:	4629      	mov	r1, r5
 8003012:	f7fd f943 	bl	800029c <__adddf3>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	f7fd fdeb 	bl	8000bf8 <__aeabi_d2f>
 8003022:	4603      	mov	r3, r0
 8003024:	4a35      	ldr	r2, [pc, #212]	@ (80030fc <inverse_kinematics_all+0x33c>)
 8003026:	6013      	str	r3, [r2, #0]
	prev_BL_position[0] = smoothed_BL_position[0];
 8003028:	4b34      	ldr	r3, [pc, #208]	@ (80030fc <inverse_kinematics_all+0x33c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a32      	ldr	r2, [pc, #200]	@ (80030f8 <inverse_kinematics_all+0x338>)
 800302e:	6013      	str	r3, [r2, #0]

	smoothed_BL_position[1] = BL_position[1] * smoothing_var + prev_BL_position[1] * (1.0-smoothing_var);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fa8e 	bl	8000558 <__aeabi_f2d>
 800303c:	a328      	add	r3, pc, #160	@ (adr r3, 80030e0 <inverse_kinematics_all+0x320>)
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	f7fd fae1 	bl	8000608 <__aeabi_dmul>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4614      	mov	r4, r2
 800304c:	461d      	mov	r5, r3
 800304e:	4b2a      	ldr	r3, [pc, #168]	@ (80030f8 <inverse_kinematics_all+0x338>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd fa80 	bl	8000558 <__aeabi_f2d>
 8003058:	a31f      	add	r3, pc, #124	@ (adr r3, 80030d8 <inverse_kinematics_all+0x318>)
 800305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305e:	f7fd fad3 	bl	8000608 <__aeabi_dmul>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4620      	mov	r0, r4
 8003068:	4629      	mov	r1, r5
 800306a:	f7fd f917 	bl	800029c <__adddf3>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	f7fd fdbf 	bl	8000bf8 <__aeabi_d2f>
 800307a:	4603      	mov	r3, r0
 800307c:	4a1f      	ldr	r2, [pc, #124]	@ (80030fc <inverse_kinematics_all+0x33c>)
 800307e:	6053      	str	r3, [r2, #4]
	prev_BL_position[1] = smoothed_BL_position[1];
 8003080:	4b1e      	ldr	r3, [pc, #120]	@ (80030fc <inverse_kinematics_all+0x33c>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4a1c      	ldr	r2, [pc, #112]	@ (80030f8 <inverse_kinematics_all+0x338>)
 8003086:	6053      	str	r3, [r2, #4]

	smoothed_BL_position[2] = BL_position[2] * smoothing_var + prev_BL_position[2] * (1.0-smoothing_var);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3308      	adds	r3, #8
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fd fa62 	bl	8000558 <__aeabi_f2d>
 8003094:	a312      	add	r3, pc, #72	@ (adr r3, 80030e0 <inverse_kinematics_all+0x320>)
 8003096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309a:	f7fd fab5 	bl	8000608 <__aeabi_dmul>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4614      	mov	r4, r2
 80030a4:	461d      	mov	r5, r3
 80030a6:	4b14      	ldr	r3, [pc, #80]	@ (80030f8 <inverse_kinematics_all+0x338>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fd fa54 	bl	8000558 <__aeabi_f2d>
 80030b0:	a309      	add	r3, pc, #36	@ (adr r3, 80030d8 <inverse_kinematics_all+0x318>)
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	f7fd faa7 	bl	8000608 <__aeabi_dmul>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4620      	mov	r0, r4
 80030c0:	4629      	mov	r1, r5
 80030c2:	f7fd f8eb 	bl	800029c <__adddf3>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	f7fd fd93 	bl	8000bf8 <__aeabi_d2f>
 80030d2:	4603      	mov	r3, r0
 80030d4:	e014      	b.n	8003100 <inverse_kinematics_all+0x340>
 80030d6:	bf00      	nop
 80030d8:	cccccccd 	.word	0xcccccccd
 80030dc:	3feccccc 	.word	0x3feccccc
 80030e0:	9999999a 	.word	0x9999999a
 80030e4:	3fb99999 	.word	0x3fb99999
 80030e8:	20000060 	.word	0x20000060
 80030ec:	20000030 	.word	0x20000030
 80030f0:	2000006c 	.word	0x2000006c
 80030f4:	2000003c 	.word	0x2000003c
 80030f8:	20000078 	.word	0x20000078
 80030fc:	20000048 	.word	0x20000048
 8003100:	4a57      	ldr	r2, [pc, #348]	@ (8003260 <inverse_kinematics_all+0x4a0>)
 8003102:	6093      	str	r3, [r2, #8]
	prev_BL_position[2] = smoothed_BL_position[2];
 8003104:	4b56      	ldr	r3, [pc, #344]	@ (8003260 <inverse_kinematics_all+0x4a0>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	4a56      	ldr	r2, [pc, #344]	@ (8003264 <inverse_kinematics_all+0x4a4>)
 800310a:	6093      	str	r3, [r2, #8]

	smoothed_BR_position[0] = BR_position[0] * smoothing_var + prev_BR_position[0] * (1.0-smoothing_var);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd fa21 	bl	8000558 <__aeabi_f2d>
 8003116:	a34e      	add	r3, pc, #312	@ (adr r3, 8003250 <inverse_kinematics_all+0x490>)
 8003118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311c:	f7fd fa74 	bl	8000608 <__aeabi_dmul>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4614      	mov	r4, r2
 8003126:	461d      	mov	r5, r3
 8003128:	4b4f      	ldr	r3, [pc, #316]	@ (8003268 <inverse_kinematics_all+0x4a8>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd fa13 	bl	8000558 <__aeabi_f2d>
 8003132:	a349      	add	r3, pc, #292	@ (adr r3, 8003258 <inverse_kinematics_all+0x498>)
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	f7fd fa66 	bl	8000608 <__aeabi_dmul>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4620      	mov	r0, r4
 8003142:	4629      	mov	r1, r5
 8003144:	f7fd f8aa 	bl	800029c <__adddf3>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	f7fd fd52 	bl	8000bf8 <__aeabi_d2f>
 8003154:	4603      	mov	r3, r0
 8003156:	4a45      	ldr	r2, [pc, #276]	@ (800326c <inverse_kinematics_all+0x4ac>)
 8003158:	6013      	str	r3, [r2, #0]
	prev_BR_position[0] = smoothed_BR_position[0];
 800315a:	4b44      	ldr	r3, [pc, #272]	@ (800326c <inverse_kinematics_all+0x4ac>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a42      	ldr	r2, [pc, #264]	@ (8003268 <inverse_kinematics_all+0x4a8>)
 8003160:	6013      	str	r3, [r2, #0]

	smoothed_BR_position[1] = BR_position[1] * smoothing_var + prev_BR_position[1] * (1.0-smoothing_var);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	3304      	adds	r3, #4
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd f9f5 	bl	8000558 <__aeabi_f2d>
 800316e:	a338      	add	r3, pc, #224	@ (adr r3, 8003250 <inverse_kinematics_all+0x490>)
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f7fd fa48 	bl	8000608 <__aeabi_dmul>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4614      	mov	r4, r2
 800317e:	461d      	mov	r5, r3
 8003180:	4b39      	ldr	r3, [pc, #228]	@ (8003268 <inverse_kinematics_all+0x4a8>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd f9e7 	bl	8000558 <__aeabi_f2d>
 800318a:	a333      	add	r3, pc, #204	@ (adr r3, 8003258 <inverse_kinematics_all+0x498>)
 800318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003190:	f7fd fa3a 	bl	8000608 <__aeabi_dmul>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4620      	mov	r0, r4
 800319a:	4629      	mov	r1, r5
 800319c:	f7fd f87e 	bl	800029c <__adddf3>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4610      	mov	r0, r2
 80031a6:	4619      	mov	r1, r3
 80031a8:	f7fd fd26 	bl	8000bf8 <__aeabi_d2f>
 80031ac:	4603      	mov	r3, r0
 80031ae:	4a2f      	ldr	r2, [pc, #188]	@ (800326c <inverse_kinematics_all+0x4ac>)
 80031b0:	6053      	str	r3, [r2, #4]
	prev_BR_position[1] = smoothed_BR_position[1];
 80031b2:	4b2e      	ldr	r3, [pc, #184]	@ (800326c <inverse_kinematics_all+0x4ac>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003268 <inverse_kinematics_all+0x4a8>)
 80031b8:	6053      	str	r3, [r2, #4]

	smoothed_BR_position[2] = BR_position[2] * smoothing_var + prev_BR_position[2] * (1.0-smoothing_var);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	3308      	adds	r3, #8
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fd f9c9 	bl	8000558 <__aeabi_f2d>
 80031c6:	a322      	add	r3, pc, #136	@ (adr r3, 8003250 <inverse_kinematics_all+0x490>)
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f7fd fa1c 	bl	8000608 <__aeabi_dmul>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4614      	mov	r4, r2
 80031d6:	461d      	mov	r5, r3
 80031d8:	4b23      	ldr	r3, [pc, #140]	@ (8003268 <inverse_kinematics_all+0x4a8>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd f9bb 	bl	8000558 <__aeabi_f2d>
 80031e2:	a31d      	add	r3, pc, #116	@ (adr r3, 8003258 <inverse_kinematics_all+0x498>)
 80031e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e8:	f7fd fa0e 	bl	8000608 <__aeabi_dmul>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4620      	mov	r0, r4
 80031f2:	4629      	mov	r1, r5
 80031f4:	f7fd f852 	bl	800029c <__adddf3>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4610      	mov	r0, r2
 80031fe:	4619      	mov	r1, r3
 8003200:	f7fd fcfa 	bl	8000bf8 <__aeabi_d2f>
 8003204:	4603      	mov	r3, r0
 8003206:	4a19      	ldr	r2, [pc, #100]	@ (800326c <inverse_kinematics_all+0x4ac>)
 8003208:	6093      	str	r3, [r2, #8]
	prev_BR_position[2] = smoothed_BR_position[2];
 800320a:	4b18      	ldr	r3, [pc, #96]	@ (800326c <inverse_kinematics_all+0x4ac>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	4a16      	ldr	r2, [pc, #88]	@ (8003268 <inverse_kinematics_all+0x4a8>)
 8003210:	6093      	str	r3, [r2, #8]

	inverse_leg_kinematics(smoothed_FL_position, FL_angles, 1, FL_rotation);
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	2201      	movs	r2, #1
 8003216:	4916      	ldr	r1, [pc, #88]	@ (8003270 <inverse_kinematics_all+0x4b0>)
 8003218:	4816      	ldr	r0, [pc, #88]	@ (8003274 <inverse_kinematics_all+0x4b4>)
 800321a:	f7fe ffa1 	bl	8002160 <inverse_leg_kinematics>
	inverse_leg_kinematics(smoothed_FR_position, FR_angles, 2, FR_rotation);
 800321e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003220:	2202      	movs	r2, #2
 8003222:	4915      	ldr	r1, [pc, #84]	@ (8003278 <inverse_kinematics_all+0x4b8>)
 8003224:	4815      	ldr	r0, [pc, #84]	@ (800327c <inverse_kinematics_all+0x4bc>)
 8003226:	f7fe ff9b 	bl	8002160 <inverse_leg_kinematics>
	inverse_leg_kinematics(smoothed_BL_position, BL_angles, 3, BL_rotation);
 800322a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322c:	2203      	movs	r2, #3
 800322e:	4914      	ldr	r1, [pc, #80]	@ (8003280 <inverse_kinematics_all+0x4c0>)
 8003230:	480b      	ldr	r0, [pc, #44]	@ (8003260 <inverse_kinematics_all+0x4a0>)
 8003232:	f7fe ff95 	bl	8002160 <inverse_leg_kinematics>
	inverse_leg_kinematics(smoothed_BR_position, BR_angles, 4, BR_rotation);
 8003236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003238:	2204      	movs	r2, #4
 800323a:	4912      	ldr	r1, [pc, #72]	@ (8003284 <inverse_kinematics_all+0x4c4>)
 800323c:	480b      	ldr	r0, [pc, #44]	@ (800326c <inverse_kinematics_all+0x4ac>)
 800323e:	f7fe ff8f 	bl	8002160 <inverse_leg_kinematics>

}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bdb0      	pop	{r4, r5, r7, pc}
 800324a:	bf00      	nop
 800324c:	f3af 8000 	nop.w
 8003250:	9999999a 	.word	0x9999999a
 8003254:	3fb99999 	.word	0x3fb99999
 8003258:	cccccccd 	.word	0xcccccccd
 800325c:	3feccccc 	.word	0x3feccccc
 8003260:	20000048 	.word	0x20000048
 8003264:	20000078 	.word	0x20000078
 8003268:	20000084 	.word	0x20000084
 800326c:	20000054 	.word	0x20000054
 8003270:	20000280 	.word	0x20000280
 8003274:	20000030 	.word	0x20000030
 8003278:	2000028c 	.word	0x2000028c
 800327c:	2000003c 	.word	0x2000003c
 8003280:	20000298 	.word	0x20000298
 8003284:	200002a4 	.word	0x200002a4

08003288 <load_leg_position>:

void load_leg_position(float positions[], float x, float y, float z, float angles[], float p, float r, float yaw){
 8003288:	b480      	push	{r7}
 800328a:	b089      	sub	sp, #36	@ 0x24
 800328c:	af00      	add	r7, sp, #0
 800328e:	61f8      	str	r0, [r7, #28]
 8003290:	ed87 0a06 	vstr	s0, [r7, #24]
 8003294:	edc7 0a05 	vstr	s1, [r7, #20]
 8003298:	ed87 1a04 	vstr	s2, [r7, #16]
 800329c:	60f9      	str	r1, [r7, #12]
 800329e:	edc7 1a02 	vstr	s3, [r7, #8]
 80032a2:	ed87 2a01 	vstr	s4, [r7, #4]
 80032a6:	edc7 2a00 	vstr	s5, [r7]
	positions[0] = x;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	601a      	str	r2, [r3, #0]
	positions[1] = y;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	3304      	adds	r3, #4
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	601a      	str	r2, [r3, #0]
	positions[2] = z;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	3308      	adds	r3, #8
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	601a      	str	r2, [r3, #0]

	angles[0] = p;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	601a      	str	r2, [r3, #0]
	angles[1] = r;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3304      	adds	r3, #4
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	601a      	str	r2, [r3, #0]
	angles[2] = yaw;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3308      	adds	r3, #8
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	601a      	str	r2, [r3, #0]
}
 80032d6:	bf00      	nop
 80032d8:	3724      	adds	r7, #36	@ 0x24
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <load_angles>:

void load_angles(){
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0

	pulses[0] = (650 - angle_to_pulse(FL_angles[0] + FL_offsets[0])); //650
 80032e8:	4b6c      	ldr	r3, [pc, #432]	@ (800349c <load_angles+0x1b8>)
 80032ea:	ed93 7a00 	vldr	s14, [r3]
 80032ee:	4b6c      	ldr	r3, [pc, #432]	@ (80034a0 <load_angles+0x1bc>)
 80032f0:	edd3 7a00 	vldr	s15, [r3]
 80032f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f8:	eeb0 0a67 	vmov.f32	s0, s15
 80032fc:	f001 fd9c 	bl	8004e38 <angle_to_pulse>
 8003300:	4603      	mov	r3, r0
 8003302:	b29b      	uxth	r3, r3
 8003304:	f5c3 7322 	rsb	r3, r3, #648	@ 0x288
 8003308:	3302      	adds	r3, #2
 800330a:	b29a      	uxth	r2, r3
 800330c:	4b65      	ldr	r3, [pc, #404]	@ (80034a4 <load_angles+0x1c0>)
 800330e:	801a      	strh	r2, [r3, #0]

	pulses[1] = (650 - angle_to_pulse(FL_angles[1] + FL_offsets[1]));
 8003310:	4b62      	ldr	r3, [pc, #392]	@ (800349c <load_angles+0x1b8>)
 8003312:	ed93 7a01 	vldr	s14, [r3, #4]
 8003316:	4b62      	ldr	r3, [pc, #392]	@ (80034a0 <load_angles+0x1bc>)
 8003318:	edd3 7a01 	vldr	s15, [r3, #4]
 800331c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003320:	eeb0 0a67 	vmov.f32	s0, s15
 8003324:	f001 fd88 	bl	8004e38 <angle_to_pulse>
 8003328:	4603      	mov	r3, r0
 800332a:	b29b      	uxth	r3, r3
 800332c:	f5c3 7322 	rsb	r3, r3, #648	@ 0x288
 8003330:	3302      	adds	r3, #2
 8003332:	b29a      	uxth	r2, r3
 8003334:	4b5b      	ldr	r3, [pc, #364]	@ (80034a4 <load_angles+0x1c0>)
 8003336:	805a      	strh	r2, [r3, #2]

	pulses[2] = angle_to_pulse(FL_angles[2] + FL_offsets[2]);
 8003338:	4b58      	ldr	r3, [pc, #352]	@ (800349c <load_angles+0x1b8>)
 800333a:	ed93 7a02 	vldr	s14, [r3, #8]
 800333e:	4b58      	ldr	r3, [pc, #352]	@ (80034a0 <load_angles+0x1bc>)
 8003340:	edd3 7a02 	vldr	s15, [r3, #8]
 8003344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003348:	eeb0 0a67 	vmov.f32	s0, s15
 800334c:	f001 fd74 	bl	8004e38 <angle_to_pulse>
 8003350:	4603      	mov	r3, r0
 8003352:	b29a      	uxth	r2, r3
 8003354:	4b53      	ldr	r3, [pc, #332]	@ (80034a4 <load_angles+0x1c0>)
 8003356:	809a      	strh	r2, [r3, #4]

	pulses[3] = angle_to_pulse(FR_angles[0] + FR_offsets[0]);
 8003358:	4b53      	ldr	r3, [pc, #332]	@ (80034a8 <load_angles+0x1c4>)
 800335a:	ed93 7a00 	vldr	s14, [r3]
 800335e:	4b53      	ldr	r3, [pc, #332]	@ (80034ac <load_angles+0x1c8>)
 8003360:	edd3 7a00 	vldr	s15, [r3]
 8003364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003368:	eeb0 0a67 	vmov.f32	s0, s15
 800336c:	f001 fd64 	bl	8004e38 <angle_to_pulse>
 8003370:	4603      	mov	r3, r0
 8003372:	b29a      	uxth	r2, r3
 8003374:	4b4b      	ldr	r3, [pc, #300]	@ (80034a4 <load_angles+0x1c0>)
 8003376:	80da      	strh	r2, [r3, #6]

	pulses[4] = angle_to_pulse(FR_angles[1] + FR_offsets[1]) ;
 8003378:	4b4b      	ldr	r3, [pc, #300]	@ (80034a8 <load_angles+0x1c4>)
 800337a:	ed93 7a01 	vldr	s14, [r3, #4]
 800337e:	4b4b      	ldr	r3, [pc, #300]	@ (80034ac <load_angles+0x1c8>)
 8003380:	edd3 7a01 	vldr	s15, [r3, #4]
 8003384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003388:	eeb0 0a67 	vmov.f32	s0, s15
 800338c:	f001 fd54 	bl	8004e38 <angle_to_pulse>
 8003390:	4603      	mov	r3, r0
 8003392:	b29a      	uxth	r2, r3
 8003394:	4b43      	ldr	r3, [pc, #268]	@ (80034a4 <load_angles+0x1c0>)
 8003396:	811a      	strh	r2, [r3, #8]

	pulses[5] = (650 - angle_to_pulse(FR_angles[2] + FR_offsets[2]));
 8003398:	4b43      	ldr	r3, [pc, #268]	@ (80034a8 <load_angles+0x1c4>)
 800339a:	ed93 7a02 	vldr	s14, [r3, #8]
 800339e:	4b43      	ldr	r3, [pc, #268]	@ (80034ac <load_angles+0x1c8>)
 80033a0:	edd3 7a02 	vldr	s15, [r3, #8]
 80033a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a8:	eeb0 0a67 	vmov.f32	s0, s15
 80033ac:	f001 fd44 	bl	8004e38 <angle_to_pulse>
 80033b0:	4603      	mov	r3, r0
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	f5c3 7322 	rsb	r3, r3, #648	@ 0x288
 80033b8:	3302      	adds	r3, #2
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	4b39      	ldr	r3, [pc, #228]	@ (80034a4 <load_angles+0x1c0>)
 80033be:	815a      	strh	r2, [r3, #10]

	pulses[6] = angle_to_pulse(BL_angles[0] + BL_offsets[0]);
 80033c0:	4b3b      	ldr	r3, [pc, #236]	@ (80034b0 <load_angles+0x1cc>)
 80033c2:	ed93 7a00 	vldr	s14, [r3]
 80033c6:	4b3b      	ldr	r3, [pc, #236]	@ (80034b4 <load_angles+0x1d0>)
 80033c8:	edd3 7a00 	vldr	s15, [r3]
 80033cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d0:	eeb0 0a67 	vmov.f32	s0, s15
 80033d4:	f001 fd30 	bl	8004e38 <angle_to_pulse>
 80033d8:	4603      	mov	r3, r0
 80033da:	b29a      	uxth	r2, r3
 80033dc:	4b31      	ldr	r3, [pc, #196]	@ (80034a4 <load_angles+0x1c0>)
 80033de:	819a      	strh	r2, [r3, #12]

	pulses[7] = (650 - angle_to_pulse(BL_angles[1] + BL_offsets[1]));
 80033e0:	4b33      	ldr	r3, [pc, #204]	@ (80034b0 <load_angles+0x1cc>)
 80033e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80033e6:	4b33      	ldr	r3, [pc, #204]	@ (80034b4 <load_angles+0x1d0>)
 80033e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80033ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033f0:	eeb0 0a67 	vmov.f32	s0, s15
 80033f4:	f001 fd20 	bl	8004e38 <angle_to_pulse>
 80033f8:	4603      	mov	r3, r0
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	f5c3 7322 	rsb	r3, r3, #648	@ 0x288
 8003400:	3302      	adds	r3, #2
 8003402:	b29a      	uxth	r2, r3
 8003404:	4b27      	ldr	r3, [pc, #156]	@ (80034a4 <load_angles+0x1c0>)
 8003406:	81da      	strh	r2, [r3, #14]

	pulses[8] = angle_to_pulse(BL_angles[2] + BL_offsets[2]);
 8003408:	4b29      	ldr	r3, [pc, #164]	@ (80034b0 <load_angles+0x1cc>)
 800340a:	ed93 7a02 	vldr	s14, [r3, #8]
 800340e:	4b29      	ldr	r3, [pc, #164]	@ (80034b4 <load_angles+0x1d0>)
 8003410:	edd3 7a02 	vldr	s15, [r3, #8]
 8003414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003418:	eeb0 0a67 	vmov.f32	s0, s15
 800341c:	f001 fd0c 	bl	8004e38 <angle_to_pulse>
 8003420:	4603      	mov	r3, r0
 8003422:	b29a      	uxth	r2, r3
 8003424:	4b1f      	ldr	r3, [pc, #124]	@ (80034a4 <load_angles+0x1c0>)
 8003426:	821a      	strh	r2, [r3, #16]

	pulses[9] = (650 - angle_to_pulse(BR_angles[0] + BR_offsets[0]));
 8003428:	4b23      	ldr	r3, [pc, #140]	@ (80034b8 <load_angles+0x1d4>)
 800342a:	ed93 7a00 	vldr	s14, [r3]
 800342e:	4b23      	ldr	r3, [pc, #140]	@ (80034bc <load_angles+0x1d8>)
 8003430:	edd3 7a00 	vldr	s15, [r3]
 8003434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003438:	eeb0 0a67 	vmov.f32	s0, s15
 800343c:	f001 fcfc 	bl	8004e38 <angle_to_pulse>
 8003440:	4603      	mov	r3, r0
 8003442:	b29b      	uxth	r3, r3
 8003444:	f5c3 7322 	rsb	r3, r3, #648	@ 0x288
 8003448:	3302      	adds	r3, #2
 800344a:	b29a      	uxth	r2, r3
 800344c:	4b15      	ldr	r3, [pc, #84]	@ (80034a4 <load_angles+0x1c0>)
 800344e:	825a      	strh	r2, [r3, #18]

	pulses[10] = angle_to_pulse(BR_angles[1] + BR_offsets[1]) ;
 8003450:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <load_angles+0x1d4>)
 8003452:	ed93 7a01 	vldr	s14, [r3, #4]
 8003456:	4b19      	ldr	r3, [pc, #100]	@ (80034bc <load_angles+0x1d8>)
 8003458:	edd3 7a01 	vldr	s15, [r3, #4]
 800345c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003460:	eeb0 0a67 	vmov.f32	s0, s15
 8003464:	f001 fce8 	bl	8004e38 <angle_to_pulse>
 8003468:	4603      	mov	r3, r0
 800346a:	b29a      	uxth	r2, r3
 800346c:	4b0d      	ldr	r3, [pc, #52]	@ (80034a4 <load_angles+0x1c0>)
 800346e:	829a      	strh	r2, [r3, #20]

	pulses[11] = (650 - angle_to_pulse(BR_angles[2] + BR_offsets[2]));
 8003470:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <load_angles+0x1d4>)
 8003472:	ed93 7a02 	vldr	s14, [r3, #8]
 8003476:	4b11      	ldr	r3, [pc, #68]	@ (80034bc <load_angles+0x1d8>)
 8003478:	edd3 7a02 	vldr	s15, [r3, #8]
 800347c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003480:	eeb0 0a67 	vmov.f32	s0, s15
 8003484:	f001 fcd8 	bl	8004e38 <angle_to_pulse>
 8003488:	4603      	mov	r3, r0
 800348a:	b29b      	uxth	r3, r3
 800348c:	f5c3 7322 	rsb	r3, r3, #648	@ 0x288
 8003490:	3302      	adds	r3, #2
 8003492:	b29a      	uxth	r2, r3
 8003494:	4b03      	ldr	r3, [pc, #12]	@ (80034a4 <load_angles+0x1c0>)
 8003496:	82da      	strh	r2, [r3, #22]


}
 8003498:	bf00      	nop
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20000280 	.word	0x20000280
 80034a0:	20000220 	.word	0x20000220
 80034a4:	20000208 	.word	0x20000208
 80034a8:	2000028c 	.word	0x2000028c
 80034ac:	2000022c 	.word	0x2000022c
 80034b0:	20000298 	.word	0x20000298
 80034b4:	20000238 	.word	0x20000238
 80034b8:	200002a4 	.word	0x200002a4
 80034bc:	20000244 	.word	0x20000244

080034c0 <Stand>:

void Stand(){
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
	load_leg_position(FL_position,0.0,0.0,body_height, FL_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 80034c4:	4b38      	ldr	r3, [pc, #224]	@ (80035a8 <Stand+0xe8>)
 80034c6:	edd3 7a00 	vldr	s15, [r3]
 80034ca:	4b38      	ldr	r3, [pc, #224]	@ (80035ac <Stand+0xec>)
 80034cc:	ed93 7a00 	vldr	s14, [r3]
 80034d0:	4b36      	ldr	r3, [pc, #216]	@ (80035ac <Stand+0xec>)
 80034d2:	edd3 6a01 	vldr	s13, [r3, #4]
 80034d6:	4b35      	ldr	r3, [pc, #212]	@ (80035ac <Stand+0xec>)
 80034d8:	ed93 6a02 	vldr	s12, [r3, #8]
 80034dc:	eef0 2a46 	vmov.f32	s5, s12
 80034e0:	eeb0 2a66 	vmov.f32	s4, s13
 80034e4:	eef0 1a47 	vmov.f32	s3, s14
 80034e8:	4931      	ldr	r1, [pc, #196]	@ (80035b0 <Stand+0xf0>)
 80034ea:	eeb0 1a67 	vmov.f32	s2, s15
 80034ee:	eddf 0a31 	vldr	s1, [pc, #196]	@ 80035b4 <Stand+0xf4>
 80034f2:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80035b4 <Stand+0xf4>
 80034f6:	4830      	ldr	r0, [pc, #192]	@ (80035b8 <Stand+0xf8>)
 80034f8:	f7ff fec6 	bl	8003288 <load_leg_position>
	load_leg_position(FR_position,0.0,0.0,body_height, FR_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 80034fc:	4b2a      	ldr	r3, [pc, #168]	@ (80035a8 <Stand+0xe8>)
 80034fe:	edd3 7a00 	vldr	s15, [r3]
 8003502:	4b2a      	ldr	r3, [pc, #168]	@ (80035ac <Stand+0xec>)
 8003504:	ed93 7a00 	vldr	s14, [r3]
 8003508:	4b28      	ldr	r3, [pc, #160]	@ (80035ac <Stand+0xec>)
 800350a:	edd3 6a01 	vldr	s13, [r3, #4]
 800350e:	4b27      	ldr	r3, [pc, #156]	@ (80035ac <Stand+0xec>)
 8003510:	ed93 6a02 	vldr	s12, [r3, #8]
 8003514:	eef0 2a46 	vmov.f32	s5, s12
 8003518:	eeb0 2a66 	vmov.f32	s4, s13
 800351c:	eef0 1a47 	vmov.f32	s3, s14
 8003520:	4926      	ldr	r1, [pc, #152]	@ (80035bc <Stand+0xfc>)
 8003522:	eeb0 1a67 	vmov.f32	s2, s15
 8003526:	eddf 0a23 	vldr	s1, [pc, #140]	@ 80035b4 <Stand+0xf4>
 800352a:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 80035b4 <Stand+0xf4>
 800352e:	4824      	ldr	r0, [pc, #144]	@ (80035c0 <Stand+0x100>)
 8003530:	f7ff feaa 	bl	8003288 <load_leg_position>
	load_leg_position(BL_position,0.0,0.0,body_height, BL_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8003534:	4b1c      	ldr	r3, [pc, #112]	@ (80035a8 <Stand+0xe8>)
 8003536:	edd3 7a00 	vldr	s15, [r3]
 800353a:	4b1c      	ldr	r3, [pc, #112]	@ (80035ac <Stand+0xec>)
 800353c:	ed93 7a00 	vldr	s14, [r3]
 8003540:	4b1a      	ldr	r3, [pc, #104]	@ (80035ac <Stand+0xec>)
 8003542:	edd3 6a01 	vldr	s13, [r3, #4]
 8003546:	4b19      	ldr	r3, [pc, #100]	@ (80035ac <Stand+0xec>)
 8003548:	ed93 6a02 	vldr	s12, [r3, #8]
 800354c:	eef0 2a46 	vmov.f32	s5, s12
 8003550:	eeb0 2a66 	vmov.f32	s4, s13
 8003554:	eef0 1a47 	vmov.f32	s3, s14
 8003558:	491a      	ldr	r1, [pc, #104]	@ (80035c4 <Stand+0x104>)
 800355a:	eeb0 1a67 	vmov.f32	s2, s15
 800355e:	eddf 0a15 	vldr	s1, [pc, #84]	@ 80035b4 <Stand+0xf4>
 8003562:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 80035b4 <Stand+0xf4>
 8003566:	4818      	ldr	r0, [pc, #96]	@ (80035c8 <Stand+0x108>)
 8003568:	f7ff fe8e 	bl	8003288 <load_leg_position>
	load_leg_position(BR_position,0.0,0.0,body_height, BR_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 800356c:	4b0e      	ldr	r3, [pc, #56]	@ (80035a8 <Stand+0xe8>)
 800356e:	edd3 7a00 	vldr	s15, [r3]
 8003572:	4b0e      	ldr	r3, [pc, #56]	@ (80035ac <Stand+0xec>)
 8003574:	ed93 7a00 	vldr	s14, [r3]
 8003578:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <Stand+0xec>)
 800357a:	edd3 6a01 	vldr	s13, [r3, #4]
 800357e:	4b0b      	ldr	r3, [pc, #44]	@ (80035ac <Stand+0xec>)
 8003580:	ed93 6a02 	vldr	s12, [r3, #8]
 8003584:	eef0 2a46 	vmov.f32	s5, s12
 8003588:	eeb0 2a66 	vmov.f32	s4, s13
 800358c:	eef0 1a47 	vmov.f32	s3, s14
 8003590:	490e      	ldr	r1, [pc, #56]	@ (80035cc <Stand+0x10c>)
 8003592:	eeb0 1a67 	vmov.f32	s2, s15
 8003596:	eddf 0a07 	vldr	s1, [pc, #28]	@ 80035b4 <Stand+0xf4>
 800359a:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 80035b4 <Stand+0xf4>
 800359e:	480c      	ldr	r0, [pc, #48]	@ (80035d0 <Stand+0x110>)
 80035a0:	f7ff fe72 	bl	8003288 <load_leg_position>
}
 80035a4:	bf00      	nop
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	200000a0 	.word	0x200000a0
 80035ac:	200002b0 	.word	0x200002b0
 80035b0:	20000250 	.word	0x20000250
 80035b4:	00000000 	.word	0x00000000
 80035b8:	20000000 	.word	0x20000000
 80035bc:	2000025c 	.word	0x2000025c
 80035c0:	2000000c 	.word	0x2000000c
 80035c4:	20000268 	.word	0x20000268
 80035c8:	20000018 	.word	0x20000018
 80035cc:	20000274 	.word	0x20000274
 80035d0:	20000024 	.word	0x20000024

080035d4 <Gait_controller>:

void Gait_controller (uint8_t ticks, float x_setpoint, float y_setpoint){
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80035e0:	edc7 0a01 	vstr	s1, [r7, #4]
 80035e4:	73fb      	strb	r3, [r7, #15]

	if(mode == WALK){
 80035e6:	4bb8      	ldr	r3, [pc, #736]	@ (80038c8 <Gait_controller+0x2f4>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f041 8076 	bne.w	80046dc <Gait_controller+0x1108>

		switch(ticks){
 80035f0:	7bfb      	ldrb	r3, [r7, #15]
 80035f2:	2b0b      	cmp	r3, #11
 80035f4:	f201 8405 	bhi.w	8004e02 <Gait_controller+0x182e>
 80035f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003600 <Gait_controller+0x2c>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003631 	.word	0x08003631
 8003604:	0800377f 	.word	0x0800377f
 8003608:	08003905 	.word	0x08003905
 800360c:	08003a45 	.word	0x08003a45
 8003610:	08003bc9 	.word	0x08003bc9
 8003614:	08003d17 	.word	0x08003d17
 8003618:	08003e9d 	.word	0x08003e9d
 800361c:	08003ff3 	.word	0x08003ff3
 8003620:	08004179 	.word	0x08004179
 8003624:	080042bd 	.word	0x080042bd
 8003628:	08004445 	.word	0x08004445
 800362c:	0800459b 	.word	0x0800459b

		case 0:
			load_leg_position(FL_position,x_setpoint - x_translation,y_setpoint + y_translation  ,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003630:	4ba6      	ldr	r3, [pc, #664]	@ (80038cc <Gait_controller+0x2f8>)
 8003632:	edd3 7a00 	vldr	s15, [r3]
 8003636:	ed97 7a02 	vldr	s14, [r7, #8]
 800363a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800363e:	4ba4      	ldr	r3, [pc, #656]	@ (80038d0 <Gait_controller+0x2fc>)
 8003640:	ed93 7a00 	vldr	s14, [r3]
 8003644:	edd7 7a01 	vldr	s15, [r7, #4]
 8003648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800364c:	4ba1      	ldr	r3, [pc, #644]	@ (80038d4 <Gait_controller+0x300>)
 800364e:	ed93 7a00 	vldr	s14, [r3]
 8003652:	4ba1      	ldr	r3, [pc, #644]	@ (80038d8 <Gait_controller+0x304>)
 8003654:	ed93 6a00 	vldr	s12, [r3]
 8003658:	4b9f      	ldr	r3, [pc, #636]	@ (80038d8 <Gait_controller+0x304>)
 800365a:	edd3 5a01 	vldr	s11, [r3, #4]
 800365e:	eddf 2a9f 	vldr	s5, [pc, #636]	@ 80038dc <Gait_controller+0x308>
 8003662:	eeb0 2a65 	vmov.f32	s4, s11
 8003666:	eef0 1a46 	vmov.f32	s3, s12
 800366a:	499d      	ldr	r1, [pc, #628]	@ (80038e0 <Gait_controller+0x30c>)
 800366c:	eeb0 1a47 	vmov.f32	s2, s14
 8003670:	eef0 0a67 	vmov.f32	s1, s15
 8003674:	eeb0 0a66 	vmov.f32	s0, s13
 8003678:	489a      	ldr	r0, [pc, #616]	@ (80038e4 <Gait_controller+0x310>)
 800367a:	f7ff fe05 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,-x_setpoint - x_translation,-y_setpoint + y_translation ,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 800367e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003682:	eeb1 7a67 	vneg.f32	s14, s15
 8003686:	4b91      	ldr	r3, [pc, #580]	@ (80038cc <Gait_controller+0x2f8>)
 8003688:	edd3 7a00 	vldr	s15, [r3]
 800368c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003690:	4b8f      	ldr	r3, [pc, #572]	@ (80038d0 <Gait_controller+0x2fc>)
 8003692:	ed93 7a00 	vldr	s14, [r3]
 8003696:	edd7 7a01 	vldr	s15, [r7, #4]
 800369a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800369e:	4b8d      	ldr	r3, [pc, #564]	@ (80038d4 <Gait_controller+0x300>)
 80036a0:	ed93 7a00 	vldr	s14, [r3]
 80036a4:	4b8c      	ldr	r3, [pc, #560]	@ (80038d8 <Gait_controller+0x304>)
 80036a6:	ed93 6a00 	vldr	s12, [r3]
 80036aa:	4b8b      	ldr	r3, [pc, #556]	@ (80038d8 <Gait_controller+0x304>)
 80036ac:	edd3 5a01 	vldr	s11, [r3, #4]
 80036b0:	eddf 2a8a 	vldr	s5, [pc, #552]	@ 80038dc <Gait_controller+0x308>
 80036b4:	eeb0 2a65 	vmov.f32	s4, s11
 80036b8:	eef0 1a46 	vmov.f32	s3, s12
 80036bc:	498a      	ldr	r1, [pc, #552]	@ (80038e8 <Gait_controller+0x314>)
 80036be:	eeb0 1a47 	vmov.f32	s2, s14
 80036c2:	eef0 0a67 	vmov.f32	s1, s15
 80036c6:	eeb0 0a66 	vmov.f32	s0, s13
 80036ca:	4888      	ldr	r0, [pc, #544]	@ (80038ec <Gait_controller+0x318>)
 80036cc:	f7ff fddc 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,x_setpoint - x_translation,y_setpoint + y_translation ,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 80036d0:	4b7e      	ldr	r3, [pc, #504]	@ (80038cc <Gait_controller+0x2f8>)
 80036d2:	edd3 7a00 	vldr	s15, [r3]
 80036d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80036da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80036de:	4b7c      	ldr	r3, [pc, #496]	@ (80038d0 <Gait_controller+0x2fc>)
 80036e0:	ed93 7a00 	vldr	s14, [r3]
 80036e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ec:	4b79      	ldr	r3, [pc, #484]	@ (80038d4 <Gait_controller+0x300>)
 80036ee:	ed93 7a00 	vldr	s14, [r3]
 80036f2:	4b79      	ldr	r3, [pc, #484]	@ (80038d8 <Gait_controller+0x304>)
 80036f4:	ed93 6a00 	vldr	s12, [r3]
 80036f8:	4b77      	ldr	r3, [pc, #476]	@ (80038d8 <Gait_controller+0x304>)
 80036fa:	edd3 5a01 	vldr	s11, [r3, #4]
 80036fe:	eddf 2a77 	vldr	s5, [pc, #476]	@ 80038dc <Gait_controller+0x308>
 8003702:	eeb0 2a65 	vmov.f32	s4, s11
 8003706:	eef0 1a46 	vmov.f32	s3, s12
 800370a:	4979      	ldr	r1, [pc, #484]	@ (80038f0 <Gait_controller+0x31c>)
 800370c:	eeb0 1a47 	vmov.f32	s2, s14
 8003710:	eef0 0a67 	vmov.f32	s1, s15
 8003714:	eeb0 0a66 	vmov.f32	s0, s13
 8003718:	4876      	ldr	r0, [pc, #472]	@ (80038f4 <Gait_controller+0x320>)
 800371a:	f7ff fdb5 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,-x_setpoint - x_translation,-y_setpoint + y_translation ,body_height - step_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 800371e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003722:	eeb1 7a67 	vneg.f32	s14, s15
 8003726:	4b69      	ldr	r3, [pc, #420]	@ (80038cc <Gait_controller+0x2f8>)
 8003728:	edd3 7a00 	vldr	s15, [r3]
 800372c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003730:	4b67      	ldr	r3, [pc, #412]	@ (80038d0 <Gait_controller+0x2fc>)
 8003732:	ed93 7a00 	vldr	s14, [r3]
 8003736:	edd7 7a01 	vldr	s15, [r7, #4]
 800373a:	ee37 6a67 	vsub.f32	s12, s14, s15
 800373e:	4b65      	ldr	r3, [pc, #404]	@ (80038d4 <Gait_controller+0x300>)
 8003740:	ed93 7a00 	vldr	s14, [r3]
 8003744:	4b6c      	ldr	r3, [pc, #432]	@ (80038f8 <Gait_controller+0x324>)
 8003746:	edd3 7a00 	vldr	s15, [r3]
 800374a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800374e:	4b62      	ldr	r3, [pc, #392]	@ (80038d8 <Gait_controller+0x304>)
 8003750:	ed93 7a00 	vldr	s14, [r3]
 8003754:	4b60      	ldr	r3, [pc, #384]	@ (80038d8 <Gait_controller+0x304>)
 8003756:	edd3 5a01 	vldr	s11, [r3, #4]
 800375a:	eddf 2a60 	vldr	s5, [pc, #384]	@ 80038dc <Gait_controller+0x308>
 800375e:	eeb0 2a65 	vmov.f32	s4, s11
 8003762:	eef0 1a47 	vmov.f32	s3, s14
 8003766:	4965      	ldr	r1, [pc, #404]	@ (80038fc <Gait_controller+0x328>)
 8003768:	eeb0 1a67 	vmov.f32	s2, s15
 800376c:	eef0 0a46 	vmov.f32	s1, s12
 8003770:	eeb0 0a66 	vmov.f32	s0, s13
 8003774:	4862      	ldr	r0, [pc, #392]	@ (8003900 <Gait_controller+0x32c>)
 8003776:	f7ff fd87 	bl	8003288 <load_leg_position>
			break;
 800377a:	f001 bb42 	b.w	8004e02 <Gait_controller+0x182e>
		case 1:
			load_leg_position(FL_position,0.0 - x_translation,0.0 + y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 800377e:	4b53      	ldr	r3, [pc, #332]	@ (80038cc <Gait_controller+0x2f8>)
 8003780:	edd3 7a00 	vldr	s15, [r3]
 8003784:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80038dc <Gait_controller+0x308>
 8003788:	ee37 7a67 	vsub.f32	s14, s14, s15
 800378c:	4b50      	ldr	r3, [pc, #320]	@ (80038d0 <Gait_controller+0x2fc>)
 800378e:	edd3 7a00 	vldr	s15, [r3]
 8003792:	eddf 6a52 	vldr	s13, [pc, #328]	@ 80038dc <Gait_controller+0x308>
 8003796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800379a:	4b4e      	ldr	r3, [pc, #312]	@ (80038d4 <Gait_controller+0x300>)
 800379c:	edd3 6a00 	vldr	s13, [r3]
 80037a0:	4b4d      	ldr	r3, [pc, #308]	@ (80038d8 <Gait_controller+0x304>)
 80037a2:	ed93 6a00 	vldr	s12, [r3]
 80037a6:	4b4c      	ldr	r3, [pc, #304]	@ (80038d8 <Gait_controller+0x304>)
 80037a8:	edd3 5a01 	vldr	s11, [r3, #4]
 80037ac:	eddf 2a4b 	vldr	s5, [pc, #300]	@ 80038dc <Gait_controller+0x308>
 80037b0:	eeb0 2a65 	vmov.f32	s4, s11
 80037b4:	eef0 1a46 	vmov.f32	s3, s12
 80037b8:	4949      	ldr	r1, [pc, #292]	@ (80038e0 <Gait_controller+0x30c>)
 80037ba:	eeb0 1a66 	vmov.f32	s2, s13
 80037be:	eef0 0a67 	vmov.f32	s1, s15
 80037c2:	eeb0 0a47 	vmov.f32	s0, s14
 80037c6:	4847      	ldr	r0, [pc, #284]	@ (80038e4 <Gait_controller+0x310>)
 80037c8:	f7ff fd5e 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,-x_setpoint - x_translation,-y_setpoint + y_translation  ,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 80037cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80037d0:	eeb1 7a67 	vneg.f32	s14, s15
 80037d4:	4b3d      	ldr	r3, [pc, #244]	@ (80038cc <Gait_controller+0x2f8>)
 80037d6:	edd3 7a00 	vldr	s15, [r3]
 80037da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80037de:	4b3c      	ldr	r3, [pc, #240]	@ (80038d0 <Gait_controller+0x2fc>)
 80037e0:	ed93 7a00 	vldr	s14, [r3]
 80037e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80037e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ec:	4b39      	ldr	r3, [pc, #228]	@ (80038d4 <Gait_controller+0x300>)
 80037ee:	ed93 7a00 	vldr	s14, [r3]
 80037f2:	4b39      	ldr	r3, [pc, #228]	@ (80038d8 <Gait_controller+0x304>)
 80037f4:	ed93 6a00 	vldr	s12, [r3]
 80037f8:	4b37      	ldr	r3, [pc, #220]	@ (80038d8 <Gait_controller+0x304>)
 80037fa:	edd3 5a01 	vldr	s11, [r3, #4]
 80037fe:	eddf 2a37 	vldr	s5, [pc, #220]	@ 80038dc <Gait_controller+0x308>
 8003802:	eeb0 2a65 	vmov.f32	s4, s11
 8003806:	eef0 1a46 	vmov.f32	s3, s12
 800380a:	4937      	ldr	r1, [pc, #220]	@ (80038e8 <Gait_controller+0x314>)
 800380c:	eeb0 1a47 	vmov.f32	s2, s14
 8003810:	eef0 0a67 	vmov.f32	s1, s15
 8003814:	eeb0 0a66 	vmov.f32	s0, s13
 8003818:	4834      	ldr	r0, [pc, #208]	@ (80038ec <Gait_controller+0x318>)
 800381a:	f7ff fd35 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,0.0 - x_translation,0.0 + y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 800381e:	4b2b      	ldr	r3, [pc, #172]	@ (80038cc <Gait_controller+0x2f8>)
 8003820:	edd3 7a00 	vldr	s15, [r3]
 8003824:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80038dc <Gait_controller+0x308>
 8003828:	ee37 7a67 	vsub.f32	s14, s14, s15
 800382c:	4b28      	ldr	r3, [pc, #160]	@ (80038d0 <Gait_controller+0x2fc>)
 800382e:	edd3 7a00 	vldr	s15, [r3]
 8003832:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80038dc <Gait_controller+0x308>
 8003836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800383a:	4b26      	ldr	r3, [pc, #152]	@ (80038d4 <Gait_controller+0x300>)
 800383c:	edd3 6a00 	vldr	s13, [r3]
 8003840:	4b25      	ldr	r3, [pc, #148]	@ (80038d8 <Gait_controller+0x304>)
 8003842:	ed93 6a00 	vldr	s12, [r3]
 8003846:	4b24      	ldr	r3, [pc, #144]	@ (80038d8 <Gait_controller+0x304>)
 8003848:	edd3 5a01 	vldr	s11, [r3, #4]
 800384c:	eddf 2a23 	vldr	s5, [pc, #140]	@ 80038dc <Gait_controller+0x308>
 8003850:	eeb0 2a65 	vmov.f32	s4, s11
 8003854:	eef0 1a46 	vmov.f32	s3, s12
 8003858:	4925      	ldr	r1, [pc, #148]	@ (80038f0 <Gait_controller+0x31c>)
 800385a:	eeb0 1a66 	vmov.f32	s2, s13
 800385e:	eef0 0a67 	vmov.f32	s1, s15
 8003862:	eeb0 0a47 	vmov.f32	s0, s14
 8003866:	4823      	ldr	r0, [pc, #140]	@ (80038f4 <Gait_controller+0x320>)
 8003868:	f7ff fd0e 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,x_setpoint - x_translation,y_setpoint + y_translation  ,body_height - step_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 800386c:	4b17      	ldr	r3, [pc, #92]	@ (80038cc <Gait_controller+0x2f8>)
 800386e:	edd3 7a00 	vldr	s15, [r3]
 8003872:	ed97 7a02 	vldr	s14, [r7, #8]
 8003876:	ee77 6a67 	vsub.f32	s13, s14, s15
 800387a:	4b15      	ldr	r3, [pc, #84]	@ (80038d0 <Gait_controller+0x2fc>)
 800387c:	ed93 7a00 	vldr	s14, [r3]
 8003880:	edd7 7a01 	vldr	s15, [r7, #4]
 8003884:	ee37 6a27 	vadd.f32	s12, s14, s15
 8003888:	4b12      	ldr	r3, [pc, #72]	@ (80038d4 <Gait_controller+0x300>)
 800388a:	ed93 7a00 	vldr	s14, [r3]
 800388e:	4b1a      	ldr	r3, [pc, #104]	@ (80038f8 <Gait_controller+0x324>)
 8003890:	edd3 7a00 	vldr	s15, [r3]
 8003894:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003898:	4b0f      	ldr	r3, [pc, #60]	@ (80038d8 <Gait_controller+0x304>)
 800389a:	ed93 7a00 	vldr	s14, [r3]
 800389e:	4b0e      	ldr	r3, [pc, #56]	@ (80038d8 <Gait_controller+0x304>)
 80038a0:	edd3 5a01 	vldr	s11, [r3, #4]
 80038a4:	eddf 2a0d 	vldr	s5, [pc, #52]	@ 80038dc <Gait_controller+0x308>
 80038a8:	eeb0 2a65 	vmov.f32	s4, s11
 80038ac:	eef0 1a47 	vmov.f32	s3, s14
 80038b0:	4912      	ldr	r1, [pc, #72]	@ (80038fc <Gait_controller+0x328>)
 80038b2:	eeb0 1a67 	vmov.f32	s2, s15
 80038b6:	eef0 0a46 	vmov.f32	s1, s12
 80038ba:	eeb0 0a66 	vmov.f32	s0, s13
 80038be:	4810      	ldr	r0, [pc, #64]	@ (8003900 <Gait_controller+0x32c>)
 80038c0:	f7ff fce2 	bl	8003288 <load_leg_position>
			break;
 80038c4:	f001 ba9d 	b.w	8004e02 <Gait_controller+0x182e>
 80038c8:	20000324 	.word	0x20000324
 80038cc:	20000098 	.word	0x20000098
 80038d0:	2000009c 	.word	0x2000009c
 80038d4:	200000a0 	.word	0x200000a0
 80038d8:	200002b0 	.word	0x200002b0
 80038dc:	00000000 	.word	0x00000000
 80038e0:	20000250 	.word	0x20000250
 80038e4:	20000000 	.word	0x20000000
 80038e8:	2000025c 	.word	0x2000025c
 80038ec:	2000000c 	.word	0x2000000c
 80038f0:	20000268 	.word	0x20000268
 80038f4:	20000018 	.word	0x20000018
 80038f8:	20000090 	.word	0x20000090
 80038fc:	20000274 	.word	0x20000274
 8003900:	20000024 	.word	0x20000024
		case 2:
			load_leg_position(FL_position,0.0 - x_translation,0.0 + y_translation ,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003904:	4ba2      	ldr	r3, [pc, #648]	@ (8003b90 <Gait_controller+0x5bc>)
 8003906:	edd3 7a00 	vldr	s15, [r3]
 800390a:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8003b94 <Gait_controller+0x5c0>
 800390e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003912:	4ba1      	ldr	r3, [pc, #644]	@ (8003b98 <Gait_controller+0x5c4>)
 8003914:	edd3 7a00 	vldr	s15, [r3]
 8003918:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8003b94 <Gait_controller+0x5c0>
 800391c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003920:	4b9e      	ldr	r3, [pc, #632]	@ (8003b9c <Gait_controller+0x5c8>)
 8003922:	edd3 6a00 	vldr	s13, [r3]
 8003926:	4b9e      	ldr	r3, [pc, #632]	@ (8003ba0 <Gait_controller+0x5cc>)
 8003928:	ed93 6a00 	vldr	s12, [r3]
 800392c:	4b9c      	ldr	r3, [pc, #624]	@ (8003ba0 <Gait_controller+0x5cc>)
 800392e:	edd3 5a01 	vldr	s11, [r3, #4]
 8003932:	eddf 2a98 	vldr	s5, [pc, #608]	@ 8003b94 <Gait_controller+0x5c0>
 8003936:	eeb0 2a65 	vmov.f32	s4, s11
 800393a:	eef0 1a46 	vmov.f32	s3, s12
 800393e:	4999      	ldr	r1, [pc, #612]	@ (8003ba4 <Gait_controller+0x5d0>)
 8003940:	eeb0 1a66 	vmov.f32	s2, s13
 8003944:	eef0 0a67 	vmov.f32	s1, s15
 8003948:	eeb0 0a47 	vmov.f32	s0, s14
 800394c:	4896      	ldr	r0, [pc, #600]	@ (8003ba8 <Gait_controller+0x5d4>)
 800394e:	f7ff fc9b 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,-x_setpoint - x_translation,-y_setpoint + y_translation ,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003952:	edd7 7a02 	vldr	s15, [r7, #8]
 8003956:	eeb1 7a67 	vneg.f32	s14, s15
 800395a:	4b8d      	ldr	r3, [pc, #564]	@ (8003b90 <Gait_controller+0x5bc>)
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003964:	4b8c      	ldr	r3, [pc, #560]	@ (8003b98 <Gait_controller+0x5c4>)
 8003966:	ed93 7a00 	vldr	s14, [r3]
 800396a:	edd7 7a01 	vldr	s15, [r7, #4]
 800396e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003972:	4b8a      	ldr	r3, [pc, #552]	@ (8003b9c <Gait_controller+0x5c8>)
 8003974:	ed93 7a00 	vldr	s14, [r3]
 8003978:	4b89      	ldr	r3, [pc, #548]	@ (8003ba0 <Gait_controller+0x5cc>)
 800397a:	ed93 6a00 	vldr	s12, [r3]
 800397e:	4b88      	ldr	r3, [pc, #544]	@ (8003ba0 <Gait_controller+0x5cc>)
 8003980:	edd3 5a01 	vldr	s11, [r3, #4]
 8003984:	eddf 2a83 	vldr	s5, [pc, #524]	@ 8003b94 <Gait_controller+0x5c0>
 8003988:	eeb0 2a65 	vmov.f32	s4, s11
 800398c:	eef0 1a46 	vmov.f32	s3, s12
 8003990:	4986      	ldr	r1, [pc, #536]	@ (8003bac <Gait_controller+0x5d8>)
 8003992:	eeb0 1a47 	vmov.f32	s2, s14
 8003996:	eef0 0a67 	vmov.f32	s1, s15
 800399a:	eeb0 0a66 	vmov.f32	s0, s13
 800399e:	4884      	ldr	r0, [pc, #528]	@ (8003bb0 <Gait_controller+0x5dc>)
 80039a0:	f7ff fc72 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,0.0 - x_translation,0.0 + y_translation ,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 80039a4:	4b7a      	ldr	r3, [pc, #488]	@ (8003b90 <Gait_controller+0x5bc>)
 80039a6:	edd3 7a00 	vldr	s15, [r3]
 80039aa:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8003b94 <Gait_controller+0x5c0>
 80039ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039b2:	4b79      	ldr	r3, [pc, #484]	@ (8003b98 <Gait_controller+0x5c4>)
 80039b4:	edd3 7a00 	vldr	s15, [r3]
 80039b8:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8003b94 <Gait_controller+0x5c0>
 80039bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039c0:	4b76      	ldr	r3, [pc, #472]	@ (8003b9c <Gait_controller+0x5c8>)
 80039c2:	edd3 6a00 	vldr	s13, [r3]
 80039c6:	4b76      	ldr	r3, [pc, #472]	@ (8003ba0 <Gait_controller+0x5cc>)
 80039c8:	ed93 6a00 	vldr	s12, [r3]
 80039cc:	4b74      	ldr	r3, [pc, #464]	@ (8003ba0 <Gait_controller+0x5cc>)
 80039ce:	edd3 5a01 	vldr	s11, [r3, #4]
 80039d2:	eddf 2a70 	vldr	s5, [pc, #448]	@ 8003b94 <Gait_controller+0x5c0>
 80039d6:	eeb0 2a65 	vmov.f32	s4, s11
 80039da:	eef0 1a46 	vmov.f32	s3, s12
 80039de:	4975      	ldr	r1, [pc, #468]	@ (8003bb4 <Gait_controller+0x5e0>)
 80039e0:	eeb0 1a66 	vmov.f32	s2, s13
 80039e4:	eef0 0a67 	vmov.f32	s1, s15
 80039e8:	eeb0 0a47 	vmov.f32	s0, s14
 80039ec:	4872      	ldr	r0, [pc, #456]	@ (8003bb8 <Gait_controller+0x5e4>)
 80039ee:	f7ff fc4b 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,x_setpoint - x_translation,y_setpoint + y_translation ,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 80039f2:	4b67      	ldr	r3, [pc, #412]	@ (8003b90 <Gait_controller+0x5bc>)
 80039f4:	edd3 7a00 	vldr	s15, [r3]
 80039f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80039fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003a00:	4b65      	ldr	r3, [pc, #404]	@ (8003b98 <Gait_controller+0x5c4>)
 8003a02:	ed93 7a00 	vldr	s14, [r3]
 8003a06:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a0e:	4b63      	ldr	r3, [pc, #396]	@ (8003b9c <Gait_controller+0x5c8>)
 8003a10:	ed93 7a00 	vldr	s14, [r3]
 8003a14:	4b62      	ldr	r3, [pc, #392]	@ (8003ba0 <Gait_controller+0x5cc>)
 8003a16:	ed93 6a00 	vldr	s12, [r3]
 8003a1a:	4b61      	ldr	r3, [pc, #388]	@ (8003ba0 <Gait_controller+0x5cc>)
 8003a1c:	edd3 5a01 	vldr	s11, [r3, #4]
 8003a20:	eddf 2a5c 	vldr	s5, [pc, #368]	@ 8003b94 <Gait_controller+0x5c0>
 8003a24:	eeb0 2a65 	vmov.f32	s4, s11
 8003a28:	eef0 1a46 	vmov.f32	s3, s12
 8003a2c:	4963      	ldr	r1, [pc, #396]	@ (8003bbc <Gait_controller+0x5e8>)
 8003a2e:	eeb0 1a47 	vmov.f32	s2, s14
 8003a32:	eef0 0a67 	vmov.f32	s1, s15
 8003a36:	eeb0 0a66 	vmov.f32	s0, s13
 8003a3a:	4861      	ldr	r0, [pc, #388]	@ (8003bc0 <Gait_controller+0x5ec>)
 8003a3c:	f7ff fc24 	bl	8003288 <load_leg_position>
			break;
 8003a40:	f001 b9df 	b.w	8004e02 <Gait_controller+0x182e>
		case 3:
			load_leg_position(FL_position,0.0 - x_translation,0.0 + y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003a44:	4b52      	ldr	r3, [pc, #328]	@ (8003b90 <Gait_controller+0x5bc>)
 8003a46:	edd3 7a00 	vldr	s15, [r3]
 8003a4a:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8003b94 <Gait_controller+0x5c0>
 8003a4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a52:	4b51      	ldr	r3, [pc, #324]	@ (8003b98 <Gait_controller+0x5c4>)
 8003a54:	edd3 7a00 	vldr	s15, [r3]
 8003a58:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8003b94 <Gait_controller+0x5c0>
 8003a5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a60:	4b4e      	ldr	r3, [pc, #312]	@ (8003b9c <Gait_controller+0x5c8>)
 8003a62:	edd3 6a00 	vldr	s13, [r3]
 8003a66:	4b4e      	ldr	r3, [pc, #312]	@ (8003ba0 <Gait_controller+0x5cc>)
 8003a68:	ed93 6a00 	vldr	s12, [r3]
 8003a6c:	4b4c      	ldr	r3, [pc, #304]	@ (8003ba0 <Gait_controller+0x5cc>)
 8003a6e:	edd3 5a01 	vldr	s11, [r3, #4]
 8003a72:	eddf 2a48 	vldr	s5, [pc, #288]	@ 8003b94 <Gait_controller+0x5c0>
 8003a76:	eeb0 2a65 	vmov.f32	s4, s11
 8003a7a:	eef0 1a46 	vmov.f32	s3, s12
 8003a7e:	4949      	ldr	r1, [pc, #292]	@ (8003ba4 <Gait_controller+0x5d0>)
 8003a80:	eeb0 1a66 	vmov.f32	s2, s13
 8003a84:	eef0 0a67 	vmov.f32	s1, s15
 8003a88:	eeb0 0a47 	vmov.f32	s0, s14
 8003a8c:	4846      	ldr	r0, [pc, #280]	@ (8003ba8 <Gait_controller+0x5d4>)
 8003a8e:	f7ff fbfb 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,-x_setpoint - x_translation,-y_setpoint + y_translation ,body_height - step_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003a92:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a96:	eeb1 7a67 	vneg.f32	s14, s15
 8003a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b90 <Gait_controller+0x5bc>)
 8003a9c:	edd3 7a00 	vldr	s15, [r3]
 8003aa0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8003b98 <Gait_controller+0x5c4>)
 8003aa6:	ed93 7a00 	vldr	s14, [r3]
 8003aaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aae:	ee37 6a67 	vsub.f32	s12, s14, s15
 8003ab2:	4b3a      	ldr	r3, [pc, #232]	@ (8003b9c <Gait_controller+0x5c8>)
 8003ab4:	ed93 7a00 	vldr	s14, [r3]
 8003ab8:	4b42      	ldr	r3, [pc, #264]	@ (8003bc4 <Gait_controller+0x5f0>)
 8003aba:	edd3 7a00 	vldr	s15, [r3]
 8003abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ac2:	4b37      	ldr	r3, [pc, #220]	@ (8003ba0 <Gait_controller+0x5cc>)
 8003ac4:	ed93 7a00 	vldr	s14, [r3]
 8003ac8:	4b35      	ldr	r3, [pc, #212]	@ (8003ba0 <Gait_controller+0x5cc>)
 8003aca:	edd3 5a01 	vldr	s11, [r3, #4]
 8003ace:	eddf 2a31 	vldr	s5, [pc, #196]	@ 8003b94 <Gait_controller+0x5c0>
 8003ad2:	eeb0 2a65 	vmov.f32	s4, s11
 8003ad6:	eef0 1a47 	vmov.f32	s3, s14
 8003ada:	4934      	ldr	r1, [pc, #208]	@ (8003bac <Gait_controller+0x5d8>)
 8003adc:	eeb0 1a67 	vmov.f32	s2, s15
 8003ae0:	eef0 0a46 	vmov.f32	s1, s12
 8003ae4:	eeb0 0a66 	vmov.f32	s0, s13
 8003ae8:	4831      	ldr	r0, [pc, #196]	@ (8003bb0 <Gait_controller+0x5dc>)
 8003aea:	f7ff fbcd 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,0.0 - x_translation,0.0 + y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003aee:	4b28      	ldr	r3, [pc, #160]	@ (8003b90 <Gait_controller+0x5bc>)
 8003af0:	edd3 7a00 	vldr	s15, [r3]
 8003af4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8003b94 <Gait_controller+0x5c0>
 8003af8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003afc:	4b26      	ldr	r3, [pc, #152]	@ (8003b98 <Gait_controller+0x5c4>)
 8003afe:	edd3 7a00 	vldr	s15, [r3]
 8003b02:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8003b94 <Gait_controller+0x5c0>
 8003b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b0a:	4b24      	ldr	r3, [pc, #144]	@ (8003b9c <Gait_controller+0x5c8>)
 8003b0c:	edd3 6a00 	vldr	s13, [r3]
 8003b10:	4b23      	ldr	r3, [pc, #140]	@ (8003ba0 <Gait_controller+0x5cc>)
 8003b12:	ed93 6a00 	vldr	s12, [r3]
 8003b16:	4b22      	ldr	r3, [pc, #136]	@ (8003ba0 <Gait_controller+0x5cc>)
 8003b18:	edd3 5a01 	vldr	s11, [r3, #4]
 8003b1c:	eddf 2a1d 	vldr	s5, [pc, #116]	@ 8003b94 <Gait_controller+0x5c0>
 8003b20:	eeb0 2a65 	vmov.f32	s4, s11
 8003b24:	eef0 1a46 	vmov.f32	s3, s12
 8003b28:	4922      	ldr	r1, [pc, #136]	@ (8003bb4 <Gait_controller+0x5e0>)
 8003b2a:	eeb0 1a66 	vmov.f32	s2, s13
 8003b2e:	eef0 0a67 	vmov.f32	s1, s15
 8003b32:	eeb0 0a47 	vmov.f32	s0, s14
 8003b36:	4820      	ldr	r0, [pc, #128]	@ (8003bb8 <Gait_controller+0x5e4>)
 8003b38:	f7ff fba6 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,x_setpoint - x_translation,y_setpoint + y_translation ,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003b3c:	4b14      	ldr	r3, [pc, #80]	@ (8003b90 <Gait_controller+0x5bc>)
 8003b3e:	edd3 7a00 	vldr	s15, [r3]
 8003b42:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b46:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b4a:	4b13      	ldr	r3, [pc, #76]	@ (8003b98 <Gait_controller+0x5c4>)
 8003b4c:	ed93 7a00 	vldr	s14, [r3]
 8003b50:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b58:	4b10      	ldr	r3, [pc, #64]	@ (8003b9c <Gait_controller+0x5c8>)
 8003b5a:	ed93 7a00 	vldr	s14, [r3]
 8003b5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ba0 <Gait_controller+0x5cc>)
 8003b60:	ed93 6a00 	vldr	s12, [r3]
 8003b64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba0 <Gait_controller+0x5cc>)
 8003b66:	edd3 5a01 	vldr	s11, [r3, #4]
 8003b6a:	eddf 2a0a 	vldr	s5, [pc, #40]	@ 8003b94 <Gait_controller+0x5c0>
 8003b6e:	eeb0 2a65 	vmov.f32	s4, s11
 8003b72:	eef0 1a46 	vmov.f32	s3, s12
 8003b76:	4911      	ldr	r1, [pc, #68]	@ (8003bbc <Gait_controller+0x5e8>)
 8003b78:	eeb0 1a47 	vmov.f32	s2, s14
 8003b7c:	eef0 0a67 	vmov.f32	s1, s15
 8003b80:	eeb0 0a66 	vmov.f32	s0, s13
 8003b84:	480e      	ldr	r0, [pc, #56]	@ (8003bc0 <Gait_controller+0x5ec>)
 8003b86:	f7ff fb7f 	bl	8003288 <load_leg_position>
			break;
 8003b8a:	f001 b93a 	b.w	8004e02 <Gait_controller+0x182e>
 8003b8e:	bf00      	nop
 8003b90:	20000098 	.word	0x20000098
 8003b94:	00000000 	.word	0x00000000
 8003b98:	2000009c 	.word	0x2000009c
 8003b9c:	200000a0 	.word	0x200000a0
 8003ba0:	200002b0 	.word	0x200002b0
 8003ba4:	20000250 	.word	0x20000250
 8003ba8:	20000000 	.word	0x20000000
 8003bac:	2000025c 	.word	0x2000025c
 8003bb0:	2000000c 	.word	0x2000000c
 8003bb4:	20000268 	.word	0x20000268
 8003bb8:	20000018 	.word	0x20000018
 8003bbc:	20000274 	.word	0x20000274
 8003bc0:	20000024 	.word	0x20000024
 8003bc4:	20000090 	.word	0x20000090
		case 4:
			load_leg_position(FL_position,-x_setpoint - x_translation,-y_setpoint + y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003bc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bcc:	eeb1 7a67 	vneg.f32	s14, s15
 8003bd0:	4ba4      	ldr	r3, [pc, #656]	@ (8003e64 <Gait_controller+0x890>)
 8003bd2:	edd3 7a00 	vldr	s15, [r3]
 8003bd6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003bda:	4ba3      	ldr	r3, [pc, #652]	@ (8003e68 <Gait_controller+0x894>)
 8003bdc:	ed93 7a00 	vldr	s14, [r3]
 8003be0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003be8:	4ba0      	ldr	r3, [pc, #640]	@ (8003e6c <Gait_controller+0x898>)
 8003bea:	ed93 7a00 	vldr	s14, [r3]
 8003bee:	4ba0      	ldr	r3, [pc, #640]	@ (8003e70 <Gait_controller+0x89c>)
 8003bf0:	ed93 6a00 	vldr	s12, [r3]
 8003bf4:	4b9e      	ldr	r3, [pc, #632]	@ (8003e70 <Gait_controller+0x89c>)
 8003bf6:	edd3 5a01 	vldr	s11, [r3, #4]
 8003bfa:	eddf 2a9e 	vldr	s5, [pc, #632]	@ 8003e74 <Gait_controller+0x8a0>
 8003bfe:	eeb0 2a65 	vmov.f32	s4, s11
 8003c02:	eef0 1a46 	vmov.f32	s3, s12
 8003c06:	499c      	ldr	r1, [pc, #624]	@ (8003e78 <Gait_controller+0x8a4>)
 8003c08:	eeb0 1a47 	vmov.f32	s2, s14
 8003c0c:	eef0 0a67 	vmov.f32	s1, s15
 8003c10:	eeb0 0a66 	vmov.f32	s0, s13
 8003c14:	4899      	ldr	r0, [pc, #612]	@ (8003e7c <Gait_controller+0x8a8>)
 8003c16:	f7ff fb37 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,x_setpoint - x_translation,y_setpoint  + y_translation,body_height - step_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003c1a:	4b92      	ldr	r3, [pc, #584]	@ (8003e64 <Gait_controller+0x890>)
 8003c1c:	edd3 7a00 	vldr	s15, [r3]
 8003c20:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c24:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003c28:	4b8f      	ldr	r3, [pc, #572]	@ (8003e68 <Gait_controller+0x894>)
 8003c2a:	ed93 7a00 	vldr	s14, [r3]
 8003c2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c32:	ee37 6a27 	vadd.f32	s12, s14, s15
 8003c36:	4b8d      	ldr	r3, [pc, #564]	@ (8003e6c <Gait_controller+0x898>)
 8003c38:	ed93 7a00 	vldr	s14, [r3]
 8003c3c:	4b90      	ldr	r3, [pc, #576]	@ (8003e80 <Gait_controller+0x8ac>)
 8003c3e:	edd3 7a00 	vldr	s15, [r3]
 8003c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c46:	4b8a      	ldr	r3, [pc, #552]	@ (8003e70 <Gait_controller+0x89c>)
 8003c48:	ed93 7a00 	vldr	s14, [r3]
 8003c4c:	4b88      	ldr	r3, [pc, #544]	@ (8003e70 <Gait_controller+0x89c>)
 8003c4e:	edd3 5a01 	vldr	s11, [r3, #4]
 8003c52:	eddf 2a88 	vldr	s5, [pc, #544]	@ 8003e74 <Gait_controller+0x8a0>
 8003c56:	eeb0 2a65 	vmov.f32	s4, s11
 8003c5a:	eef0 1a47 	vmov.f32	s3, s14
 8003c5e:	4989      	ldr	r1, [pc, #548]	@ (8003e84 <Gait_controller+0x8b0>)
 8003c60:	eeb0 1a67 	vmov.f32	s2, s15
 8003c64:	eef0 0a46 	vmov.f32	s1, s12
 8003c68:	eeb0 0a66 	vmov.f32	s0, s13
 8003c6c:	4886      	ldr	r0, [pc, #536]	@ (8003e88 <Gait_controller+0x8b4>)
 8003c6e:	f7ff fb0b 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,-x_setpoint - x_translation,-y_setpoint + y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003c72:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c76:	eeb1 7a67 	vneg.f32	s14, s15
 8003c7a:	4b7a      	ldr	r3, [pc, #488]	@ (8003e64 <Gait_controller+0x890>)
 8003c7c:	edd3 7a00 	vldr	s15, [r3]
 8003c80:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003c84:	4b78      	ldr	r3, [pc, #480]	@ (8003e68 <Gait_controller+0x894>)
 8003c86:	ed93 7a00 	vldr	s14, [r3]
 8003c8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c92:	4b76      	ldr	r3, [pc, #472]	@ (8003e6c <Gait_controller+0x898>)
 8003c94:	ed93 7a00 	vldr	s14, [r3]
 8003c98:	4b75      	ldr	r3, [pc, #468]	@ (8003e70 <Gait_controller+0x89c>)
 8003c9a:	ed93 6a00 	vldr	s12, [r3]
 8003c9e:	4b74      	ldr	r3, [pc, #464]	@ (8003e70 <Gait_controller+0x89c>)
 8003ca0:	edd3 5a01 	vldr	s11, [r3, #4]
 8003ca4:	eddf 2a73 	vldr	s5, [pc, #460]	@ 8003e74 <Gait_controller+0x8a0>
 8003ca8:	eeb0 2a65 	vmov.f32	s4, s11
 8003cac:	eef0 1a46 	vmov.f32	s3, s12
 8003cb0:	4976      	ldr	r1, [pc, #472]	@ (8003e8c <Gait_controller+0x8b8>)
 8003cb2:	eeb0 1a47 	vmov.f32	s2, s14
 8003cb6:	eef0 0a67 	vmov.f32	s1, s15
 8003cba:	eeb0 0a66 	vmov.f32	s0, s13
 8003cbe:	4874      	ldr	r0, [pc, #464]	@ (8003e90 <Gait_controller+0x8bc>)
 8003cc0:	f7ff fae2 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,x_setpoint - x_translation,y_setpoint  + y_translation,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003cc4:	4b67      	ldr	r3, [pc, #412]	@ (8003e64 <Gait_controller+0x890>)
 8003cc6:	edd3 7a00 	vldr	s15, [r3]
 8003cca:	ed97 7a02 	vldr	s14, [r7, #8]
 8003cce:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003cd2:	4b65      	ldr	r3, [pc, #404]	@ (8003e68 <Gait_controller+0x894>)
 8003cd4:	ed93 7a00 	vldr	s14, [r3]
 8003cd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce0:	4b62      	ldr	r3, [pc, #392]	@ (8003e6c <Gait_controller+0x898>)
 8003ce2:	ed93 7a00 	vldr	s14, [r3]
 8003ce6:	4b62      	ldr	r3, [pc, #392]	@ (8003e70 <Gait_controller+0x89c>)
 8003ce8:	ed93 6a00 	vldr	s12, [r3]
 8003cec:	4b60      	ldr	r3, [pc, #384]	@ (8003e70 <Gait_controller+0x89c>)
 8003cee:	edd3 5a01 	vldr	s11, [r3, #4]
 8003cf2:	eddf 2a60 	vldr	s5, [pc, #384]	@ 8003e74 <Gait_controller+0x8a0>
 8003cf6:	eeb0 2a65 	vmov.f32	s4, s11
 8003cfa:	eef0 1a46 	vmov.f32	s3, s12
 8003cfe:	4965      	ldr	r1, [pc, #404]	@ (8003e94 <Gait_controller+0x8c0>)
 8003d00:	eeb0 1a47 	vmov.f32	s2, s14
 8003d04:	eef0 0a67 	vmov.f32	s1, s15
 8003d08:	eeb0 0a66 	vmov.f32	s0, s13
 8003d0c:	4862      	ldr	r0, [pc, #392]	@ (8003e98 <Gait_controller+0x8c4>)
 8003d0e:	f7ff fabb 	bl	8003288 <load_leg_position>
			break;
 8003d12:	f001 b876 	b.w	8004e02 <Gait_controller+0x182e>
		case 5:
			load_leg_position(FL_position,-x_setpoint - x_translation,-y_setpoint - y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003d16:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d1a:	eeb1 7a67 	vneg.f32	s14, s15
 8003d1e:	4b51      	ldr	r3, [pc, #324]	@ (8003e64 <Gait_controller+0x890>)
 8003d20:	edd3 7a00 	vldr	s15, [r3]
 8003d24:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003d28:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d2c:	eeb1 7a67 	vneg.f32	s14, s15
 8003d30:	4b4d      	ldr	r3, [pc, #308]	@ (8003e68 <Gait_controller+0x894>)
 8003d32:	edd3 7a00 	vldr	s15, [r3]
 8003d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d3a:	4b4c      	ldr	r3, [pc, #304]	@ (8003e6c <Gait_controller+0x898>)
 8003d3c:	ed93 7a00 	vldr	s14, [r3]
 8003d40:	4b4b      	ldr	r3, [pc, #300]	@ (8003e70 <Gait_controller+0x89c>)
 8003d42:	ed93 6a00 	vldr	s12, [r3]
 8003d46:	4b4a      	ldr	r3, [pc, #296]	@ (8003e70 <Gait_controller+0x89c>)
 8003d48:	edd3 5a01 	vldr	s11, [r3, #4]
 8003d4c:	eddf 2a49 	vldr	s5, [pc, #292]	@ 8003e74 <Gait_controller+0x8a0>
 8003d50:	eeb0 2a65 	vmov.f32	s4, s11
 8003d54:	eef0 1a46 	vmov.f32	s3, s12
 8003d58:	4947      	ldr	r1, [pc, #284]	@ (8003e78 <Gait_controller+0x8a4>)
 8003d5a:	eeb0 1a47 	vmov.f32	s2, s14
 8003d5e:	eef0 0a67 	vmov.f32	s1, s15
 8003d62:	eeb0 0a66 	vmov.f32	s0, s13
 8003d66:	4845      	ldr	r0, [pc, #276]	@ (8003e7c <Gait_controller+0x8a8>)
 8003d68:	f7ff fa8e 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,x_setpoint - x_translation,y_setpoint  - y_translation,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003d6c:	4b3d      	ldr	r3, [pc, #244]	@ (8003e64 <Gait_controller+0x890>)
 8003d6e:	edd3 7a00 	vldr	s15, [r3]
 8003d72:	ed97 7a02 	vldr	s14, [r7, #8]
 8003d76:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003d7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e68 <Gait_controller+0x894>)
 8003d7c:	edd3 7a00 	vldr	s15, [r3]
 8003d80:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d88:	4b38      	ldr	r3, [pc, #224]	@ (8003e6c <Gait_controller+0x898>)
 8003d8a:	ed93 7a00 	vldr	s14, [r3]
 8003d8e:	4b38      	ldr	r3, [pc, #224]	@ (8003e70 <Gait_controller+0x89c>)
 8003d90:	ed93 6a00 	vldr	s12, [r3]
 8003d94:	4b36      	ldr	r3, [pc, #216]	@ (8003e70 <Gait_controller+0x89c>)
 8003d96:	edd3 5a01 	vldr	s11, [r3, #4]
 8003d9a:	eddf 2a36 	vldr	s5, [pc, #216]	@ 8003e74 <Gait_controller+0x8a0>
 8003d9e:	eeb0 2a65 	vmov.f32	s4, s11
 8003da2:	eef0 1a46 	vmov.f32	s3, s12
 8003da6:	4937      	ldr	r1, [pc, #220]	@ (8003e84 <Gait_controller+0x8b0>)
 8003da8:	eeb0 1a47 	vmov.f32	s2, s14
 8003dac:	eef0 0a67 	vmov.f32	s1, s15
 8003db0:	eeb0 0a66 	vmov.f32	s0, s13
 8003db4:	4834      	ldr	r0, [pc, #208]	@ (8003e88 <Gait_controller+0x8b4>)
 8003db6:	f7ff fa67 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,-x_setpoint - x_translation,-y_setpoint - y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003dba:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dbe:	eeb1 7a67 	vneg.f32	s14, s15
 8003dc2:	4b28      	ldr	r3, [pc, #160]	@ (8003e64 <Gait_controller+0x890>)
 8003dc4:	edd3 7a00 	vldr	s15, [r3]
 8003dc8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003dcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dd0:	eeb1 7a67 	vneg.f32	s14, s15
 8003dd4:	4b24      	ldr	r3, [pc, #144]	@ (8003e68 <Gait_controller+0x894>)
 8003dd6:	edd3 7a00 	vldr	s15, [r3]
 8003dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dde:	4b23      	ldr	r3, [pc, #140]	@ (8003e6c <Gait_controller+0x898>)
 8003de0:	ed93 7a00 	vldr	s14, [r3]
 8003de4:	4b22      	ldr	r3, [pc, #136]	@ (8003e70 <Gait_controller+0x89c>)
 8003de6:	ed93 6a00 	vldr	s12, [r3]
 8003dea:	4b21      	ldr	r3, [pc, #132]	@ (8003e70 <Gait_controller+0x89c>)
 8003dec:	edd3 5a01 	vldr	s11, [r3, #4]
 8003df0:	eddf 2a20 	vldr	s5, [pc, #128]	@ 8003e74 <Gait_controller+0x8a0>
 8003df4:	eeb0 2a65 	vmov.f32	s4, s11
 8003df8:	eef0 1a46 	vmov.f32	s3, s12
 8003dfc:	4923      	ldr	r1, [pc, #140]	@ (8003e8c <Gait_controller+0x8b8>)
 8003dfe:	eeb0 1a47 	vmov.f32	s2, s14
 8003e02:	eef0 0a67 	vmov.f32	s1, s15
 8003e06:	eeb0 0a66 	vmov.f32	s0, s13
 8003e0a:	4821      	ldr	r0, [pc, #132]	@ (8003e90 <Gait_controller+0x8bc>)
 8003e0c:	f7ff fa3c 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,x_setpoint - x_translation,y_setpoint  - y_translation,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003e10:	4b14      	ldr	r3, [pc, #80]	@ (8003e64 <Gait_controller+0x890>)
 8003e12:	edd3 7a00 	vldr	s15, [r3]
 8003e16:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e1a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003e1e:	4b12      	ldr	r3, [pc, #72]	@ (8003e68 <Gait_controller+0x894>)
 8003e20:	edd3 7a00 	vldr	s15, [r3]
 8003e24:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e6c <Gait_controller+0x898>)
 8003e2e:	ed93 7a00 	vldr	s14, [r3]
 8003e32:	4b0f      	ldr	r3, [pc, #60]	@ (8003e70 <Gait_controller+0x89c>)
 8003e34:	ed93 6a00 	vldr	s12, [r3]
 8003e38:	4b0d      	ldr	r3, [pc, #52]	@ (8003e70 <Gait_controller+0x89c>)
 8003e3a:	edd3 5a01 	vldr	s11, [r3, #4]
 8003e3e:	eddf 2a0d 	vldr	s5, [pc, #52]	@ 8003e74 <Gait_controller+0x8a0>
 8003e42:	eeb0 2a65 	vmov.f32	s4, s11
 8003e46:	eef0 1a46 	vmov.f32	s3, s12
 8003e4a:	4912      	ldr	r1, [pc, #72]	@ (8003e94 <Gait_controller+0x8c0>)
 8003e4c:	eeb0 1a47 	vmov.f32	s2, s14
 8003e50:	eef0 0a67 	vmov.f32	s1, s15
 8003e54:	eeb0 0a66 	vmov.f32	s0, s13
 8003e58:	480f      	ldr	r0, [pc, #60]	@ (8003e98 <Gait_controller+0x8c4>)
 8003e5a:	f7ff fa15 	bl	8003288 <load_leg_position>
			break;
 8003e5e:	f000 bfd0 	b.w	8004e02 <Gait_controller+0x182e>
 8003e62:	bf00      	nop
 8003e64:	20000098 	.word	0x20000098
 8003e68:	2000009c 	.word	0x2000009c
 8003e6c:	200000a0 	.word	0x200000a0
 8003e70:	200002b0 	.word	0x200002b0
 8003e74:	00000000 	.word	0x00000000
 8003e78:	20000250 	.word	0x20000250
 8003e7c:	20000000 	.word	0x20000000
 8003e80:	20000090 	.word	0x20000090
 8003e84:	2000025c 	.word	0x2000025c
 8003e88:	2000000c 	.word	0x2000000c
 8003e8c:	20000268 	.word	0x20000268
 8003e90:	20000018 	.word	0x20000018
 8003e94:	20000274 	.word	0x20000274
 8003e98:	20000024 	.word	0x20000024
		case 6:
			load_leg_position(FL_position,-x_setpoint - x_translation,-y_setpoint - y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003e9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ea0:	eeb1 7a67 	vneg.f32	s14, s15
 8003ea4:	4ba6      	ldr	r3, [pc, #664]	@ (8004140 <Gait_controller+0xb6c>)
 8003ea6:	edd3 7a00 	vldr	s15, [r3]
 8003eaa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003eae:	edd7 7a01 	vldr	s15, [r7, #4]
 8003eb2:	eeb1 7a67 	vneg.f32	s14, s15
 8003eb6:	4ba3      	ldr	r3, [pc, #652]	@ (8004144 <Gait_controller+0xb70>)
 8003eb8:	edd3 7a00 	vldr	s15, [r3]
 8003ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ec0:	4ba1      	ldr	r3, [pc, #644]	@ (8004148 <Gait_controller+0xb74>)
 8003ec2:	ed93 7a00 	vldr	s14, [r3]
 8003ec6:	4ba1      	ldr	r3, [pc, #644]	@ (800414c <Gait_controller+0xb78>)
 8003ec8:	ed93 6a00 	vldr	s12, [r3]
 8003ecc:	4b9f      	ldr	r3, [pc, #636]	@ (800414c <Gait_controller+0xb78>)
 8003ece:	edd3 5a01 	vldr	s11, [r3, #4]
 8003ed2:	eddf 2a9f 	vldr	s5, [pc, #636]	@ 8004150 <Gait_controller+0xb7c>
 8003ed6:	eeb0 2a65 	vmov.f32	s4, s11
 8003eda:	eef0 1a46 	vmov.f32	s3, s12
 8003ede:	499d      	ldr	r1, [pc, #628]	@ (8004154 <Gait_controller+0xb80>)
 8003ee0:	eeb0 1a47 	vmov.f32	s2, s14
 8003ee4:	eef0 0a67 	vmov.f32	s1, s15
 8003ee8:	eeb0 0a66 	vmov.f32	s0, s13
 8003eec:	489a      	ldr	r0, [pc, #616]	@ (8004158 <Gait_controller+0xb84>)
 8003eee:	f7ff f9cb 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,x_setpoint - x_translation,y_setpoint  - y_translation,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003ef2:	4b93      	ldr	r3, [pc, #588]	@ (8004140 <Gait_controller+0xb6c>)
 8003ef4:	edd3 7a00 	vldr	s15, [r3]
 8003ef8:	ed97 7a02 	vldr	s14, [r7, #8]
 8003efc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003f00:	4b90      	ldr	r3, [pc, #576]	@ (8004144 <Gait_controller+0xb70>)
 8003f02:	edd3 7a00 	vldr	s15, [r3]
 8003f06:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f0e:	4b8e      	ldr	r3, [pc, #568]	@ (8004148 <Gait_controller+0xb74>)
 8003f10:	ed93 7a00 	vldr	s14, [r3]
 8003f14:	4b8d      	ldr	r3, [pc, #564]	@ (800414c <Gait_controller+0xb78>)
 8003f16:	ed93 6a00 	vldr	s12, [r3]
 8003f1a:	4b8c      	ldr	r3, [pc, #560]	@ (800414c <Gait_controller+0xb78>)
 8003f1c:	edd3 5a01 	vldr	s11, [r3, #4]
 8003f20:	eddf 2a8b 	vldr	s5, [pc, #556]	@ 8004150 <Gait_controller+0xb7c>
 8003f24:	eeb0 2a65 	vmov.f32	s4, s11
 8003f28:	eef0 1a46 	vmov.f32	s3, s12
 8003f2c:	498b      	ldr	r1, [pc, #556]	@ (800415c <Gait_controller+0xb88>)
 8003f2e:	eeb0 1a47 	vmov.f32	s2, s14
 8003f32:	eef0 0a67 	vmov.f32	s1, s15
 8003f36:	eeb0 0a66 	vmov.f32	s0, s13
 8003f3a:	4889      	ldr	r0, [pc, #548]	@ (8004160 <Gait_controller+0xb8c>)
 8003f3c:	f7ff f9a4 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,-x_setpoint - x_translation,-y_setpoint - y_translation,body_height - step_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003f40:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f44:	eeb1 7a67 	vneg.f32	s14, s15
 8003f48:	4b7d      	ldr	r3, [pc, #500]	@ (8004140 <Gait_controller+0xb6c>)
 8003f4a:	edd3 7a00 	vldr	s15, [r3]
 8003f4e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f56:	eeb1 7a67 	vneg.f32	s14, s15
 8003f5a:	4b7a      	ldr	r3, [pc, #488]	@ (8004144 <Gait_controller+0xb70>)
 8003f5c:	edd3 7a00 	vldr	s15, [r3]
 8003f60:	ee37 6a67 	vsub.f32	s12, s14, s15
 8003f64:	4b78      	ldr	r3, [pc, #480]	@ (8004148 <Gait_controller+0xb74>)
 8003f66:	ed93 7a00 	vldr	s14, [r3]
 8003f6a:	4b7e      	ldr	r3, [pc, #504]	@ (8004164 <Gait_controller+0xb90>)
 8003f6c:	edd3 7a00 	vldr	s15, [r3]
 8003f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f74:	4b75      	ldr	r3, [pc, #468]	@ (800414c <Gait_controller+0xb78>)
 8003f76:	ed93 7a00 	vldr	s14, [r3]
 8003f7a:	4b74      	ldr	r3, [pc, #464]	@ (800414c <Gait_controller+0xb78>)
 8003f7c:	edd3 5a01 	vldr	s11, [r3, #4]
 8003f80:	eddf 2a73 	vldr	s5, [pc, #460]	@ 8004150 <Gait_controller+0xb7c>
 8003f84:	eeb0 2a65 	vmov.f32	s4, s11
 8003f88:	eef0 1a47 	vmov.f32	s3, s14
 8003f8c:	4976      	ldr	r1, [pc, #472]	@ (8004168 <Gait_controller+0xb94>)
 8003f8e:	eeb0 1a67 	vmov.f32	s2, s15
 8003f92:	eef0 0a46 	vmov.f32	s1, s12
 8003f96:	eeb0 0a66 	vmov.f32	s0, s13
 8003f9a:	4874      	ldr	r0, [pc, #464]	@ (800416c <Gait_controller+0xb98>)
 8003f9c:	f7ff f974 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,x_setpoint - x_translation,y_setpoint  - y_translation,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 8003fa0:	4b67      	ldr	r3, [pc, #412]	@ (8004140 <Gait_controller+0xb6c>)
 8003fa2:	edd3 7a00 	vldr	s15, [r3]
 8003fa6:	ed97 7a02 	vldr	s14, [r7, #8]
 8003faa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003fae:	4b65      	ldr	r3, [pc, #404]	@ (8004144 <Gait_controller+0xb70>)
 8003fb0:	edd3 7a00 	vldr	s15, [r3]
 8003fb4:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fbc:	4b62      	ldr	r3, [pc, #392]	@ (8004148 <Gait_controller+0xb74>)
 8003fbe:	ed93 7a00 	vldr	s14, [r3]
 8003fc2:	4b62      	ldr	r3, [pc, #392]	@ (800414c <Gait_controller+0xb78>)
 8003fc4:	ed93 6a00 	vldr	s12, [r3]
 8003fc8:	4b60      	ldr	r3, [pc, #384]	@ (800414c <Gait_controller+0xb78>)
 8003fca:	edd3 5a01 	vldr	s11, [r3, #4]
 8003fce:	eddf 2a60 	vldr	s5, [pc, #384]	@ 8004150 <Gait_controller+0xb7c>
 8003fd2:	eeb0 2a65 	vmov.f32	s4, s11
 8003fd6:	eef0 1a46 	vmov.f32	s3, s12
 8003fda:	4965      	ldr	r1, [pc, #404]	@ (8004170 <Gait_controller+0xb9c>)
 8003fdc:	eeb0 1a47 	vmov.f32	s2, s14
 8003fe0:	eef0 0a67 	vmov.f32	s1, s15
 8003fe4:	eeb0 0a66 	vmov.f32	s0, s13
 8003fe8:	4862      	ldr	r0, [pc, #392]	@ (8004174 <Gait_controller+0xba0>)
 8003fea:	f7ff f94d 	bl	8003288 <load_leg_position>
			break;
 8003fee:	f000 bf08 	b.w	8004e02 <Gait_controller+0x182e>
		case 7:
			load_leg_position(FL_position,-x_setpoint - x_translation,-y_setpoint - y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 8003ff2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ff6:	eeb1 7a67 	vneg.f32	s14, s15
 8003ffa:	4b51      	ldr	r3, [pc, #324]	@ (8004140 <Gait_controller+0xb6c>)
 8003ffc:	edd3 7a00 	vldr	s15, [r3]
 8004000:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004004:	edd7 7a01 	vldr	s15, [r7, #4]
 8004008:	eeb1 7a67 	vneg.f32	s14, s15
 800400c:	4b4d      	ldr	r3, [pc, #308]	@ (8004144 <Gait_controller+0xb70>)
 800400e:	edd3 7a00 	vldr	s15, [r3]
 8004012:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004016:	4b4c      	ldr	r3, [pc, #304]	@ (8004148 <Gait_controller+0xb74>)
 8004018:	ed93 7a00 	vldr	s14, [r3]
 800401c:	4b4b      	ldr	r3, [pc, #300]	@ (800414c <Gait_controller+0xb78>)
 800401e:	ed93 6a00 	vldr	s12, [r3]
 8004022:	4b4a      	ldr	r3, [pc, #296]	@ (800414c <Gait_controller+0xb78>)
 8004024:	edd3 5a01 	vldr	s11, [r3, #4]
 8004028:	eddf 2a49 	vldr	s5, [pc, #292]	@ 8004150 <Gait_controller+0xb7c>
 800402c:	eeb0 2a65 	vmov.f32	s4, s11
 8004030:	eef0 1a46 	vmov.f32	s3, s12
 8004034:	4947      	ldr	r1, [pc, #284]	@ (8004154 <Gait_controller+0xb80>)
 8004036:	eeb0 1a47 	vmov.f32	s2, s14
 800403a:	eef0 0a67 	vmov.f32	s1, s15
 800403e:	eeb0 0a66 	vmov.f32	s0, s13
 8004042:	4845      	ldr	r0, [pc, #276]	@ (8004158 <Gait_controller+0xb84>)
 8004044:	f7ff f920 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,0.0 - x_translation,0.0  - y_translation,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 8004048:	4b3d      	ldr	r3, [pc, #244]	@ (8004140 <Gait_controller+0xb6c>)
 800404a:	edd3 7a00 	vldr	s15, [r3]
 800404e:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8004150 <Gait_controller+0xb7c>
 8004052:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004056:	4b3b      	ldr	r3, [pc, #236]	@ (8004144 <Gait_controller+0xb70>)
 8004058:	edd3 7a00 	vldr	s15, [r3]
 800405c:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8004150 <Gait_controller+0xb7c>
 8004060:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004064:	4b38      	ldr	r3, [pc, #224]	@ (8004148 <Gait_controller+0xb74>)
 8004066:	edd3 6a00 	vldr	s13, [r3]
 800406a:	4b38      	ldr	r3, [pc, #224]	@ (800414c <Gait_controller+0xb78>)
 800406c:	ed93 6a00 	vldr	s12, [r3]
 8004070:	4b36      	ldr	r3, [pc, #216]	@ (800414c <Gait_controller+0xb78>)
 8004072:	edd3 5a01 	vldr	s11, [r3, #4]
 8004076:	eddf 2a36 	vldr	s5, [pc, #216]	@ 8004150 <Gait_controller+0xb7c>
 800407a:	eeb0 2a65 	vmov.f32	s4, s11
 800407e:	eef0 1a46 	vmov.f32	s3, s12
 8004082:	4936      	ldr	r1, [pc, #216]	@ (800415c <Gait_controller+0xb88>)
 8004084:	eeb0 1a66 	vmov.f32	s2, s13
 8004088:	eef0 0a67 	vmov.f32	s1, s15
 800408c:	eeb0 0a47 	vmov.f32	s0, s14
 8004090:	4833      	ldr	r0, [pc, #204]	@ (8004160 <Gait_controller+0xb8c>)
 8004092:	f7ff f8f9 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,x_setpoint - x_translation,y_setpoint- y_translation ,body_height - step_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 8004096:	4b2a      	ldr	r3, [pc, #168]	@ (8004140 <Gait_controller+0xb6c>)
 8004098:	edd3 7a00 	vldr	s15, [r3]
 800409c:	ed97 7a02 	vldr	s14, [r7, #8]
 80040a0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80040a4:	4b27      	ldr	r3, [pc, #156]	@ (8004144 <Gait_controller+0xb70>)
 80040a6:	edd3 7a00 	vldr	s15, [r3]
 80040aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80040ae:	ee37 6a67 	vsub.f32	s12, s14, s15
 80040b2:	4b25      	ldr	r3, [pc, #148]	@ (8004148 <Gait_controller+0xb74>)
 80040b4:	ed93 7a00 	vldr	s14, [r3]
 80040b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004164 <Gait_controller+0xb90>)
 80040ba:	edd3 7a00 	vldr	s15, [r3]
 80040be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040c2:	4b22      	ldr	r3, [pc, #136]	@ (800414c <Gait_controller+0xb78>)
 80040c4:	ed93 7a00 	vldr	s14, [r3]
 80040c8:	4b20      	ldr	r3, [pc, #128]	@ (800414c <Gait_controller+0xb78>)
 80040ca:	edd3 5a01 	vldr	s11, [r3, #4]
 80040ce:	eddf 2a20 	vldr	s5, [pc, #128]	@ 8004150 <Gait_controller+0xb7c>
 80040d2:	eeb0 2a65 	vmov.f32	s4, s11
 80040d6:	eef0 1a47 	vmov.f32	s3, s14
 80040da:	4923      	ldr	r1, [pc, #140]	@ (8004168 <Gait_controller+0xb94>)
 80040dc:	eeb0 1a67 	vmov.f32	s2, s15
 80040e0:	eef0 0a46 	vmov.f32	s1, s12
 80040e4:	eeb0 0a66 	vmov.f32	s0, s13
 80040e8:	4820      	ldr	r0, [pc, #128]	@ (800416c <Gait_controller+0xb98>)
 80040ea:	f7ff f8cd 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,0.0 - x_translation,0.0 - y_translation ,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 80040ee:	4b14      	ldr	r3, [pc, #80]	@ (8004140 <Gait_controller+0xb6c>)
 80040f0:	edd3 7a00 	vldr	s15, [r3]
 80040f4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8004150 <Gait_controller+0xb7c>
 80040f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040fc:	4b11      	ldr	r3, [pc, #68]	@ (8004144 <Gait_controller+0xb70>)
 80040fe:	edd3 7a00 	vldr	s15, [r3]
 8004102:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8004150 <Gait_controller+0xb7c>
 8004106:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800410a:	4b0f      	ldr	r3, [pc, #60]	@ (8004148 <Gait_controller+0xb74>)
 800410c:	edd3 6a00 	vldr	s13, [r3]
 8004110:	4b0e      	ldr	r3, [pc, #56]	@ (800414c <Gait_controller+0xb78>)
 8004112:	ed93 6a00 	vldr	s12, [r3]
 8004116:	4b0d      	ldr	r3, [pc, #52]	@ (800414c <Gait_controller+0xb78>)
 8004118:	edd3 5a01 	vldr	s11, [r3, #4]
 800411c:	eddf 2a0c 	vldr	s5, [pc, #48]	@ 8004150 <Gait_controller+0xb7c>
 8004120:	eeb0 2a65 	vmov.f32	s4, s11
 8004124:	eef0 1a46 	vmov.f32	s3, s12
 8004128:	4911      	ldr	r1, [pc, #68]	@ (8004170 <Gait_controller+0xb9c>)
 800412a:	eeb0 1a66 	vmov.f32	s2, s13
 800412e:	eef0 0a67 	vmov.f32	s1, s15
 8004132:	eeb0 0a47 	vmov.f32	s0, s14
 8004136:	480f      	ldr	r0, [pc, #60]	@ (8004174 <Gait_controller+0xba0>)
 8004138:	f7ff f8a6 	bl	8003288 <load_leg_position>
			break;
 800413c:	f000 be61 	b.w	8004e02 <Gait_controller+0x182e>
 8004140:	20000098 	.word	0x20000098
 8004144:	2000009c 	.word	0x2000009c
 8004148:	200000a0 	.word	0x200000a0
 800414c:	200002b0 	.word	0x200002b0
 8004150:	00000000 	.word	0x00000000
 8004154:	20000250 	.word	0x20000250
 8004158:	20000000 	.word	0x20000000
 800415c:	2000025c 	.word	0x2000025c
 8004160:	2000000c 	.word	0x2000000c
 8004164:	20000090 	.word	0x20000090
 8004168:	20000268 	.word	0x20000268
 800416c:	20000018 	.word	0x20000018
 8004170:	20000274 	.word	0x20000274
 8004174:	20000024 	.word	0x20000024
		case 8:
			load_leg_position(FL_position,-x_setpoint - x_translation,-y_setpoint- y_translation ,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 8004178:	edd7 7a02 	vldr	s15, [r7, #8]
 800417c:	eeb1 7a67 	vneg.f32	s14, s15
 8004180:	4ba2      	ldr	r3, [pc, #648]	@ (800440c <Gait_controller+0xe38>)
 8004182:	edd3 7a00 	vldr	s15, [r3]
 8004186:	ee77 6a67 	vsub.f32	s13, s14, s15
 800418a:	edd7 7a01 	vldr	s15, [r7, #4]
 800418e:	eeb1 7a67 	vneg.f32	s14, s15
 8004192:	4b9f      	ldr	r3, [pc, #636]	@ (8004410 <Gait_controller+0xe3c>)
 8004194:	edd3 7a00 	vldr	s15, [r3]
 8004198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800419c:	4b9d      	ldr	r3, [pc, #628]	@ (8004414 <Gait_controller+0xe40>)
 800419e:	ed93 7a00 	vldr	s14, [r3]
 80041a2:	4b9d      	ldr	r3, [pc, #628]	@ (8004418 <Gait_controller+0xe44>)
 80041a4:	ed93 6a00 	vldr	s12, [r3]
 80041a8:	4b9b      	ldr	r3, [pc, #620]	@ (8004418 <Gait_controller+0xe44>)
 80041aa:	edd3 5a01 	vldr	s11, [r3, #4]
 80041ae:	eddf 2a9b 	vldr	s5, [pc, #620]	@ 800441c <Gait_controller+0xe48>
 80041b2:	eeb0 2a65 	vmov.f32	s4, s11
 80041b6:	eef0 1a46 	vmov.f32	s3, s12
 80041ba:	4999      	ldr	r1, [pc, #612]	@ (8004420 <Gait_controller+0xe4c>)
 80041bc:	eeb0 1a47 	vmov.f32	s2, s14
 80041c0:	eef0 0a67 	vmov.f32	s1, s15
 80041c4:	eeb0 0a66 	vmov.f32	s0, s13
 80041c8:	4896      	ldr	r0, [pc, #600]	@ (8004424 <Gait_controller+0xe50>)
 80041ca:	f7ff f85d 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,0.0 - x_translation,0.0 - y_translation ,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 80041ce:	4b8f      	ldr	r3, [pc, #572]	@ (800440c <Gait_controller+0xe38>)
 80041d0:	edd3 7a00 	vldr	s15, [r3]
 80041d4:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800441c <Gait_controller+0xe48>
 80041d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041dc:	4b8c      	ldr	r3, [pc, #560]	@ (8004410 <Gait_controller+0xe3c>)
 80041de:	edd3 7a00 	vldr	s15, [r3]
 80041e2:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 800441c <Gait_controller+0xe48>
 80041e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80041ea:	4b8a      	ldr	r3, [pc, #552]	@ (8004414 <Gait_controller+0xe40>)
 80041ec:	edd3 6a00 	vldr	s13, [r3]
 80041f0:	4b89      	ldr	r3, [pc, #548]	@ (8004418 <Gait_controller+0xe44>)
 80041f2:	ed93 6a00 	vldr	s12, [r3]
 80041f6:	4b88      	ldr	r3, [pc, #544]	@ (8004418 <Gait_controller+0xe44>)
 80041f8:	edd3 5a01 	vldr	s11, [r3, #4]
 80041fc:	eddf 2a87 	vldr	s5, [pc, #540]	@ 800441c <Gait_controller+0xe48>
 8004200:	eeb0 2a65 	vmov.f32	s4, s11
 8004204:	eef0 1a46 	vmov.f32	s3, s12
 8004208:	4987      	ldr	r1, [pc, #540]	@ (8004428 <Gait_controller+0xe54>)
 800420a:	eeb0 1a66 	vmov.f32	s2, s13
 800420e:	eef0 0a67 	vmov.f32	s1, s15
 8004212:	eeb0 0a47 	vmov.f32	s0, s14
 8004216:	4885      	ldr	r0, [pc, #532]	@ (800442c <Gait_controller+0xe58>)
 8004218:	f7ff f836 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,x_setpoint - x_translation,y_setpoint - y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 800421c:	4b7b      	ldr	r3, [pc, #492]	@ (800440c <Gait_controller+0xe38>)
 800421e:	edd3 7a00 	vldr	s15, [r3]
 8004222:	ed97 7a02 	vldr	s14, [r7, #8]
 8004226:	ee77 6a67 	vsub.f32	s13, s14, s15
 800422a:	4b79      	ldr	r3, [pc, #484]	@ (8004410 <Gait_controller+0xe3c>)
 800422c:	edd3 7a00 	vldr	s15, [r3]
 8004230:	ed97 7a01 	vldr	s14, [r7, #4]
 8004234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004238:	4b76      	ldr	r3, [pc, #472]	@ (8004414 <Gait_controller+0xe40>)
 800423a:	ed93 7a00 	vldr	s14, [r3]
 800423e:	4b76      	ldr	r3, [pc, #472]	@ (8004418 <Gait_controller+0xe44>)
 8004240:	ed93 6a00 	vldr	s12, [r3]
 8004244:	4b74      	ldr	r3, [pc, #464]	@ (8004418 <Gait_controller+0xe44>)
 8004246:	edd3 5a01 	vldr	s11, [r3, #4]
 800424a:	eddf 2a74 	vldr	s5, [pc, #464]	@ 800441c <Gait_controller+0xe48>
 800424e:	eeb0 2a65 	vmov.f32	s4, s11
 8004252:	eef0 1a46 	vmov.f32	s3, s12
 8004256:	4976      	ldr	r1, [pc, #472]	@ (8004430 <Gait_controller+0xe5c>)
 8004258:	eeb0 1a47 	vmov.f32	s2, s14
 800425c:	eef0 0a67 	vmov.f32	s1, s15
 8004260:	eeb0 0a66 	vmov.f32	s0, s13
 8004264:	4873      	ldr	r0, [pc, #460]	@ (8004434 <Gait_controller+0xe60>)
 8004266:	f7ff f80f 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,0.0 - x_translation,0.0 - y_translation ,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 800426a:	4b68      	ldr	r3, [pc, #416]	@ (800440c <Gait_controller+0xe38>)
 800426c:	edd3 7a00 	vldr	s15, [r3]
 8004270:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800441c <Gait_controller+0xe48>
 8004274:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004278:	4b65      	ldr	r3, [pc, #404]	@ (8004410 <Gait_controller+0xe3c>)
 800427a:	edd3 7a00 	vldr	s15, [r3]
 800427e:	eddf 6a67 	vldr	s13, [pc, #412]	@ 800441c <Gait_controller+0xe48>
 8004282:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004286:	4b63      	ldr	r3, [pc, #396]	@ (8004414 <Gait_controller+0xe40>)
 8004288:	edd3 6a00 	vldr	s13, [r3]
 800428c:	4b62      	ldr	r3, [pc, #392]	@ (8004418 <Gait_controller+0xe44>)
 800428e:	ed93 6a00 	vldr	s12, [r3]
 8004292:	4b61      	ldr	r3, [pc, #388]	@ (8004418 <Gait_controller+0xe44>)
 8004294:	edd3 5a01 	vldr	s11, [r3, #4]
 8004298:	eddf 2a60 	vldr	s5, [pc, #384]	@ 800441c <Gait_controller+0xe48>
 800429c:	eeb0 2a65 	vmov.f32	s4, s11
 80042a0:	eef0 1a46 	vmov.f32	s3, s12
 80042a4:	4964      	ldr	r1, [pc, #400]	@ (8004438 <Gait_controller+0xe64>)
 80042a6:	eeb0 1a66 	vmov.f32	s2, s13
 80042aa:	eef0 0a67 	vmov.f32	s1, s15
 80042ae:	eeb0 0a47 	vmov.f32	s0, s14
 80042b2:	4862      	ldr	r0, [pc, #392]	@ (800443c <Gait_controller+0xe68>)
 80042b4:	f7fe ffe8 	bl	8003288 <load_leg_position>
			break;
 80042b8:	f000 bda3 	b.w	8004e02 <Gait_controller+0x182e>

		case 9:
			load_leg_position(FL_position,-x_setpoint - x_translation,-y_setpoint - y_translation,body_height - step_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 80042bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80042c0:	eeb1 7a67 	vneg.f32	s14, s15
 80042c4:	4b51      	ldr	r3, [pc, #324]	@ (800440c <Gait_controller+0xe38>)
 80042c6:	edd3 7a00 	vldr	s15, [r3]
 80042ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80042ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80042d2:	eeb1 7a67 	vneg.f32	s14, s15
 80042d6:	4b4e      	ldr	r3, [pc, #312]	@ (8004410 <Gait_controller+0xe3c>)
 80042d8:	edd3 7a00 	vldr	s15, [r3]
 80042dc:	ee37 6a67 	vsub.f32	s12, s14, s15
 80042e0:	4b4c      	ldr	r3, [pc, #304]	@ (8004414 <Gait_controller+0xe40>)
 80042e2:	ed93 7a00 	vldr	s14, [r3]
 80042e6:	4b56      	ldr	r3, [pc, #344]	@ (8004440 <Gait_controller+0xe6c>)
 80042e8:	edd3 7a00 	vldr	s15, [r3]
 80042ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042f0:	4b49      	ldr	r3, [pc, #292]	@ (8004418 <Gait_controller+0xe44>)
 80042f2:	ed93 7a00 	vldr	s14, [r3]
 80042f6:	4b48      	ldr	r3, [pc, #288]	@ (8004418 <Gait_controller+0xe44>)
 80042f8:	edd3 5a01 	vldr	s11, [r3, #4]
 80042fc:	eddf 2a47 	vldr	s5, [pc, #284]	@ 800441c <Gait_controller+0xe48>
 8004300:	eeb0 2a65 	vmov.f32	s4, s11
 8004304:	eef0 1a47 	vmov.f32	s3, s14
 8004308:	4945      	ldr	r1, [pc, #276]	@ (8004420 <Gait_controller+0xe4c>)
 800430a:	eeb0 1a67 	vmov.f32	s2, s15
 800430e:	eef0 0a46 	vmov.f32	s1, s12
 8004312:	eeb0 0a66 	vmov.f32	s0, s13
 8004316:	4843      	ldr	r0, [pc, #268]	@ (8004424 <Gait_controller+0xe50>)
 8004318:	f7fe ffb6 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,0.0 - x_translation,0.0 - y_translation ,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 800431c:	4b3b      	ldr	r3, [pc, #236]	@ (800440c <Gait_controller+0xe38>)
 800431e:	edd3 7a00 	vldr	s15, [r3]
 8004322:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800441c <Gait_controller+0xe48>
 8004326:	ee37 7a67 	vsub.f32	s14, s14, s15
 800432a:	4b39      	ldr	r3, [pc, #228]	@ (8004410 <Gait_controller+0xe3c>)
 800432c:	edd3 7a00 	vldr	s15, [r3]
 8004330:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 800441c <Gait_controller+0xe48>
 8004334:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004338:	4b36      	ldr	r3, [pc, #216]	@ (8004414 <Gait_controller+0xe40>)
 800433a:	edd3 6a00 	vldr	s13, [r3]
 800433e:	4b36      	ldr	r3, [pc, #216]	@ (8004418 <Gait_controller+0xe44>)
 8004340:	ed93 6a00 	vldr	s12, [r3]
 8004344:	4b34      	ldr	r3, [pc, #208]	@ (8004418 <Gait_controller+0xe44>)
 8004346:	edd3 5a01 	vldr	s11, [r3, #4]
 800434a:	eddf 2a34 	vldr	s5, [pc, #208]	@ 800441c <Gait_controller+0xe48>
 800434e:	eeb0 2a65 	vmov.f32	s4, s11
 8004352:	eef0 1a46 	vmov.f32	s3, s12
 8004356:	4934      	ldr	r1, [pc, #208]	@ (8004428 <Gait_controller+0xe54>)
 8004358:	eeb0 1a66 	vmov.f32	s2, s13
 800435c:	eef0 0a67 	vmov.f32	s1, s15
 8004360:	eeb0 0a47 	vmov.f32	s0, s14
 8004364:	4831      	ldr	r0, [pc, #196]	@ (800442c <Gait_controller+0xe58>)
 8004366:	f7fe ff8f 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,x_setpoint - x_translation,y_setpoint- y_translation ,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 800436a:	4b28      	ldr	r3, [pc, #160]	@ (800440c <Gait_controller+0xe38>)
 800436c:	edd3 7a00 	vldr	s15, [r3]
 8004370:	ed97 7a02 	vldr	s14, [r7, #8]
 8004374:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004378:	4b25      	ldr	r3, [pc, #148]	@ (8004410 <Gait_controller+0xe3c>)
 800437a:	edd3 7a00 	vldr	s15, [r3]
 800437e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004386:	4b23      	ldr	r3, [pc, #140]	@ (8004414 <Gait_controller+0xe40>)
 8004388:	ed93 7a00 	vldr	s14, [r3]
 800438c:	4b22      	ldr	r3, [pc, #136]	@ (8004418 <Gait_controller+0xe44>)
 800438e:	ed93 6a00 	vldr	s12, [r3]
 8004392:	4b21      	ldr	r3, [pc, #132]	@ (8004418 <Gait_controller+0xe44>)
 8004394:	edd3 5a01 	vldr	s11, [r3, #4]
 8004398:	eddf 2a20 	vldr	s5, [pc, #128]	@ 800441c <Gait_controller+0xe48>
 800439c:	eeb0 2a65 	vmov.f32	s4, s11
 80043a0:	eef0 1a46 	vmov.f32	s3, s12
 80043a4:	4922      	ldr	r1, [pc, #136]	@ (8004430 <Gait_controller+0xe5c>)
 80043a6:	eeb0 1a47 	vmov.f32	s2, s14
 80043aa:	eef0 0a67 	vmov.f32	s1, s15
 80043ae:	eeb0 0a66 	vmov.f32	s0, s13
 80043b2:	4820      	ldr	r0, [pc, #128]	@ (8004434 <Gait_controller+0xe60>)
 80043b4:	f7fe ff68 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,0.0 - x_translation,0.0 - y_translation ,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 80043b8:	4b14      	ldr	r3, [pc, #80]	@ (800440c <Gait_controller+0xe38>)
 80043ba:	edd3 7a00 	vldr	s15, [r3]
 80043be:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800441c <Gait_controller+0xe48>
 80043c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043c6:	4b12      	ldr	r3, [pc, #72]	@ (8004410 <Gait_controller+0xe3c>)
 80043c8:	edd3 7a00 	vldr	s15, [r3]
 80043cc:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800441c <Gait_controller+0xe48>
 80043d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80043d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004414 <Gait_controller+0xe40>)
 80043d6:	edd3 6a00 	vldr	s13, [r3]
 80043da:	4b0f      	ldr	r3, [pc, #60]	@ (8004418 <Gait_controller+0xe44>)
 80043dc:	ed93 6a00 	vldr	s12, [r3]
 80043e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004418 <Gait_controller+0xe44>)
 80043e2:	edd3 5a01 	vldr	s11, [r3, #4]
 80043e6:	eddf 2a0d 	vldr	s5, [pc, #52]	@ 800441c <Gait_controller+0xe48>
 80043ea:	eeb0 2a65 	vmov.f32	s4, s11
 80043ee:	eef0 1a46 	vmov.f32	s3, s12
 80043f2:	4911      	ldr	r1, [pc, #68]	@ (8004438 <Gait_controller+0xe64>)
 80043f4:	eeb0 1a66 	vmov.f32	s2, s13
 80043f8:	eef0 0a67 	vmov.f32	s1, s15
 80043fc:	eeb0 0a47 	vmov.f32	s0, s14
 8004400:	480e      	ldr	r0, [pc, #56]	@ (800443c <Gait_controller+0xe68>)
 8004402:	f7fe ff41 	bl	8003288 <load_leg_position>
			break;
 8004406:	f000 bcfc 	b.w	8004e02 <Gait_controller+0x182e>
 800440a:	bf00      	nop
 800440c:	20000098 	.word	0x20000098
 8004410:	2000009c 	.word	0x2000009c
 8004414:	200000a0 	.word	0x200000a0
 8004418:	200002b0 	.word	0x200002b0
 800441c:	00000000 	.word	0x00000000
 8004420:	20000250 	.word	0x20000250
 8004424:	20000000 	.word	0x20000000
 8004428:	2000025c 	.word	0x2000025c
 800442c:	2000000c 	.word	0x2000000c
 8004430:	20000268 	.word	0x20000268
 8004434:	20000018 	.word	0x20000018
 8004438:	20000274 	.word	0x20000274
 800443c:	20000024 	.word	0x20000024
 8004440:	20000090 	.word	0x20000090
		case 10:
			load_leg_position(FL_position,x_setpoint - x_translation,y_setpoint- y_translation ,body_height - step_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 8004444:	4bb1      	ldr	r3, [pc, #708]	@ (800470c <Gait_controller+0x1138>)
 8004446:	edd3 7a00 	vldr	s15, [r3]
 800444a:	ed97 7a02 	vldr	s14, [r7, #8]
 800444e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004452:	4baf      	ldr	r3, [pc, #700]	@ (8004710 <Gait_controller+0x113c>)
 8004454:	edd3 7a00 	vldr	s15, [r3]
 8004458:	ed97 7a01 	vldr	s14, [r7, #4]
 800445c:	ee37 6a67 	vsub.f32	s12, s14, s15
 8004460:	4bac      	ldr	r3, [pc, #688]	@ (8004714 <Gait_controller+0x1140>)
 8004462:	ed93 7a00 	vldr	s14, [r3]
 8004466:	4bac      	ldr	r3, [pc, #688]	@ (8004718 <Gait_controller+0x1144>)
 8004468:	edd3 7a00 	vldr	s15, [r3]
 800446c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004470:	4baa      	ldr	r3, [pc, #680]	@ (800471c <Gait_controller+0x1148>)
 8004472:	ed93 7a00 	vldr	s14, [r3]
 8004476:	4ba9      	ldr	r3, [pc, #676]	@ (800471c <Gait_controller+0x1148>)
 8004478:	edd3 5a01 	vldr	s11, [r3, #4]
 800447c:	eddf 2aa8 	vldr	s5, [pc, #672]	@ 8004720 <Gait_controller+0x114c>
 8004480:	eeb0 2a65 	vmov.f32	s4, s11
 8004484:	eef0 1a47 	vmov.f32	s3, s14
 8004488:	49a6      	ldr	r1, [pc, #664]	@ (8004724 <Gait_controller+0x1150>)
 800448a:	eeb0 1a67 	vmov.f32	s2, s15
 800448e:	eef0 0a46 	vmov.f32	s1, s12
 8004492:	eeb0 0a66 	vmov.f32	s0, s13
 8004496:	48a4      	ldr	r0, [pc, #656]	@ (8004728 <Gait_controller+0x1154>)
 8004498:	f7fe fef6 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,-x_setpoint - x_translation,-y_setpoint - y_translation ,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 800449c:	edd7 7a02 	vldr	s15, [r7, #8]
 80044a0:	eeb1 7a67 	vneg.f32	s14, s15
 80044a4:	4b99      	ldr	r3, [pc, #612]	@ (800470c <Gait_controller+0x1138>)
 80044a6:	edd3 7a00 	vldr	s15, [r3]
 80044aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80044ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80044b2:	eeb1 7a67 	vneg.f32	s14, s15
 80044b6:	4b96      	ldr	r3, [pc, #600]	@ (8004710 <Gait_controller+0x113c>)
 80044b8:	edd3 7a00 	vldr	s15, [r3]
 80044bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044c0:	4b94      	ldr	r3, [pc, #592]	@ (8004714 <Gait_controller+0x1140>)
 80044c2:	ed93 7a00 	vldr	s14, [r3]
 80044c6:	4b95      	ldr	r3, [pc, #596]	@ (800471c <Gait_controller+0x1148>)
 80044c8:	ed93 6a00 	vldr	s12, [r3]
 80044cc:	4b93      	ldr	r3, [pc, #588]	@ (800471c <Gait_controller+0x1148>)
 80044ce:	edd3 5a01 	vldr	s11, [r3, #4]
 80044d2:	eddf 2a93 	vldr	s5, [pc, #588]	@ 8004720 <Gait_controller+0x114c>
 80044d6:	eeb0 2a65 	vmov.f32	s4, s11
 80044da:	eef0 1a46 	vmov.f32	s3, s12
 80044de:	4993      	ldr	r1, [pc, #588]	@ (800472c <Gait_controller+0x1158>)
 80044e0:	eeb0 1a47 	vmov.f32	s2, s14
 80044e4:	eef0 0a67 	vmov.f32	s1, s15
 80044e8:	eeb0 0a66 	vmov.f32	s0, s13
 80044ec:	4890      	ldr	r0, [pc, #576]	@ (8004730 <Gait_controller+0x115c>)
 80044ee:	f7fe fecb 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,x_setpoint - x_translation,y_setpoint - y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 80044f2:	4b86      	ldr	r3, [pc, #536]	@ (800470c <Gait_controller+0x1138>)
 80044f4:	edd3 7a00 	vldr	s15, [r3]
 80044f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80044fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004500:	4b83      	ldr	r3, [pc, #524]	@ (8004710 <Gait_controller+0x113c>)
 8004502:	edd3 7a00 	vldr	s15, [r3]
 8004506:	ed97 7a01 	vldr	s14, [r7, #4]
 800450a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800450e:	4b81      	ldr	r3, [pc, #516]	@ (8004714 <Gait_controller+0x1140>)
 8004510:	ed93 7a00 	vldr	s14, [r3]
 8004514:	4b81      	ldr	r3, [pc, #516]	@ (800471c <Gait_controller+0x1148>)
 8004516:	ed93 6a00 	vldr	s12, [r3]
 800451a:	4b80      	ldr	r3, [pc, #512]	@ (800471c <Gait_controller+0x1148>)
 800451c:	edd3 5a01 	vldr	s11, [r3, #4]
 8004520:	eddf 2a7f 	vldr	s5, [pc, #508]	@ 8004720 <Gait_controller+0x114c>
 8004524:	eeb0 2a65 	vmov.f32	s4, s11
 8004528:	eef0 1a46 	vmov.f32	s3, s12
 800452c:	4981      	ldr	r1, [pc, #516]	@ (8004734 <Gait_controller+0x1160>)
 800452e:	eeb0 1a47 	vmov.f32	s2, s14
 8004532:	eef0 0a67 	vmov.f32	s1, s15
 8004536:	eeb0 0a66 	vmov.f32	s0, s13
 800453a:	487f      	ldr	r0, [pc, #508]	@ (8004738 <Gait_controller+0x1164>)
 800453c:	f7fe fea4 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,-x_setpoint- x_translation ,-y_setpoint - y_translation ,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 8004540:	edd7 7a02 	vldr	s15, [r7, #8]
 8004544:	eeb1 7a67 	vneg.f32	s14, s15
 8004548:	4b70      	ldr	r3, [pc, #448]	@ (800470c <Gait_controller+0x1138>)
 800454a:	edd3 7a00 	vldr	s15, [r3]
 800454e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004552:	edd7 7a01 	vldr	s15, [r7, #4]
 8004556:	eeb1 7a67 	vneg.f32	s14, s15
 800455a:	4b6d      	ldr	r3, [pc, #436]	@ (8004710 <Gait_controller+0x113c>)
 800455c:	edd3 7a00 	vldr	s15, [r3]
 8004560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004564:	4b6b      	ldr	r3, [pc, #428]	@ (8004714 <Gait_controller+0x1140>)
 8004566:	ed93 7a00 	vldr	s14, [r3]
 800456a:	4b6c      	ldr	r3, [pc, #432]	@ (800471c <Gait_controller+0x1148>)
 800456c:	ed93 6a00 	vldr	s12, [r3]
 8004570:	4b6a      	ldr	r3, [pc, #424]	@ (800471c <Gait_controller+0x1148>)
 8004572:	edd3 5a01 	vldr	s11, [r3, #4]
 8004576:	eddf 2a6a 	vldr	s5, [pc, #424]	@ 8004720 <Gait_controller+0x114c>
 800457a:	eeb0 2a65 	vmov.f32	s4, s11
 800457e:	eef0 1a46 	vmov.f32	s3, s12
 8004582:	496e      	ldr	r1, [pc, #440]	@ (800473c <Gait_controller+0x1168>)
 8004584:	eeb0 1a47 	vmov.f32	s2, s14
 8004588:	eef0 0a67 	vmov.f32	s1, s15
 800458c:	eeb0 0a66 	vmov.f32	s0, s13
 8004590:	486b      	ldr	r0, [pc, #428]	@ (8004740 <Gait_controller+0x116c>)
 8004592:	f7fe fe79 	bl	8003288 <load_leg_position>
			break;
 8004596:	f000 bc34 	b.w	8004e02 <Gait_controller+0x182e>
		case 11:
			load_leg_position(FL_position,x_setpoint - x_translation,y_setpoint + y_translation,body_height, FL_body_angles, body_rotation[0], body_rotation[1], 0);
 800459a:	4b5c      	ldr	r3, [pc, #368]	@ (800470c <Gait_controller+0x1138>)
 800459c:	edd3 7a00 	vldr	s15, [r3]
 80045a0:	ed97 7a02 	vldr	s14, [r7, #8]
 80045a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80045a8:	4b59      	ldr	r3, [pc, #356]	@ (8004710 <Gait_controller+0x113c>)
 80045aa:	ed93 7a00 	vldr	s14, [r3]
 80045ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80045b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045b6:	4b57      	ldr	r3, [pc, #348]	@ (8004714 <Gait_controller+0x1140>)
 80045b8:	ed93 7a00 	vldr	s14, [r3]
 80045bc:	4b57      	ldr	r3, [pc, #348]	@ (800471c <Gait_controller+0x1148>)
 80045be:	ed93 6a00 	vldr	s12, [r3]
 80045c2:	4b56      	ldr	r3, [pc, #344]	@ (800471c <Gait_controller+0x1148>)
 80045c4:	edd3 5a01 	vldr	s11, [r3, #4]
 80045c8:	eddf 2a55 	vldr	s5, [pc, #340]	@ 8004720 <Gait_controller+0x114c>
 80045cc:	eeb0 2a65 	vmov.f32	s4, s11
 80045d0:	eef0 1a46 	vmov.f32	s3, s12
 80045d4:	4953      	ldr	r1, [pc, #332]	@ (8004724 <Gait_controller+0x1150>)
 80045d6:	eeb0 1a47 	vmov.f32	s2, s14
 80045da:	eef0 0a67 	vmov.f32	s1, s15
 80045de:	eeb0 0a66 	vmov.f32	s0, s13
 80045e2:	4851      	ldr	r0, [pc, #324]	@ (8004728 <Gait_controller+0x1154>)
 80045e4:	f7fe fe50 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,-x_setpoint - x_translation,-y_setpoint  + y_translation,body_height, FR_body_angles, body_rotation[0], body_rotation[1], 0);
 80045e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80045ec:	eeb1 7a67 	vneg.f32	s14, s15
 80045f0:	4b46      	ldr	r3, [pc, #280]	@ (800470c <Gait_controller+0x1138>)
 80045f2:	edd3 7a00 	vldr	s15, [r3]
 80045f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80045fa:	4b45      	ldr	r3, [pc, #276]	@ (8004710 <Gait_controller+0x113c>)
 80045fc:	ed93 7a00 	vldr	s14, [r3]
 8004600:	edd7 7a01 	vldr	s15, [r7, #4]
 8004604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004608:	4b42      	ldr	r3, [pc, #264]	@ (8004714 <Gait_controller+0x1140>)
 800460a:	ed93 7a00 	vldr	s14, [r3]
 800460e:	4b43      	ldr	r3, [pc, #268]	@ (800471c <Gait_controller+0x1148>)
 8004610:	ed93 6a00 	vldr	s12, [r3]
 8004614:	4b41      	ldr	r3, [pc, #260]	@ (800471c <Gait_controller+0x1148>)
 8004616:	edd3 5a01 	vldr	s11, [r3, #4]
 800461a:	eddf 2a41 	vldr	s5, [pc, #260]	@ 8004720 <Gait_controller+0x114c>
 800461e:	eeb0 2a65 	vmov.f32	s4, s11
 8004622:	eef0 1a46 	vmov.f32	s3, s12
 8004626:	4941      	ldr	r1, [pc, #260]	@ (800472c <Gait_controller+0x1158>)
 8004628:	eeb0 1a47 	vmov.f32	s2, s14
 800462c:	eef0 0a67 	vmov.f32	s1, s15
 8004630:	eeb0 0a66 	vmov.f32	s0, s13
 8004634:	483e      	ldr	r0, [pc, #248]	@ (8004730 <Gait_controller+0x115c>)
 8004636:	f7fe fe27 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,x_setpoint - x_translation,y_setpoint + y_translation,body_height, BL_body_angles, body_rotation[0], body_rotation[1], 0);
 800463a:	4b34      	ldr	r3, [pc, #208]	@ (800470c <Gait_controller+0x1138>)
 800463c:	edd3 7a00 	vldr	s15, [r3]
 8004640:	ed97 7a02 	vldr	s14, [r7, #8]
 8004644:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004648:	4b31      	ldr	r3, [pc, #196]	@ (8004710 <Gait_controller+0x113c>)
 800464a:	ed93 7a00 	vldr	s14, [r3]
 800464e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004656:	4b2f      	ldr	r3, [pc, #188]	@ (8004714 <Gait_controller+0x1140>)
 8004658:	ed93 7a00 	vldr	s14, [r3]
 800465c:	4b2f      	ldr	r3, [pc, #188]	@ (800471c <Gait_controller+0x1148>)
 800465e:	ed93 6a00 	vldr	s12, [r3]
 8004662:	4b2e      	ldr	r3, [pc, #184]	@ (800471c <Gait_controller+0x1148>)
 8004664:	edd3 5a01 	vldr	s11, [r3, #4]
 8004668:	eddf 2a2d 	vldr	s5, [pc, #180]	@ 8004720 <Gait_controller+0x114c>
 800466c:	eeb0 2a65 	vmov.f32	s4, s11
 8004670:	eef0 1a46 	vmov.f32	s3, s12
 8004674:	492f      	ldr	r1, [pc, #188]	@ (8004734 <Gait_controller+0x1160>)
 8004676:	eeb0 1a47 	vmov.f32	s2, s14
 800467a:	eef0 0a67 	vmov.f32	s1, s15
 800467e:	eeb0 0a66 	vmov.f32	s0, s13
 8004682:	482d      	ldr	r0, [pc, #180]	@ (8004738 <Gait_controller+0x1164>)
 8004684:	f7fe fe00 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,-x_setpoint - x_translation,-y_setpoint  + y_translation,body_height, BR_body_angles, body_rotation[0], body_rotation[1], 0);
 8004688:	edd7 7a02 	vldr	s15, [r7, #8]
 800468c:	eeb1 7a67 	vneg.f32	s14, s15
 8004690:	4b1e      	ldr	r3, [pc, #120]	@ (800470c <Gait_controller+0x1138>)
 8004692:	edd3 7a00 	vldr	s15, [r3]
 8004696:	ee77 6a67 	vsub.f32	s13, s14, s15
 800469a:	4b1d      	ldr	r3, [pc, #116]	@ (8004710 <Gait_controller+0x113c>)
 800469c:	ed93 7a00 	vldr	s14, [r3]
 80046a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80046a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004714 <Gait_controller+0x1140>)
 80046aa:	ed93 7a00 	vldr	s14, [r3]
 80046ae:	4b1b      	ldr	r3, [pc, #108]	@ (800471c <Gait_controller+0x1148>)
 80046b0:	ed93 6a00 	vldr	s12, [r3]
 80046b4:	4b19      	ldr	r3, [pc, #100]	@ (800471c <Gait_controller+0x1148>)
 80046b6:	edd3 5a01 	vldr	s11, [r3, #4]
 80046ba:	eddf 2a19 	vldr	s5, [pc, #100]	@ 8004720 <Gait_controller+0x114c>
 80046be:	eeb0 2a65 	vmov.f32	s4, s11
 80046c2:	eef0 1a46 	vmov.f32	s3, s12
 80046c6:	491d      	ldr	r1, [pc, #116]	@ (800473c <Gait_controller+0x1168>)
 80046c8:	eeb0 1a47 	vmov.f32	s2, s14
 80046cc:	eef0 0a67 	vmov.f32	s1, s15
 80046d0:	eeb0 0a66 	vmov.f32	s0, s13
 80046d4:	481a      	ldr	r0, [pc, #104]	@ (8004740 <Gait_controller+0x116c>)
 80046d6:	f7fe fdd7 	bl	8003288 <load_leg_position>
			break;
 80046da:	e392      	b.n	8004e02 <Gait_controller+0x182e>
		}

	}else if(mode == TROT){
 80046dc:	4b19      	ldr	r3, [pc, #100]	@ (8004744 <Gait_controller+0x1170>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	f040 838e 	bne.w	8004e02 <Gait_controller+0x182e>
		switch(ticks){
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	2b05      	cmp	r3, #5
 80046ea:	f200 838a 	bhi.w	8004e02 <Gait_controller+0x182e>
 80046ee:	a201      	add	r2, pc, #4	@ (adr r2, 80046f4 <Gait_controller+0x1120>)
 80046f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f4:	08004749 	.word	0x08004749
 80046f8:	08004867 	.word	0x08004867
 80046fc:	08004971 	.word	0x08004971
 8004700:	08004abd 	.word	0x08004abd
 8004704:	08004bdb 	.word	0x08004bdb
 8004708:	08004ce5 	.word	0x08004ce5
 800470c:	20000098 	.word	0x20000098
 8004710:	2000009c 	.word	0x2000009c
 8004714:	200000a0 	.word	0x200000a0
 8004718:	20000090 	.word	0x20000090
 800471c:	200002b0 	.word	0x200002b0
 8004720:	00000000 	.word	0x00000000
 8004724:	20000250 	.word	0x20000250
 8004728:	20000000 	.word	0x20000000
 800472c:	2000025c 	.word	0x2000025c
 8004730:	2000000c 	.word	0x2000000c
 8004734:	20000268 	.word	0x20000268
 8004738:	20000018 	.word	0x20000018
 800473c:	20000274 	.word	0x20000274
 8004740:	20000024 	.word	0x20000024
 8004744:	20000324 	.word	0x20000324

		case 0:
			load_leg_position(FL_position,x_setpoint,y_setpoint,body_height-step_height, FL_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004748:	4bd1      	ldr	r3, [pc, #836]	@ (8004a90 <Gait_controller+0x14bc>)
 800474a:	ed93 7a00 	vldr	s14, [r3]
 800474e:	4bd1      	ldr	r3, [pc, #836]	@ (8004a94 <Gait_controller+0x14c0>)
 8004750:	edd3 7a00 	vldr	s15, [r3]
 8004754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004758:	4bcf      	ldr	r3, [pc, #828]	@ (8004a98 <Gait_controller+0x14c4>)
 800475a:	ed93 7a00 	vldr	s14, [r3]
 800475e:	4bce      	ldr	r3, [pc, #824]	@ (8004a98 <Gait_controller+0x14c4>)
 8004760:	edd3 6a01 	vldr	s13, [r3, #4]
 8004764:	4bcc      	ldr	r3, [pc, #816]	@ (8004a98 <Gait_controller+0x14c4>)
 8004766:	ed93 6a02 	vldr	s12, [r3, #8]
 800476a:	eef0 2a46 	vmov.f32	s5, s12
 800476e:	eeb0 2a66 	vmov.f32	s4, s13
 8004772:	eef0 1a47 	vmov.f32	s3, s14
 8004776:	49c9      	ldr	r1, [pc, #804]	@ (8004a9c <Gait_controller+0x14c8>)
 8004778:	eeb0 1a67 	vmov.f32	s2, s15
 800477c:	edd7 0a01 	vldr	s1, [r7, #4]
 8004780:	ed97 0a02 	vldr	s0, [r7, #8]
 8004784:	48c6      	ldr	r0, [pc, #792]	@ (8004aa0 <Gait_controller+0x14cc>)
 8004786:	f7fe fd7f 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,-x_setpoint,-y_setpoint,body_height, FR_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 800478a:	edd7 7a02 	vldr	s15, [r7, #8]
 800478e:	eeb1 7a67 	vneg.f32	s14, s15
 8004792:	edd7 7a01 	vldr	s15, [r7, #4]
 8004796:	eef1 6a67 	vneg.f32	s13, s15
 800479a:	4bbd      	ldr	r3, [pc, #756]	@ (8004a90 <Gait_controller+0x14bc>)
 800479c:	ed93 6a00 	vldr	s12, [r3]
 80047a0:	4bbd      	ldr	r3, [pc, #756]	@ (8004a98 <Gait_controller+0x14c4>)
 80047a2:	edd3 5a00 	vldr	s11, [r3]
 80047a6:	4bbc      	ldr	r3, [pc, #752]	@ (8004a98 <Gait_controller+0x14c4>)
 80047a8:	ed93 5a01 	vldr	s10, [r3, #4]
 80047ac:	4bba      	ldr	r3, [pc, #744]	@ (8004a98 <Gait_controller+0x14c4>)
 80047ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80047b2:	eef1 7a67 	vneg.f32	s15, s15
 80047b6:	eef0 2a67 	vmov.f32	s5, s15
 80047ba:	eeb0 2a45 	vmov.f32	s4, s10
 80047be:	eef0 1a65 	vmov.f32	s3, s11
 80047c2:	49b8      	ldr	r1, [pc, #736]	@ (8004aa4 <Gait_controller+0x14d0>)
 80047c4:	eeb0 1a46 	vmov.f32	s2, s12
 80047c8:	eef0 0a66 	vmov.f32	s1, s13
 80047cc:	eeb0 0a47 	vmov.f32	s0, s14
 80047d0:	48b5      	ldr	r0, [pc, #724]	@ (8004aa8 <Gait_controller+0x14d4>)
 80047d2:	f7fe fd59 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,-x_setpoint,-y_setpoint,body_height, BL_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 80047d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80047da:	eeb1 7a67 	vneg.f32	s14, s15
 80047de:	edd7 7a01 	vldr	s15, [r7, #4]
 80047e2:	eef1 6a67 	vneg.f32	s13, s15
 80047e6:	4baa      	ldr	r3, [pc, #680]	@ (8004a90 <Gait_controller+0x14bc>)
 80047e8:	ed93 6a00 	vldr	s12, [r3]
 80047ec:	4baa      	ldr	r3, [pc, #680]	@ (8004a98 <Gait_controller+0x14c4>)
 80047ee:	edd3 5a00 	vldr	s11, [r3]
 80047f2:	4ba9      	ldr	r3, [pc, #676]	@ (8004a98 <Gait_controller+0x14c4>)
 80047f4:	ed93 5a01 	vldr	s10, [r3, #4]
 80047f8:	4ba7      	ldr	r3, [pc, #668]	@ (8004a98 <Gait_controller+0x14c4>)
 80047fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80047fe:	eef1 7a67 	vneg.f32	s15, s15
 8004802:	eef0 2a67 	vmov.f32	s5, s15
 8004806:	eeb0 2a45 	vmov.f32	s4, s10
 800480a:	eef0 1a65 	vmov.f32	s3, s11
 800480e:	49a7      	ldr	r1, [pc, #668]	@ (8004aac <Gait_controller+0x14d8>)
 8004810:	eeb0 1a46 	vmov.f32	s2, s12
 8004814:	eef0 0a66 	vmov.f32	s1, s13
 8004818:	eeb0 0a47 	vmov.f32	s0, s14
 800481c:	48a4      	ldr	r0, [pc, #656]	@ (8004ab0 <Gait_controller+0x14dc>)
 800481e:	f7fe fd33 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,x_setpoint,y_setpoint,body_height-step_height, BR_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004822:	4b9b      	ldr	r3, [pc, #620]	@ (8004a90 <Gait_controller+0x14bc>)
 8004824:	ed93 7a00 	vldr	s14, [r3]
 8004828:	4b9a      	ldr	r3, [pc, #616]	@ (8004a94 <Gait_controller+0x14c0>)
 800482a:	edd3 7a00 	vldr	s15, [r3]
 800482e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004832:	4b99      	ldr	r3, [pc, #612]	@ (8004a98 <Gait_controller+0x14c4>)
 8004834:	ed93 7a00 	vldr	s14, [r3]
 8004838:	4b97      	ldr	r3, [pc, #604]	@ (8004a98 <Gait_controller+0x14c4>)
 800483a:	edd3 6a01 	vldr	s13, [r3, #4]
 800483e:	4b96      	ldr	r3, [pc, #600]	@ (8004a98 <Gait_controller+0x14c4>)
 8004840:	ed93 6a02 	vldr	s12, [r3, #8]
 8004844:	eef0 2a46 	vmov.f32	s5, s12
 8004848:	eeb0 2a66 	vmov.f32	s4, s13
 800484c:	eef0 1a47 	vmov.f32	s3, s14
 8004850:	4998      	ldr	r1, [pc, #608]	@ (8004ab4 <Gait_controller+0x14e0>)
 8004852:	eeb0 1a67 	vmov.f32	s2, s15
 8004856:	edd7 0a01 	vldr	s1, [r7, #4]
 800485a:	ed97 0a02 	vldr	s0, [r7, #8]
 800485e:	4896      	ldr	r0, [pc, #600]	@ (8004ab8 <Gait_controller+0x14e4>)
 8004860:	f7fe fd12 	bl	8003288 <load_leg_position>
			break;
 8004864:	e2cd      	b.n	8004e02 <Gait_controller+0x182e>
		case 1:
			load_leg_position(FL_position,x_setpoint,y_setpoint,body_height, FL_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004866:	4b8a      	ldr	r3, [pc, #552]	@ (8004a90 <Gait_controller+0x14bc>)
 8004868:	edd3 7a00 	vldr	s15, [r3]
 800486c:	4b8a      	ldr	r3, [pc, #552]	@ (8004a98 <Gait_controller+0x14c4>)
 800486e:	ed93 7a00 	vldr	s14, [r3]
 8004872:	4b89      	ldr	r3, [pc, #548]	@ (8004a98 <Gait_controller+0x14c4>)
 8004874:	edd3 6a01 	vldr	s13, [r3, #4]
 8004878:	4b87      	ldr	r3, [pc, #540]	@ (8004a98 <Gait_controller+0x14c4>)
 800487a:	ed93 6a02 	vldr	s12, [r3, #8]
 800487e:	eef0 2a46 	vmov.f32	s5, s12
 8004882:	eeb0 2a66 	vmov.f32	s4, s13
 8004886:	eef0 1a47 	vmov.f32	s3, s14
 800488a:	4984      	ldr	r1, [pc, #528]	@ (8004a9c <Gait_controller+0x14c8>)
 800488c:	eeb0 1a67 	vmov.f32	s2, s15
 8004890:	edd7 0a01 	vldr	s1, [r7, #4]
 8004894:	ed97 0a02 	vldr	s0, [r7, #8]
 8004898:	4881      	ldr	r0, [pc, #516]	@ (8004aa0 <Gait_controller+0x14cc>)
 800489a:	f7fe fcf5 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,-x_setpoint,-y_setpoint,body_height, FR_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 800489e:	edd7 7a02 	vldr	s15, [r7, #8]
 80048a2:	eeb1 7a67 	vneg.f32	s14, s15
 80048a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80048aa:	eef1 6a67 	vneg.f32	s13, s15
 80048ae:	4b78      	ldr	r3, [pc, #480]	@ (8004a90 <Gait_controller+0x14bc>)
 80048b0:	ed93 6a00 	vldr	s12, [r3]
 80048b4:	4b78      	ldr	r3, [pc, #480]	@ (8004a98 <Gait_controller+0x14c4>)
 80048b6:	edd3 5a00 	vldr	s11, [r3]
 80048ba:	4b77      	ldr	r3, [pc, #476]	@ (8004a98 <Gait_controller+0x14c4>)
 80048bc:	ed93 5a01 	vldr	s10, [r3, #4]
 80048c0:	4b75      	ldr	r3, [pc, #468]	@ (8004a98 <Gait_controller+0x14c4>)
 80048c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80048c6:	eef1 7a67 	vneg.f32	s15, s15
 80048ca:	eef0 2a67 	vmov.f32	s5, s15
 80048ce:	eeb0 2a45 	vmov.f32	s4, s10
 80048d2:	eef0 1a65 	vmov.f32	s3, s11
 80048d6:	4973      	ldr	r1, [pc, #460]	@ (8004aa4 <Gait_controller+0x14d0>)
 80048d8:	eeb0 1a46 	vmov.f32	s2, s12
 80048dc:	eef0 0a66 	vmov.f32	s1, s13
 80048e0:	eeb0 0a47 	vmov.f32	s0, s14
 80048e4:	4870      	ldr	r0, [pc, #448]	@ (8004aa8 <Gait_controller+0x14d4>)
 80048e6:	f7fe fccf 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,-x_setpoint,-y_setpoint,body_height, BL_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 80048ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80048ee:	eeb1 7a67 	vneg.f32	s14, s15
 80048f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80048f6:	eef1 6a67 	vneg.f32	s13, s15
 80048fa:	4b65      	ldr	r3, [pc, #404]	@ (8004a90 <Gait_controller+0x14bc>)
 80048fc:	ed93 6a00 	vldr	s12, [r3]
 8004900:	4b65      	ldr	r3, [pc, #404]	@ (8004a98 <Gait_controller+0x14c4>)
 8004902:	edd3 5a00 	vldr	s11, [r3]
 8004906:	4b64      	ldr	r3, [pc, #400]	@ (8004a98 <Gait_controller+0x14c4>)
 8004908:	ed93 5a01 	vldr	s10, [r3, #4]
 800490c:	4b62      	ldr	r3, [pc, #392]	@ (8004a98 <Gait_controller+0x14c4>)
 800490e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004912:	eef1 7a67 	vneg.f32	s15, s15
 8004916:	eef0 2a67 	vmov.f32	s5, s15
 800491a:	eeb0 2a45 	vmov.f32	s4, s10
 800491e:	eef0 1a65 	vmov.f32	s3, s11
 8004922:	4962      	ldr	r1, [pc, #392]	@ (8004aac <Gait_controller+0x14d8>)
 8004924:	eeb0 1a46 	vmov.f32	s2, s12
 8004928:	eef0 0a66 	vmov.f32	s1, s13
 800492c:	eeb0 0a47 	vmov.f32	s0, s14
 8004930:	485f      	ldr	r0, [pc, #380]	@ (8004ab0 <Gait_controller+0x14dc>)
 8004932:	f7fe fca9 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,x_setpoint,y_setpoint,body_height, BR_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004936:	4b56      	ldr	r3, [pc, #344]	@ (8004a90 <Gait_controller+0x14bc>)
 8004938:	edd3 7a00 	vldr	s15, [r3]
 800493c:	4b56      	ldr	r3, [pc, #344]	@ (8004a98 <Gait_controller+0x14c4>)
 800493e:	ed93 7a00 	vldr	s14, [r3]
 8004942:	4b55      	ldr	r3, [pc, #340]	@ (8004a98 <Gait_controller+0x14c4>)
 8004944:	edd3 6a01 	vldr	s13, [r3, #4]
 8004948:	4b53      	ldr	r3, [pc, #332]	@ (8004a98 <Gait_controller+0x14c4>)
 800494a:	ed93 6a02 	vldr	s12, [r3, #8]
 800494e:	eef0 2a46 	vmov.f32	s5, s12
 8004952:	eeb0 2a66 	vmov.f32	s4, s13
 8004956:	eef0 1a47 	vmov.f32	s3, s14
 800495a:	4956      	ldr	r1, [pc, #344]	@ (8004ab4 <Gait_controller+0x14e0>)
 800495c:	eeb0 1a67 	vmov.f32	s2, s15
 8004960:	edd7 0a01 	vldr	s1, [r7, #4]
 8004964:	ed97 0a02 	vldr	s0, [r7, #8]
 8004968:	4853      	ldr	r0, [pc, #332]	@ (8004ab8 <Gait_controller+0x14e4>)
 800496a:	f7fe fc8d 	bl	8003288 <load_leg_position>
			break;
 800496e:	e248      	b.n	8004e02 <Gait_controller+0x182e>
		case 2:
			load_leg_position(FL_position,x_setpoint,y_setpoint,body_height, FL_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004970:	4b47      	ldr	r3, [pc, #284]	@ (8004a90 <Gait_controller+0x14bc>)
 8004972:	edd3 7a00 	vldr	s15, [r3]
 8004976:	4b48      	ldr	r3, [pc, #288]	@ (8004a98 <Gait_controller+0x14c4>)
 8004978:	ed93 7a00 	vldr	s14, [r3]
 800497c:	4b46      	ldr	r3, [pc, #280]	@ (8004a98 <Gait_controller+0x14c4>)
 800497e:	edd3 6a01 	vldr	s13, [r3, #4]
 8004982:	4b45      	ldr	r3, [pc, #276]	@ (8004a98 <Gait_controller+0x14c4>)
 8004984:	ed93 6a02 	vldr	s12, [r3, #8]
 8004988:	eef0 2a46 	vmov.f32	s5, s12
 800498c:	eeb0 2a66 	vmov.f32	s4, s13
 8004990:	eef0 1a47 	vmov.f32	s3, s14
 8004994:	4941      	ldr	r1, [pc, #260]	@ (8004a9c <Gait_controller+0x14c8>)
 8004996:	eeb0 1a67 	vmov.f32	s2, s15
 800499a:	edd7 0a01 	vldr	s1, [r7, #4]
 800499e:	ed97 0a02 	vldr	s0, [r7, #8]
 80049a2:	483f      	ldr	r0, [pc, #252]	@ (8004aa0 <Gait_controller+0x14cc>)
 80049a4:	f7fe fc70 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,-x_setpoint,-y_setpoint,body_height - step_height, FR_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 80049a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80049ac:	eef1 6a67 	vneg.f32	s13, s15
 80049b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80049b4:	eeb1 6a67 	vneg.f32	s12, s15
 80049b8:	4b35      	ldr	r3, [pc, #212]	@ (8004a90 <Gait_controller+0x14bc>)
 80049ba:	ed93 7a00 	vldr	s14, [r3]
 80049be:	4b35      	ldr	r3, [pc, #212]	@ (8004a94 <Gait_controller+0x14c0>)
 80049c0:	edd3 7a00 	vldr	s15, [r3]
 80049c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80049c8:	4b33      	ldr	r3, [pc, #204]	@ (8004a98 <Gait_controller+0x14c4>)
 80049ca:	edd3 5a00 	vldr	s11, [r3]
 80049ce:	4b32      	ldr	r3, [pc, #200]	@ (8004a98 <Gait_controller+0x14c4>)
 80049d0:	ed93 5a01 	vldr	s10, [r3, #4]
 80049d4:	4b30      	ldr	r3, [pc, #192]	@ (8004a98 <Gait_controller+0x14c4>)
 80049d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80049da:	eef1 7a67 	vneg.f32	s15, s15
 80049de:	eef0 2a67 	vmov.f32	s5, s15
 80049e2:	eeb0 2a45 	vmov.f32	s4, s10
 80049e6:	eef0 1a65 	vmov.f32	s3, s11
 80049ea:	492e      	ldr	r1, [pc, #184]	@ (8004aa4 <Gait_controller+0x14d0>)
 80049ec:	eeb0 1a47 	vmov.f32	s2, s14
 80049f0:	eef0 0a46 	vmov.f32	s1, s12
 80049f4:	eeb0 0a66 	vmov.f32	s0, s13
 80049f8:	482b      	ldr	r0, [pc, #172]	@ (8004aa8 <Gait_controller+0x14d4>)
 80049fa:	f7fe fc45 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,-x_setpoint,-y_setpoint,body_height - step_height, BL_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 80049fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a02:	eef1 6a67 	vneg.f32	s13, s15
 8004a06:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a0a:	eeb1 6a67 	vneg.f32	s12, s15
 8004a0e:	4b20      	ldr	r3, [pc, #128]	@ (8004a90 <Gait_controller+0x14bc>)
 8004a10:	ed93 7a00 	vldr	s14, [r3]
 8004a14:	4b1f      	ldr	r3, [pc, #124]	@ (8004a94 <Gait_controller+0x14c0>)
 8004a16:	edd3 7a00 	vldr	s15, [r3]
 8004a1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004a98 <Gait_controller+0x14c4>)
 8004a20:	edd3 5a00 	vldr	s11, [r3]
 8004a24:	4b1c      	ldr	r3, [pc, #112]	@ (8004a98 <Gait_controller+0x14c4>)
 8004a26:	ed93 5a01 	vldr	s10, [r3, #4]
 8004a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8004a98 <Gait_controller+0x14c4>)
 8004a2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a30:	eef1 7a67 	vneg.f32	s15, s15
 8004a34:	eef0 2a67 	vmov.f32	s5, s15
 8004a38:	eeb0 2a45 	vmov.f32	s4, s10
 8004a3c:	eef0 1a65 	vmov.f32	s3, s11
 8004a40:	491a      	ldr	r1, [pc, #104]	@ (8004aac <Gait_controller+0x14d8>)
 8004a42:	eeb0 1a47 	vmov.f32	s2, s14
 8004a46:	eef0 0a46 	vmov.f32	s1, s12
 8004a4a:	eeb0 0a66 	vmov.f32	s0, s13
 8004a4e:	4818      	ldr	r0, [pc, #96]	@ (8004ab0 <Gait_controller+0x14dc>)
 8004a50:	f7fe fc1a 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,x_setpoint,y_setpoint,body_height, BR_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004a54:	4b0e      	ldr	r3, [pc, #56]	@ (8004a90 <Gait_controller+0x14bc>)
 8004a56:	edd3 7a00 	vldr	s15, [r3]
 8004a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004a98 <Gait_controller+0x14c4>)
 8004a5c:	ed93 7a00 	vldr	s14, [r3]
 8004a60:	4b0d      	ldr	r3, [pc, #52]	@ (8004a98 <Gait_controller+0x14c4>)
 8004a62:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a66:	4b0c      	ldr	r3, [pc, #48]	@ (8004a98 <Gait_controller+0x14c4>)
 8004a68:	ed93 6a02 	vldr	s12, [r3, #8]
 8004a6c:	eef0 2a46 	vmov.f32	s5, s12
 8004a70:	eeb0 2a66 	vmov.f32	s4, s13
 8004a74:	eef0 1a47 	vmov.f32	s3, s14
 8004a78:	490e      	ldr	r1, [pc, #56]	@ (8004ab4 <Gait_controller+0x14e0>)
 8004a7a:	eeb0 1a67 	vmov.f32	s2, s15
 8004a7e:	edd7 0a01 	vldr	s1, [r7, #4]
 8004a82:	ed97 0a02 	vldr	s0, [r7, #8]
 8004a86:	480c      	ldr	r0, [pc, #48]	@ (8004ab8 <Gait_controller+0x14e4>)
 8004a88:	f7fe fbfe 	bl	8003288 <load_leg_position>
			break;
 8004a8c:	e1b9      	b.n	8004e02 <Gait_controller+0x182e>
 8004a8e:	bf00      	nop
 8004a90:	200000a0 	.word	0x200000a0
 8004a94:	20000090 	.word	0x20000090
 8004a98:	200002b0 	.word	0x200002b0
 8004a9c:	20000250 	.word	0x20000250
 8004aa0:	20000000 	.word	0x20000000
 8004aa4:	2000025c 	.word	0x2000025c
 8004aa8:	2000000c 	.word	0x2000000c
 8004aac:	20000268 	.word	0x20000268
 8004ab0:	20000018 	.word	0x20000018
 8004ab4:	20000274 	.word	0x20000274
 8004ab8:	20000024 	.word	0x20000024
		case 3:
			load_leg_position(FL_position,-x_setpoint,-y_setpoint,body_height, FL_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 8004abc:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ac0:	eeb1 7a67 	vneg.f32	s14, s15
 8004ac4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ac8:	eef1 6a67 	vneg.f32	s13, s15
 8004acc:	4bcf      	ldr	r3, [pc, #828]	@ (8004e0c <Gait_controller+0x1838>)
 8004ace:	ed93 6a00 	vldr	s12, [r3]
 8004ad2:	4bcf      	ldr	r3, [pc, #828]	@ (8004e10 <Gait_controller+0x183c>)
 8004ad4:	edd3 5a00 	vldr	s11, [r3]
 8004ad8:	4bcd      	ldr	r3, [pc, #820]	@ (8004e10 <Gait_controller+0x183c>)
 8004ada:	ed93 5a01 	vldr	s10, [r3, #4]
 8004ade:	4bcc      	ldr	r3, [pc, #816]	@ (8004e10 <Gait_controller+0x183c>)
 8004ae0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ae4:	eef1 7a67 	vneg.f32	s15, s15
 8004ae8:	eef0 2a67 	vmov.f32	s5, s15
 8004aec:	eeb0 2a45 	vmov.f32	s4, s10
 8004af0:	eef0 1a65 	vmov.f32	s3, s11
 8004af4:	49c7      	ldr	r1, [pc, #796]	@ (8004e14 <Gait_controller+0x1840>)
 8004af6:	eeb0 1a46 	vmov.f32	s2, s12
 8004afa:	eef0 0a66 	vmov.f32	s1, s13
 8004afe:	eeb0 0a47 	vmov.f32	s0, s14
 8004b02:	48c5      	ldr	r0, [pc, #788]	@ (8004e18 <Gait_controller+0x1844>)
 8004b04:	f7fe fbc0 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,x_setpoint,y_setpoint,body_height - step_height, FR_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004b08:	4bc0      	ldr	r3, [pc, #768]	@ (8004e0c <Gait_controller+0x1838>)
 8004b0a:	ed93 7a00 	vldr	s14, [r3]
 8004b0e:	4bc3      	ldr	r3, [pc, #780]	@ (8004e1c <Gait_controller+0x1848>)
 8004b10:	edd3 7a00 	vldr	s15, [r3]
 8004b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b18:	4bbd      	ldr	r3, [pc, #756]	@ (8004e10 <Gait_controller+0x183c>)
 8004b1a:	ed93 7a00 	vldr	s14, [r3]
 8004b1e:	4bbc      	ldr	r3, [pc, #752]	@ (8004e10 <Gait_controller+0x183c>)
 8004b20:	edd3 6a01 	vldr	s13, [r3, #4]
 8004b24:	4bba      	ldr	r3, [pc, #744]	@ (8004e10 <Gait_controller+0x183c>)
 8004b26:	ed93 6a02 	vldr	s12, [r3, #8]
 8004b2a:	eef0 2a46 	vmov.f32	s5, s12
 8004b2e:	eeb0 2a66 	vmov.f32	s4, s13
 8004b32:	eef0 1a47 	vmov.f32	s3, s14
 8004b36:	49ba      	ldr	r1, [pc, #744]	@ (8004e20 <Gait_controller+0x184c>)
 8004b38:	eeb0 1a67 	vmov.f32	s2, s15
 8004b3c:	edd7 0a01 	vldr	s1, [r7, #4]
 8004b40:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b44:	48b7      	ldr	r0, [pc, #732]	@ (8004e24 <Gait_controller+0x1850>)
 8004b46:	f7fe fb9f 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,x_setpoint,y_setpoint,body_height - step_height, BL_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004b4a:	4bb0      	ldr	r3, [pc, #704]	@ (8004e0c <Gait_controller+0x1838>)
 8004b4c:	ed93 7a00 	vldr	s14, [r3]
 8004b50:	4bb2      	ldr	r3, [pc, #712]	@ (8004e1c <Gait_controller+0x1848>)
 8004b52:	edd3 7a00 	vldr	s15, [r3]
 8004b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b5a:	4bad      	ldr	r3, [pc, #692]	@ (8004e10 <Gait_controller+0x183c>)
 8004b5c:	ed93 7a00 	vldr	s14, [r3]
 8004b60:	4bab      	ldr	r3, [pc, #684]	@ (8004e10 <Gait_controller+0x183c>)
 8004b62:	edd3 6a01 	vldr	s13, [r3, #4]
 8004b66:	4baa      	ldr	r3, [pc, #680]	@ (8004e10 <Gait_controller+0x183c>)
 8004b68:	ed93 6a02 	vldr	s12, [r3, #8]
 8004b6c:	eef0 2a46 	vmov.f32	s5, s12
 8004b70:	eeb0 2a66 	vmov.f32	s4, s13
 8004b74:	eef0 1a47 	vmov.f32	s3, s14
 8004b78:	49ab      	ldr	r1, [pc, #684]	@ (8004e28 <Gait_controller+0x1854>)
 8004b7a:	eeb0 1a67 	vmov.f32	s2, s15
 8004b7e:	edd7 0a01 	vldr	s1, [r7, #4]
 8004b82:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b86:	48a9      	ldr	r0, [pc, #676]	@ (8004e2c <Gait_controller+0x1858>)
 8004b88:	f7fe fb7e 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,-x_setpoint,-y_setpoint,body_height, BR_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 8004b8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b90:	eeb1 7a67 	vneg.f32	s14, s15
 8004b94:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b98:	eef1 6a67 	vneg.f32	s13, s15
 8004b9c:	4b9b      	ldr	r3, [pc, #620]	@ (8004e0c <Gait_controller+0x1838>)
 8004b9e:	ed93 6a00 	vldr	s12, [r3]
 8004ba2:	4b9b      	ldr	r3, [pc, #620]	@ (8004e10 <Gait_controller+0x183c>)
 8004ba4:	edd3 5a00 	vldr	s11, [r3]
 8004ba8:	4b99      	ldr	r3, [pc, #612]	@ (8004e10 <Gait_controller+0x183c>)
 8004baa:	ed93 5a01 	vldr	s10, [r3, #4]
 8004bae:	4b98      	ldr	r3, [pc, #608]	@ (8004e10 <Gait_controller+0x183c>)
 8004bb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8004bb4:	eef1 7a67 	vneg.f32	s15, s15
 8004bb8:	eef0 2a67 	vmov.f32	s5, s15
 8004bbc:	eeb0 2a45 	vmov.f32	s4, s10
 8004bc0:	eef0 1a65 	vmov.f32	s3, s11
 8004bc4:	499a      	ldr	r1, [pc, #616]	@ (8004e30 <Gait_controller+0x185c>)
 8004bc6:	eeb0 1a46 	vmov.f32	s2, s12
 8004bca:	eef0 0a66 	vmov.f32	s1, s13
 8004bce:	eeb0 0a47 	vmov.f32	s0, s14
 8004bd2:	4898      	ldr	r0, [pc, #608]	@ (8004e34 <Gait_controller+0x1860>)
 8004bd4:	f7fe fb58 	bl	8003288 <load_leg_position>
			break;
 8004bd8:	e113      	b.n	8004e02 <Gait_controller+0x182e>
		case 4:
			load_leg_position(FL_position,-x_setpoint,-y_setpoint,body_height, FL_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 8004bda:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bde:	eeb1 7a67 	vneg.f32	s14, s15
 8004be2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004be6:	eef1 6a67 	vneg.f32	s13, s15
 8004bea:	4b88      	ldr	r3, [pc, #544]	@ (8004e0c <Gait_controller+0x1838>)
 8004bec:	ed93 6a00 	vldr	s12, [r3]
 8004bf0:	4b87      	ldr	r3, [pc, #540]	@ (8004e10 <Gait_controller+0x183c>)
 8004bf2:	edd3 5a00 	vldr	s11, [r3]
 8004bf6:	4b86      	ldr	r3, [pc, #536]	@ (8004e10 <Gait_controller+0x183c>)
 8004bf8:	ed93 5a01 	vldr	s10, [r3, #4]
 8004bfc:	4b84      	ldr	r3, [pc, #528]	@ (8004e10 <Gait_controller+0x183c>)
 8004bfe:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c02:	eef1 7a67 	vneg.f32	s15, s15
 8004c06:	eef0 2a67 	vmov.f32	s5, s15
 8004c0a:	eeb0 2a45 	vmov.f32	s4, s10
 8004c0e:	eef0 1a65 	vmov.f32	s3, s11
 8004c12:	4980      	ldr	r1, [pc, #512]	@ (8004e14 <Gait_controller+0x1840>)
 8004c14:	eeb0 1a46 	vmov.f32	s2, s12
 8004c18:	eef0 0a66 	vmov.f32	s1, s13
 8004c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8004c20:	487d      	ldr	r0, [pc, #500]	@ (8004e18 <Gait_controller+0x1844>)
 8004c22:	f7fe fb31 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,x_setpoint,y_setpoint,body_height, FR_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004c26:	4b79      	ldr	r3, [pc, #484]	@ (8004e0c <Gait_controller+0x1838>)
 8004c28:	edd3 7a00 	vldr	s15, [r3]
 8004c2c:	4b78      	ldr	r3, [pc, #480]	@ (8004e10 <Gait_controller+0x183c>)
 8004c2e:	ed93 7a00 	vldr	s14, [r3]
 8004c32:	4b77      	ldr	r3, [pc, #476]	@ (8004e10 <Gait_controller+0x183c>)
 8004c34:	edd3 6a01 	vldr	s13, [r3, #4]
 8004c38:	4b75      	ldr	r3, [pc, #468]	@ (8004e10 <Gait_controller+0x183c>)
 8004c3a:	ed93 6a02 	vldr	s12, [r3, #8]
 8004c3e:	eef0 2a46 	vmov.f32	s5, s12
 8004c42:	eeb0 2a66 	vmov.f32	s4, s13
 8004c46:	eef0 1a47 	vmov.f32	s3, s14
 8004c4a:	4975      	ldr	r1, [pc, #468]	@ (8004e20 <Gait_controller+0x184c>)
 8004c4c:	eeb0 1a67 	vmov.f32	s2, s15
 8004c50:	edd7 0a01 	vldr	s1, [r7, #4]
 8004c54:	ed97 0a02 	vldr	s0, [r7, #8]
 8004c58:	4872      	ldr	r0, [pc, #456]	@ (8004e24 <Gait_controller+0x1850>)
 8004c5a:	f7fe fb15 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,x_setpoint,y_setpoint,body_height, BL_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004c5e:	4b6b      	ldr	r3, [pc, #428]	@ (8004e0c <Gait_controller+0x1838>)
 8004c60:	edd3 7a00 	vldr	s15, [r3]
 8004c64:	4b6a      	ldr	r3, [pc, #424]	@ (8004e10 <Gait_controller+0x183c>)
 8004c66:	ed93 7a00 	vldr	s14, [r3]
 8004c6a:	4b69      	ldr	r3, [pc, #420]	@ (8004e10 <Gait_controller+0x183c>)
 8004c6c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004c70:	4b67      	ldr	r3, [pc, #412]	@ (8004e10 <Gait_controller+0x183c>)
 8004c72:	ed93 6a02 	vldr	s12, [r3, #8]
 8004c76:	eef0 2a46 	vmov.f32	s5, s12
 8004c7a:	eeb0 2a66 	vmov.f32	s4, s13
 8004c7e:	eef0 1a47 	vmov.f32	s3, s14
 8004c82:	4969      	ldr	r1, [pc, #420]	@ (8004e28 <Gait_controller+0x1854>)
 8004c84:	eeb0 1a67 	vmov.f32	s2, s15
 8004c88:	edd7 0a01 	vldr	s1, [r7, #4]
 8004c8c:	ed97 0a02 	vldr	s0, [r7, #8]
 8004c90:	4866      	ldr	r0, [pc, #408]	@ (8004e2c <Gait_controller+0x1858>)
 8004c92:	f7fe faf9 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,-x_setpoint,-y_setpoint,body_height, BR_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 8004c96:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c9a:	eeb1 7a67 	vneg.f32	s14, s15
 8004c9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ca2:	eef1 6a67 	vneg.f32	s13, s15
 8004ca6:	4b59      	ldr	r3, [pc, #356]	@ (8004e0c <Gait_controller+0x1838>)
 8004ca8:	ed93 6a00 	vldr	s12, [r3]
 8004cac:	4b58      	ldr	r3, [pc, #352]	@ (8004e10 <Gait_controller+0x183c>)
 8004cae:	edd3 5a00 	vldr	s11, [r3]
 8004cb2:	4b57      	ldr	r3, [pc, #348]	@ (8004e10 <Gait_controller+0x183c>)
 8004cb4:	ed93 5a01 	vldr	s10, [r3, #4]
 8004cb8:	4b55      	ldr	r3, [pc, #340]	@ (8004e10 <Gait_controller+0x183c>)
 8004cba:	edd3 7a02 	vldr	s15, [r3, #8]
 8004cbe:	eef1 7a67 	vneg.f32	s15, s15
 8004cc2:	eef0 2a67 	vmov.f32	s5, s15
 8004cc6:	eeb0 2a45 	vmov.f32	s4, s10
 8004cca:	eef0 1a65 	vmov.f32	s3, s11
 8004cce:	4958      	ldr	r1, [pc, #352]	@ (8004e30 <Gait_controller+0x185c>)
 8004cd0:	eeb0 1a46 	vmov.f32	s2, s12
 8004cd4:	eef0 0a66 	vmov.f32	s1, s13
 8004cd8:	eeb0 0a47 	vmov.f32	s0, s14
 8004cdc:	4855      	ldr	r0, [pc, #340]	@ (8004e34 <Gait_controller+0x1860>)
 8004cde:	f7fe fad3 	bl	8003288 <load_leg_position>
			break;
 8004ce2:	e08e      	b.n	8004e02 <Gait_controller+0x182e>
		case 5:
			load_leg_position(FL_position,-x_setpoint,-y_setpoint,body_height - step_height, FL_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 8004ce4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ce8:	eef1 6a67 	vneg.f32	s13, s15
 8004cec:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cf0:	eeb1 6a67 	vneg.f32	s12, s15
 8004cf4:	4b45      	ldr	r3, [pc, #276]	@ (8004e0c <Gait_controller+0x1838>)
 8004cf6:	ed93 7a00 	vldr	s14, [r3]
 8004cfa:	4b48      	ldr	r3, [pc, #288]	@ (8004e1c <Gait_controller+0x1848>)
 8004cfc:	edd3 7a00 	vldr	s15, [r3]
 8004d00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004d04:	4b42      	ldr	r3, [pc, #264]	@ (8004e10 <Gait_controller+0x183c>)
 8004d06:	edd3 5a00 	vldr	s11, [r3]
 8004d0a:	4b41      	ldr	r3, [pc, #260]	@ (8004e10 <Gait_controller+0x183c>)
 8004d0c:	ed93 5a01 	vldr	s10, [r3, #4]
 8004d10:	4b3f      	ldr	r3, [pc, #252]	@ (8004e10 <Gait_controller+0x183c>)
 8004d12:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d16:	eef1 7a67 	vneg.f32	s15, s15
 8004d1a:	eef0 2a67 	vmov.f32	s5, s15
 8004d1e:	eeb0 2a45 	vmov.f32	s4, s10
 8004d22:	eef0 1a65 	vmov.f32	s3, s11
 8004d26:	493b      	ldr	r1, [pc, #236]	@ (8004e14 <Gait_controller+0x1840>)
 8004d28:	eeb0 1a47 	vmov.f32	s2, s14
 8004d2c:	eef0 0a46 	vmov.f32	s1, s12
 8004d30:	eeb0 0a66 	vmov.f32	s0, s13
 8004d34:	4838      	ldr	r0, [pc, #224]	@ (8004e18 <Gait_controller+0x1844>)
 8004d36:	f7fe faa7 	bl	8003288 <load_leg_position>
			load_leg_position(FR_position,x_setpoint,y_setpoint,body_height, FR_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004d3a:	4b34      	ldr	r3, [pc, #208]	@ (8004e0c <Gait_controller+0x1838>)
 8004d3c:	edd3 7a00 	vldr	s15, [r3]
 8004d40:	4b33      	ldr	r3, [pc, #204]	@ (8004e10 <Gait_controller+0x183c>)
 8004d42:	ed93 7a00 	vldr	s14, [r3]
 8004d46:	4b32      	ldr	r3, [pc, #200]	@ (8004e10 <Gait_controller+0x183c>)
 8004d48:	edd3 6a01 	vldr	s13, [r3, #4]
 8004d4c:	4b30      	ldr	r3, [pc, #192]	@ (8004e10 <Gait_controller+0x183c>)
 8004d4e:	ed93 6a02 	vldr	s12, [r3, #8]
 8004d52:	eef0 2a46 	vmov.f32	s5, s12
 8004d56:	eeb0 2a66 	vmov.f32	s4, s13
 8004d5a:	eef0 1a47 	vmov.f32	s3, s14
 8004d5e:	4930      	ldr	r1, [pc, #192]	@ (8004e20 <Gait_controller+0x184c>)
 8004d60:	eeb0 1a67 	vmov.f32	s2, s15
 8004d64:	edd7 0a01 	vldr	s1, [r7, #4]
 8004d68:	ed97 0a02 	vldr	s0, [r7, #8]
 8004d6c:	482d      	ldr	r0, [pc, #180]	@ (8004e24 <Gait_controller+0x1850>)
 8004d6e:	f7fe fa8b 	bl	8003288 <load_leg_position>
			load_leg_position(BL_position,x_setpoint,y_setpoint,body_height, BL_body_angles, body_rotation[0], body_rotation[1], body_rotation[2]);
 8004d72:	4b26      	ldr	r3, [pc, #152]	@ (8004e0c <Gait_controller+0x1838>)
 8004d74:	edd3 7a00 	vldr	s15, [r3]
 8004d78:	4b25      	ldr	r3, [pc, #148]	@ (8004e10 <Gait_controller+0x183c>)
 8004d7a:	ed93 7a00 	vldr	s14, [r3]
 8004d7e:	4b24      	ldr	r3, [pc, #144]	@ (8004e10 <Gait_controller+0x183c>)
 8004d80:	edd3 6a01 	vldr	s13, [r3, #4]
 8004d84:	4b22      	ldr	r3, [pc, #136]	@ (8004e10 <Gait_controller+0x183c>)
 8004d86:	ed93 6a02 	vldr	s12, [r3, #8]
 8004d8a:	eef0 2a46 	vmov.f32	s5, s12
 8004d8e:	eeb0 2a66 	vmov.f32	s4, s13
 8004d92:	eef0 1a47 	vmov.f32	s3, s14
 8004d96:	4924      	ldr	r1, [pc, #144]	@ (8004e28 <Gait_controller+0x1854>)
 8004d98:	eeb0 1a67 	vmov.f32	s2, s15
 8004d9c:	edd7 0a01 	vldr	s1, [r7, #4]
 8004da0:	ed97 0a02 	vldr	s0, [r7, #8]
 8004da4:	4821      	ldr	r0, [pc, #132]	@ (8004e2c <Gait_controller+0x1858>)
 8004da6:	f7fe fa6f 	bl	8003288 <load_leg_position>
			load_leg_position(BR_position,-x_setpoint,-y_setpoint,body_height - step_height, BR_body_angles, body_rotation[0], body_rotation[1], -body_rotation[2]);
 8004daa:	edd7 7a02 	vldr	s15, [r7, #8]
 8004dae:	eef1 6a67 	vneg.f32	s13, s15
 8004db2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004db6:	eeb1 6a67 	vneg.f32	s12, s15
 8004dba:	4b14      	ldr	r3, [pc, #80]	@ (8004e0c <Gait_controller+0x1838>)
 8004dbc:	ed93 7a00 	vldr	s14, [r3]
 8004dc0:	4b16      	ldr	r3, [pc, #88]	@ (8004e1c <Gait_controller+0x1848>)
 8004dc2:	edd3 7a00 	vldr	s15, [r3]
 8004dc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004dca:	4b11      	ldr	r3, [pc, #68]	@ (8004e10 <Gait_controller+0x183c>)
 8004dcc:	edd3 5a00 	vldr	s11, [r3]
 8004dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004e10 <Gait_controller+0x183c>)
 8004dd2:	ed93 5a01 	vldr	s10, [r3, #4]
 8004dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8004e10 <Gait_controller+0x183c>)
 8004dd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ddc:	eef1 7a67 	vneg.f32	s15, s15
 8004de0:	eef0 2a67 	vmov.f32	s5, s15
 8004de4:	eeb0 2a45 	vmov.f32	s4, s10
 8004de8:	eef0 1a65 	vmov.f32	s3, s11
 8004dec:	4910      	ldr	r1, [pc, #64]	@ (8004e30 <Gait_controller+0x185c>)
 8004dee:	eeb0 1a47 	vmov.f32	s2, s14
 8004df2:	eef0 0a46 	vmov.f32	s1, s12
 8004df6:	eeb0 0a66 	vmov.f32	s0, s13
 8004dfa:	480e      	ldr	r0, [pc, #56]	@ (8004e34 <Gait_controller+0x1860>)
 8004dfc:	f7fe fa44 	bl	8003288 <load_leg_position>
			break;
 8004e00:	bf00      	nop
	//			load_leg_position(BR_position,-x_setpoint,-y_setpoint,body_height - step_height, BR_body_angles, 0, 0, 0);
	//			break;
	//		}
	//	}

}
 8004e02:	bf00      	nop
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	200000a0 	.word	0x200000a0
 8004e10:	200002b0 	.word	0x200002b0
 8004e14:	20000250 	.word	0x20000250
 8004e18:	20000000 	.word	0x20000000
 8004e1c:	20000090 	.word	0x20000090
 8004e20:	2000025c 	.word	0x2000025c
 8004e24:	2000000c 	.word	0x2000000c
 8004e28:	20000268 	.word	0x20000268
 8004e2c:	20000018 	.word	0x20000018
 8004e30:	20000274 	.word	0x20000274
 8004e34:	20000024 	.word	0x20000024

08004e38 <angle_to_pulse>:

int angle_to_pulse(float angle){
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	ed87 0a01 	vstr	s0, [r7, #4]
	int pulse;

	pulse = (uint16_t)(angle * 90.7549) + 115;
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fb fb88 	bl	8000558 <__aeabi_f2d>
 8004e48:	a30f      	add	r3, pc, #60	@ (adr r3, 8004e88 <angle_to_pulse+0x50>)
 8004e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4e:	f7fb fbdb 	bl	8000608 <__aeabi_dmul>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	4610      	mov	r0, r2
 8004e58:	4619      	mov	r1, r3
 8004e5a:	f7fb fead 	bl	8000bb8 <__aeabi_d2uiz>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3373      	adds	r3, #115	@ 0x73
 8004e64:	60fb      	str	r3, [r7, #12]

	if (pulse > 535) pulse = 535;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8004e6c:	db02      	blt.n	8004e74 <angle_to_pulse+0x3c>
 8004e6e:	f240 2317 	movw	r3, #535	@ 0x217
 8004e72:	60fb      	str	r3, [r7, #12]
	if (pulse < 115) pulse = 115;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b72      	cmp	r3, #114	@ 0x72
 8004e78:	dc01      	bgt.n	8004e7e <angle_to_pulse+0x46>
 8004e7a:	2373      	movs	r3, #115	@ 0x73
 8004e7c:	60fb      	str	r3, [r7, #12]

	return pulse;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	4816f007 	.word	0x4816f007
 8004e8c:	4056b050 	.word	0x4056b050

08004e90 <Rise>:
/* USER CODE END Application */

void Rise(){
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
//		BL_position[1] = position;
//		BR_position[1] = position;
//		HAL_Delay(1);
//	}

	float position = 0.04;
 8004e96:	4b1a      	ldr	r3, [pc, #104]	@ (8004f00 <Rise+0x70>)
 8004e98:	607b      	str	r3, [r7, #4]
	for ( int j = 0; j < 100; j++){
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	e021      	b.n	8004ee4 <Rise+0x54>
		position += 0.0013;
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7fb fb59 	bl	8000558 <__aeabi_f2d>
 8004ea6:	a314      	add	r3, pc, #80	@ (adr r3, 8004ef8 <Rise+0x68>)
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f7fb f9f6 	bl	800029c <__adddf3>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	f7fb fe9e 	bl	8000bf8 <__aeabi_d2f>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	607b      	str	r3, [r7, #4]
		FL_position[2] = position;
 8004ec0:	4a10      	ldr	r2, [pc, #64]	@ (8004f04 <Rise+0x74>)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6093      	str	r3, [r2, #8]
		FR_position[2] = position;
 8004ec6:	4a10      	ldr	r2, [pc, #64]	@ (8004f08 <Rise+0x78>)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6093      	str	r3, [r2, #8]
		BL_position[2] = position;
 8004ecc:	4a0f      	ldr	r2, [pc, #60]	@ (8004f0c <Rise+0x7c>)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6093      	str	r3, [r2, #8]
		BR_position[2] = position;
 8004ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8004f10 <Rise+0x80>)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6093      	str	r3, [r2, #8]
		HAL_Delay(10);
 8004ed8:	200a      	movs	r0, #10
 8004eda:	f000 fcc5 	bl	8005868 <HAL_Delay>
	for ( int j = 0; j < 100; j++){
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b63      	cmp	r3, #99	@ 0x63
 8004ee8:	ddda      	ble.n	8004ea0 <Rise+0x10>
	}
}
 8004eea:	bf00      	nop
 8004eec:	bf00      	nop
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	f3af 8000 	nop.w
 8004ef8:	5f06f694 	.word	0x5f06f694
 8004efc:	3f554c98 	.word	0x3f554c98
 8004f00:	3d23d70a 	.word	0x3d23d70a
 8004f04:	20000000 	.word	0x20000000
 8004f08:	2000000c 	.word	0x2000000c
 8004f0c:	20000018 	.word	0x20000018
 8004f10:	20000024 	.word	0x20000024

08004f14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	@ 0x28
 8004f18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f1a:	f107 0314 	add.w	r3, r7, #20
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	605a      	str	r2, [r3, #4]
 8004f24:	609a      	str	r2, [r3, #8]
 8004f26:	60da      	str	r2, [r3, #12]
 8004f28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	4b27      	ldr	r3, [pc, #156]	@ (8004fcc <MX_GPIO_Init+0xb8>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f32:	4a26      	ldr	r2, [pc, #152]	@ (8004fcc <MX_GPIO_Init+0xb8>)
 8004f34:	f043 0304 	orr.w	r3, r3, #4
 8004f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f3a:	4b24      	ldr	r3, [pc, #144]	@ (8004fcc <MX_GPIO_Init+0xb8>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	4b20      	ldr	r3, [pc, #128]	@ (8004fcc <MX_GPIO_Init+0xb8>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fcc <MX_GPIO_Init+0xb8>)
 8004f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f56:	4b1d      	ldr	r3, [pc, #116]	@ (8004fcc <MX_GPIO_Init+0xb8>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	60bb      	str	r3, [r7, #8]
 8004f66:	4b19      	ldr	r3, [pc, #100]	@ (8004fcc <MX_GPIO_Init+0xb8>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6a:	4a18      	ldr	r2, [pc, #96]	@ (8004fcc <MX_GPIO_Init+0xb8>)
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
 8004f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f72:	4b16      	ldr	r3, [pc, #88]	@ (8004fcc <MX_GPIO_Init+0xb8>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	60bb      	str	r3, [r7, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	607b      	str	r3, [r7, #4]
 8004f82:	4b12      	ldr	r3, [pc, #72]	@ (8004fcc <MX_GPIO_Init+0xb8>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f86:	4a11      	ldr	r2, [pc, #68]	@ (8004fcc <MX_GPIO_Init+0xb8>)
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004fcc <MX_GPIO_Init+0xb8>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	607b      	str	r3, [r7, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004fa0:	480b      	ldr	r0, [pc, #44]	@ (8004fd0 <MX_GPIO_Init+0xbc>)
 8004fa2:	f000 ffad 	bl	8005f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8004fa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fac:	2301      	movs	r3, #1
 8004fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8004fb8:	f107 0314 	add.w	r3, r7, #20
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4804      	ldr	r0, [pc, #16]	@ (8004fd0 <MX_GPIO_Init+0xbc>)
 8004fc0:	f000 fe1a 	bl	8005bf8 <HAL_GPIO_Init>

}
 8004fc4:	bf00      	nop
 8004fc6:	3728      	adds	r7, #40	@ 0x28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	40020800 	.word	0x40020800

08004fd4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004fd8:	4b12      	ldr	r3, [pc, #72]	@ (8005024 <MX_I2C1_Init+0x50>)
 8004fda:	4a13      	ldr	r2, [pc, #76]	@ (8005028 <MX_I2C1_Init+0x54>)
 8004fdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004fde:	4b11      	ldr	r3, [pc, #68]	@ (8005024 <MX_I2C1_Init+0x50>)
 8004fe0:	4a12      	ldr	r2, [pc, #72]	@ (800502c <MX_I2C1_Init+0x58>)
 8004fe2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8005024 <MX_I2C1_Init+0x50>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004fea:	4b0e      	ldr	r3, [pc, #56]	@ (8005024 <MX_I2C1_Init+0x50>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8005024 <MX_I2C1_Init+0x50>)
 8004ff2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004ff6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8005024 <MX_I2C1_Init+0x50>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004ffe:	4b09      	ldr	r3, [pc, #36]	@ (8005024 <MX_I2C1_Init+0x50>)
 8005000:	2200      	movs	r2, #0
 8005002:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005004:	4b07      	ldr	r3, [pc, #28]	@ (8005024 <MX_I2C1_Init+0x50>)
 8005006:	2200      	movs	r2, #0
 8005008:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800500a:	4b06      	ldr	r3, [pc, #24]	@ (8005024 <MX_I2C1_Init+0x50>)
 800500c:	2200      	movs	r2, #0
 800500e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005010:	4804      	ldr	r0, [pc, #16]	@ (8005024 <MX_I2C1_Init+0x50>)
 8005012:	f000 ff8f 	bl	8005f34 <HAL_I2C_Init>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800501c:	f000 f94e 	bl	80052bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005020:	bf00      	nop
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20000330 	.word	0x20000330
 8005028:	40005400 	.word	0x40005400
 800502c:	000186a0 	.word	0x000186a0

08005030 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005034:	4b12      	ldr	r3, [pc, #72]	@ (8005080 <MX_I2C2_Init+0x50>)
 8005036:	4a13      	ldr	r2, [pc, #76]	@ (8005084 <MX_I2C2_Init+0x54>)
 8005038:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800503a:	4b11      	ldr	r3, [pc, #68]	@ (8005080 <MX_I2C2_Init+0x50>)
 800503c:	4a12      	ldr	r2, [pc, #72]	@ (8005088 <MX_I2C2_Init+0x58>)
 800503e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005040:	4b0f      	ldr	r3, [pc, #60]	@ (8005080 <MX_I2C2_Init+0x50>)
 8005042:	2200      	movs	r2, #0
 8005044:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005046:	4b0e      	ldr	r3, [pc, #56]	@ (8005080 <MX_I2C2_Init+0x50>)
 8005048:	2200      	movs	r2, #0
 800504a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800504c:	4b0c      	ldr	r3, [pc, #48]	@ (8005080 <MX_I2C2_Init+0x50>)
 800504e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005052:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005054:	4b0a      	ldr	r3, [pc, #40]	@ (8005080 <MX_I2C2_Init+0x50>)
 8005056:	2200      	movs	r2, #0
 8005058:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800505a:	4b09      	ldr	r3, [pc, #36]	@ (8005080 <MX_I2C2_Init+0x50>)
 800505c:	2200      	movs	r2, #0
 800505e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005060:	4b07      	ldr	r3, [pc, #28]	@ (8005080 <MX_I2C2_Init+0x50>)
 8005062:	2200      	movs	r2, #0
 8005064:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005066:	4b06      	ldr	r3, [pc, #24]	@ (8005080 <MX_I2C2_Init+0x50>)
 8005068:	2200      	movs	r2, #0
 800506a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800506c:	4804      	ldr	r0, [pc, #16]	@ (8005080 <MX_I2C2_Init+0x50>)
 800506e:	f000 ff61 	bl	8005f34 <HAL_I2C_Init>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005078:	f000 f920 	bl	80052bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800507c:	bf00      	nop
 800507e:	bd80      	pop	{r7, pc}
 8005080:	20000384 	.word	0x20000384
 8005084:	40005800 	.word	0x40005800
 8005088:	000186a0 	.word	0x000186a0

0800508c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08c      	sub	sp, #48	@ 0x30
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005094:	f107 031c 	add.w	r3, r7, #28
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	605a      	str	r2, [r3, #4]
 800509e:	609a      	str	r2, [r3, #8]
 80050a0:	60da      	str	r2, [r3, #12]
 80050a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a3a      	ldr	r2, [pc, #232]	@ (8005194 <HAL_I2C_MspInit+0x108>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d12c      	bne.n	8005108 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ae:	2300      	movs	r3, #0
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	4b39      	ldr	r3, [pc, #228]	@ (8005198 <HAL_I2C_MspInit+0x10c>)
 80050b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b6:	4a38      	ldr	r2, [pc, #224]	@ (8005198 <HAL_I2C_MspInit+0x10c>)
 80050b8:	f043 0302 	orr.w	r3, r3, #2
 80050bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80050be:	4b36      	ldr	r3, [pc, #216]	@ (8005198 <HAL_I2C_MspInit+0x10c>)
 80050c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	61bb      	str	r3, [r7, #24]
 80050c8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050ca:	23c0      	movs	r3, #192	@ 0xc0
 80050cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050ce:	2312      	movs	r3, #18
 80050d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d6:	2303      	movs	r3, #3
 80050d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80050da:	2304      	movs	r3, #4
 80050dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050de:	f107 031c 	add.w	r3, r7, #28
 80050e2:	4619      	mov	r1, r3
 80050e4:	482d      	ldr	r0, [pc, #180]	@ (800519c <HAL_I2C_MspInit+0x110>)
 80050e6:	f000 fd87 	bl	8005bf8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005198 <HAL_I2C_MspInit+0x10c>)
 80050f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f2:	4a29      	ldr	r2, [pc, #164]	@ (8005198 <HAL_I2C_MspInit+0x10c>)
 80050f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80050f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80050fa:	4b27      	ldr	r3, [pc, #156]	@ (8005198 <HAL_I2C_MspInit+0x10c>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005102:	617b      	str	r3, [r7, #20]
 8005104:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005106:	e041      	b.n	800518c <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a24      	ldr	r2, [pc, #144]	@ (80051a0 <HAL_I2C_MspInit+0x114>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d13c      	bne.n	800518c <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	4b20      	ldr	r3, [pc, #128]	@ (8005198 <HAL_I2C_MspInit+0x10c>)
 8005118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511a:	4a1f      	ldr	r2, [pc, #124]	@ (8005198 <HAL_I2C_MspInit+0x10c>)
 800511c:	f043 0302 	orr.w	r3, r3, #2
 8005120:	6313      	str	r3, [r2, #48]	@ 0x30
 8005122:	4b1d      	ldr	r3, [pc, #116]	@ (8005198 <HAL_I2C_MspInit+0x10c>)
 8005124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800512e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005134:	2312      	movs	r3, #18
 8005136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005138:	2300      	movs	r3, #0
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800513c:	2303      	movs	r3, #3
 800513e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005140:	2304      	movs	r3, #4
 8005142:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005144:	f107 031c 	add.w	r3, r7, #28
 8005148:	4619      	mov	r1, r3
 800514a:	4814      	ldr	r0, [pc, #80]	@ (800519c <HAL_I2C_MspInit+0x110>)
 800514c:	f000 fd54 	bl	8005bf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005150:	2308      	movs	r3, #8
 8005152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005154:	2312      	movs	r3, #18
 8005156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005158:	2300      	movs	r3, #0
 800515a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800515c:	2303      	movs	r3, #3
 800515e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8005160:	2309      	movs	r3, #9
 8005162:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005164:	f107 031c 	add.w	r3, r7, #28
 8005168:	4619      	mov	r1, r3
 800516a:	480c      	ldr	r0, [pc, #48]	@ (800519c <HAL_I2C_MspInit+0x110>)
 800516c:	f000 fd44 	bl	8005bf8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	4b08      	ldr	r3, [pc, #32]	@ (8005198 <HAL_I2C_MspInit+0x10c>)
 8005176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005178:	4a07      	ldr	r2, [pc, #28]	@ (8005198 <HAL_I2C_MspInit+0x10c>)
 800517a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800517e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005180:	4b05      	ldr	r3, [pc, #20]	@ (8005198 <HAL_I2C_MspInit+0x10c>)
 8005182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005184:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	68fb      	ldr	r3, [r7, #12]
}
 800518c:	bf00      	nop
 800518e:	3730      	adds	r7, #48	@ 0x30
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40005400 	.word	0x40005400
 8005198:	40023800 	.word	0x40023800
 800519c:	40020400 	.word	0x40020400
 80051a0:	40005800 	.word	0x40005800

080051a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80051a8:	f000 faec 	bl	8005784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80051ac:	f000 f812 	bl	80051d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80051b0:	f7ff feb0 	bl	8004f14 <MX_GPIO_Init>
  MX_I2C1_Init();
 80051b4:	f7ff ff0e 	bl	8004fd4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80051b8:	f7ff ff3a 	bl	8005030 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80051bc:	f000 fa46 	bl	800564c <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80051c0:	f000 f870 	bl	80052a4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80051c4:	f003 ff90 	bl	80090e8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80051c8:	f7fc fae8 	bl	800179c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80051cc:	f003 ffb0 	bl	8009130 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80051d0:	bf00      	nop
 80051d2:	e7fd      	b.n	80051d0 <main+0x2c>

080051d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b094      	sub	sp, #80	@ 0x50
 80051d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051da:	f107 0320 	add.w	r3, r7, #32
 80051de:	2230      	movs	r2, #48	@ 0x30
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f006 fd88 	bl	800bcf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051e8:	f107 030c 	add.w	r3, r7, #12
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	605a      	str	r2, [r3, #4]
 80051f2:	609a      	str	r2, [r3, #8]
 80051f4:	60da      	str	r2, [r3, #12]
 80051f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80051f8:	2300      	movs	r3, #0
 80051fa:	60bb      	str	r3, [r7, #8]
 80051fc:	4b27      	ldr	r3, [pc, #156]	@ (800529c <SystemClock_Config+0xc8>)
 80051fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005200:	4a26      	ldr	r2, [pc, #152]	@ (800529c <SystemClock_Config+0xc8>)
 8005202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005206:	6413      	str	r3, [r2, #64]	@ 0x40
 8005208:	4b24      	ldr	r3, [pc, #144]	@ (800529c <SystemClock_Config+0xc8>)
 800520a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005214:	2300      	movs	r3, #0
 8005216:	607b      	str	r3, [r7, #4]
 8005218:	4b21      	ldr	r3, [pc, #132]	@ (80052a0 <SystemClock_Config+0xcc>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a20      	ldr	r2, [pc, #128]	@ (80052a0 <SystemClock_Config+0xcc>)
 800521e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	4b1e      	ldr	r3, [pc, #120]	@ (80052a0 <SystemClock_Config+0xcc>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800522c:	607b      	str	r3, [r7, #4]
 800522e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005230:	2301      	movs	r3, #1
 8005232:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005234:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005238:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800523a:	2302      	movs	r3, #2
 800523c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800523e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005242:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8005244:	2310      	movs	r3, #16
 8005246:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 128;
 8005248:	2380      	movs	r3, #128	@ 0x80
 800524a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800524c:	2302      	movs	r3, #2
 800524e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005250:	2304      	movs	r3, #4
 8005252:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005254:	f107 0320 	add.w	r3, r7, #32
 8005258:	4618      	mov	r0, r3
 800525a:	f002 fb0f 	bl	800787c <HAL_RCC_OscConfig>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005264:	f000 f82a 	bl	80052bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005268:	230f      	movs	r3, #15
 800526a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800526c:	2302      	movs	r3, #2
 800526e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005274:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005278:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800527a:	2300      	movs	r3, #0
 800527c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800527e:	f107 030c 	add.w	r3, r7, #12
 8005282:	2103      	movs	r1, #3
 8005284:	4618      	mov	r0, r3
 8005286:	f002 fd71 	bl	8007d6c <HAL_RCC_ClockConfig>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005290:	f000 f814 	bl	80052bc <Error_Handler>
  }
}
 8005294:	bf00      	nop
 8005296:	3750      	adds	r7, #80	@ 0x50
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40023800 	.word	0x40023800
 80052a0:	40007000 	.word	0x40007000

080052a4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80052a8:	2200      	movs	r2, #0
 80052aa:	2105      	movs	r1, #5
 80052ac:	2025      	movs	r0, #37	@ 0x25
 80052ae:	f000 fbda 	bl	8005a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80052b2:	2025      	movs	r0, #37	@ 0x25
 80052b4:	f000 fbf3 	bl	8005a9e <HAL_NVIC_EnableIRQ>
}
 80052b8:	bf00      	nop
 80052ba:	bd80      	pop	{r7, pc}

080052bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052c0:	b672      	cpsid	i
}
 80052c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80052c4:	bf00      	nop
 80052c6:	e7fd      	b.n	80052c4 <Error_Handler+0x8>

080052c8 <SPIDInit>:
#include "spid.h"

void SPIDInit(SPID_t* SPIDX, float* error, float *output, float sample_time,float saturation,float intgerator_max,
		float KP, float KI, float KD, float KE, float KU){
 80052c8:	b480      	push	{r7}
 80052ca:	b08d      	sub	sp, #52	@ 0x34
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80052d0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80052d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80052d4:	ed87 0a08 	vstr	s0, [r7, #32]
 80052d8:	edc7 0a07 	vstr	s1, [r7, #28]
 80052dc:	ed87 1a06 	vstr	s2, [r7, #24]
 80052e0:	edc7 1a05 	vstr	s3, [r7, #20]
 80052e4:	ed87 2a04 	vstr	s4, [r7, #16]
 80052e8:	edc7 2a03 	vstr	s5, [r7, #12]
 80052ec:	ed87 3a02 	vstr	s6, [r7, #8]
 80052f0:	edc7 3a01 	vstr	s7, [r7, #4]

	SPIDX->saturation = saturation;
 80052f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	625a      	str	r2, [r3, #36]	@ 0x24
	SPIDX->integ_max = intgerator_max;
 80052fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	629a      	str	r2, [r3, #40]	@ 0x28
	SPIDX->sample_time = sample_time;
 8005300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005302:	6a3a      	ldr	r2, [r7, #32]
 8005304:	609a      	str	r2, [r3, #8]
	SPIDX->KP = KP;
 8005306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	619a      	str	r2, [r3, #24]
	SPIDX->KI = KI;
 800530c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	61da      	str	r2, [r3, #28]
	SPIDX->KD = KD;
 8005312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	621a      	str	r2, [r3, #32]
	SPIDX->KE = KE;
 8005318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	62da      	str	r2, [r3, #44]	@ 0x2c
	SPIDX->KU = KU;
 800531e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	631a      	str	r2, [r3, #48]	@ 0x30

	SPIDX->error_source = error;
 8005324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005328:	601a      	str	r2, [r3, #0]
	SPIDX->integrator = 0.0;
 800532a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	611a      	str	r2, [r3, #16]
	SPIDX->diffrentiator= 0.0;
 8005332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	615a      	str	r2, [r3, #20]
	SPIDX->prev_error = 0.0;
 800533a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	605a      	str	r2, [r3, #4]
	SPIDX->output = output;
 8005342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005346:	60da      	str	r2, [r3, #12]


}
 8005348:	bf00      	nop
 800534a:	3734      	adds	r7, #52	@ 0x34
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <SPIDLoop>:


void SPIDLoop(SPID_t* SPIDX){
 8005354:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005358:	b086      	sub	sp, #24
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]

	float error = *(SPIDX->error_source) * SPIDX->KE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	ed93 7a00 	vldr	s14, [r3]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800536c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005370:	edc7 7a04 	vstr	s15, [r7, #16]


	SPIDX->integrator += ((error + SPIDX->prev_error) * 0.5  * (SPIDX->sample_time)) * SPIDX->KI;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	4618      	mov	r0, r3
 800537a:	f7fb f8ed 	bl	8000558 <__aeabi_f2d>
 800537e:	4604      	mov	r4, r0
 8005380:	460d      	mov	r5, r1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	ed93 7a01 	vldr	s14, [r3, #4]
 8005388:	edd7 7a04 	vldr	s15, [r7, #16]
 800538c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005390:	ee17 0a90 	vmov	r0, s15
 8005394:	f7fb f8e0 	bl	8000558 <__aeabi_f2d>
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	4b57      	ldr	r3, [pc, #348]	@ (80054fc <SPIDLoop+0x1a8>)
 800539e:	f7fb f933 	bl	8000608 <__aeabi_dmul>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4690      	mov	r8, r2
 80053a8:	4699      	mov	r9, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fb f8d2 	bl	8000558 <__aeabi_f2d>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4640      	mov	r0, r8
 80053ba:	4649      	mov	r1, r9
 80053bc:	f7fb f924 	bl	8000608 <__aeabi_dmul>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4690      	mov	r8, r2
 80053c6:	4699      	mov	r9, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fb f8c3 	bl	8000558 <__aeabi_f2d>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4640      	mov	r0, r8
 80053d8:	4649      	mov	r1, r9
 80053da:	f7fb f915 	bl	8000608 <__aeabi_dmul>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4620      	mov	r0, r4
 80053e4:	4629      	mov	r1, r5
 80053e6:	f7fa ff59 	bl	800029c <__adddf3>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	4610      	mov	r0, r2
 80053f0:	4619      	mov	r1, r3
 80053f2:	f7fb fc01 	bl	8000bf8 <__aeabi_d2f>
 80053f6:	4602      	mov	r2, r0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	611a      	str	r2, [r3, #16]

	if(SPIDX->integrator > SPIDX->integ_max)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005408:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800540c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005410:	dd03      	ble.n	800541a <SPIDLoop+0xc6>
		SPIDX->integrator = SPIDX->integ_max;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	611a      	str	r2, [r3, #16]
	if(SPIDX->integrator < -SPIDX->integ_max)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	ed93 7a04 	vldr	s14, [r3, #16]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8005426:	eef1 7a67 	vneg.f32	s15, s15
 800542a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800542e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005432:	d507      	bpl.n	8005444 <SPIDLoop+0xf0>
		SPIDX->integrator = -SPIDX->integ_max;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800543a:	eef1 7a67 	vneg.f32	s15, s15
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	edc3 7a04 	vstr	s15, [r3, #16]


	//Dervative and Low pass Filter using Measurement to prevent Impulse when on set point change or other not smooth activites
	SPIDX->diffrentiator = SPIDX->KD * ((error - SPIDX->prev_error)/(SPIDX->sample_time));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	ed93 7a08 	vldr	s14, [r3, #32]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005450:	edd7 6a04 	vldr	s13, [r7, #16]
 8005454:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	edd3 6a02 	vldr	s13, [r3, #8]
 800545e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	edc3 7a05 	vstr	s15, [r3, #20]

	float PID = SPIDX->KP * error + SPIDX->integrator + SPIDX->diffrentiator;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	ed93 7a06 	vldr	s14, [r3, #24]
 8005472:	edd7 7a04 	vldr	s15, [r7, #16]
 8005476:	ee27 7a27 	vmul.f32	s14, s14, s15
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005480:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	edd3 7a05 	vldr	s15, [r3, #20]
 800548a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800548e:	edc7 7a05 	vstr	s15, [r7, #20]

	if(PID > SPIDX->saturation)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005498:	ed97 7a05 	vldr	s14, [r7, #20]
 800549c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a4:	dd02      	ble.n	80054ac <SPIDLoop+0x158>
		PID = SPIDX->saturation;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054aa:	617b      	str	r3, [r7, #20]
	if(PID < -SPIDX->saturation)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80054b2:	eef1 7a67 	vneg.f32	s15, s15
 80054b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80054ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c2:	d506      	bpl.n	80054d2 <SPIDLoop+0x17e>
		PID = -SPIDX->saturation;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80054ca:	eef1 7a67 	vneg.f32	s15, s15
 80054ce:	edc7 7a05 	vstr	s15, [r7, #20]

	SPIDX->prev_error = error;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	605a      	str	r2, [r3, #4]

	float output_buffer = (PID) * (SPIDX->KU);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80054de:	ed97 7a05 	vldr	s14, [r7, #20]
 80054e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e6:	edc7 7a03 	vstr	s15, [r7, #12]

	*(SPIDX->output) = output_buffer;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	601a      	str	r2, [r3, #0]

}
 80054f2:	bf00      	nop
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80054fc:	3fe00000 	.word	0x3fe00000

08005500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005506:	2300      	movs	r3, #0
 8005508:	607b      	str	r3, [r7, #4]
 800550a:	4b12      	ldr	r3, [pc, #72]	@ (8005554 <HAL_MspInit+0x54>)
 800550c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550e:	4a11      	ldr	r2, [pc, #68]	@ (8005554 <HAL_MspInit+0x54>)
 8005510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005514:	6453      	str	r3, [r2, #68]	@ 0x44
 8005516:	4b0f      	ldr	r3, [pc, #60]	@ (8005554 <HAL_MspInit+0x54>)
 8005518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800551e:	607b      	str	r3, [r7, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005522:	2300      	movs	r3, #0
 8005524:	603b      	str	r3, [r7, #0]
 8005526:	4b0b      	ldr	r3, [pc, #44]	@ (8005554 <HAL_MspInit+0x54>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	4a0a      	ldr	r2, [pc, #40]	@ (8005554 <HAL_MspInit+0x54>)
 800552c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005530:	6413      	str	r3, [r2, #64]	@ 0x40
 8005532:	4b08      	ldr	r3, [pc, #32]	@ (8005554 <HAL_MspInit+0x54>)
 8005534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800553e:	2200      	movs	r2, #0
 8005540:	210f      	movs	r1, #15
 8005542:	f06f 0001 	mvn.w	r0, #1
 8005546:	f000 fa8e 	bl	8005a66 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40023800 	.word	0x40023800

08005558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800555c:	bf00      	nop
 800555e:	e7fd      	b.n	800555c <NMI_Handler+0x4>

08005560 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005564:	bf00      	nop
 8005566:	e7fd      	b.n	8005564 <HardFault_Handler+0x4>

08005568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800556c:	bf00      	nop
 800556e:	e7fd      	b.n	800556c <MemManage_Handler+0x4>

08005570 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005574:	bf00      	nop
 8005576:	e7fd      	b.n	8005574 <BusFault_Handler+0x4>

08005578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005578:	b480      	push	{r7}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800557c:	bf00      	nop
 800557e:	e7fd      	b.n	800557c <UsageFault_Handler+0x4>

08005580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005584:	bf00      	nop
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005592:	f000 f949 	bl	8005828 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005596:	f005 fa87 	bl	800aaa8 <xTaskGetSchedulerState>
 800559a:	4603      	mov	r3, r0
 800559c:	2b01      	cmp	r3, #1
 800559e:	d001      	beq.n	80055a4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80055a0:	f006 f882 	bl	800b6a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055a4:	bf00      	nop
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80055ac:	4802      	ldr	r0, [pc, #8]	@ (80055b8 <USART1_IRQHandler+0x10>)
 80055ae:	f002 fe69 	bl	8008284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80055b2:	bf00      	nop
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	200003dc 	.word	0x200003dc

080055bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055c4:	4a14      	ldr	r2, [pc, #80]	@ (8005618 <_sbrk+0x5c>)
 80055c6:	4b15      	ldr	r3, [pc, #84]	@ (800561c <_sbrk+0x60>)
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055d0:	4b13      	ldr	r3, [pc, #76]	@ (8005620 <_sbrk+0x64>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055d8:	4b11      	ldr	r3, [pc, #68]	@ (8005620 <_sbrk+0x64>)
 80055da:	4a12      	ldr	r2, [pc, #72]	@ (8005624 <_sbrk+0x68>)
 80055dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055de:	4b10      	ldr	r3, [pc, #64]	@ (8005620 <_sbrk+0x64>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4413      	add	r3, r2
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d207      	bcs.n	80055fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055ec:	f006 fbe2 	bl	800bdb4 <__errno>
 80055f0:	4603      	mov	r3, r0
 80055f2:	220c      	movs	r2, #12
 80055f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055f6:	f04f 33ff 	mov.w	r3, #4294967295
 80055fa:	e009      	b.n	8005610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055fc:	4b08      	ldr	r3, [pc, #32]	@ (8005620 <_sbrk+0x64>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005602:	4b07      	ldr	r3, [pc, #28]	@ (8005620 <_sbrk+0x64>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4413      	add	r3, r2
 800560a:	4a05      	ldr	r2, [pc, #20]	@ (8005620 <_sbrk+0x64>)
 800560c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800560e:	68fb      	ldr	r3, [r7, #12]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20020000 	.word	0x20020000
 800561c:	00000400 	.word	0x00000400
 8005620:	200003d8 	.word	0x200003d8
 8005624:	20006178 	.word	0x20006178

08005628 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800562c:	4b06      	ldr	r3, [pc, #24]	@ (8005648 <SystemInit+0x20>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005632:	4a05      	ldr	r2, [pc, #20]	@ (8005648 <SystemInit+0x20>)
 8005634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800563c:	bf00      	nop
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	e000ed00 	.word	0xe000ed00

0800564c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005650:	4b11      	ldr	r3, [pc, #68]	@ (8005698 <MX_USART1_UART_Init+0x4c>)
 8005652:	4a12      	ldr	r2, [pc, #72]	@ (800569c <MX_USART1_UART_Init+0x50>)
 8005654:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005656:	4b10      	ldr	r3, [pc, #64]	@ (8005698 <MX_USART1_UART_Init+0x4c>)
 8005658:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800565c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800565e:	4b0e      	ldr	r3, [pc, #56]	@ (8005698 <MX_USART1_UART_Init+0x4c>)
 8005660:	2200      	movs	r2, #0
 8005662:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005664:	4b0c      	ldr	r3, [pc, #48]	@ (8005698 <MX_USART1_UART_Init+0x4c>)
 8005666:	2200      	movs	r2, #0
 8005668:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800566a:	4b0b      	ldr	r3, [pc, #44]	@ (8005698 <MX_USART1_UART_Init+0x4c>)
 800566c:	2200      	movs	r2, #0
 800566e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005670:	4b09      	ldr	r3, [pc, #36]	@ (8005698 <MX_USART1_UART_Init+0x4c>)
 8005672:	220c      	movs	r2, #12
 8005674:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005676:	4b08      	ldr	r3, [pc, #32]	@ (8005698 <MX_USART1_UART_Init+0x4c>)
 8005678:	2200      	movs	r2, #0
 800567a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800567c:	4b06      	ldr	r3, [pc, #24]	@ (8005698 <MX_USART1_UART_Init+0x4c>)
 800567e:	2200      	movs	r2, #0
 8005680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005682:	4805      	ldr	r0, [pc, #20]	@ (8005698 <MX_USART1_UART_Init+0x4c>)
 8005684:	f002 fd52 	bl	800812c <HAL_UART_Init>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800568e:	f7ff fe15 	bl	80052bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005692:	bf00      	nop
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	200003dc 	.word	0x200003dc
 800569c:	40011000 	.word	0x40011000

080056a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08a      	sub	sp, #40	@ 0x28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056a8:	f107 0314 	add.w	r3, r7, #20
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	609a      	str	r2, [r3, #8]
 80056b4:	60da      	str	r2, [r3, #12]
 80056b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a19      	ldr	r2, [pc, #100]	@ (8005724 <HAL_UART_MspInit+0x84>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d12c      	bne.n	800571c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80056c2:	2300      	movs	r3, #0
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	4b18      	ldr	r3, [pc, #96]	@ (8005728 <HAL_UART_MspInit+0x88>)
 80056c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ca:	4a17      	ldr	r2, [pc, #92]	@ (8005728 <HAL_UART_MspInit+0x88>)
 80056cc:	f043 0310 	orr.w	r3, r3, #16
 80056d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80056d2:	4b15      	ldr	r3, [pc, #84]	@ (8005728 <HAL_UART_MspInit+0x88>)
 80056d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056d6:	f003 0310 	and.w	r3, r3, #16
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056de:	2300      	movs	r3, #0
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	4b11      	ldr	r3, [pc, #68]	@ (8005728 <HAL_UART_MspInit+0x88>)
 80056e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e6:	4a10      	ldr	r2, [pc, #64]	@ (8005728 <HAL_UART_MspInit+0x88>)
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80056ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005728 <HAL_UART_MspInit+0x88>)
 80056f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80056fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80056fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005700:	2302      	movs	r3, #2
 8005702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005704:	2300      	movs	r3, #0
 8005706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005708:	2303      	movs	r3, #3
 800570a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800570c:	2307      	movs	r3, #7
 800570e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005710:	f107 0314 	add.w	r3, r7, #20
 8005714:	4619      	mov	r1, r3
 8005716:	4805      	ldr	r0, [pc, #20]	@ (800572c <HAL_UART_MspInit+0x8c>)
 8005718:	f000 fa6e 	bl	8005bf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800571c:	bf00      	nop
 800571e:	3728      	adds	r7, #40	@ 0x28
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40011000 	.word	0x40011000
 8005728:	40023800 	.word	0x40023800
 800572c:	40020000 	.word	0x40020000

08005730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005730:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005768 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005734:	f7ff ff78 	bl	8005628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005738:	480c      	ldr	r0, [pc, #48]	@ (800576c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800573a:	490d      	ldr	r1, [pc, #52]	@ (8005770 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800573c:	4a0d      	ldr	r2, [pc, #52]	@ (8005774 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800573e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005740:	e002      	b.n	8005748 <LoopCopyDataInit>

08005742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005746:	3304      	adds	r3, #4

08005748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800574a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800574c:	d3f9      	bcc.n	8005742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800574e:	4a0a      	ldr	r2, [pc, #40]	@ (8005778 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005750:	4c0a      	ldr	r4, [pc, #40]	@ (800577c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005754:	e001      	b.n	800575a <LoopFillZerobss>

08005756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005758:	3204      	adds	r2, #4

0800575a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800575a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800575c:	d3fb      	bcc.n	8005756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800575e:	f006 fb2f 	bl	800bdc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005762:	f7ff fd1f 	bl	80051a4 <main>
  bx  lr    
 8005766:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005768:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800576c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005770:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8005774:	0800fb30 	.word	0x0800fb30
  ldr r2, =_sbss
 8005778:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 800577c:	20006178 	.word	0x20006178

08005780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005780:	e7fe      	b.n	8005780 <ADC_IRQHandler>
	...

08005784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005788:	4b0e      	ldr	r3, [pc, #56]	@ (80057c4 <HAL_Init+0x40>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a0d      	ldr	r2, [pc, #52]	@ (80057c4 <HAL_Init+0x40>)
 800578e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005794:	4b0b      	ldr	r3, [pc, #44]	@ (80057c4 <HAL_Init+0x40>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a0a      	ldr	r2, [pc, #40]	@ (80057c4 <HAL_Init+0x40>)
 800579a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800579e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057a0:	4b08      	ldr	r3, [pc, #32]	@ (80057c4 <HAL_Init+0x40>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a07      	ldr	r2, [pc, #28]	@ (80057c4 <HAL_Init+0x40>)
 80057a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057ac:	2003      	movs	r0, #3
 80057ae:	f000 f94f 	bl	8005a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057b2:	200f      	movs	r0, #15
 80057b4:	f000 f808 	bl	80057c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057b8:	f7ff fea2 	bl	8005500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40023c00 	.word	0x40023c00

080057c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057d0:	4b12      	ldr	r3, [pc, #72]	@ (800581c <HAL_InitTick+0x54>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	4b12      	ldr	r3, [pc, #72]	@ (8005820 <HAL_InitTick+0x58>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	4619      	mov	r1, r3
 80057da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80057de:	fbb3 f3f1 	udiv	r3, r3, r1
 80057e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 f967 	bl	8005aba <HAL_SYSTICK_Config>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e00e      	b.n	8005814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b0f      	cmp	r3, #15
 80057fa:	d80a      	bhi.n	8005812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057fc:	2200      	movs	r2, #0
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
 8005804:	f000 f92f 	bl	8005a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005808:	4a06      	ldr	r2, [pc, #24]	@ (8005824 <HAL_InitTick+0x5c>)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	e000      	b.n	8005814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
}
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	200000a4 	.word	0x200000a4
 8005820:	200000ac 	.word	0x200000ac
 8005824:	200000a8 	.word	0x200000a8

08005828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800582c:	4b06      	ldr	r3, [pc, #24]	@ (8005848 <HAL_IncTick+0x20>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	4b06      	ldr	r3, [pc, #24]	@ (800584c <HAL_IncTick+0x24>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4413      	add	r3, r2
 8005838:	4a04      	ldr	r2, [pc, #16]	@ (800584c <HAL_IncTick+0x24>)
 800583a:	6013      	str	r3, [r2, #0]
}
 800583c:	bf00      	nop
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	200000ac 	.word	0x200000ac
 800584c:	20000424 	.word	0x20000424

08005850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  return uwTick;
 8005854:	4b03      	ldr	r3, [pc, #12]	@ (8005864 <HAL_GetTick+0x14>)
 8005856:	681b      	ldr	r3, [r3, #0]
}
 8005858:	4618      	mov	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000424 	.word	0x20000424

08005868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005870:	f7ff ffee 	bl	8005850 <HAL_GetTick>
 8005874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005880:	d005      	beq.n	800588e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005882:	4b0a      	ldr	r3, [pc, #40]	@ (80058ac <HAL_Delay+0x44>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800588e:	bf00      	nop
 8005890:	f7ff ffde 	bl	8005850 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	429a      	cmp	r2, r3
 800589e:	d8f7      	bhi.n	8005890 <HAL_Delay+0x28>
  {
  }
}
 80058a0:	bf00      	nop
 80058a2:	bf00      	nop
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	200000ac 	.word	0x200000ac

080058b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058c0:	4b0c      	ldr	r3, [pc, #48]	@ (80058f4 <__NVIC_SetPriorityGrouping+0x44>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80058cc:	4013      	ands	r3, r2
 80058ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80058dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058e2:	4a04      	ldr	r2, [pc, #16]	@ (80058f4 <__NVIC_SetPriorityGrouping+0x44>)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	60d3      	str	r3, [r2, #12]
}
 80058e8:	bf00      	nop
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	e000ed00 	.word	0xe000ed00

080058f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058fc:	4b04      	ldr	r3, [pc, #16]	@ (8005910 <__NVIC_GetPriorityGrouping+0x18>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	0a1b      	lsrs	r3, r3, #8
 8005902:	f003 0307 	and.w	r3, r3, #7
}
 8005906:	4618      	mov	r0, r3
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	e000ed00 	.word	0xe000ed00

08005914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800591e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005922:	2b00      	cmp	r3, #0
 8005924:	db0b      	blt.n	800593e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005926:	79fb      	ldrb	r3, [r7, #7]
 8005928:	f003 021f 	and.w	r2, r3, #31
 800592c:	4907      	ldr	r1, [pc, #28]	@ (800594c <__NVIC_EnableIRQ+0x38>)
 800592e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005932:	095b      	lsrs	r3, r3, #5
 8005934:	2001      	movs	r0, #1
 8005936:	fa00 f202 	lsl.w	r2, r0, r2
 800593a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	e000e100 	.word	0xe000e100

08005950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	6039      	str	r1, [r7, #0]
 800595a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800595c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005960:	2b00      	cmp	r3, #0
 8005962:	db0a      	blt.n	800597a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	b2da      	uxtb	r2, r3
 8005968:	490c      	ldr	r1, [pc, #48]	@ (800599c <__NVIC_SetPriority+0x4c>)
 800596a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800596e:	0112      	lsls	r2, r2, #4
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	440b      	add	r3, r1
 8005974:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005978:	e00a      	b.n	8005990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	b2da      	uxtb	r2, r3
 800597e:	4908      	ldr	r1, [pc, #32]	@ (80059a0 <__NVIC_SetPriority+0x50>)
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	3b04      	subs	r3, #4
 8005988:	0112      	lsls	r2, r2, #4
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	440b      	add	r3, r1
 800598e:	761a      	strb	r2, [r3, #24]
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	e000e100 	.word	0xe000e100
 80059a0:	e000ed00 	.word	0xe000ed00

080059a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b089      	sub	sp, #36	@ 0x24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f1c3 0307 	rsb	r3, r3, #7
 80059be:	2b04      	cmp	r3, #4
 80059c0:	bf28      	it	cs
 80059c2:	2304      	movcs	r3, #4
 80059c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	3304      	adds	r3, #4
 80059ca:	2b06      	cmp	r3, #6
 80059cc:	d902      	bls.n	80059d4 <NVIC_EncodePriority+0x30>
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	3b03      	subs	r3, #3
 80059d2:	e000      	b.n	80059d6 <NVIC_EncodePriority+0x32>
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059d8:	f04f 32ff 	mov.w	r2, #4294967295
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	43da      	mvns	r2, r3
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	401a      	ands	r2, r3
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059ec:	f04f 31ff 	mov.w	r1, #4294967295
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	fa01 f303 	lsl.w	r3, r1, r3
 80059f6:	43d9      	mvns	r1, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059fc:	4313      	orrs	r3, r2
         );
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3724      	adds	r7, #36	@ 0x24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
	...

08005a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a1c:	d301      	bcc.n	8005a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e00f      	b.n	8005a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a22:	4a0a      	ldr	r2, [pc, #40]	@ (8005a4c <SysTick_Config+0x40>)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a2a:	210f      	movs	r1, #15
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a30:	f7ff ff8e 	bl	8005950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a34:	4b05      	ldr	r3, [pc, #20]	@ (8005a4c <SysTick_Config+0x40>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a3a:	4b04      	ldr	r3, [pc, #16]	@ (8005a4c <SysTick_Config+0x40>)
 8005a3c:	2207      	movs	r2, #7
 8005a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	e000e010 	.word	0xe000e010

08005a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff ff29 	bl	80058b0 <__NVIC_SetPriorityGrouping>
}
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b086      	sub	sp, #24
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	607a      	str	r2, [r7, #4]
 8005a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a78:	f7ff ff3e 	bl	80058f8 <__NVIC_GetPriorityGrouping>
 8005a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	68b9      	ldr	r1, [r7, #8]
 8005a82:	6978      	ldr	r0, [r7, #20]
 8005a84:	f7ff ff8e 	bl	80059a4 <NVIC_EncodePriority>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a8e:	4611      	mov	r1, r2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff ff5d 	bl	8005950 <__NVIC_SetPriority>
}
 8005a96:	bf00      	nop
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b082      	sub	sp, #8
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff ff31 	bl	8005914 <__NVIC_EnableIRQ>
}
 8005ab2:	bf00      	nop
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff ffa2 	bl	8005a0c <SysTick_Config>
 8005ac8:	4603      	mov	r3, r0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ade:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005ae0:	f7ff feb6 	bl	8005850 <HAL_GetTick>
 8005ae4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d008      	beq.n	8005b04 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2280      	movs	r2, #128	@ 0x80
 8005af6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e052      	b.n	8005baa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0216 	bic.w	r2, r2, #22
 8005b12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b22:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d103      	bne.n	8005b34 <HAL_DMA_Abort+0x62>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d007      	beq.n	8005b44 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0208 	bic.w	r2, r2, #8
 8005b42:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0201 	bic.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b54:	e013      	b.n	8005b7e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b56:	f7ff fe7b 	bl	8005850 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b05      	cmp	r3, #5
 8005b62:	d90c      	bls.n	8005b7e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e015      	b.n	8005baa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e4      	bne.n	8005b56 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b90:	223f      	movs	r2, #63	@ 0x3f
 8005b92:	409a      	lsls	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d004      	beq.n	8005bd0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2280      	movs	r2, #128	@ 0x80
 8005bca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e00c      	b.n	8005bea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2205      	movs	r2, #5
 8005bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0201 	bic.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
	...

08005bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b089      	sub	sp, #36	@ 0x24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61fb      	str	r3, [r7, #28]
 8005c12:	e159      	b.n	8005ec8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c14:	2201      	movs	r2, #1
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4013      	ands	r3, r2
 8005c26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	f040 8148 	bne.w	8005ec2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d005      	beq.n	8005c4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d130      	bne.n	8005cac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	2203      	movs	r2, #3
 8005c56:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5a:	43db      	mvns	r3, r3
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c80:	2201      	movs	r2, #1
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	fa02 f303 	lsl.w	r3, r2, r3
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	091b      	lsrs	r3, r3, #4
 8005c96:	f003 0201 	and.w	r2, r3, #1
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d017      	beq.n	8005ce8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	2203      	movs	r2, #3
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f003 0303 	and.w	r3, r3, #3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d123      	bne.n	8005d3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	08da      	lsrs	r2, r3, #3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3208      	adds	r2, #8
 8005cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	220f      	movs	r2, #15
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	43db      	mvns	r3, r3
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	4013      	ands	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	08da      	lsrs	r2, r3, #3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3208      	adds	r2, #8
 8005d36:	69b9      	ldr	r1, [r7, #24]
 8005d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	2203      	movs	r2, #3
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	4013      	ands	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f003 0203 	and.w	r2, r3, #3
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 80a2 	beq.w	8005ec2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	4b57      	ldr	r3, [pc, #348]	@ (8005ee0 <HAL_GPIO_Init+0x2e8>)
 8005d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d86:	4a56      	ldr	r2, [pc, #344]	@ (8005ee0 <HAL_GPIO_Init+0x2e8>)
 8005d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d8e:	4b54      	ldr	r3, [pc, #336]	@ (8005ee0 <HAL_GPIO_Init+0x2e8>)
 8005d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d9a:	4a52      	ldr	r2, [pc, #328]	@ (8005ee4 <HAL_GPIO_Init+0x2ec>)
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	089b      	lsrs	r3, r3, #2
 8005da0:	3302      	adds	r3, #2
 8005da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	f003 0303 	and.w	r3, r3, #3
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	220f      	movs	r2, #15
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43db      	mvns	r3, r3
 8005db8:	69ba      	ldr	r2, [r7, #24]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a49      	ldr	r2, [pc, #292]	@ (8005ee8 <HAL_GPIO_Init+0x2f0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d019      	beq.n	8005dfa <HAL_GPIO_Init+0x202>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a48      	ldr	r2, [pc, #288]	@ (8005eec <HAL_GPIO_Init+0x2f4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <HAL_GPIO_Init+0x1fe>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a47      	ldr	r2, [pc, #284]	@ (8005ef0 <HAL_GPIO_Init+0x2f8>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00d      	beq.n	8005df2 <HAL_GPIO_Init+0x1fa>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a46      	ldr	r2, [pc, #280]	@ (8005ef4 <HAL_GPIO_Init+0x2fc>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d007      	beq.n	8005dee <HAL_GPIO_Init+0x1f6>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a45      	ldr	r2, [pc, #276]	@ (8005ef8 <HAL_GPIO_Init+0x300>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d101      	bne.n	8005dea <HAL_GPIO_Init+0x1f2>
 8005de6:	2304      	movs	r3, #4
 8005de8:	e008      	b.n	8005dfc <HAL_GPIO_Init+0x204>
 8005dea:	2307      	movs	r3, #7
 8005dec:	e006      	b.n	8005dfc <HAL_GPIO_Init+0x204>
 8005dee:	2303      	movs	r3, #3
 8005df0:	e004      	b.n	8005dfc <HAL_GPIO_Init+0x204>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e002      	b.n	8005dfc <HAL_GPIO_Init+0x204>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <HAL_GPIO_Init+0x204>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	f002 0203 	and.w	r2, r2, #3
 8005e02:	0092      	lsls	r2, r2, #2
 8005e04:	4093      	lsls	r3, r2
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e0c:	4935      	ldr	r1, [pc, #212]	@ (8005ee4 <HAL_GPIO_Init+0x2ec>)
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	089b      	lsrs	r3, r3, #2
 8005e12:	3302      	adds	r3, #2
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e1a:	4b38      	ldr	r3, [pc, #224]	@ (8005efc <HAL_GPIO_Init+0x304>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	43db      	mvns	r3, r3
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	4013      	ands	r3, r2
 8005e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8005efc <HAL_GPIO_Init+0x304>)
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e44:	4b2d      	ldr	r3, [pc, #180]	@ (8005efc <HAL_GPIO_Init+0x304>)
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	4013      	ands	r3, r2
 8005e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e68:	4a24      	ldr	r2, [pc, #144]	@ (8005efc <HAL_GPIO_Init+0x304>)
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e6e:	4b23      	ldr	r3, [pc, #140]	@ (8005efc <HAL_GPIO_Init+0x304>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	43db      	mvns	r3, r3
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e92:	4a1a      	ldr	r2, [pc, #104]	@ (8005efc <HAL_GPIO_Init+0x304>)
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e98:	4b18      	ldr	r3, [pc, #96]	@ (8005efc <HAL_GPIO_Init+0x304>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	43db      	mvns	r3, r3
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8005efc <HAL_GPIO_Init+0x304>)
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	61fb      	str	r3, [r7, #28]
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	2b0f      	cmp	r3, #15
 8005ecc:	f67f aea2 	bls.w	8005c14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ed0:	bf00      	nop
 8005ed2:	bf00      	nop
 8005ed4:	3724      	adds	r7, #36	@ 0x24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	40013800 	.word	0x40013800
 8005ee8:	40020000 	.word	0x40020000
 8005eec:	40020400 	.word	0x40020400
 8005ef0:	40020800 	.word	0x40020800
 8005ef4:	40020c00 	.word	0x40020c00
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	40013c00 	.word	0x40013c00

08005f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	460b      	mov	r3, r1
 8005f0a:	807b      	strh	r3, [r7, #2]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005f10:	787b      	ldrb	r3, [r7, #1]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f16:	887a      	ldrh	r2, [r7, #2]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005f1c:	e003      	b.n	8005f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005f1e:	887b      	ldrh	r3, [r7, #2]
 8005f20:	041a      	lsls	r2, r3, #16
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	619a      	str	r2, [r3, #24]
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
	...

08005f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e12b      	b.n	800619e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d106      	bne.n	8005f60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7ff f896 	bl	800508c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2224      	movs	r2, #36	@ 0x24
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0201 	bic.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f98:	f002 f8a0 	bl	80080dc <HAL_RCC_GetPCLK1Freq>
 8005f9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	4a81      	ldr	r2, [pc, #516]	@ (80061a8 <HAL_I2C_Init+0x274>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d807      	bhi.n	8005fb8 <HAL_I2C_Init+0x84>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4a80      	ldr	r2, [pc, #512]	@ (80061ac <HAL_I2C_Init+0x278>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	bf94      	ite	ls
 8005fb0:	2301      	movls	r3, #1
 8005fb2:	2300      	movhi	r3, #0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	e006      	b.n	8005fc6 <HAL_I2C_Init+0x92>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4a7d      	ldr	r2, [pc, #500]	@ (80061b0 <HAL_I2C_Init+0x27c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	bf94      	ite	ls
 8005fc0:	2301      	movls	r3, #1
 8005fc2:	2300      	movhi	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e0e7      	b.n	800619e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	4a78      	ldr	r2, [pc, #480]	@ (80061b4 <HAL_I2C_Init+0x280>)
 8005fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd6:	0c9b      	lsrs	r3, r3, #18
 8005fd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	4a6a      	ldr	r2, [pc, #424]	@ (80061a8 <HAL_I2C_Init+0x274>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d802      	bhi.n	8006008 <HAL_I2C_Init+0xd4>
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	3301      	adds	r3, #1
 8006006:	e009      	b.n	800601c <HAL_I2C_Init+0xe8>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800600e:	fb02 f303 	mul.w	r3, r2, r3
 8006012:	4a69      	ldr	r2, [pc, #420]	@ (80061b8 <HAL_I2C_Init+0x284>)
 8006014:	fba2 2303 	umull	r2, r3, r2, r3
 8006018:	099b      	lsrs	r3, r3, #6
 800601a:	3301      	adds	r3, #1
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6812      	ldr	r2, [r2, #0]
 8006020:	430b      	orrs	r3, r1
 8006022:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800602e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	495c      	ldr	r1, [pc, #368]	@ (80061a8 <HAL_I2C_Init+0x274>)
 8006038:	428b      	cmp	r3, r1
 800603a:	d819      	bhi.n	8006070 <HAL_I2C_Init+0x13c>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	1e59      	subs	r1, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	fbb1 f3f3 	udiv	r3, r1, r3
 800604a:	1c59      	adds	r1, r3, #1
 800604c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006050:	400b      	ands	r3, r1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <HAL_I2C_Init+0x138>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	1e59      	subs	r1, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	fbb1 f3f3 	udiv	r3, r1, r3
 8006064:	3301      	adds	r3, #1
 8006066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800606a:	e051      	b.n	8006110 <HAL_I2C_Init+0x1dc>
 800606c:	2304      	movs	r3, #4
 800606e:	e04f      	b.n	8006110 <HAL_I2C_Init+0x1dc>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d111      	bne.n	800609c <HAL_I2C_Init+0x168>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	1e58      	subs	r0, r3, #1
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6859      	ldr	r1, [r3, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	440b      	add	r3, r1
 8006086:	fbb0 f3f3 	udiv	r3, r0, r3
 800608a:	3301      	adds	r3, #1
 800608c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006090:	2b00      	cmp	r3, #0
 8006092:	bf0c      	ite	eq
 8006094:	2301      	moveq	r3, #1
 8006096:	2300      	movne	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	e012      	b.n	80060c2 <HAL_I2C_Init+0x18e>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	1e58      	subs	r0, r3, #1
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6859      	ldr	r1, [r3, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	440b      	add	r3, r1
 80060aa:	0099      	lsls	r1, r3, #2
 80060ac:	440b      	add	r3, r1
 80060ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80060b2:	3301      	adds	r3, #1
 80060b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	bf0c      	ite	eq
 80060bc:	2301      	moveq	r3, #1
 80060be:	2300      	movne	r3, #0
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_I2C_Init+0x196>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e022      	b.n	8006110 <HAL_I2C_Init+0x1dc>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10e      	bne.n	80060f0 <HAL_I2C_Init+0x1bc>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	1e58      	subs	r0, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6859      	ldr	r1, [r3, #4]
 80060da:	460b      	mov	r3, r1
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	440b      	add	r3, r1
 80060e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80060e4:	3301      	adds	r3, #1
 80060e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ee:	e00f      	b.n	8006110 <HAL_I2C_Init+0x1dc>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	1e58      	subs	r0, r3, #1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6859      	ldr	r1, [r3, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	440b      	add	r3, r1
 80060fe:	0099      	lsls	r1, r3, #2
 8006100:	440b      	add	r3, r1
 8006102:	fbb0 f3f3 	udiv	r3, r0, r3
 8006106:	3301      	adds	r3, #1
 8006108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800610c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	6809      	ldr	r1, [r1, #0]
 8006114:	4313      	orrs	r3, r2
 8006116:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69da      	ldr	r2, [r3, #28]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800613e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6911      	ldr	r1, [r2, #16]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	68d2      	ldr	r2, [r2, #12]
 800614a:	4311      	orrs	r1, r2
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	6812      	ldr	r2, [r2, #0]
 8006150:	430b      	orrs	r3, r1
 8006152:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695a      	ldr	r2, [r3, #20]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2220      	movs	r2, #32
 800618a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3710      	adds	r7, #16
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	000186a0 	.word	0x000186a0
 80061ac:	001e847f 	.word	0x001e847f
 80061b0:	003d08ff 	.word	0x003d08ff
 80061b4:	431bde83 	.word	0x431bde83
 80061b8:	10624dd3 	.word	0x10624dd3

080061bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	607a      	str	r2, [r7, #4]
 80061c6:	461a      	mov	r2, r3
 80061c8:	460b      	mov	r3, r1
 80061ca:	817b      	strh	r3, [r7, #10]
 80061cc:	4613      	mov	r3, r2
 80061ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061d0:	f7ff fb3e 	bl	8005850 <HAL_GetTick>
 80061d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b20      	cmp	r3, #32
 80061e0:	f040 80e0 	bne.w	80063a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	2319      	movs	r3, #25
 80061ea:	2201      	movs	r2, #1
 80061ec:	4970      	ldr	r1, [pc, #448]	@ (80063b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f001 f90e 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80061fa:	2302      	movs	r3, #2
 80061fc:	e0d3      	b.n	80063a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_I2C_Master_Transmit+0x50>
 8006208:	2302      	movs	r3, #2
 800620a:	e0cc      	b.n	80063a6 <HAL_I2C_Master_Transmit+0x1ea>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b01      	cmp	r3, #1
 8006220:	d007      	beq.n	8006232 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f042 0201 	orr.w	r2, r2, #1
 8006230:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006240:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2221      	movs	r2, #33	@ 0x21
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2210      	movs	r2, #16
 800624e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	893a      	ldrh	r2, [r7, #8]
 8006262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4a50      	ldr	r2, [pc, #320]	@ (80063b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006272:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006274:	8979      	ldrh	r1, [r7, #10]
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	6a3a      	ldr	r2, [r7, #32]
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 fdfa 	bl	8006e74 <I2C_MasterRequestWrite>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e08d      	b.n	80063a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800628a:	2300      	movs	r3, #0
 800628c:	613b      	str	r3, [r7, #16]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	613b      	str	r3, [r7, #16]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	613b      	str	r3, [r7, #16]
 800629e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80062a0:	e066      	b.n	8006370 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	6a39      	ldr	r1, [r7, #32]
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f001 f9cc 	bl	8007644 <I2C_WaitOnTXEFlagUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00d      	beq.n	80062ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	d107      	bne.n	80062ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e06b      	b.n	80063a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d2:	781a      	ldrb	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b04      	cmp	r3, #4
 800630a:	d11b      	bne.n	8006344 <HAL_I2C_Master_Transmit+0x188>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006310:	2b00      	cmp	r3, #0
 8006312:	d017      	beq.n	8006344 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006318:	781a      	ldrb	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006324:	1c5a      	adds	r2, r3, #1
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800632e:	b29b      	uxth	r3, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	b29a      	uxth	r2, r3
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	6a39      	ldr	r1, [r7, #32]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f001 f9c3 	bl	80076d4 <I2C_WaitOnBTFFlagUntilTimeout>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00d      	beq.n	8006370 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006358:	2b04      	cmp	r3, #4
 800635a:	d107      	bne.n	800636c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800636a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e01a      	b.n	80063a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006374:	2b00      	cmp	r3, #0
 8006376:	d194      	bne.n	80062a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	e000      	b.n	80063a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80063a4:	2302      	movs	r3, #2
  }
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	00100002 	.word	0x00100002
 80063b4:	ffff0000 	.word	0xffff0000

080063b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08c      	sub	sp, #48	@ 0x30
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	607a      	str	r2, [r7, #4]
 80063c2:	461a      	mov	r2, r3
 80063c4:	460b      	mov	r3, r1
 80063c6:	817b      	strh	r3, [r7, #10]
 80063c8:	4613      	mov	r3, r2
 80063ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063cc:	f7ff fa40 	bl	8005850 <HAL_GetTick>
 80063d0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b20      	cmp	r3, #32
 80063dc:	f040 8217 	bne.w	800680e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	2319      	movs	r3, #25
 80063e6:	2201      	movs	r2, #1
 80063e8:	497c      	ldr	r1, [pc, #496]	@ (80065dc <HAL_I2C_Master_Receive+0x224>)
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f001 f810 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80063f6:	2302      	movs	r3, #2
 80063f8:	e20a      	b.n	8006810 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_I2C_Master_Receive+0x50>
 8006404:	2302      	movs	r3, #2
 8006406:	e203      	b.n	8006810 <HAL_I2C_Master_Receive+0x458>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b01      	cmp	r3, #1
 800641c:	d007      	beq.n	800642e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f042 0201 	orr.w	r2, r2, #1
 800642c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800643c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2222      	movs	r2, #34	@ 0x22
 8006442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2210      	movs	r2, #16
 800644a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	893a      	ldrh	r2, [r7, #8]
 800645e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006464:	b29a      	uxth	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4a5c      	ldr	r2, [pc, #368]	@ (80065e0 <HAL_I2C_Master_Receive+0x228>)
 800646e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006470:	8979      	ldrh	r1, [r7, #10]
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fd7e 	bl	8006f78 <I2C_MasterRequestRead>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e1c4      	b.n	8006810 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800648a:	2b00      	cmp	r3, #0
 800648c:	d113      	bne.n	80064b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800648e:	2300      	movs	r3, #0
 8006490:	623b      	str	r3, [r7, #32]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	623b      	str	r3, [r7, #32]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	623b      	str	r3, [r7, #32]
 80064a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	e198      	b.n	80067e8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d11b      	bne.n	80064f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ce:	2300      	movs	r3, #0
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	61fb      	str	r3, [r7, #28]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	61fb      	str	r3, [r7, #28]
 80064e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	e178      	b.n	80067e8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d11b      	bne.n	8006536 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800650c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800651c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800651e:	2300      	movs	r3, #0
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	e158      	b.n	80067e8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006544:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800655c:	e144      	b.n	80067e8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006562:	2b03      	cmp	r3, #3
 8006564:	f200 80f1 	bhi.w	800674a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800656c:	2b01      	cmp	r3, #1
 800656e:	d123      	bne.n	80065b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006572:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f001 f8f5 	bl	8007764 <I2C_WaitOnRXNEFlagUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e145      	b.n	8006810 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80065b6:	e117      	b.n	80067e8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d14e      	bne.n	800665e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c6:	2200      	movs	r2, #0
 80065c8:	4906      	ldr	r1, [pc, #24]	@ (80065e4 <HAL_I2C_Master_Receive+0x22c>)
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 ff20 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d008      	beq.n	80065e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e11a      	b.n	8006810 <HAL_I2C_Master_Receive+0x458>
 80065da:	bf00      	nop
 80065dc:	00100002 	.word	0x00100002
 80065e0:	ffff0000 	.word	0xffff0000
 80065e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691a      	ldr	r2, [r3, #16]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006614:	3b01      	subs	r3, #1
 8006616:	b29a      	uxth	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006646:	3b01      	subs	r3, #1
 8006648:	b29a      	uxth	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800665c:	e0c4      	b.n	80067e8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800665e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006664:	2200      	movs	r2, #0
 8006666:	496c      	ldr	r1, [pc, #432]	@ (8006818 <HAL_I2C_Master_Receive+0x460>)
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 fed1 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e0cb      	b.n	8006810 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006686:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691a      	ldr	r2, [r3, #16]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066a4:	3b01      	subs	r3, #1
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	3b01      	subs	r3, #1
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	2200      	movs	r2, #0
 80066c2:	4955      	ldr	r1, [pc, #340]	@ (8006818 <HAL_I2C_Master_Receive+0x460>)
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 fea3 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e09d      	b.n	8006810 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691a      	ldr	r2, [r3, #16]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800670c:	b29b      	uxth	r3, r3
 800670e:	3b01      	subs	r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691a      	ldr	r2, [r3, #16]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006720:	b2d2      	uxtb	r2, r2
 8006722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006748:	e04e      	b.n	80067e8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800674a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800674c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f001 f808 	bl	8007764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e058      	b.n	8006810 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	691a      	ldr	r2, [r3, #16]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800677a:	3b01      	subs	r3, #1
 800677c:	b29a      	uxth	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006786:	b29b      	uxth	r3, r3
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	2b04      	cmp	r3, #4
 800679c:	d124      	bne.n	80067e8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d107      	bne.n	80067b6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067b4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067d2:	3b01      	subs	r3, #1
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f47f aeb6 	bne.w	800655e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2220      	movs	r2, #32
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	e000      	b.n	8006810 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800680e:	2302      	movs	r3, #2
  }
}
 8006810:	4618      	mov	r0, r3
 8006812:	3728      	adds	r7, #40	@ 0x28
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	00010004 	.word	0x00010004

0800681c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b088      	sub	sp, #32
 8006820:	af02      	add	r7, sp, #8
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	4608      	mov	r0, r1
 8006826:	4611      	mov	r1, r2
 8006828:	461a      	mov	r2, r3
 800682a:	4603      	mov	r3, r0
 800682c:	817b      	strh	r3, [r7, #10]
 800682e:	460b      	mov	r3, r1
 8006830:	813b      	strh	r3, [r7, #8]
 8006832:	4613      	mov	r3, r2
 8006834:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006836:	f7ff f80b 	bl	8005850 <HAL_GetTick>
 800683a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b20      	cmp	r3, #32
 8006846:	f040 80d9 	bne.w	80069fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	2319      	movs	r3, #25
 8006850:	2201      	movs	r2, #1
 8006852:	496d      	ldr	r1, [pc, #436]	@ (8006a08 <HAL_I2C_Mem_Write+0x1ec>)
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 fddb 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006860:	2302      	movs	r3, #2
 8006862:	e0cc      	b.n	80069fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800686a:	2b01      	cmp	r3, #1
 800686c:	d101      	bne.n	8006872 <HAL_I2C_Mem_Write+0x56>
 800686e:	2302      	movs	r3, #2
 8006870:	e0c5      	b.n	80069fe <HAL_I2C_Mem_Write+0x1e2>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b01      	cmp	r3, #1
 8006886:	d007      	beq.n	8006898 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0201 	orr.w	r2, r2, #1
 8006896:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2221      	movs	r2, #33	@ 0x21
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2240      	movs	r2, #64	@ 0x40
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a3a      	ldr	r2, [r7, #32]
 80068c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80068c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4a4d      	ldr	r2, [pc, #308]	@ (8006a0c <HAL_I2C_Mem_Write+0x1f0>)
 80068d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068da:	88f8      	ldrh	r0, [r7, #6]
 80068dc:	893a      	ldrh	r2, [r7, #8]
 80068de:	8979      	ldrh	r1, [r7, #10]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	4603      	mov	r3, r0
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 fc12 	bl	8007114 <I2C_RequestMemoryWrite>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d052      	beq.n	800699c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e081      	b.n	80069fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 fea0 	bl	8007644 <I2C_WaitOnTXEFlagUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00d      	beq.n	8006926 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690e:	2b04      	cmp	r3, #4
 8006910:	d107      	bne.n	8006922 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006920:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e06b      	b.n	80069fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692a:	781a      	ldrb	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006940:	3b01      	subs	r3, #1
 8006942:	b29a      	uxth	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b04      	cmp	r3, #4
 8006962:	d11b      	bne.n	800699c <HAL_I2C_Mem_Write+0x180>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006968:	2b00      	cmp	r3, #0
 800696a:	d017      	beq.n	800699c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006970:	781a      	ldrb	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006986:	3b01      	subs	r3, #1
 8006988:	b29a      	uxth	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006992:	b29b      	uxth	r3, r3
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1aa      	bne.n	80068fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 fe93 	bl	80076d4 <I2C_WaitOnBTFFlagUntilTimeout>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00d      	beq.n	80069d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d107      	bne.n	80069cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e016      	b.n	80069fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	e000      	b.n	80069fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80069fc:	2302      	movs	r3, #2
  }
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	00100002 	.word	0x00100002
 8006a0c:	ffff0000 	.word	0xffff0000

08006a10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08c      	sub	sp, #48	@ 0x30
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	4608      	mov	r0, r1
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4603      	mov	r3, r0
 8006a20:	817b      	strh	r3, [r7, #10]
 8006a22:	460b      	mov	r3, r1
 8006a24:	813b      	strh	r3, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a2a:	f7fe ff11 	bl	8005850 <HAL_GetTick>
 8006a2e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	f040 8214 	bne.w	8006e66 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	2319      	movs	r3, #25
 8006a44:	2201      	movs	r2, #1
 8006a46:	497b      	ldr	r1, [pc, #492]	@ (8006c34 <HAL_I2C_Mem_Read+0x224>)
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 fce1 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006a54:	2302      	movs	r3, #2
 8006a56:	e207      	b.n	8006e68 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d101      	bne.n	8006a66 <HAL_I2C_Mem_Read+0x56>
 8006a62:	2302      	movs	r3, #2
 8006a64:	e200      	b.n	8006e68 <HAL_I2C_Mem_Read+0x458>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d007      	beq.n	8006a8c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2222      	movs	r2, #34	@ 0x22
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2240      	movs	r2, #64	@ 0x40
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ab6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006abc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4a5b      	ldr	r2, [pc, #364]	@ (8006c38 <HAL_I2C_Mem_Read+0x228>)
 8006acc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ace:	88f8      	ldrh	r0, [r7, #6]
 8006ad0:	893a      	ldrh	r2, [r7, #8]
 8006ad2:	8979      	ldrh	r1, [r7, #10]
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad6:	9301      	str	r3, [sp, #4]
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	4603      	mov	r3, r0
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 fbae 	bl	8007240 <I2C_RequestMemoryRead>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e1bc      	b.n	8006e68 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d113      	bne.n	8006b1e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006af6:	2300      	movs	r3, #0
 8006af8:	623b      	str	r3, [r7, #32]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	623b      	str	r3, [r7, #32]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	623b      	str	r3, [r7, #32]
 8006b0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	e190      	b.n	8006e40 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d11b      	bne.n	8006b5e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b36:	2300      	movs	r3, #0
 8006b38:	61fb      	str	r3, [r7, #28]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	61fb      	str	r3, [r7, #28]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	61fb      	str	r3, [r7, #28]
 8006b4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	e170      	b.n	8006e40 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d11b      	bne.n	8006b9e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b86:	2300      	movs	r3, #0
 8006b88:	61bb      	str	r3, [r7, #24]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	61bb      	str	r3, [r7, #24]
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	e150      	b.n	8006e40 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006bb4:	e144      	b.n	8006e40 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	f200 80f1 	bhi.w	8006da2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d123      	bne.n	8006c10 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 fdc9 	bl	8007764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e145      	b.n	8006e68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691a      	ldr	r2, [r3, #16]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006c0e:	e117      	b.n	8006e40 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d14e      	bne.n	8006cb6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1e:	2200      	movs	r2, #0
 8006c20:	4906      	ldr	r1, [pc, #24]	@ (8006c3c <HAL_I2C_Mem_Read+0x22c>)
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 fbf4 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d008      	beq.n	8006c40 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e11a      	b.n	8006e68 <HAL_I2C_Mem_Read+0x458>
 8006c32:	bf00      	nop
 8006c34:	00100002 	.word	0x00100002
 8006c38:	ffff0000 	.word	0xffff0000
 8006c3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691a      	ldr	r2, [r3, #16]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8c:	b2d2      	uxtb	r2, r2
 8006c8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	3b01      	subs	r3, #1
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006cb4:	e0c4      	b.n	8006e40 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	496c      	ldr	r1, [pc, #432]	@ (8006e70 <HAL_I2C_Mem_Read+0x460>)
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f000 fba5 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e0cb      	b.n	8006e68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	691a      	ldr	r2, [r3, #16]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4955      	ldr	r1, [pc, #340]	@ (8006e70 <HAL_I2C_Mem_Read+0x460>)
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 fb77 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e09d      	b.n	8006e68 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691a      	ldr	r2, [r3, #16]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	691a      	ldr	r2, [r3, #16]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d78:	b2d2      	uxtb	r2, r2
 8006d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d80:	1c5a      	adds	r2, r3, #1
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006da0:	e04e      	b.n	8006e40 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006da4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 fcdc 	bl	8007764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e058      	b.n	8006e68 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	691a      	ldr	r2, [r3, #16]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d124      	bne.n	8006e40 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d107      	bne.n	8006e0e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e0c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	691a      	ldr	r2, [r3, #16]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e18:	b2d2      	uxtb	r2, r2
 8006e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f47f aeb6 	bne.w	8006bb6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	e000      	b.n	8006e68 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006e66:	2302      	movs	r3, #2
  }
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3728      	adds	r7, #40	@ 0x28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	00010004 	.word	0x00010004

08006e74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	607a      	str	r2, [r7, #4]
 8006e7e:	603b      	str	r3, [r7, #0]
 8006e80:	460b      	mov	r3, r1
 8006e82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d006      	beq.n	8006e9e <I2C_MasterRequestWrite+0x2a>
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d003      	beq.n	8006e9e <I2C_MasterRequestWrite+0x2a>
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e9c:	d108      	bne.n	8006eb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	e00b      	b.n	8006ec8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb4:	2b12      	cmp	r3, #18
 8006eb6:	d107      	bne.n	8006ec8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ec6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 fa9b 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00d      	beq.n	8006efc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006eee:	d103      	bne.n	8006ef8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ef6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e035      	b.n	8006f68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f04:	d108      	bne.n	8006f18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f06:	897b      	ldrh	r3, [r7, #10]
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006f14:	611a      	str	r2, [r3, #16]
 8006f16:	e01b      	b.n	8006f50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006f18:	897b      	ldrh	r3, [r7, #10]
 8006f1a:	11db      	asrs	r3, r3, #7
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	f003 0306 	and.w	r3, r3, #6
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	f063 030f 	orn	r3, r3, #15
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	490e      	ldr	r1, [pc, #56]	@ (8006f70 <I2C_MasterRequestWrite+0xfc>)
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 fae4 	bl	8007504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e010      	b.n	8006f68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006f46:	897b      	ldrh	r3, [r7, #10]
 8006f48:	b2da      	uxtb	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	4907      	ldr	r1, [pc, #28]	@ (8006f74 <I2C_MasterRequestWrite+0x100>)
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 fad4 	bl	8007504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e000      	b.n	8006f68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	00010008 	.word	0x00010008
 8006f74:	00010002 	.word	0x00010002

08006f78 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	607a      	str	r2, [r7, #4]
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	460b      	mov	r3, r1
 8006f86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f9c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d006      	beq.n	8006fb2 <I2C_MasterRequestRead+0x3a>
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d003      	beq.n	8006fb2 <I2C_MasterRequestRead+0x3a>
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006fb0:	d108      	bne.n	8006fc4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	e00b      	b.n	8006fdc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc8:	2b11      	cmp	r3, #17
 8006fca:	d107      	bne.n	8006fdc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 fa11 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00d      	beq.n	8007010 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007002:	d103      	bne.n	800700c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800700a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e079      	b.n	8007104 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007018:	d108      	bne.n	800702c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800701a:	897b      	ldrh	r3, [r7, #10]
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f043 0301 	orr.w	r3, r3, #1
 8007022:	b2da      	uxtb	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	611a      	str	r2, [r3, #16]
 800702a:	e05f      	b.n	80070ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800702c:	897b      	ldrh	r3, [r7, #10]
 800702e:	11db      	asrs	r3, r3, #7
 8007030:	b2db      	uxtb	r3, r3
 8007032:	f003 0306 	and.w	r3, r3, #6
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f063 030f 	orn	r3, r3, #15
 800703c:	b2da      	uxtb	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	4930      	ldr	r1, [pc, #192]	@ (800710c <I2C_MasterRequestRead+0x194>)
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 fa5a 	bl	8007504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e054      	b.n	8007104 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800705a:	897b      	ldrh	r3, [r7, #10]
 800705c:	b2da      	uxtb	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	4929      	ldr	r1, [pc, #164]	@ (8007110 <I2C_MasterRequestRead+0x198>)
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 fa4a 	bl	8007504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e044      	b.n	8007104 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800707a:	2300      	movs	r3, #0
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	613b      	str	r3, [r7, #16]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	613b      	str	r3, [r7, #16]
 800708e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800709e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 f9af 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00d      	beq.n	80070d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070c6:	d103      	bne.n	80070d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070ce:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e017      	b.n	8007104 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80070d4:	897b      	ldrh	r3, [r7, #10]
 80070d6:	11db      	asrs	r3, r3, #7
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	f003 0306 	and.w	r3, r3, #6
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	f063 030e 	orn	r3, r3, #14
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	4907      	ldr	r1, [pc, #28]	@ (8007110 <I2C_MasterRequestRead+0x198>)
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 fa06 	bl	8007504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e000      	b.n	8007104 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	00010008 	.word	0x00010008
 8007110:	00010002 	.word	0x00010002

08007114 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af02      	add	r7, sp, #8
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	4608      	mov	r0, r1
 800711e:	4611      	mov	r1, r2
 8007120:	461a      	mov	r2, r3
 8007122:	4603      	mov	r3, r0
 8007124:	817b      	strh	r3, [r7, #10]
 8007126:	460b      	mov	r3, r1
 8007128:	813b      	strh	r3, [r7, #8]
 800712a:	4613      	mov	r3, r2
 800712c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800713c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	2200      	movs	r2, #0
 8007146:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 f960 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00d      	beq.n	8007172 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007164:	d103      	bne.n	800716e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800716c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e05f      	b.n	8007232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007172:	897b      	ldrh	r3, [r7, #10]
 8007174:	b2db      	uxtb	r3, r3
 8007176:	461a      	mov	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007180:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	6a3a      	ldr	r2, [r7, #32]
 8007186:	492d      	ldr	r1, [pc, #180]	@ (800723c <I2C_RequestMemoryWrite+0x128>)
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 f9bb 	bl	8007504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e04c      	b.n	8007232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007198:	2300      	movs	r3, #0
 800719a:	617b      	str	r3, [r7, #20]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	617b      	str	r3, [r7, #20]
 80071ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b0:	6a39      	ldr	r1, [r7, #32]
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 fa46 	bl	8007644 <I2C_WaitOnTXEFlagUntilTimeout>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00d      	beq.n	80071da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	d107      	bne.n	80071d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e02b      	b.n	8007232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071da:	88fb      	ldrh	r3, [r7, #6]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d105      	bne.n	80071ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071e0:	893b      	ldrh	r3, [r7, #8]
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	611a      	str	r2, [r3, #16]
 80071ea:	e021      	b.n	8007230 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071ec:	893b      	ldrh	r3, [r7, #8]
 80071ee:	0a1b      	lsrs	r3, r3, #8
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071fc:	6a39      	ldr	r1, [r7, #32]
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 fa20 	bl	8007644 <I2C_WaitOnTXEFlagUntilTimeout>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00d      	beq.n	8007226 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720e:	2b04      	cmp	r3, #4
 8007210:	d107      	bne.n	8007222 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007220:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e005      	b.n	8007232 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007226:	893b      	ldrh	r3, [r7, #8]
 8007228:	b2da      	uxtb	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	00010002 	.word	0x00010002

08007240 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af02      	add	r7, sp, #8
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	4608      	mov	r0, r1
 800724a:	4611      	mov	r1, r2
 800724c:	461a      	mov	r2, r3
 800724e:	4603      	mov	r3, r0
 8007250:	817b      	strh	r3, [r7, #10]
 8007252:	460b      	mov	r3, r1
 8007254:	813b      	strh	r3, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007268:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007278:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	2200      	movs	r2, #0
 8007282:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 f8c2 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00d      	beq.n	80072ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800729c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072a0:	d103      	bne.n	80072aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e0aa      	b.n	8007404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072ae:	897b      	ldrh	r3, [r7, #10]
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	461a      	mov	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80072bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c0:	6a3a      	ldr	r2, [r7, #32]
 80072c2:	4952      	ldr	r1, [pc, #328]	@ (800740c <I2C_RequestMemoryRead+0x1cc>)
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 f91d 	bl	8007504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e097      	b.n	8007404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072d4:	2300      	movs	r3, #0
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	617b      	str	r3, [r7, #20]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072ec:	6a39      	ldr	r1, [r7, #32]
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 f9a8 	bl	8007644 <I2C_WaitOnTXEFlagUntilTimeout>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00d      	beq.n	8007316 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d107      	bne.n	8007312 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007310:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e076      	b.n	8007404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007316:	88fb      	ldrh	r3, [r7, #6]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d105      	bne.n	8007328 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800731c:	893b      	ldrh	r3, [r7, #8]
 800731e:	b2da      	uxtb	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	611a      	str	r2, [r3, #16]
 8007326:	e021      	b.n	800736c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007328:	893b      	ldrh	r3, [r7, #8]
 800732a:	0a1b      	lsrs	r3, r3, #8
 800732c:	b29b      	uxth	r3, r3
 800732e:	b2da      	uxtb	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007338:	6a39      	ldr	r1, [r7, #32]
 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f000 f982 	bl	8007644 <I2C_WaitOnTXEFlagUntilTimeout>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00d      	beq.n	8007362 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734a:	2b04      	cmp	r3, #4
 800734c:	d107      	bne.n	800735e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800735c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e050      	b.n	8007404 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007362:	893b      	ldrh	r3, [r7, #8]
 8007364:	b2da      	uxtb	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800736c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800736e:	6a39      	ldr	r1, [r7, #32]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f967 	bl	8007644 <I2C_WaitOnTXEFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00d      	beq.n	8007398 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007380:	2b04      	cmp	r3, #4
 8007382:	d107      	bne.n	8007394 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007392:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e035      	b.n	8007404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 f82b 	bl	8007410 <I2C_WaitOnFlagUntilTimeout>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00d      	beq.n	80073dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073ce:	d103      	bne.n	80073d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80073d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e013      	b.n	8007404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80073dc:	897b      	ldrh	r3, [r7, #10]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	f043 0301 	orr.w	r3, r3, #1
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ee:	6a3a      	ldr	r2, [r7, #32]
 80073f0:	4906      	ldr	r1, [pc, #24]	@ (800740c <I2C_RequestMemoryRead+0x1cc>)
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 f886 	bl	8007504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e000      	b.n	8007404 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3718      	adds	r7, #24
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	00010002 	.word	0x00010002

08007410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	603b      	str	r3, [r7, #0]
 800741c:	4613      	mov	r3, r2
 800741e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007420:	e048      	b.n	80074b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007428:	d044      	beq.n	80074b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800742a:	f7fe fa11 	bl	8005850 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d302      	bcc.n	8007440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d139      	bne.n	80074b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	0c1b      	lsrs	r3, r3, #16
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b01      	cmp	r3, #1
 8007448:	d10d      	bne.n	8007466 <I2C_WaitOnFlagUntilTimeout+0x56>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	43da      	mvns	r2, r3
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	4013      	ands	r3, r2
 8007456:	b29b      	uxth	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	bf0c      	ite	eq
 800745c:	2301      	moveq	r3, #1
 800745e:	2300      	movne	r3, #0
 8007460:	b2db      	uxtb	r3, r3
 8007462:	461a      	mov	r2, r3
 8007464:	e00c      	b.n	8007480 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	43da      	mvns	r2, r3
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	4013      	ands	r3, r2
 8007472:	b29b      	uxth	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	bf0c      	ite	eq
 8007478:	2301      	moveq	r3, #1
 800747a:	2300      	movne	r3, #0
 800747c:	b2db      	uxtb	r3, r3
 800747e:	461a      	mov	r2, r3
 8007480:	79fb      	ldrb	r3, [r7, #7]
 8007482:	429a      	cmp	r2, r3
 8007484:	d116      	bne.n	80074b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a0:	f043 0220 	orr.w	r2, r3, #32
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e023      	b.n	80074fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	0c1b      	lsrs	r3, r3, #16
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d10d      	bne.n	80074da <I2C_WaitOnFlagUntilTimeout+0xca>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	43da      	mvns	r2, r3
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	4013      	ands	r3, r2
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	bf0c      	ite	eq
 80074d0:	2301      	moveq	r3, #1
 80074d2:	2300      	movne	r3, #0
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	461a      	mov	r2, r3
 80074d8:	e00c      	b.n	80074f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	43da      	mvns	r2, r3
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	4013      	ands	r3, r2
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	bf0c      	ite	eq
 80074ec:	2301      	moveq	r3, #1
 80074ee:	2300      	movne	r3, #0
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	461a      	mov	r2, r3
 80074f4:	79fb      	ldrb	r3, [r7, #7]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d093      	beq.n	8007422 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007512:	e071      	b.n	80075f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800751e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007522:	d123      	bne.n	800756c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007532:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800753c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2220      	movs	r2, #32
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007558:	f043 0204 	orr.w	r2, r3, #4
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e067      	b.n	800763c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007572:	d041      	beq.n	80075f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007574:	f7fe f96c 	bl	8005850 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	429a      	cmp	r2, r3
 8007582:	d302      	bcc.n	800758a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d136      	bne.n	80075f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	0c1b      	lsrs	r3, r3, #16
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	d10c      	bne.n	80075ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	43da      	mvns	r2, r3
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	4013      	ands	r3, r2
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	bf14      	ite	ne
 80075a6:	2301      	movne	r3, #1
 80075a8:	2300      	moveq	r3, #0
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	e00b      	b.n	80075c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	43da      	mvns	r2, r3
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	4013      	ands	r3, r2
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	bf14      	ite	ne
 80075c0:	2301      	movne	r3, #1
 80075c2:	2300      	moveq	r3, #0
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d016      	beq.n	80075f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2220      	movs	r2, #32
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e4:	f043 0220 	orr.w	r2, r3, #32
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e021      	b.n	800763c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	0c1b      	lsrs	r3, r3, #16
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d10c      	bne.n	800761c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	43da      	mvns	r2, r3
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	4013      	ands	r3, r2
 800760e:	b29b      	uxth	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	bf14      	ite	ne
 8007614:	2301      	movne	r3, #1
 8007616:	2300      	moveq	r3, #0
 8007618:	b2db      	uxtb	r3, r3
 800761a:	e00b      	b.n	8007634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	43da      	mvns	r2, r3
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4013      	ands	r3, r2
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	bf14      	ite	ne
 800762e:	2301      	movne	r3, #1
 8007630:	2300      	moveq	r3, #0
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	f47f af6d 	bne.w	8007514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007650:	e034      	b.n	80076bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 f8e3 	bl	800781e <I2C_IsAcknowledgeFailed>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e034      	b.n	80076cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007668:	d028      	beq.n	80076bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800766a:	f7fe f8f1 	bl	8005850 <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	429a      	cmp	r2, r3
 8007678:	d302      	bcc.n	8007680 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d11d      	bne.n	80076bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800768a:	2b80      	cmp	r3, #128	@ 0x80
 800768c:	d016      	beq.n	80076bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2220      	movs	r2, #32
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a8:	f043 0220 	orr.w	r2, r3, #32
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e007      	b.n	80076cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076c6:	2b80      	cmp	r3, #128	@ 0x80
 80076c8:	d1c3      	bne.n	8007652 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076e0:	e034      	b.n	800774c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 f89b 	bl	800781e <I2C_IsAcknowledgeFailed>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e034      	b.n	800775c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f8:	d028      	beq.n	800774c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076fa:	f7fe f8a9 	bl	8005850 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	429a      	cmp	r2, r3
 8007708:	d302      	bcc.n	8007710 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d11d      	bne.n	800774c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	f003 0304 	and.w	r3, r3, #4
 800771a:	2b04      	cmp	r3, #4
 800771c:	d016      	beq.n	800774c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2220      	movs	r2, #32
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007738:	f043 0220 	orr.w	r2, r3, #32
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e007      	b.n	800775c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	f003 0304 	and.w	r3, r3, #4
 8007756:	2b04      	cmp	r3, #4
 8007758:	d1c3      	bne.n	80076e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007770:	e049      	b.n	8007806 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	f003 0310 	and.w	r3, r3, #16
 800777c:	2b10      	cmp	r3, #16
 800777e:	d119      	bne.n	80077b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0210 	mvn.w	r2, #16
 8007788:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2220      	movs	r2, #32
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e030      	b.n	8007816 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077b4:	f7fe f84c 	bl	8005850 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d302      	bcc.n	80077ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d11d      	bne.n	8007806 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d4:	2b40      	cmp	r3, #64	@ 0x40
 80077d6:	d016      	beq.n	8007806 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2200      	movs	r2, #0
 80077dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2220      	movs	r2, #32
 80077e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077f2:	f043 0220 	orr.w	r2, r3, #32
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e007      	b.n	8007816 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007810:	2b40      	cmp	r3, #64	@ 0x40
 8007812:	d1ae      	bne.n	8007772 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007834:	d11b      	bne.n	800786e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800783e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2220      	movs	r2, #32
 800784a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785a:	f043 0204 	orr.w	r2, r3, #4
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e000      	b.n	8007870 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d101      	bne.n	800788e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e267      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d075      	beq.n	8007986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800789a:	4b88      	ldr	r3, [pc, #544]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f003 030c 	and.w	r3, r3, #12
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d00c      	beq.n	80078c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078a6:	4b85      	ldr	r3, [pc, #532]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80078ae:	2b08      	cmp	r3, #8
 80078b0:	d112      	bne.n	80078d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078b2:	4b82      	ldr	r3, [pc, #520]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80078be:	d10b      	bne.n	80078d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078c0:	4b7e      	ldr	r3, [pc, #504]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d05b      	beq.n	8007984 <HAL_RCC_OscConfig+0x108>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d157      	bne.n	8007984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e242      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078e0:	d106      	bne.n	80078f0 <HAL_RCC_OscConfig+0x74>
 80078e2:	4b76      	ldr	r3, [pc, #472]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a75      	ldr	r2, [pc, #468]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 80078e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	e01d      	b.n	800792c <HAL_RCC_OscConfig+0xb0>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078f8:	d10c      	bne.n	8007914 <HAL_RCC_OscConfig+0x98>
 80078fa:	4b70      	ldr	r3, [pc, #448]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a6f      	ldr	r2, [pc, #444]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 8007900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	4b6d      	ldr	r3, [pc, #436]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a6c      	ldr	r2, [pc, #432]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 800790c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007910:	6013      	str	r3, [r2, #0]
 8007912:	e00b      	b.n	800792c <HAL_RCC_OscConfig+0xb0>
 8007914:	4b69      	ldr	r3, [pc, #420]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a68      	ldr	r2, [pc, #416]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 800791a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	4b66      	ldr	r3, [pc, #408]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a65      	ldr	r2, [pc, #404]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 8007926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800792a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d013      	beq.n	800795c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007934:	f7fd ff8c 	bl	8005850 <HAL_GetTick>
 8007938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800793a:	e008      	b.n	800794e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800793c:	f7fd ff88 	bl	8005850 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	2b64      	cmp	r3, #100	@ 0x64
 8007948:	d901      	bls.n	800794e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e207      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800794e:	4b5b      	ldr	r3, [pc, #364]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0f0      	beq.n	800793c <HAL_RCC_OscConfig+0xc0>
 800795a:	e014      	b.n	8007986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800795c:	f7fd ff78 	bl	8005850 <HAL_GetTick>
 8007960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007962:	e008      	b.n	8007976 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007964:	f7fd ff74 	bl	8005850 <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b64      	cmp	r3, #100	@ 0x64
 8007970:	d901      	bls.n	8007976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e1f3      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007976:	4b51      	ldr	r3, [pc, #324]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1f0      	bne.n	8007964 <HAL_RCC_OscConfig+0xe8>
 8007982:	e000      	b.n	8007986 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d063      	beq.n	8007a5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007992:	4b4a      	ldr	r3, [pc, #296]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 030c 	and.w	r3, r3, #12
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00b      	beq.n	80079b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800799e:	4b47      	ldr	r3, [pc, #284]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80079a6:	2b08      	cmp	r3, #8
 80079a8:	d11c      	bne.n	80079e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079aa:	4b44      	ldr	r3, [pc, #272]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d116      	bne.n	80079e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079b6:	4b41      	ldr	r3, [pc, #260]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d005      	beq.n	80079ce <HAL_RCC_OscConfig+0x152>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d001      	beq.n	80079ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e1c7      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ce:	4b3b      	ldr	r3, [pc, #236]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	00db      	lsls	r3, r3, #3
 80079dc:	4937      	ldr	r1, [pc, #220]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079e2:	e03a      	b.n	8007a5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d020      	beq.n	8007a2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079ec:	4b34      	ldr	r3, [pc, #208]	@ (8007ac0 <HAL_RCC_OscConfig+0x244>)
 80079ee:	2201      	movs	r2, #1
 80079f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f2:	f7fd ff2d 	bl	8005850 <HAL_GetTick>
 80079f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079f8:	e008      	b.n	8007a0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079fa:	f7fd ff29 	bl	8005850 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e1a8      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0f0      	beq.n	80079fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a18:	4b28      	ldr	r3, [pc, #160]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	00db      	lsls	r3, r3, #3
 8007a26:	4925      	ldr	r1, [pc, #148]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	600b      	str	r3, [r1, #0]
 8007a2c:	e015      	b.n	8007a5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a2e:	4b24      	ldr	r3, [pc, #144]	@ (8007ac0 <HAL_RCC_OscConfig+0x244>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a34:	f7fd ff0c 	bl	8005850 <HAL_GetTick>
 8007a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a3a:	e008      	b.n	8007a4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a3c:	f7fd ff08 	bl	8005850 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d901      	bls.n	8007a4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e187      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1f0      	bne.n	8007a3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0308 	and.w	r3, r3, #8
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d036      	beq.n	8007ad4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d016      	beq.n	8007a9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a6e:	4b15      	ldr	r3, [pc, #84]	@ (8007ac4 <HAL_RCC_OscConfig+0x248>)
 8007a70:	2201      	movs	r2, #1
 8007a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a74:	f7fd feec 	bl	8005850 <HAL_GetTick>
 8007a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a7a:	e008      	b.n	8007a8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a7c:	f7fd fee8 	bl	8005850 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d901      	bls.n	8007a8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e167      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007abc <HAL_RCC_OscConfig+0x240>)
 8007a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0f0      	beq.n	8007a7c <HAL_RCC_OscConfig+0x200>
 8007a9a:	e01b      	b.n	8007ad4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a9c:	4b09      	ldr	r3, [pc, #36]	@ (8007ac4 <HAL_RCC_OscConfig+0x248>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007aa2:	f7fd fed5 	bl	8005850 <HAL_GetTick>
 8007aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007aa8:	e00e      	b.n	8007ac8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007aaa:	f7fd fed1 	bl	8005850 <HAL_GetTick>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d907      	bls.n	8007ac8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e150      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
 8007abc:	40023800 	.word	0x40023800
 8007ac0:	42470000 	.word	0x42470000
 8007ac4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ac8:	4b88      	ldr	r3, [pc, #544]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007acc:	f003 0302 	and.w	r3, r3, #2
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1ea      	bne.n	8007aaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0304 	and.w	r3, r3, #4
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8097 	beq.w	8007c10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ae6:	4b81      	ldr	r3, [pc, #516]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10f      	bne.n	8007b12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007af2:	2300      	movs	r3, #0
 8007af4:	60bb      	str	r3, [r7, #8]
 8007af6:	4b7d      	ldr	r3, [pc, #500]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afa:	4a7c      	ldr	r2, [pc, #496]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b02:	4b7a      	ldr	r3, [pc, #488]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b0a:	60bb      	str	r3, [r7, #8]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b12:	4b77      	ldr	r3, [pc, #476]	@ (8007cf0 <HAL_RCC_OscConfig+0x474>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d118      	bne.n	8007b50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b1e:	4b74      	ldr	r3, [pc, #464]	@ (8007cf0 <HAL_RCC_OscConfig+0x474>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a73      	ldr	r2, [pc, #460]	@ (8007cf0 <HAL_RCC_OscConfig+0x474>)
 8007b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b2a:	f7fd fe91 	bl	8005850 <HAL_GetTick>
 8007b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b30:	e008      	b.n	8007b44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b32:	f7fd fe8d 	bl	8005850 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d901      	bls.n	8007b44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e10c      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b44:	4b6a      	ldr	r3, [pc, #424]	@ (8007cf0 <HAL_RCC_OscConfig+0x474>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0f0      	beq.n	8007b32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d106      	bne.n	8007b66 <HAL_RCC_OscConfig+0x2ea>
 8007b58:	4b64      	ldr	r3, [pc, #400]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b5c:	4a63      	ldr	r2, [pc, #396]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007b5e:	f043 0301 	orr.w	r3, r3, #1
 8007b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b64:	e01c      	b.n	8007ba0 <HAL_RCC_OscConfig+0x324>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	2b05      	cmp	r3, #5
 8007b6c:	d10c      	bne.n	8007b88 <HAL_RCC_OscConfig+0x30c>
 8007b6e:	4b5f      	ldr	r3, [pc, #380]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b72:	4a5e      	ldr	r2, [pc, #376]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007b74:	f043 0304 	orr.w	r3, r3, #4
 8007b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b7e:	4a5b      	ldr	r2, [pc, #364]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007b80:	f043 0301 	orr.w	r3, r3, #1
 8007b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b86:	e00b      	b.n	8007ba0 <HAL_RCC_OscConfig+0x324>
 8007b88:	4b58      	ldr	r3, [pc, #352]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b8c:	4a57      	ldr	r2, [pc, #348]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007b8e:	f023 0301 	bic.w	r3, r3, #1
 8007b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b94:	4b55      	ldr	r3, [pc, #340]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b98:	4a54      	ldr	r2, [pc, #336]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007b9a:	f023 0304 	bic.w	r3, r3, #4
 8007b9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d015      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ba8:	f7fd fe52 	bl	8005850 <HAL_GetTick>
 8007bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bae:	e00a      	b.n	8007bc6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bb0:	f7fd fe4e 	bl	8005850 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d901      	bls.n	8007bc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e0cb      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bc6:	4b49      	ldr	r3, [pc, #292]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d0ee      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x334>
 8007bd2:	e014      	b.n	8007bfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bd4:	f7fd fe3c 	bl	8005850 <HAL_GetTick>
 8007bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bda:	e00a      	b.n	8007bf2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bdc:	f7fd fe38 	bl	8005850 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d901      	bls.n	8007bf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e0b5      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1ee      	bne.n	8007bdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d105      	bne.n	8007c10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c04:	4b39      	ldr	r3, [pc, #228]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c08:	4a38      	ldr	r2, [pc, #224]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 80a1 	beq.w	8007d5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c1a:	4b34      	ldr	r3, [pc, #208]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f003 030c 	and.w	r3, r3, #12
 8007c22:	2b08      	cmp	r3, #8
 8007c24:	d05c      	beq.n	8007ce0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d141      	bne.n	8007cb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c2e:	4b31      	ldr	r3, [pc, #196]	@ (8007cf4 <HAL_RCC_OscConfig+0x478>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c34:	f7fd fe0c 	bl	8005850 <HAL_GetTick>
 8007c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c3a:	e008      	b.n	8007c4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c3c:	f7fd fe08 	bl	8005850 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d901      	bls.n	8007c4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e087      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c4e:	4b27      	ldr	r3, [pc, #156]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1f0      	bne.n	8007c3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69da      	ldr	r2, [r3, #28]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	431a      	orrs	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c68:	019b      	lsls	r3, r3, #6
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c70:	085b      	lsrs	r3, r3, #1
 8007c72:	3b01      	subs	r3, #1
 8007c74:	041b      	lsls	r3, r3, #16
 8007c76:	431a      	orrs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c7c:	061b      	lsls	r3, r3, #24
 8007c7e:	491b      	ldr	r1, [pc, #108]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007c80:	4313      	orrs	r3, r2
 8007c82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c84:	4b1b      	ldr	r3, [pc, #108]	@ (8007cf4 <HAL_RCC_OscConfig+0x478>)
 8007c86:	2201      	movs	r2, #1
 8007c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c8a:	f7fd fde1 	bl	8005850 <HAL_GetTick>
 8007c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c90:	e008      	b.n	8007ca4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c92:	f7fd fddd 	bl	8005850 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d901      	bls.n	8007ca4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e05c      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ca4:	4b11      	ldr	r3, [pc, #68]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d0f0      	beq.n	8007c92 <HAL_RCC_OscConfig+0x416>
 8007cb0:	e054      	b.n	8007d5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cb2:	4b10      	ldr	r3, [pc, #64]	@ (8007cf4 <HAL_RCC_OscConfig+0x478>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cb8:	f7fd fdca 	bl	8005850 <HAL_GetTick>
 8007cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cc0:	f7fd fdc6 	bl	8005850 <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d901      	bls.n	8007cd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e045      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cd2:	4b06      	ldr	r3, [pc, #24]	@ (8007cec <HAL_RCC_OscConfig+0x470>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1f0      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x444>
 8007cde:	e03d      	b.n	8007d5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d107      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e038      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
 8007cec:	40023800 	.word	0x40023800
 8007cf0:	40007000 	.word	0x40007000
 8007cf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8007d68 <HAL_RCC_OscConfig+0x4ec>)
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d028      	beq.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d121      	bne.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d11a      	bne.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007d28:	4013      	ands	r3, r2
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007d2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d111      	bne.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3e:	085b      	lsrs	r3, r3, #1
 8007d40:	3b01      	subs	r3, #1
 8007d42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d107      	bne.n	8007d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d001      	beq.n	8007d5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e000      	b.n	8007d5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	40023800 	.word	0x40023800

08007d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e0cc      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d80:	4b68      	ldr	r3, [pc, #416]	@ (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0307 	and.w	r3, r3, #7
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d90c      	bls.n	8007da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d8e:	4b65      	ldr	r3, [pc, #404]	@ (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	b2d2      	uxtb	r2, r2
 8007d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d96:	4b63      	ldr	r3, [pc, #396]	@ (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0307 	and.w	r3, r3, #7
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d001      	beq.n	8007da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e0b8      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d020      	beq.n	8007df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d005      	beq.n	8007dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007dc0:	4b59      	ldr	r3, [pc, #356]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	4a58      	ldr	r2, [pc, #352]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007dca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0308 	and.w	r3, r3, #8
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d005      	beq.n	8007de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007dd8:	4b53      	ldr	r3, [pc, #332]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	4a52      	ldr	r2, [pc, #328]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007dde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007de4:	4b50      	ldr	r3, [pc, #320]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	494d      	ldr	r1, [pc, #308]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d044      	beq.n	8007e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d107      	bne.n	8007e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e0a:	4b47      	ldr	r3, [pc, #284]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d119      	bne.n	8007e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e07f      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d003      	beq.n	8007e2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d107      	bne.n	8007e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d109      	bne.n	8007e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e06f      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e067      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e4a:	4b37      	ldr	r3, [pc, #220]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f023 0203 	bic.w	r2, r3, #3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	4934      	ldr	r1, [pc, #208]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e5c:	f7fd fcf8 	bl	8005850 <HAL_GetTick>
 8007e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e62:	e00a      	b.n	8007e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e64:	f7fd fcf4 	bl	8005850 <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d901      	bls.n	8007e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e04f      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f003 020c 	and.w	r2, r3, #12
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d1eb      	bne.n	8007e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e8c:	4b25      	ldr	r3, [pc, #148]	@ (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0307 	and.w	r3, r3, #7
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d20c      	bcs.n	8007eb4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e9a:	4b22      	ldr	r3, [pc, #136]	@ (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	b2d2      	uxtb	r2, r2
 8007ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ea2:	4b20      	ldr	r3, [pc, #128]	@ (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d001      	beq.n	8007eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e032      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0304 	and.w	r3, r3, #4
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d008      	beq.n	8007ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ec0:	4b19      	ldr	r3, [pc, #100]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	4916      	ldr	r1, [pc, #88]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0308 	and.w	r3, r3, #8
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d009      	beq.n	8007ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ede:	4b12      	ldr	r3, [pc, #72]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	490e      	ldr	r1, [pc, #56]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007ef2:	f000 f821 	bl	8007f38 <HAL_RCC_GetSysClockFreq>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	091b      	lsrs	r3, r3, #4
 8007efe:	f003 030f 	and.w	r3, r3, #15
 8007f02:	490a      	ldr	r1, [pc, #40]	@ (8007f2c <HAL_RCC_ClockConfig+0x1c0>)
 8007f04:	5ccb      	ldrb	r3, [r1, r3]
 8007f06:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0a:	4a09      	ldr	r2, [pc, #36]	@ (8007f30 <HAL_RCC_ClockConfig+0x1c4>)
 8007f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007f0e:	4b09      	ldr	r3, [pc, #36]	@ (8007f34 <HAL_RCC_ClockConfig+0x1c8>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fd fc58 	bl	80057c8 <HAL_InitTick>

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	40023c00 	.word	0x40023c00
 8007f28:	40023800 	.word	0x40023800
 8007f2c:	0800f758 	.word	0x0800f758
 8007f30:	200000a4 	.word	0x200000a4
 8007f34:	200000a8 	.word	0x200000a8

08007f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f3c:	b090      	sub	sp, #64	@ 0x40
 8007f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f50:	4b59      	ldr	r3, [pc, #356]	@ (80080b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f003 030c 	and.w	r3, r3, #12
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d00d      	beq.n	8007f78 <HAL_RCC_GetSysClockFreq+0x40>
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	f200 80a1 	bhi.w	80080a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <HAL_RCC_GetSysClockFreq+0x34>
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	d003      	beq.n	8007f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8007f6a:	e09b      	b.n	80080a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f6c:	4b53      	ldr	r3, [pc, #332]	@ (80080bc <HAL_RCC_GetSysClockFreq+0x184>)
 8007f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007f70:	e09b      	b.n	80080aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f72:	4b53      	ldr	r3, [pc, #332]	@ (80080c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007f74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007f76:	e098      	b.n	80080aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f78:	4b4f      	ldr	r3, [pc, #316]	@ (80080b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f82:	4b4d      	ldr	r3, [pc, #308]	@ (80080b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d028      	beq.n	8007fe0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80080b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	099b      	lsrs	r3, r3, #6
 8007f94:	2200      	movs	r2, #0
 8007f96:	623b      	str	r3, [r7, #32]
 8007f98:	627a      	str	r2, [r7, #36]	@ 0x24
 8007f9a:	6a3b      	ldr	r3, [r7, #32]
 8007f9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	4b47      	ldr	r3, [pc, #284]	@ (80080c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007fa4:	fb03 f201 	mul.w	r2, r3, r1
 8007fa8:	2300      	movs	r3, #0
 8007faa:	fb00 f303 	mul.w	r3, r0, r3
 8007fae:	4413      	add	r3, r2
 8007fb0:	4a43      	ldr	r2, [pc, #268]	@ (80080c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8007fb2:	fba0 1202 	umull	r1, r2, r0, r2
 8007fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fb8:	460a      	mov	r2, r1
 8007fba:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007fbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fbe:	4413      	add	r3, r2
 8007fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	61bb      	str	r3, [r7, #24]
 8007fc8:	61fa      	str	r2, [r7, #28]
 8007fca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007fd2:	f7f8 fe61 	bl	8000c98 <__aeabi_uldivmod>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4613      	mov	r3, r2
 8007fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fde:	e053      	b.n	8008088 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fe0:	4b35      	ldr	r3, [pc, #212]	@ (80080b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	099b      	lsrs	r3, r3, #6
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	613b      	str	r3, [r7, #16]
 8007fea:	617a      	str	r2, [r7, #20]
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007ff2:	f04f 0b00 	mov.w	fp, #0
 8007ff6:	4652      	mov	r2, sl
 8007ff8:	465b      	mov	r3, fp
 8007ffa:	f04f 0000 	mov.w	r0, #0
 8007ffe:	f04f 0100 	mov.w	r1, #0
 8008002:	0159      	lsls	r1, r3, #5
 8008004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008008:	0150      	lsls	r0, r2, #5
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	ebb2 080a 	subs.w	r8, r2, sl
 8008012:	eb63 090b 	sbc.w	r9, r3, fp
 8008016:	f04f 0200 	mov.w	r2, #0
 800801a:	f04f 0300 	mov.w	r3, #0
 800801e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008022:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008026:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800802a:	ebb2 0408 	subs.w	r4, r2, r8
 800802e:	eb63 0509 	sbc.w	r5, r3, r9
 8008032:	f04f 0200 	mov.w	r2, #0
 8008036:	f04f 0300 	mov.w	r3, #0
 800803a:	00eb      	lsls	r3, r5, #3
 800803c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008040:	00e2      	lsls	r2, r4, #3
 8008042:	4614      	mov	r4, r2
 8008044:	461d      	mov	r5, r3
 8008046:	eb14 030a 	adds.w	r3, r4, sl
 800804a:	603b      	str	r3, [r7, #0]
 800804c:	eb45 030b 	adc.w	r3, r5, fp
 8008050:	607b      	str	r3, [r7, #4]
 8008052:	f04f 0200 	mov.w	r2, #0
 8008056:	f04f 0300 	mov.w	r3, #0
 800805a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800805e:	4629      	mov	r1, r5
 8008060:	028b      	lsls	r3, r1, #10
 8008062:	4621      	mov	r1, r4
 8008064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008068:	4621      	mov	r1, r4
 800806a:	028a      	lsls	r2, r1, #10
 800806c:	4610      	mov	r0, r2
 800806e:	4619      	mov	r1, r3
 8008070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008072:	2200      	movs	r2, #0
 8008074:	60bb      	str	r3, [r7, #8]
 8008076:	60fa      	str	r2, [r7, #12]
 8008078:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800807c:	f7f8 fe0c 	bl	8000c98 <__aeabi_uldivmod>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4613      	mov	r3, r2
 8008086:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008088:	4b0b      	ldr	r3, [pc, #44]	@ (80080b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	0c1b      	lsrs	r3, r3, #16
 800808e:	f003 0303 	and.w	r3, r3, #3
 8008092:	3301      	adds	r3, #1
 8008094:	005b      	lsls	r3, r3, #1
 8008096:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008098:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809c:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80080a2:	e002      	b.n	80080aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080a4:	4b05      	ldr	r3, [pc, #20]	@ (80080bc <HAL_RCC_GetSysClockFreq+0x184>)
 80080a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80080a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3740      	adds	r7, #64	@ 0x40
 80080b0:	46bd      	mov	sp, r7
 80080b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080b6:	bf00      	nop
 80080b8:	40023800 	.word	0x40023800
 80080bc:	00f42400 	.word	0x00f42400
 80080c0:	017d7840 	.word	0x017d7840

080080c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080c4:	b480      	push	{r7}
 80080c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080c8:	4b03      	ldr	r3, [pc, #12]	@ (80080d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80080ca:	681b      	ldr	r3, [r3, #0]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	200000a4 	.word	0x200000a4

080080dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80080e0:	f7ff fff0 	bl	80080c4 <HAL_RCC_GetHCLKFreq>
 80080e4:	4602      	mov	r2, r0
 80080e6:	4b05      	ldr	r3, [pc, #20]	@ (80080fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	0a9b      	lsrs	r3, r3, #10
 80080ec:	f003 0307 	and.w	r3, r3, #7
 80080f0:	4903      	ldr	r1, [pc, #12]	@ (8008100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080f2:	5ccb      	ldrb	r3, [r1, r3]
 80080f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	40023800 	.word	0x40023800
 8008100:	0800f768 	.word	0x0800f768

08008104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008108:	f7ff ffdc 	bl	80080c4 <HAL_RCC_GetHCLKFreq>
 800810c:	4602      	mov	r2, r0
 800810e:	4b05      	ldr	r3, [pc, #20]	@ (8008124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	0b5b      	lsrs	r3, r3, #13
 8008114:	f003 0307 	and.w	r3, r3, #7
 8008118:	4903      	ldr	r1, [pc, #12]	@ (8008128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800811a:	5ccb      	ldrb	r3, [r1, r3]
 800811c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008120:	4618      	mov	r0, r3
 8008122:	bd80      	pop	{r7, pc}
 8008124:	40023800 	.word	0x40023800
 8008128:	0800f768 	.word	0x0800f768

0800812c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e042      	b.n	80081c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d106      	bne.n	8008158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7fd faa4 	bl	80056a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2224      	movs	r2, #36	@ 0x24
 800815c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800816e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fd11 	bl	8008b98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	691a      	ldr	r2, [r3, #16]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	695a      	ldr	r2, [r3, #20]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68da      	ldr	r2, [r3, #12]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80081a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2220      	movs	r2, #32
 80081b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	4613      	mov	r3, r2
 80081d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b20      	cmp	r3, #32
 80081e4:	d121      	bne.n	800822a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <HAL_UART_Transmit_IT+0x26>
 80081ec:	88fb      	ldrh	r3, [r7, #6]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e01a      	b.n	800822c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	88fa      	ldrh	r2, [r7, #6]
 8008200:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	88fa      	ldrh	r2, [r7, #6]
 8008206:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2200      	movs	r2, #0
 800820c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2221      	movs	r2, #33	@ 0x21
 8008212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68da      	ldr	r2, [r3, #12]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008224:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	e000      	b.n	800822c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800822a:	2302      	movs	r3, #2
  }
}
 800822c:	4618      	mov	r0, r3
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	4613      	mov	r3, r2
 8008244:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b20      	cmp	r3, #32
 8008250:	d112      	bne.n	8008278 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <HAL_UART_Receive_IT+0x26>
 8008258:	88fb      	ldrh	r3, [r7, #6]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e00b      	b.n	800827a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008268:	88fb      	ldrh	r3, [r7, #6]
 800826a:	461a      	mov	r2, r3
 800826c:	68b9      	ldr	r1, [r7, #8]
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 faba 	bl	80087e8 <UART_Start_Receive_IT>
 8008274:	4603      	mov	r3, r0
 8008276:	e000      	b.n	800827a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008278:	2302      	movs	r3, #2
  }
}
 800827a:	4618      	mov	r0, r3
 800827c:	3710      	adds	r7, #16
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b0ba      	sub	sp, #232	@ 0xe8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80082b0:	2300      	movs	r3, #0
 80082b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80082b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082ba:	f003 030f 	and.w	r3, r3, #15
 80082be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80082c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10f      	bne.n	80082ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082ce:	f003 0320 	and.w	r3, r3, #32
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d009      	beq.n	80082ea <HAL_UART_IRQHandler+0x66>
 80082d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082da:	f003 0320 	and.w	r3, r3, #32
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fb99 	bl	8008a1a <UART_Receive_IT>
      return;
 80082e8:	e25b      	b.n	80087a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80082ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f000 80de 	beq.w	80084b0 <HAL_UART_IRQHandler+0x22c>
 80082f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d106      	bne.n	800830e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008304:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 80d1 	beq.w	80084b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800830e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00b      	beq.n	8008332 <HAL_UART_IRQHandler+0xae>
 800831a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800831e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008322:	2b00      	cmp	r3, #0
 8008324:	d005      	beq.n	8008332 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800832a:	f043 0201 	orr.w	r2, r3, #1
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008336:	f003 0304 	and.w	r3, r3, #4
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00b      	beq.n	8008356 <HAL_UART_IRQHandler+0xd2>
 800833e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	2b00      	cmp	r3, #0
 8008348:	d005      	beq.n	8008356 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800834e:	f043 0202 	orr.w	r2, r3, #2
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800835a:	f003 0302 	and.w	r3, r3, #2
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00b      	beq.n	800837a <HAL_UART_IRQHandler+0xf6>
 8008362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	2b00      	cmp	r3, #0
 800836c:	d005      	beq.n	800837a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008372:	f043 0204 	orr.w	r2, r3, #4
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800837a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800837e:	f003 0308 	and.w	r3, r3, #8
 8008382:	2b00      	cmp	r3, #0
 8008384:	d011      	beq.n	80083aa <HAL_UART_IRQHandler+0x126>
 8008386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800838a:	f003 0320 	and.w	r3, r3, #32
 800838e:	2b00      	cmp	r3, #0
 8008390:	d105      	bne.n	800839e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b00      	cmp	r3, #0
 800839c:	d005      	beq.n	80083aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083a2:	f043 0208 	orr.w	r2, r3, #8
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f000 81f2 	beq.w	8008798 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80083b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083b8:	f003 0320 	and.w	r3, r3, #32
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d008      	beq.n	80083d2 <HAL_UART_IRQHandler+0x14e>
 80083c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083c4:	f003 0320 	and.w	r3, r3, #32
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fb24 	bl	8008a1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083dc:	2b40      	cmp	r3, #64	@ 0x40
 80083de:	bf0c      	ite	eq
 80083e0:	2301      	moveq	r3, #1
 80083e2:	2300      	movne	r3, #0
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ee:	f003 0308 	and.w	r3, r3, #8
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d103      	bne.n	80083fe <HAL_UART_IRQHandler+0x17a>
 80083f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d04f      	beq.n	800849e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fa2c 	bl	800885c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800840e:	2b40      	cmp	r3, #64	@ 0x40
 8008410:	d141      	bne.n	8008496 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3314      	adds	r3, #20
 8008418:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008420:	e853 3f00 	ldrex	r3, [r3]
 8008424:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008428:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800842c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008430:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3314      	adds	r3, #20
 800843a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800843e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008442:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800844a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008456:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1d9      	bne.n	8008412 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008462:	2b00      	cmp	r3, #0
 8008464:	d013      	beq.n	800848e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800846a:	4a7e      	ldr	r2, [pc, #504]	@ (8008664 <HAL_UART_IRQHandler+0x3e0>)
 800846c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008472:	4618      	mov	r0, r3
 8008474:	f7fd fb9d 	bl	8005bb2 <HAL_DMA_Abort_IT>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d016      	beq.n	80084ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008488:	4610      	mov	r0, r2
 800848a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800848c:	e00e      	b.n	80084ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f994 	bl	80087bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008494:	e00a      	b.n	80084ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f990 	bl	80087bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800849c:	e006      	b.n	80084ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f98c 	bl	80087bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80084aa:	e175      	b.n	8008798 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ac:	bf00      	nop
    return;
 80084ae:	e173      	b.n	8008798 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	f040 814f 	bne.w	8008758 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80084ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084be:	f003 0310 	and.w	r3, r3, #16
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 8148 	beq.w	8008758 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80084c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084cc:	f003 0310 	and.w	r3, r3, #16
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 8141 	beq.w	8008758 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084d6:	2300      	movs	r3, #0
 80084d8:	60bb      	str	r3, [r7, #8]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	60bb      	str	r3, [r7, #8]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	60bb      	str	r3, [r7, #8]
 80084ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084f6:	2b40      	cmp	r3, #64	@ 0x40
 80084f8:	f040 80b6 	bne.w	8008668 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008508:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 8145 	beq.w	800879c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008516:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800851a:	429a      	cmp	r2, r3
 800851c:	f080 813e 	bcs.w	800879c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008526:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008532:	f000 8088 	beq.w	8008646 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	330c      	adds	r3, #12
 800853c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008540:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008544:	e853 3f00 	ldrex	r3, [r3]
 8008548:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800854c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008554:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	330c      	adds	r3, #12
 800855e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008562:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008566:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800856e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008572:	e841 2300 	strex	r3, r2, [r1]
 8008576:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800857a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1d9      	bne.n	8008536 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3314      	adds	r3, #20
 8008588:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800858c:	e853 3f00 	ldrex	r3, [r3]
 8008590:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008592:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008594:	f023 0301 	bic.w	r3, r3, #1
 8008598:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3314      	adds	r3, #20
 80085a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80085a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80085aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80085ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80085b2:	e841 2300 	strex	r3, r2, [r1]
 80085b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80085b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1e1      	bne.n	8008582 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	3314      	adds	r3, #20
 80085c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085c8:	e853 3f00 	ldrex	r3, [r3]
 80085cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80085ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3314      	adds	r3, #20
 80085de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80085e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80085e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80085e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80085ea:	e841 2300 	strex	r3, r2, [r1]
 80085ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80085f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1e3      	bne.n	80085be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2220      	movs	r2, #32
 80085fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	330c      	adds	r3, #12
 800860a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800860e:	e853 3f00 	ldrex	r3, [r3]
 8008612:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008614:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008616:	f023 0310 	bic.w	r3, r3, #16
 800861a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	330c      	adds	r3, #12
 8008624:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008628:	65ba      	str	r2, [r7, #88]	@ 0x58
 800862a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800862e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e3      	bne.n	8008604 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008640:	4618      	mov	r0, r3
 8008642:	f7fd fa46 	bl	8005ad2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2202      	movs	r2, #2
 800864a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008654:	b29b      	uxth	r3, r3
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	b29b      	uxth	r3, r3
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f8b7 	bl	80087d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008662:	e09b      	b.n	800879c <HAL_UART_IRQHandler+0x518>
 8008664:	08008923 	.word	0x08008923
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008670:	b29b      	uxth	r3, r3
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800867c:	b29b      	uxth	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	f000 808e 	beq.w	80087a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008684:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 8089 	beq.w	80087a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	330c      	adds	r3, #12
 8008694:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008698:	e853 3f00 	ldrex	r3, [r3]
 800869c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800869e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	330c      	adds	r3, #12
 80086ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80086b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80086b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086ba:	e841 2300 	strex	r3, r2, [r1]
 80086be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1e3      	bne.n	800868e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3314      	adds	r3, #20
 80086cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	e853 3f00 	ldrex	r3, [r3]
 80086d4:	623b      	str	r3, [r7, #32]
   return(result);
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	f023 0301 	bic.w	r3, r3, #1
 80086dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3314      	adds	r3, #20
 80086e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80086ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80086ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e3      	bne.n	80086c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2220      	movs	r2, #32
 8008702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	330c      	adds	r3, #12
 8008712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	60fb      	str	r3, [r7, #12]
   return(result);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f023 0310 	bic.w	r3, r3, #16
 8008722:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	330c      	adds	r3, #12
 800872c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008730:	61fa      	str	r2, [r7, #28]
 8008732:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008734:	69b9      	ldr	r1, [r7, #24]
 8008736:	69fa      	ldr	r2, [r7, #28]
 8008738:	e841 2300 	strex	r3, r2, [r1]
 800873c:	617b      	str	r3, [r7, #20]
   return(result);
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1e3      	bne.n	800870c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800874a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800874e:	4619      	mov	r1, r3
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f83d 	bl	80087d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008756:	e023      	b.n	80087a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800875c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008760:	2b00      	cmp	r3, #0
 8008762:	d009      	beq.n	8008778 <HAL_UART_IRQHandler+0x4f4>
 8008764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800876c:	2b00      	cmp	r3, #0
 800876e:	d003      	beq.n	8008778 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f8ea 	bl	800894a <UART_Transmit_IT>
    return;
 8008776:	e014      	b.n	80087a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800877c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00e      	beq.n	80087a2 <HAL_UART_IRQHandler+0x51e>
 8008784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800878c:	2b00      	cmp	r3, #0
 800878e:	d008      	beq.n	80087a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f92a 	bl	80089ea <UART_EndTransmit_IT>
    return;
 8008796:	e004      	b.n	80087a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8008798:	bf00      	nop
 800879a:	e002      	b.n	80087a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800879c:	bf00      	nop
 800879e:	e000      	b.n	80087a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80087a0:	bf00      	nop
  }
}
 80087a2:	37e8      	adds	r7, #232	@ 0xe8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80087c4:	bf00      	nop
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	4613      	mov	r3, r2
 80087f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	88fa      	ldrh	r2, [r7, #6]
 8008800:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	88fa      	ldrh	r2, [r7, #6]
 8008806:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2222      	movs	r2, #34	@ 0x22
 8008812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d007      	beq.n	800882e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68da      	ldr	r2, [r3, #12]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800882c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	695a      	ldr	r2, [r3, #20]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f042 0201 	orr.w	r2, r2, #1
 800883c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68da      	ldr	r2, [r3, #12]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f042 0220 	orr.w	r2, r2, #32
 800884c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3714      	adds	r7, #20
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800885c:	b480      	push	{r7}
 800885e:	b095      	sub	sp, #84	@ 0x54
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	330c      	adds	r3, #12
 800886a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800886e:	e853 3f00 	ldrex	r3, [r3]
 8008872:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008876:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800887a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	330c      	adds	r3, #12
 8008882:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008884:	643a      	str	r2, [r7, #64]	@ 0x40
 8008886:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008888:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800888a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800888c:	e841 2300 	strex	r3, r2, [r1]
 8008890:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1e5      	bne.n	8008864 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3314      	adds	r3, #20
 800889e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	e853 3f00 	ldrex	r3, [r3]
 80088a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	f023 0301 	bic.w	r3, r3, #1
 80088ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3314      	adds	r3, #20
 80088b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80088b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088c0:	e841 2300 	strex	r3, r2, [r1]
 80088c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1e5      	bne.n	8008898 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d119      	bne.n	8008908 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	330c      	adds	r3, #12
 80088da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	e853 3f00 	ldrex	r3, [r3]
 80088e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	f023 0310 	bic.w	r3, r3, #16
 80088ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	330c      	adds	r3, #12
 80088f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088f4:	61ba      	str	r2, [r7, #24]
 80088f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f8:	6979      	ldr	r1, [r7, #20]
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	e841 2300 	strex	r3, r2, [r1]
 8008900:	613b      	str	r3, [r7, #16]
   return(result);
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1e5      	bne.n	80088d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2220      	movs	r2, #32
 800890c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008916:	bf00      	nop
 8008918:	3754      	adds	r7, #84	@ 0x54
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr

08008922 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800892e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f7ff ff3d 	bl	80087bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008942:	bf00      	nop
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800894a:	b480      	push	{r7}
 800894c:	b085      	sub	sp, #20
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b21      	cmp	r3, #33	@ 0x21
 800895c:	d13e      	bne.n	80089dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008966:	d114      	bne.n	8008992 <UART_Transmit_IT+0x48>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d110      	bne.n	8008992 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a1b      	ldr	r3, [r3, #32]
 8008974:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008984:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a1b      	ldr	r3, [r3, #32]
 800898a:	1c9a      	adds	r2, r3, #2
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	621a      	str	r2, [r3, #32]
 8008990:	e008      	b.n	80089a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	1c59      	adds	r1, r3, #1
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	6211      	str	r1, [r2, #32]
 800899c:	781a      	ldrb	r2, [r3, #0]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	3b01      	subs	r3, #1
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	4619      	mov	r1, r3
 80089b2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10f      	bne.n	80089d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80089c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68da      	ldr	r2, [r3, #12]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	e000      	b.n	80089de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089dc:	2302      	movs	r3, #2
  }
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b082      	sub	sp, #8
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68da      	ldr	r2, [r3, #12]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2220      	movs	r2, #32
 8008a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7ff fecc 	bl	80087a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008a1a:	b580      	push	{r7, lr}
 8008a1c:	b08c      	sub	sp, #48	@ 0x30
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b22      	cmp	r3, #34	@ 0x22
 8008a2c:	f040 80ae 	bne.w	8008b8c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a38:	d117      	bne.n	8008a6a <UART_Receive_IT+0x50>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d113      	bne.n	8008a6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a62:	1c9a      	adds	r2, r3, #2
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a68:	e026      	b.n	8008ab8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008a70:	2300      	movs	r3, #0
 8008a72:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a7c:	d007      	beq.n	8008a8e <UART_Receive_IT+0x74>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10a      	bne.n	8008a9c <UART_Receive_IT+0x82>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a98:	701a      	strb	r2, [r3, #0]
 8008a9a:	e008      	b.n	8008aae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d15d      	bne.n	8008b88 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68da      	ldr	r2, [r3, #12]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f022 0220 	bic.w	r2, r2, #32
 8008ada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68da      	ldr	r2, [r3, #12]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008aea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	695a      	ldr	r2, [r3, #20]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f022 0201 	bic.w	r2, r2, #1
 8008afa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2220      	movs	r2, #32
 8008b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d135      	bne.n	8008b7e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	330c      	adds	r3, #12
 8008b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	e853 3f00 	ldrex	r3, [r3]
 8008b26:	613b      	str	r3, [r7, #16]
   return(result);
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	f023 0310 	bic.w	r3, r3, #16
 8008b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	330c      	adds	r3, #12
 8008b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b38:	623a      	str	r2, [r7, #32]
 8008b3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3c:	69f9      	ldr	r1, [r7, #28]
 8008b3e:	6a3a      	ldr	r2, [r7, #32]
 8008b40:	e841 2300 	strex	r3, r2, [r1]
 8008b44:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1e5      	bne.n	8008b18 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0310 	and.w	r3, r3, #16
 8008b56:	2b10      	cmp	r3, #16
 8008b58:	d10a      	bne.n	8008b70 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60fb      	str	r3, [r7, #12]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	60fb      	str	r3, [r7, #12]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	60fb      	str	r3, [r7, #12]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b74:	4619      	mov	r1, r3
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7ff fe2a 	bl	80087d0 <HAL_UARTEx_RxEventCallback>
 8008b7c:	e002      	b.n	8008b84 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7f9 f958 	bl	8001e34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	e002      	b.n	8008b8e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	e000      	b.n	8008b8e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008b8c:	2302      	movs	r3, #2
  }
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3730      	adds	r7, #48	@ 0x30
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b9c:	b0c0      	sub	sp, #256	@ 0x100
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bb4:	68d9      	ldr	r1, [r3, #12]
 8008bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	ea40 0301 	orr.w	r3, r0, r1
 8008bc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bc6:	689a      	ldr	r2, [r3, #8]
 8008bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	431a      	orrs	r2, r3
 8008bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bdc:	69db      	ldr	r3, [r3, #28]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008bf0:	f021 010c 	bic.w	r1, r1, #12
 8008bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008bfe:	430b      	orrs	r3, r1
 8008c00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	695b      	ldr	r3, [r3, #20]
 8008c0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c12:	6999      	ldr	r1, [r3, #24]
 8008c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	ea40 0301 	orr.w	r3, r0, r1
 8008c1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	4b8f      	ldr	r3, [pc, #572]	@ (8008e64 <UART_SetConfig+0x2cc>)
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d005      	beq.n	8008c38 <UART_SetConfig+0xa0>
 8008c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	4b8d      	ldr	r3, [pc, #564]	@ (8008e68 <UART_SetConfig+0x2d0>)
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d104      	bne.n	8008c42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c38:	f7ff fa64 	bl	8008104 <HAL_RCC_GetPCLK2Freq>
 8008c3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008c40:	e003      	b.n	8008c4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c42:	f7ff fa4b 	bl	80080dc <HAL_RCC_GetPCLK1Freq>
 8008c46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c4e:	69db      	ldr	r3, [r3, #28]
 8008c50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c54:	f040 810c 	bne.w	8008e70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008c62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008c66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008c6a:	4622      	mov	r2, r4
 8008c6c:	462b      	mov	r3, r5
 8008c6e:	1891      	adds	r1, r2, r2
 8008c70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008c72:	415b      	adcs	r3, r3
 8008c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	eb12 0801 	adds.w	r8, r2, r1
 8008c80:	4629      	mov	r1, r5
 8008c82:	eb43 0901 	adc.w	r9, r3, r1
 8008c86:	f04f 0200 	mov.w	r2, #0
 8008c8a:	f04f 0300 	mov.w	r3, #0
 8008c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c9a:	4690      	mov	r8, r2
 8008c9c:	4699      	mov	r9, r3
 8008c9e:	4623      	mov	r3, r4
 8008ca0:	eb18 0303 	adds.w	r3, r8, r3
 8008ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ca8:	462b      	mov	r3, r5
 8008caa:	eb49 0303 	adc.w	r3, r9, r3
 8008cae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008cbe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008cc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	18db      	adds	r3, r3, r3
 8008cca:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ccc:	4613      	mov	r3, r2
 8008cce:	eb42 0303 	adc.w	r3, r2, r3
 8008cd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008cd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008cdc:	f7f7 ffdc 	bl	8000c98 <__aeabi_uldivmod>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4b61      	ldr	r3, [pc, #388]	@ (8008e6c <UART_SetConfig+0x2d4>)
 8008ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8008cea:	095b      	lsrs	r3, r3, #5
 8008cec:	011c      	lsls	r4, r3, #4
 8008cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008cf8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008cfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008d00:	4642      	mov	r2, r8
 8008d02:	464b      	mov	r3, r9
 8008d04:	1891      	adds	r1, r2, r2
 8008d06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008d08:	415b      	adcs	r3, r3
 8008d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008d10:	4641      	mov	r1, r8
 8008d12:	eb12 0a01 	adds.w	sl, r2, r1
 8008d16:	4649      	mov	r1, r9
 8008d18:	eb43 0b01 	adc.w	fp, r3, r1
 8008d1c:	f04f 0200 	mov.w	r2, #0
 8008d20:	f04f 0300 	mov.w	r3, #0
 8008d24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008d28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d30:	4692      	mov	sl, r2
 8008d32:	469b      	mov	fp, r3
 8008d34:	4643      	mov	r3, r8
 8008d36:	eb1a 0303 	adds.w	r3, sl, r3
 8008d3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d3e:	464b      	mov	r3, r9
 8008d40:	eb4b 0303 	adc.w	r3, fp, r3
 8008d44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008d58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	18db      	adds	r3, r3, r3
 8008d60:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d62:	4613      	mov	r3, r2
 8008d64:	eb42 0303 	adc.w	r3, r2, r3
 8008d68:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008d6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008d72:	f7f7 ff91 	bl	8000c98 <__aeabi_uldivmod>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8008e6c <UART_SetConfig+0x2d4>)
 8008d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8008d82:	095b      	lsrs	r3, r3, #5
 8008d84:	2264      	movs	r2, #100	@ 0x64
 8008d86:	fb02 f303 	mul.w	r3, r2, r3
 8008d8a:	1acb      	subs	r3, r1, r3
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008d92:	4b36      	ldr	r3, [pc, #216]	@ (8008e6c <UART_SetConfig+0x2d4>)
 8008d94:	fba3 2302 	umull	r2, r3, r3, r2
 8008d98:	095b      	lsrs	r3, r3, #5
 8008d9a:	005b      	lsls	r3, r3, #1
 8008d9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008da0:	441c      	add	r4, r3
 8008da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008da6:	2200      	movs	r2, #0
 8008da8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008dac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008db0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008db4:	4642      	mov	r2, r8
 8008db6:	464b      	mov	r3, r9
 8008db8:	1891      	adds	r1, r2, r2
 8008dba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008dbc:	415b      	adcs	r3, r3
 8008dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008dc4:	4641      	mov	r1, r8
 8008dc6:	1851      	adds	r1, r2, r1
 8008dc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8008dca:	4649      	mov	r1, r9
 8008dcc:	414b      	adcs	r3, r1
 8008dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dd0:	f04f 0200 	mov.w	r2, #0
 8008dd4:	f04f 0300 	mov.w	r3, #0
 8008dd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008ddc:	4659      	mov	r1, fp
 8008dde:	00cb      	lsls	r3, r1, #3
 8008de0:	4651      	mov	r1, sl
 8008de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008de6:	4651      	mov	r1, sl
 8008de8:	00ca      	lsls	r2, r1, #3
 8008dea:	4610      	mov	r0, r2
 8008dec:	4619      	mov	r1, r3
 8008dee:	4603      	mov	r3, r0
 8008df0:	4642      	mov	r2, r8
 8008df2:	189b      	adds	r3, r3, r2
 8008df4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008df8:	464b      	mov	r3, r9
 8008dfa:	460a      	mov	r2, r1
 8008dfc:	eb42 0303 	adc.w	r3, r2, r3
 8008e00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008e14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008e18:	460b      	mov	r3, r1
 8008e1a:	18db      	adds	r3, r3, r3
 8008e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e1e:	4613      	mov	r3, r2
 8008e20:	eb42 0303 	adc.w	r3, r2, r3
 8008e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008e2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008e2e:	f7f7 ff33 	bl	8000c98 <__aeabi_uldivmod>
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	4b0d      	ldr	r3, [pc, #52]	@ (8008e6c <UART_SetConfig+0x2d4>)
 8008e38:	fba3 1302 	umull	r1, r3, r3, r2
 8008e3c:	095b      	lsrs	r3, r3, #5
 8008e3e:	2164      	movs	r1, #100	@ 0x64
 8008e40:	fb01 f303 	mul.w	r3, r1, r3
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	00db      	lsls	r3, r3, #3
 8008e48:	3332      	adds	r3, #50	@ 0x32
 8008e4a:	4a08      	ldr	r2, [pc, #32]	@ (8008e6c <UART_SetConfig+0x2d4>)
 8008e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e50:	095b      	lsrs	r3, r3, #5
 8008e52:	f003 0207 	and.w	r2, r3, #7
 8008e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4422      	add	r2, r4
 8008e5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e60:	e106      	b.n	8009070 <UART_SetConfig+0x4d8>
 8008e62:	bf00      	nop
 8008e64:	40011000 	.word	0x40011000
 8008e68:	40011400 	.word	0x40011400
 8008e6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e74:	2200      	movs	r2, #0
 8008e76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008e7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008e7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008e82:	4642      	mov	r2, r8
 8008e84:	464b      	mov	r3, r9
 8008e86:	1891      	adds	r1, r2, r2
 8008e88:	6239      	str	r1, [r7, #32]
 8008e8a:	415b      	adcs	r3, r3
 8008e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e92:	4641      	mov	r1, r8
 8008e94:	1854      	adds	r4, r2, r1
 8008e96:	4649      	mov	r1, r9
 8008e98:	eb43 0501 	adc.w	r5, r3, r1
 8008e9c:	f04f 0200 	mov.w	r2, #0
 8008ea0:	f04f 0300 	mov.w	r3, #0
 8008ea4:	00eb      	lsls	r3, r5, #3
 8008ea6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008eaa:	00e2      	lsls	r2, r4, #3
 8008eac:	4614      	mov	r4, r2
 8008eae:	461d      	mov	r5, r3
 8008eb0:	4643      	mov	r3, r8
 8008eb2:	18e3      	adds	r3, r4, r3
 8008eb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008eb8:	464b      	mov	r3, r9
 8008eba:	eb45 0303 	adc.w	r3, r5, r3
 8008ebe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ece:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008ed2:	f04f 0200 	mov.w	r2, #0
 8008ed6:	f04f 0300 	mov.w	r3, #0
 8008eda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008ede:	4629      	mov	r1, r5
 8008ee0:	008b      	lsls	r3, r1, #2
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ee8:	4621      	mov	r1, r4
 8008eea:	008a      	lsls	r2, r1, #2
 8008eec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008ef0:	f7f7 fed2 	bl	8000c98 <__aeabi_uldivmod>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	4b60      	ldr	r3, [pc, #384]	@ (800907c <UART_SetConfig+0x4e4>)
 8008efa:	fba3 2302 	umull	r2, r3, r3, r2
 8008efe:	095b      	lsrs	r3, r3, #5
 8008f00:	011c      	lsls	r4, r3, #4
 8008f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008f10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008f14:	4642      	mov	r2, r8
 8008f16:	464b      	mov	r3, r9
 8008f18:	1891      	adds	r1, r2, r2
 8008f1a:	61b9      	str	r1, [r7, #24]
 8008f1c:	415b      	adcs	r3, r3
 8008f1e:	61fb      	str	r3, [r7, #28]
 8008f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f24:	4641      	mov	r1, r8
 8008f26:	1851      	adds	r1, r2, r1
 8008f28:	6139      	str	r1, [r7, #16]
 8008f2a:	4649      	mov	r1, r9
 8008f2c:	414b      	adcs	r3, r1
 8008f2e:	617b      	str	r3, [r7, #20]
 8008f30:	f04f 0200 	mov.w	r2, #0
 8008f34:	f04f 0300 	mov.w	r3, #0
 8008f38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f3c:	4659      	mov	r1, fp
 8008f3e:	00cb      	lsls	r3, r1, #3
 8008f40:	4651      	mov	r1, sl
 8008f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f46:	4651      	mov	r1, sl
 8008f48:	00ca      	lsls	r2, r1, #3
 8008f4a:	4610      	mov	r0, r2
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4603      	mov	r3, r0
 8008f50:	4642      	mov	r2, r8
 8008f52:	189b      	adds	r3, r3, r2
 8008f54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f58:	464b      	mov	r3, r9
 8008f5a:	460a      	mov	r2, r1
 8008f5c:	eb42 0303 	adc.w	r3, r2, r3
 8008f60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008f70:	f04f 0200 	mov.w	r2, #0
 8008f74:	f04f 0300 	mov.w	r3, #0
 8008f78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008f7c:	4649      	mov	r1, r9
 8008f7e:	008b      	lsls	r3, r1, #2
 8008f80:	4641      	mov	r1, r8
 8008f82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f86:	4641      	mov	r1, r8
 8008f88:	008a      	lsls	r2, r1, #2
 8008f8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008f8e:	f7f7 fe83 	bl	8000c98 <__aeabi_uldivmod>
 8008f92:	4602      	mov	r2, r0
 8008f94:	460b      	mov	r3, r1
 8008f96:	4611      	mov	r1, r2
 8008f98:	4b38      	ldr	r3, [pc, #224]	@ (800907c <UART_SetConfig+0x4e4>)
 8008f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8008f9e:	095b      	lsrs	r3, r3, #5
 8008fa0:	2264      	movs	r2, #100	@ 0x64
 8008fa2:	fb02 f303 	mul.w	r3, r2, r3
 8008fa6:	1acb      	subs	r3, r1, r3
 8008fa8:	011b      	lsls	r3, r3, #4
 8008faa:	3332      	adds	r3, #50	@ 0x32
 8008fac:	4a33      	ldr	r2, [pc, #204]	@ (800907c <UART_SetConfig+0x4e4>)
 8008fae:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb2:	095b      	lsrs	r3, r3, #5
 8008fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008fb8:	441c      	add	r4, r3
 8008fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8008fc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8008fc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008fc8:	4642      	mov	r2, r8
 8008fca:	464b      	mov	r3, r9
 8008fcc:	1891      	adds	r1, r2, r2
 8008fce:	60b9      	str	r1, [r7, #8]
 8008fd0:	415b      	adcs	r3, r3
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fd8:	4641      	mov	r1, r8
 8008fda:	1851      	adds	r1, r2, r1
 8008fdc:	6039      	str	r1, [r7, #0]
 8008fde:	4649      	mov	r1, r9
 8008fe0:	414b      	adcs	r3, r1
 8008fe2:	607b      	str	r3, [r7, #4]
 8008fe4:	f04f 0200 	mov.w	r2, #0
 8008fe8:	f04f 0300 	mov.w	r3, #0
 8008fec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ff0:	4659      	mov	r1, fp
 8008ff2:	00cb      	lsls	r3, r1, #3
 8008ff4:	4651      	mov	r1, sl
 8008ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ffa:	4651      	mov	r1, sl
 8008ffc:	00ca      	lsls	r2, r1, #3
 8008ffe:	4610      	mov	r0, r2
 8009000:	4619      	mov	r1, r3
 8009002:	4603      	mov	r3, r0
 8009004:	4642      	mov	r2, r8
 8009006:	189b      	adds	r3, r3, r2
 8009008:	66bb      	str	r3, [r7, #104]	@ 0x68
 800900a:	464b      	mov	r3, r9
 800900c:	460a      	mov	r2, r1
 800900e:	eb42 0303 	adc.w	r3, r2, r3
 8009012:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	663b      	str	r3, [r7, #96]	@ 0x60
 800901e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009020:	f04f 0200 	mov.w	r2, #0
 8009024:	f04f 0300 	mov.w	r3, #0
 8009028:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800902c:	4649      	mov	r1, r9
 800902e:	008b      	lsls	r3, r1, #2
 8009030:	4641      	mov	r1, r8
 8009032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009036:	4641      	mov	r1, r8
 8009038:	008a      	lsls	r2, r1, #2
 800903a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800903e:	f7f7 fe2b 	bl	8000c98 <__aeabi_uldivmod>
 8009042:	4602      	mov	r2, r0
 8009044:	460b      	mov	r3, r1
 8009046:	4b0d      	ldr	r3, [pc, #52]	@ (800907c <UART_SetConfig+0x4e4>)
 8009048:	fba3 1302 	umull	r1, r3, r3, r2
 800904c:	095b      	lsrs	r3, r3, #5
 800904e:	2164      	movs	r1, #100	@ 0x64
 8009050:	fb01 f303 	mul.w	r3, r1, r3
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	011b      	lsls	r3, r3, #4
 8009058:	3332      	adds	r3, #50	@ 0x32
 800905a:	4a08      	ldr	r2, [pc, #32]	@ (800907c <UART_SetConfig+0x4e4>)
 800905c:	fba2 2303 	umull	r2, r3, r2, r3
 8009060:	095b      	lsrs	r3, r3, #5
 8009062:	f003 020f 	and.w	r2, r3, #15
 8009066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4422      	add	r2, r4
 800906e:	609a      	str	r2, [r3, #8]
}
 8009070:	bf00      	nop
 8009072:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009076:	46bd      	mov	sp, r7
 8009078:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800907c:	51eb851f 	.word	0x51eb851f

08009080 <__NVIC_SetPriority>:
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	4603      	mov	r3, r0
 8009088:	6039      	str	r1, [r7, #0]
 800908a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800908c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009090:	2b00      	cmp	r3, #0
 8009092:	db0a      	blt.n	80090aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	b2da      	uxtb	r2, r3
 8009098:	490c      	ldr	r1, [pc, #48]	@ (80090cc <__NVIC_SetPriority+0x4c>)
 800909a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800909e:	0112      	lsls	r2, r2, #4
 80090a0:	b2d2      	uxtb	r2, r2
 80090a2:	440b      	add	r3, r1
 80090a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80090a8:	e00a      	b.n	80090c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	4908      	ldr	r1, [pc, #32]	@ (80090d0 <__NVIC_SetPriority+0x50>)
 80090b0:	79fb      	ldrb	r3, [r7, #7]
 80090b2:	f003 030f 	and.w	r3, r3, #15
 80090b6:	3b04      	subs	r3, #4
 80090b8:	0112      	lsls	r2, r2, #4
 80090ba:	b2d2      	uxtb	r2, r2
 80090bc:	440b      	add	r3, r1
 80090be:	761a      	strb	r2, [r3, #24]
}
 80090c0:	bf00      	nop
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	e000e100 	.word	0xe000e100
 80090d0:	e000ed00 	.word	0xe000ed00

080090d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80090d8:	2100      	movs	r1, #0
 80090da:	f06f 0004 	mvn.w	r0, #4
 80090de:	f7ff ffcf 	bl	8009080 <__NVIC_SetPriority>
#endif
}
 80090e2:	bf00      	nop
 80090e4:	bd80      	pop	{r7, pc}
	...

080090e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ee:	f3ef 8305 	mrs	r3, IPSR
 80090f2:	603b      	str	r3, [r7, #0]
  return(result);
 80090f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80090fa:	f06f 0305 	mvn.w	r3, #5
 80090fe:	607b      	str	r3, [r7, #4]
 8009100:	e00c      	b.n	800911c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009102:	4b0a      	ldr	r3, [pc, #40]	@ (800912c <osKernelInitialize+0x44>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d105      	bne.n	8009116 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800910a:	4b08      	ldr	r3, [pc, #32]	@ (800912c <osKernelInitialize+0x44>)
 800910c:	2201      	movs	r2, #1
 800910e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009110:	2300      	movs	r3, #0
 8009112:	607b      	str	r3, [r7, #4]
 8009114:	e002      	b.n	800911c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009116:	f04f 33ff 	mov.w	r3, #4294967295
 800911a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800911c:	687b      	ldr	r3, [r7, #4]
}
 800911e:	4618      	mov	r0, r3
 8009120:	370c      	adds	r7, #12
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	20000428 	.word	0x20000428

08009130 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009136:	f3ef 8305 	mrs	r3, IPSR
 800913a:	603b      	str	r3, [r7, #0]
  return(result);
 800913c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009142:	f06f 0305 	mvn.w	r3, #5
 8009146:	607b      	str	r3, [r7, #4]
 8009148:	e010      	b.n	800916c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800914a:	4b0b      	ldr	r3, [pc, #44]	@ (8009178 <osKernelStart+0x48>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d109      	bne.n	8009166 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009152:	f7ff ffbf 	bl	80090d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009156:	4b08      	ldr	r3, [pc, #32]	@ (8009178 <osKernelStart+0x48>)
 8009158:	2202      	movs	r2, #2
 800915a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800915c:	f001 f840 	bl	800a1e0 <vTaskStartScheduler>
      stat = osOK;
 8009160:	2300      	movs	r3, #0
 8009162:	607b      	str	r3, [r7, #4]
 8009164:	e002      	b.n	800916c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009166:	f04f 33ff 	mov.w	r3, #4294967295
 800916a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800916c:	687b      	ldr	r3, [r7, #4]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20000428 	.word	0x20000428

0800917c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800917c:	b580      	push	{r7, lr}
 800917e:	b08e      	sub	sp, #56	@ 0x38
 8009180:	af04      	add	r7, sp, #16
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009188:	2300      	movs	r3, #0
 800918a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800918c:	f3ef 8305 	mrs	r3, IPSR
 8009190:	617b      	str	r3, [r7, #20]
  return(result);
 8009192:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009194:	2b00      	cmp	r3, #0
 8009196:	d17e      	bne.n	8009296 <osThreadNew+0x11a>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d07b      	beq.n	8009296 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800919e:	2380      	movs	r3, #128	@ 0x80
 80091a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80091a2:	2318      	movs	r3, #24
 80091a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80091a6:	2300      	movs	r3, #0
 80091a8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80091aa:	f04f 33ff 	mov.w	r3, #4294967295
 80091ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d045      	beq.n	8009242 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d002      	beq.n	80091c4 <osThreadNew+0x48>
        name = attr->name;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d008      	beq.n	80091ea <osThreadNew+0x6e>
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	2b38      	cmp	r3, #56	@ 0x38
 80091dc:	d805      	bhi.n	80091ea <osThreadNew+0x6e>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <osThreadNew+0x72>
        return (NULL);
 80091ea:	2300      	movs	r3, #0
 80091ec:	e054      	b.n	8009298 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	089b      	lsrs	r3, r3, #2
 80091fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00e      	beq.n	8009224 <osThreadNew+0xa8>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	2ba7      	cmp	r3, #167	@ 0xa7
 800920c:	d90a      	bls.n	8009224 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009212:	2b00      	cmp	r3, #0
 8009214:	d006      	beq.n	8009224 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d002      	beq.n	8009224 <osThreadNew+0xa8>
        mem = 1;
 800921e:	2301      	movs	r3, #1
 8009220:	61bb      	str	r3, [r7, #24]
 8009222:	e010      	b.n	8009246 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10c      	bne.n	8009246 <osThreadNew+0xca>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d108      	bne.n	8009246 <osThreadNew+0xca>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d104      	bne.n	8009246 <osThreadNew+0xca>
          mem = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	61bb      	str	r3, [r7, #24]
 8009240:	e001      	b.n	8009246 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009242:	2300      	movs	r3, #0
 8009244:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	2b01      	cmp	r3, #1
 800924a:	d110      	bne.n	800926e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009254:	9202      	str	r2, [sp, #8]
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	6a3a      	ldr	r2, [r7, #32]
 8009260:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 fdfe 	bl	8009e64 <xTaskCreateStatic>
 8009268:	4603      	mov	r3, r0
 800926a:	613b      	str	r3, [r7, #16]
 800926c:	e013      	b.n	8009296 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d110      	bne.n	8009296 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009274:	6a3b      	ldr	r3, [r7, #32]
 8009276:	b29a      	uxth	r2, r3
 8009278:	f107 0310 	add.w	r3, r7, #16
 800927c:	9301      	str	r3, [sp, #4]
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 fe4c 	bl	8009f24 <xTaskCreate>
 800928c:	4603      	mov	r3, r0
 800928e:	2b01      	cmp	r3, #1
 8009290:	d001      	beq.n	8009296 <osThreadNew+0x11a>
            hTask = NULL;
 8009292:	2300      	movs	r3, #0
 8009294:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009296:	693b      	ldr	r3, [r7, #16]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3728      	adds	r7, #40	@ 0x28
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4a07      	ldr	r2, [pc, #28]	@ (80092cc <vApplicationGetIdleTaskMemory+0x2c>)
 80092b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	4a06      	ldr	r2, [pc, #24]	@ (80092d0 <vApplicationGetIdleTaskMemory+0x30>)
 80092b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2280      	movs	r2, #128	@ 0x80
 80092bc:	601a      	str	r2, [r3, #0]
}
 80092be:	bf00      	nop
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	2000042c 	.word	0x2000042c
 80092d0:	200004d4 	.word	0x200004d4

080092d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4a07      	ldr	r2, [pc, #28]	@ (8009300 <vApplicationGetTimerTaskMemory+0x2c>)
 80092e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	4a06      	ldr	r2, [pc, #24]	@ (8009304 <vApplicationGetTimerTaskMemory+0x30>)
 80092ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80092f2:	601a      	str	r2, [r3, #0]
}
 80092f4:	bf00      	nop
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	200006d4 	.word	0x200006d4
 8009304:	2000077c 	.word	0x2000077c

08009308 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f103 0208 	add.w	r2, r3, #8
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f04f 32ff 	mov.w	r2, #4294967295
 8009320:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f103 0208 	add.w	r2, r3, #8
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f103 0208 	add.w	r2, r3, #8
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009356:	bf00      	nop
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009362:	b480      	push	{r7}
 8009364:	b085      	sub	sp, #20
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	689a      	ldr	r2, [r3, #8]
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	683a      	ldr	r2, [r7, #0]
 8009386:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	1c5a      	adds	r2, r3, #1
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	601a      	str	r2, [r3, #0]
}
 800939e:	bf00      	nop
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093aa:	b480      	push	{r7}
 80093ac:	b085      	sub	sp, #20
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c0:	d103      	bne.n	80093ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	e00c      	b.n	80093e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	3308      	adds	r3, #8
 80093ce:	60fb      	str	r3, [r7, #12]
 80093d0:	e002      	b.n	80093d8 <vListInsert+0x2e>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	60fb      	str	r3, [r7, #12]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d2f6      	bcs.n	80093d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	683a      	ldr	r2, [r7, #0]
 80093f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	601a      	str	r2, [r3, #0]
}
 8009410:	bf00      	nop
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	6892      	ldr	r2, [r2, #8]
 8009432:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	6852      	ldr	r2, [r2, #4]
 800943c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	429a      	cmp	r2, r3
 8009446:	d103      	bne.n	8009450 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	689a      	ldr	r2, [r3, #8]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	1e5a      	subs	r2, r3, #1
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10b      	bne.n	800949c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009488:	f383 8811 	msr	BASEPRI, r3
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009496:	bf00      	nop
 8009498:	bf00      	nop
 800949a:	e7fd      	b.n	8009498 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800949c:	f002 f874 	bl	800b588 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094a8:	68f9      	ldr	r1, [r7, #12]
 80094aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80094ac:	fb01 f303 	mul.w	r3, r1, r3
 80094b0:	441a      	add	r2, r3
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094cc:	3b01      	subs	r3, #1
 80094ce:	68f9      	ldr	r1, [r7, #12]
 80094d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80094d2:	fb01 f303 	mul.w	r3, r1, r3
 80094d6:	441a      	add	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	22ff      	movs	r2, #255	@ 0xff
 80094e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	22ff      	movs	r2, #255	@ 0xff
 80094e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d114      	bne.n	800951c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d01a      	beq.n	8009530 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	3310      	adds	r3, #16
 80094fe:	4618      	mov	r0, r3
 8009500:	f001 f90c 	bl	800a71c <xTaskRemoveFromEventList>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d012      	beq.n	8009530 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800950a:	4b0d      	ldr	r3, [pc, #52]	@ (8009540 <xQueueGenericReset+0xd0>)
 800950c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	e009      	b.n	8009530 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	3310      	adds	r3, #16
 8009520:	4618      	mov	r0, r3
 8009522:	f7ff fef1 	bl	8009308 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3324      	adds	r3, #36	@ 0x24
 800952a:	4618      	mov	r0, r3
 800952c:	f7ff feec 	bl	8009308 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009530:	f002 f85c 	bl	800b5ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009534:	2301      	movs	r3, #1
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	e000ed04 	.word	0xe000ed04

08009544 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009544:	b580      	push	{r7, lr}
 8009546:	b08e      	sub	sp, #56	@ 0x38
 8009548:	af02      	add	r7, sp, #8
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
 8009550:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d10b      	bne.n	8009570 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800956a:	bf00      	nop
 800956c:	bf00      	nop
 800956e:	e7fd      	b.n	800956c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d10b      	bne.n	800958e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009588:	bf00      	nop
 800958a:	bf00      	nop
 800958c:	e7fd      	b.n	800958a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d002      	beq.n	800959a <xQueueGenericCreateStatic+0x56>
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <xQueueGenericCreateStatic+0x5a>
 800959a:	2301      	movs	r3, #1
 800959c:	e000      	b.n	80095a0 <xQueueGenericCreateStatic+0x5c>
 800959e:	2300      	movs	r3, #0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10b      	bne.n	80095bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	623b      	str	r3, [r7, #32]
}
 80095b6:	bf00      	nop
 80095b8:	bf00      	nop
 80095ba:	e7fd      	b.n	80095b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d102      	bne.n	80095c8 <xQueueGenericCreateStatic+0x84>
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <xQueueGenericCreateStatic+0x88>
 80095c8:	2301      	movs	r3, #1
 80095ca:	e000      	b.n	80095ce <xQueueGenericCreateStatic+0x8a>
 80095cc:	2300      	movs	r3, #0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10b      	bne.n	80095ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	61fb      	str	r3, [r7, #28]
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
 80095e8:	e7fd      	b.n	80095e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80095ea:	2350      	movs	r3, #80	@ 0x50
 80095ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	2b50      	cmp	r3, #80	@ 0x50
 80095f2:	d00b      	beq.n	800960c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	61bb      	str	r3, [r7, #24]
}
 8009606:	bf00      	nop
 8009608:	bf00      	nop
 800960a:	e7fd      	b.n	8009608 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800960c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00d      	beq.n	8009634 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009620:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	4613      	mov	r3, r2
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	68b9      	ldr	r1, [r7, #8]
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f000 f805 	bl	800963e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009636:	4618      	mov	r0, r3
 8009638:	3730      	adds	r7, #48	@ 0x30
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b084      	sub	sp, #16
 8009642:	af00      	add	r7, sp, #0
 8009644:	60f8      	str	r0, [r7, #12]
 8009646:	60b9      	str	r1, [r7, #8]
 8009648:	607a      	str	r2, [r7, #4]
 800964a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d103      	bne.n	800965a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	69ba      	ldr	r2, [r7, #24]
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	e002      	b.n	8009660 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800966c:	2101      	movs	r1, #1
 800966e:	69b8      	ldr	r0, [r7, #24]
 8009670:	f7ff fefe 	bl	8009470 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	78fa      	ldrb	r2, [r7, #3]
 8009678:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800967c:	bf00      	nop
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b08e      	sub	sp, #56	@ 0x38
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
 8009690:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009692:	2300      	movs	r3, #0
 8009694:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800969a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10b      	bne.n	80096b8 <xQueueGenericSend+0x34>
	__asm volatile
 80096a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80096b2:	bf00      	nop
 80096b4:	bf00      	nop
 80096b6:	e7fd      	b.n	80096b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d103      	bne.n	80096c6 <xQueueGenericSend+0x42>
 80096be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <xQueueGenericSend+0x46>
 80096c6:	2301      	movs	r3, #1
 80096c8:	e000      	b.n	80096cc <xQueueGenericSend+0x48>
 80096ca:	2300      	movs	r3, #0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10b      	bne.n	80096e8 <xQueueGenericSend+0x64>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80096e2:	bf00      	nop
 80096e4:	bf00      	nop
 80096e6:	e7fd      	b.n	80096e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d103      	bne.n	80096f6 <xQueueGenericSend+0x72>
 80096ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d101      	bne.n	80096fa <xQueueGenericSend+0x76>
 80096f6:	2301      	movs	r3, #1
 80096f8:	e000      	b.n	80096fc <xQueueGenericSend+0x78>
 80096fa:	2300      	movs	r3, #0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10b      	bne.n	8009718 <xQueueGenericSend+0x94>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	623b      	str	r3, [r7, #32]
}
 8009712:	bf00      	nop
 8009714:	bf00      	nop
 8009716:	e7fd      	b.n	8009714 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009718:	f001 f9c6 	bl	800aaa8 <xTaskGetSchedulerState>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d102      	bne.n	8009728 <xQueueGenericSend+0xa4>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d101      	bne.n	800972c <xQueueGenericSend+0xa8>
 8009728:	2301      	movs	r3, #1
 800972a:	e000      	b.n	800972e <xQueueGenericSend+0xaa>
 800972c:	2300      	movs	r3, #0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10b      	bne.n	800974a <xQueueGenericSend+0xc6>
	__asm volatile
 8009732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	61fb      	str	r3, [r7, #28]
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop
 8009748:	e7fd      	b.n	8009746 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800974a:	f001 ff1d 	bl	800b588 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800974e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009750:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009756:	429a      	cmp	r2, r3
 8009758:	d302      	bcc.n	8009760 <xQueueGenericSend+0xdc>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b02      	cmp	r3, #2
 800975e:	d129      	bne.n	80097b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	68b9      	ldr	r1, [r7, #8]
 8009764:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009766:	f000 fa0f 	bl	8009b88 <prvCopyDataToQueue>
 800976a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800976c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009770:	2b00      	cmp	r3, #0
 8009772:	d010      	beq.n	8009796 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009776:	3324      	adds	r3, #36	@ 0x24
 8009778:	4618      	mov	r0, r3
 800977a:	f000 ffcf 	bl	800a71c <xTaskRemoveFromEventList>
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d013      	beq.n	80097ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009784:	4b3f      	ldr	r3, [pc, #252]	@ (8009884 <xQueueGenericSend+0x200>)
 8009786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800978a:	601a      	str	r2, [r3, #0]
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	e00a      	b.n	80097ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009798:	2b00      	cmp	r3, #0
 800979a:	d007      	beq.n	80097ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800979c:	4b39      	ldr	r3, [pc, #228]	@ (8009884 <xQueueGenericSend+0x200>)
 800979e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80097ac:	f001 ff1e 	bl	800b5ec <vPortExitCritical>
				return pdPASS;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e063      	b.n	800987c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d103      	bne.n	80097c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097ba:	f001 ff17 	bl	800b5ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80097be:	2300      	movs	r3, #0
 80097c0:	e05c      	b.n	800987c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d106      	bne.n	80097d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097c8:	f107 0314 	add.w	r3, r7, #20
 80097cc:	4618      	mov	r0, r3
 80097ce:	f001 f809 	bl	800a7e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097d2:	2301      	movs	r3, #1
 80097d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097d6:	f001 ff09 	bl	800b5ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097da:	f000 fd71 	bl	800a2c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097de:	f001 fed3 	bl	800b588 <vPortEnterCritical>
 80097e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80097e8:	b25b      	sxtb	r3, r3
 80097ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ee:	d103      	bne.n	80097f8 <xQueueGenericSend+0x174>
 80097f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80097fe:	b25b      	sxtb	r3, r3
 8009800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009804:	d103      	bne.n	800980e <xQueueGenericSend+0x18a>
 8009806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800980e:	f001 feed 	bl	800b5ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009812:	1d3a      	adds	r2, r7, #4
 8009814:	f107 0314 	add.w	r3, r7, #20
 8009818:	4611      	mov	r1, r2
 800981a:	4618      	mov	r0, r3
 800981c:	f000 fff8 	bl	800a810 <xTaskCheckForTimeOut>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d124      	bne.n	8009870 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009826:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009828:	f000 faa6 	bl	8009d78 <prvIsQueueFull>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d018      	beq.n	8009864 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009834:	3310      	adds	r3, #16
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	4611      	mov	r1, r2
 800983a:	4618      	mov	r0, r3
 800983c:	f000 ff1c 	bl	800a678 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009840:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009842:	f000 fa31 	bl	8009ca8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009846:	f000 fd49 	bl	800a2dc <xTaskResumeAll>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	f47f af7c 	bne.w	800974a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009852:	4b0c      	ldr	r3, [pc, #48]	@ (8009884 <xQueueGenericSend+0x200>)
 8009854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	e772      	b.n	800974a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009866:	f000 fa1f 	bl	8009ca8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800986a:	f000 fd37 	bl	800a2dc <xTaskResumeAll>
 800986e:	e76c      	b.n	800974a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009870:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009872:	f000 fa19 	bl	8009ca8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009876:	f000 fd31 	bl	800a2dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800987a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800987c:	4618      	mov	r0, r3
 800987e:	3738      	adds	r7, #56	@ 0x38
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	e000ed04 	.word	0xe000ed04

08009888 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b090      	sub	sp, #64	@ 0x40
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	607a      	str	r2, [r7, #4]
 8009894:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800989a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10b      	bne.n	80098b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80098b2:	bf00      	nop
 80098b4:	bf00      	nop
 80098b6:	e7fd      	b.n	80098b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d103      	bne.n	80098c6 <xQueueGenericSendFromISR+0x3e>
 80098be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <xQueueGenericSendFromISR+0x42>
 80098c6:	2301      	movs	r3, #1
 80098c8:	e000      	b.n	80098cc <xQueueGenericSendFromISR+0x44>
 80098ca:	2300      	movs	r3, #0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10b      	bne.n	80098e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80098d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d4:	f383 8811 	msr	BASEPRI, r3
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	f3bf 8f4f 	dsb	sy
 80098e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80098e2:	bf00      	nop
 80098e4:	bf00      	nop
 80098e6:	e7fd      	b.n	80098e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d103      	bne.n	80098f6 <xQueueGenericSendFromISR+0x6e>
 80098ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d101      	bne.n	80098fa <xQueueGenericSendFromISR+0x72>
 80098f6:	2301      	movs	r3, #1
 80098f8:	e000      	b.n	80098fc <xQueueGenericSendFromISR+0x74>
 80098fa:	2300      	movs	r3, #0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10b      	bne.n	8009918 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	623b      	str	r3, [r7, #32]
}
 8009912:	bf00      	nop
 8009914:	bf00      	nop
 8009916:	e7fd      	b.n	8009914 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009918:	f001 ff16 	bl	800b748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800991c:	f3ef 8211 	mrs	r2, BASEPRI
 8009920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	61fa      	str	r2, [r7, #28]
 8009932:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009934:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009936:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800993a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800993c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800993e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009940:	429a      	cmp	r2, r3
 8009942:	d302      	bcc.n	800994a <xQueueGenericSendFromISR+0xc2>
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	2b02      	cmp	r3, #2
 8009948:	d12f      	bne.n	80099aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800994a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800994c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009950:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009958:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	68b9      	ldr	r1, [r7, #8]
 800995e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009960:	f000 f912 	bl	8009b88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009964:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996c:	d112      	bne.n	8009994 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800996e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009972:	2b00      	cmp	r3, #0
 8009974:	d016      	beq.n	80099a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009978:	3324      	adds	r3, #36	@ 0x24
 800997a:	4618      	mov	r0, r3
 800997c:	f000 fece 	bl	800a71c <xTaskRemoveFromEventList>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00e      	beq.n	80099a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00b      	beq.n	80099a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	601a      	str	r2, [r3, #0]
 8009992:	e007      	b.n	80099a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009994:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009998:	3301      	adds	r3, #1
 800999a:	b2db      	uxtb	r3, r3
 800999c:	b25a      	sxtb	r2, r3
 800999e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80099a4:	2301      	movs	r3, #1
 80099a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80099a8:	e001      	b.n	80099ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099aa:	2300      	movs	r3, #0
 80099ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80099b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3740      	adds	r7, #64	@ 0x40
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08c      	sub	sp, #48	@ 0x30
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80099d0:	2300      	movs	r3, #0
 80099d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80099d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10b      	bne.n	80099f6 <xQueueReceive+0x32>
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	623b      	str	r3, [r7, #32]
}
 80099f0:	bf00      	nop
 80099f2:	bf00      	nop
 80099f4:	e7fd      	b.n	80099f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d103      	bne.n	8009a04 <xQueueReceive+0x40>
 80099fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <xQueueReceive+0x44>
 8009a04:	2301      	movs	r3, #1
 8009a06:	e000      	b.n	8009a0a <xQueueReceive+0x46>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10b      	bne.n	8009a26 <xQueueReceive+0x62>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	61fb      	str	r3, [r7, #28]
}
 8009a20:	bf00      	nop
 8009a22:	bf00      	nop
 8009a24:	e7fd      	b.n	8009a22 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a26:	f001 f83f 	bl	800aaa8 <xTaskGetSchedulerState>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d102      	bne.n	8009a36 <xQueueReceive+0x72>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d101      	bne.n	8009a3a <xQueueReceive+0x76>
 8009a36:	2301      	movs	r3, #1
 8009a38:	e000      	b.n	8009a3c <xQueueReceive+0x78>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10b      	bne.n	8009a58 <xQueueReceive+0x94>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	61bb      	str	r3, [r7, #24]
}
 8009a52:	bf00      	nop
 8009a54:	bf00      	nop
 8009a56:	e7fd      	b.n	8009a54 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a58:	f001 fd96 	bl	800b588 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a60:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d01f      	beq.n	8009aa8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a68:	68b9      	ldr	r1, [r7, #8]
 8009a6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a6c:	f000 f8f6 	bl	8009c5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a72:	1e5a      	subs	r2, r3, #1
 8009a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a76:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00f      	beq.n	8009aa0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a82:	3310      	adds	r3, #16
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 fe49 	bl	800a71c <xTaskRemoveFromEventList>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d007      	beq.n	8009aa0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a90:	4b3c      	ldr	r3, [pc, #240]	@ (8009b84 <xQueueReceive+0x1c0>)
 8009a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009aa0:	f001 fda4 	bl	800b5ec <vPortExitCritical>
				return pdPASS;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e069      	b.n	8009b7c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d103      	bne.n	8009ab6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009aae:	f001 fd9d 	bl	800b5ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	e062      	b.n	8009b7c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d106      	bne.n	8009aca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009abc:	f107 0310 	add.w	r3, r7, #16
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f000 fe8f 	bl	800a7e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009aca:	f001 fd8f 	bl	800b5ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ace:	f000 fbf7 	bl	800a2c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ad2:	f001 fd59 	bl	800b588 <vPortEnterCritical>
 8009ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009adc:	b25b      	sxtb	r3, r3
 8009ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae2:	d103      	bne.n	8009aec <xQueueReceive+0x128>
 8009ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009af2:	b25b      	sxtb	r3, r3
 8009af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af8:	d103      	bne.n	8009b02 <xQueueReceive+0x13e>
 8009afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b02:	f001 fd73 	bl	800b5ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b06:	1d3a      	adds	r2, r7, #4
 8009b08:	f107 0310 	add.w	r3, r7, #16
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 fe7e 	bl	800a810 <xTaskCheckForTimeOut>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d123      	bne.n	8009b62 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b1c:	f000 f916 	bl	8009d4c <prvIsQueueEmpty>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d017      	beq.n	8009b56 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b28:	3324      	adds	r3, #36	@ 0x24
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 fda2 	bl	800a678 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b36:	f000 f8b7 	bl	8009ca8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b3a:	f000 fbcf 	bl	800a2dc <xTaskResumeAll>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d189      	bne.n	8009a58 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009b44:	4b0f      	ldr	r3, [pc, #60]	@ (8009b84 <xQueueReceive+0x1c0>)
 8009b46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	e780      	b.n	8009a58 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b58:	f000 f8a6 	bl	8009ca8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b5c:	f000 fbbe 	bl	800a2dc <xTaskResumeAll>
 8009b60:	e77a      	b.n	8009a58 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b64:	f000 f8a0 	bl	8009ca8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b68:	f000 fbb8 	bl	800a2dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b6e:	f000 f8ed 	bl	8009d4c <prvIsQueueEmpty>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f43f af6f 	beq.w	8009a58 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3730      	adds	r7, #48	@ 0x30
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	e000ed04 	.word	0xe000ed04

08009b88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b086      	sub	sp, #24
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009b94:	2300      	movs	r3, #0
 8009b96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d10d      	bne.n	8009bc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d14d      	bne.n	8009c4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 ff96 	bl	800aae4 <xTaskPriorityDisinherit>
 8009bb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	609a      	str	r2, [r3, #8]
 8009bc0:	e043      	b.n	8009c4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d119      	bne.n	8009bfc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6858      	ldr	r0, [r3, #4]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	68b9      	ldr	r1, [r7, #8]
 8009bd4:	f002 f91a 	bl	800be0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009be0:	441a      	add	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	685a      	ldr	r2, [r3, #4]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d32b      	bcc.n	8009c4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	605a      	str	r2, [r3, #4]
 8009bfa:	e026      	b.n	8009c4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	68d8      	ldr	r0, [r3, #12]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c04:	461a      	mov	r2, r3
 8009c06:	68b9      	ldr	r1, [r7, #8]
 8009c08:	f002 f900 	bl	800be0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	68da      	ldr	r2, [r3, #12]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c14:	425b      	negs	r3, r3
 8009c16:	441a      	add	r2, r3
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	68da      	ldr	r2, [r3, #12]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d207      	bcs.n	8009c38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	689a      	ldr	r2, [r3, #8]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c30:	425b      	negs	r3, r3
 8009c32:	441a      	add	r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d105      	bne.n	8009c4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d002      	beq.n	8009c4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	3b01      	subs	r3, #1
 8009c48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	1c5a      	adds	r2, r3, #1
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009c52:	697b      	ldr	r3, [r7, #20]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d018      	beq.n	8009ca0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	68da      	ldr	r2, [r3, #12]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c76:	441a      	add	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68da      	ldr	r2, [r3, #12]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d303      	bcc.n	8009c90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	68d9      	ldr	r1, [r3, #12]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c98:	461a      	mov	r2, r3
 8009c9a:	6838      	ldr	r0, [r7, #0]
 8009c9c:	f002 f8b6 	bl	800be0c <memcpy>
	}
}
 8009ca0:	bf00      	nop
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009cb0:	f001 fc6a 	bl	800b588 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009cba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009cbc:	e011      	b.n	8009ce2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d012      	beq.n	8009cec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	3324      	adds	r3, #36	@ 0x24
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f000 fd26 	bl	800a71c <xTaskRemoveFromEventList>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009cd6:	f000 fdff 	bl	800a8d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	dce9      	bgt.n	8009cbe <prvUnlockQueue+0x16>
 8009cea:	e000      	b.n	8009cee <prvUnlockQueue+0x46>
					break;
 8009cec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	22ff      	movs	r2, #255	@ 0xff
 8009cf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009cf6:	f001 fc79 	bl	800b5ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009cfa:	f001 fc45 	bl	800b588 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d06:	e011      	b.n	8009d2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d012      	beq.n	8009d36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	3310      	adds	r3, #16
 8009d14:	4618      	mov	r0, r3
 8009d16:	f000 fd01 	bl	800a71c <xTaskRemoveFromEventList>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d001      	beq.n	8009d24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009d20:	f000 fdda 	bl	800a8d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009d24:	7bbb      	ldrb	r3, [r7, #14]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	dce9      	bgt.n	8009d08 <prvUnlockQueue+0x60>
 8009d34:	e000      	b.n	8009d38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009d36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	22ff      	movs	r2, #255	@ 0xff
 8009d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009d40:	f001 fc54 	bl	800b5ec <vPortExitCritical>
}
 8009d44:	bf00      	nop
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d54:	f001 fc18 	bl	800b588 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d102      	bne.n	8009d66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009d60:	2301      	movs	r3, #1
 8009d62:	60fb      	str	r3, [r7, #12]
 8009d64:	e001      	b.n	8009d6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009d66:	2300      	movs	r3, #0
 8009d68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d6a:	f001 fc3f 	bl	800b5ec <vPortExitCritical>

	return xReturn;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d80:	f001 fc02 	bl	800b588 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d102      	bne.n	8009d96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009d90:	2301      	movs	r3, #1
 8009d92:	60fb      	str	r3, [r7, #12]
 8009d94:	e001      	b.n	8009d9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009d96:	2300      	movs	r3, #0
 8009d98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d9a:	f001 fc27 	bl	800b5ec <vPortExitCritical>

	return xReturn;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009db2:	2300      	movs	r3, #0
 8009db4:	60fb      	str	r3, [r7, #12]
 8009db6:	e014      	b.n	8009de2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009db8:	4a0f      	ldr	r2, [pc, #60]	@ (8009df8 <vQueueAddToRegistry+0x50>)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10b      	bne.n	8009ddc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009dc4:	490c      	ldr	r1, [pc, #48]	@ (8009df8 <vQueueAddToRegistry+0x50>)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	683a      	ldr	r2, [r7, #0]
 8009dca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009dce:	4a0a      	ldr	r2, [pc, #40]	@ (8009df8 <vQueueAddToRegistry+0x50>)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	00db      	lsls	r3, r3, #3
 8009dd4:	4413      	add	r3, r2
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009dda:	e006      	b.n	8009dea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	3301      	adds	r3, #1
 8009de0:	60fb      	str	r3, [r7, #12]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2b07      	cmp	r3, #7
 8009de6:	d9e7      	bls.n	8009db8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009de8:	bf00      	nop
 8009dea:	bf00      	nop
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	20000b7c 	.word	0x20000b7c

08009dfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009e0c:	f001 fbbc 	bl	800b588 <vPortEnterCritical>
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e16:	b25b      	sxtb	r3, r3
 8009e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e1c:	d103      	bne.n	8009e26 <vQueueWaitForMessageRestricted+0x2a>
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e2c:	b25b      	sxtb	r3, r3
 8009e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e32:	d103      	bne.n	8009e3c <vQueueWaitForMessageRestricted+0x40>
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e3c:	f001 fbd6 	bl	800b5ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d106      	bne.n	8009e56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	3324      	adds	r3, #36	@ 0x24
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	68b9      	ldr	r1, [r7, #8]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 fc37 	bl	800a6c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009e56:	6978      	ldr	r0, [r7, #20]
 8009e58:	f7ff ff26 	bl	8009ca8 <prvUnlockQueue>
	}
 8009e5c:	bf00      	nop
 8009e5e:	3718      	adds	r7, #24
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b08e      	sub	sp, #56	@ 0x38
 8009e68:	af04      	add	r7, sp, #16
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
 8009e70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10b      	bne.n	8009e90 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	623b      	str	r3, [r7, #32]
}
 8009e8a:	bf00      	nop
 8009e8c:	bf00      	nop
 8009e8e:	e7fd      	b.n	8009e8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10b      	bne.n	8009eae <xTaskCreateStatic+0x4a>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	61fb      	str	r3, [r7, #28]
}
 8009ea8:	bf00      	nop
 8009eaa:	bf00      	nop
 8009eac:	e7fd      	b.n	8009eaa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009eae:	23a8      	movs	r3, #168	@ 0xa8
 8009eb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	2ba8      	cmp	r3, #168	@ 0xa8
 8009eb6:	d00b      	beq.n	8009ed0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ebc:	f383 8811 	msr	BASEPRI, r3
 8009ec0:	f3bf 8f6f 	isb	sy
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	61bb      	str	r3, [r7, #24]
}
 8009eca:	bf00      	nop
 8009ecc:	bf00      	nop
 8009ece:	e7fd      	b.n	8009ecc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ed0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d01e      	beq.n	8009f16 <xTaskCreateStatic+0xb2>
 8009ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d01b      	beq.n	8009f16 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ee6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eea:	2202      	movs	r2, #2
 8009eec:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	9303      	str	r3, [sp, #12]
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef6:	9302      	str	r3, [sp, #8]
 8009ef8:	f107 0314 	add.w	r3, r7, #20
 8009efc:	9301      	str	r3, [sp, #4]
 8009efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	68b9      	ldr	r1, [r7, #8]
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f000 f851 	bl	8009fb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009f10:	f000 f8f6 	bl	800a100 <prvAddNewTaskToReadyList>
 8009f14:	e001      	b.n	8009f1a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009f16:	2300      	movs	r3, #0
 8009f18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f1a:	697b      	ldr	r3, [r7, #20]
	}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3728      	adds	r7, #40	@ 0x28
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b08c      	sub	sp, #48	@ 0x30
 8009f28:	af04      	add	r7, sp, #16
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	603b      	str	r3, [r7, #0]
 8009f30:	4613      	mov	r3, r2
 8009f32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f34:	88fb      	ldrh	r3, [r7, #6]
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f001 fc47 	bl	800b7cc <pvPortMalloc>
 8009f3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00e      	beq.n	8009f64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f46:	20a8      	movs	r0, #168	@ 0xa8
 8009f48:	f001 fc40 	bl	800b7cc <pvPortMalloc>
 8009f4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d003      	beq.n	8009f5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	631a      	str	r2, [r3, #48]	@ 0x30
 8009f5a:	e005      	b.n	8009f68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f5c:	6978      	ldr	r0, [r7, #20]
 8009f5e:	f001 fd03 	bl	800b968 <vPortFree>
 8009f62:	e001      	b.n	8009f68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f64:	2300      	movs	r3, #0
 8009f66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d017      	beq.n	8009f9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f76:	88fa      	ldrh	r2, [r7, #6]
 8009f78:	2300      	movs	r3, #0
 8009f7a:	9303      	str	r3, [sp, #12]
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	9302      	str	r3, [sp, #8]
 8009f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f82:	9301      	str	r3, [sp, #4]
 8009f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	68b9      	ldr	r1, [r7, #8]
 8009f8c:	68f8      	ldr	r0, [r7, #12]
 8009f8e:	f000 f80f 	bl	8009fb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f92:	69f8      	ldr	r0, [r7, #28]
 8009f94:	f000 f8b4 	bl	800a100 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	61bb      	str	r3, [r7, #24]
 8009f9c:	e002      	b.n	8009fa4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009fa4:	69bb      	ldr	r3, [r7, #24]
	}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3720      	adds	r7, #32
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
	...

08009fb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b088      	sub	sp, #32
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
 8009fbc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	21a5      	movs	r1, #165	@ 0xa5
 8009fca:	f001 fe95 	bl	800bcf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	4413      	add	r3, r2
 8009fde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	f023 0307 	bic.w	r3, r3, #7
 8009fe6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	f003 0307 	and.w	r3, r3, #7
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00b      	beq.n	800a00a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	617b      	str	r3, [r7, #20]
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop
 800a008:	e7fd      	b.n	800a006 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d01f      	beq.n	800a050 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a010:	2300      	movs	r3, #0
 800a012:	61fb      	str	r3, [r7, #28]
 800a014:	e012      	b.n	800a03c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	4413      	add	r3, r2
 800a01c:	7819      	ldrb	r1, [r3, #0]
 800a01e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	4413      	add	r3, r2
 800a024:	3334      	adds	r3, #52	@ 0x34
 800a026:	460a      	mov	r2, r1
 800a028:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a02a:	68ba      	ldr	r2, [r7, #8]
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	4413      	add	r3, r2
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d006      	beq.n	800a044 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	3301      	adds	r3, #1
 800a03a:	61fb      	str	r3, [r7, #28]
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	2b0f      	cmp	r3, #15
 800a040:	d9e9      	bls.n	800a016 <prvInitialiseNewTask+0x66>
 800a042:	e000      	b.n	800a046 <prvInitialiseNewTask+0x96>
			{
				break;
 800a044:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a04e:	e003      	b.n	800a058 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a052:	2200      	movs	r2, #0
 800a054:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05a:	2b37      	cmp	r3, #55	@ 0x37
 800a05c:	d901      	bls.n	800a062 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a05e:	2337      	movs	r3, #55	@ 0x37
 800a060:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a064:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a066:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a06a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a06c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a070:	2200      	movs	r2, #0
 800a072:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a076:	3304      	adds	r3, #4
 800a078:	4618      	mov	r0, r3
 800a07a:	f7ff f965 	bl	8009348 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a080:	3318      	adds	r3, #24
 800a082:	4618      	mov	r0, r3
 800a084:	f7ff f960 	bl	8009348 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a08a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a08c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a090:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a096:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a09c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b0:	3354      	adds	r3, #84	@ 0x54
 800a0b2:	224c      	movs	r2, #76	@ 0x4c
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f001 fe1e 	bl	800bcf8 <memset>
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0be:	4a0d      	ldr	r2, [pc, #52]	@ (800a0f4 <prvInitialiseNewTask+0x144>)
 800a0c0:	659a      	str	r2, [r3, #88]	@ 0x58
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c4:	4a0c      	ldr	r2, [pc, #48]	@ (800a0f8 <prvInitialiseNewTask+0x148>)
 800a0c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ca:	4a0c      	ldr	r2, [pc, #48]	@ (800a0fc <prvInitialiseNewTask+0x14c>)
 800a0cc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	68f9      	ldr	r1, [r7, #12]
 800a0d2:	69b8      	ldr	r0, [r7, #24]
 800a0d4:	f001 f924 	bl	800b320 <pxPortInitialiseStack>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a0de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d002      	beq.n	800a0ea <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0ea:	bf00      	nop
 800a0ec:	3720      	adds	r7, #32
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20006030 	.word	0x20006030
 800a0f8:	20006098 	.word	0x20006098
 800a0fc:	20006100 	.word	0x20006100

0800a100 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a108:	f001 fa3e 	bl	800b588 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a10c:	4b2d      	ldr	r3, [pc, #180]	@ (800a1c4 <prvAddNewTaskToReadyList+0xc4>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	3301      	adds	r3, #1
 800a112:	4a2c      	ldr	r2, [pc, #176]	@ (800a1c4 <prvAddNewTaskToReadyList+0xc4>)
 800a114:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a116:	4b2c      	ldr	r3, [pc, #176]	@ (800a1c8 <prvAddNewTaskToReadyList+0xc8>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d109      	bne.n	800a132 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a11e:	4a2a      	ldr	r2, [pc, #168]	@ (800a1c8 <prvAddNewTaskToReadyList+0xc8>)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a124:	4b27      	ldr	r3, [pc, #156]	@ (800a1c4 <prvAddNewTaskToReadyList+0xc4>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d110      	bne.n	800a14e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a12c:	f000 fbf8 	bl	800a920 <prvInitialiseTaskLists>
 800a130:	e00d      	b.n	800a14e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a132:	4b26      	ldr	r3, [pc, #152]	@ (800a1cc <prvAddNewTaskToReadyList+0xcc>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d109      	bne.n	800a14e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a13a:	4b23      	ldr	r3, [pc, #140]	@ (800a1c8 <prvAddNewTaskToReadyList+0xc8>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a144:	429a      	cmp	r2, r3
 800a146:	d802      	bhi.n	800a14e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a148:	4a1f      	ldr	r2, [pc, #124]	@ (800a1c8 <prvAddNewTaskToReadyList+0xc8>)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a14e:	4b20      	ldr	r3, [pc, #128]	@ (800a1d0 <prvAddNewTaskToReadyList+0xd0>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	3301      	adds	r3, #1
 800a154:	4a1e      	ldr	r2, [pc, #120]	@ (800a1d0 <prvAddNewTaskToReadyList+0xd0>)
 800a156:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a158:	4b1d      	ldr	r3, [pc, #116]	@ (800a1d0 <prvAddNewTaskToReadyList+0xd0>)
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a164:	4b1b      	ldr	r3, [pc, #108]	@ (800a1d4 <prvAddNewTaskToReadyList+0xd4>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d903      	bls.n	800a174 <prvAddNewTaskToReadyList+0x74>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a170:	4a18      	ldr	r2, [pc, #96]	@ (800a1d4 <prvAddNewTaskToReadyList+0xd4>)
 800a172:	6013      	str	r3, [r2, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a178:	4613      	mov	r3, r2
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	4413      	add	r3, r2
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	4a15      	ldr	r2, [pc, #84]	@ (800a1d8 <prvAddNewTaskToReadyList+0xd8>)
 800a182:	441a      	add	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	3304      	adds	r3, #4
 800a188:	4619      	mov	r1, r3
 800a18a:	4610      	mov	r0, r2
 800a18c:	f7ff f8e9 	bl	8009362 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a190:	f001 fa2c 	bl	800b5ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a194:	4b0d      	ldr	r3, [pc, #52]	@ (800a1cc <prvAddNewTaskToReadyList+0xcc>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00e      	beq.n	800a1ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a19c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1c8 <prvAddNewTaskToReadyList+0xc8>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d207      	bcs.n	800a1ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1aa:	4b0c      	ldr	r3, [pc, #48]	@ (800a1dc <prvAddNewTaskToReadyList+0xdc>)
 800a1ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1b0:	601a      	str	r2, [r3, #0]
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1ba:	bf00      	nop
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20001090 	.word	0x20001090
 800a1c8:	20000bbc 	.word	0x20000bbc
 800a1cc:	2000109c 	.word	0x2000109c
 800a1d0:	200010ac 	.word	0x200010ac
 800a1d4:	20001098 	.word	0x20001098
 800a1d8:	20000bc0 	.word	0x20000bc0
 800a1dc:	e000ed04 	.word	0xe000ed04

0800a1e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b08a      	sub	sp, #40	@ 0x28
 800a1e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a1ee:	463a      	mov	r2, r7
 800a1f0:	1d39      	adds	r1, r7, #4
 800a1f2:	f107 0308 	add.w	r3, r7, #8
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7ff f852 	bl	80092a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	9202      	str	r2, [sp, #8]
 800a204:	9301      	str	r3, [sp, #4]
 800a206:	2300      	movs	r3, #0
 800a208:	9300      	str	r3, [sp, #0]
 800a20a:	2300      	movs	r3, #0
 800a20c:	460a      	mov	r2, r1
 800a20e:	4924      	ldr	r1, [pc, #144]	@ (800a2a0 <vTaskStartScheduler+0xc0>)
 800a210:	4824      	ldr	r0, [pc, #144]	@ (800a2a4 <vTaskStartScheduler+0xc4>)
 800a212:	f7ff fe27 	bl	8009e64 <xTaskCreateStatic>
 800a216:	4603      	mov	r3, r0
 800a218:	4a23      	ldr	r2, [pc, #140]	@ (800a2a8 <vTaskStartScheduler+0xc8>)
 800a21a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a21c:	4b22      	ldr	r3, [pc, #136]	@ (800a2a8 <vTaskStartScheduler+0xc8>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a224:	2301      	movs	r3, #1
 800a226:	617b      	str	r3, [r7, #20]
 800a228:	e001      	b.n	800a22e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d102      	bne.n	800a23a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a234:	f000 fd1a 	bl	800ac6c <xTimerCreateTimerTask>
 800a238:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d11b      	bne.n	800a278 <vTaskStartScheduler+0x98>
	__asm volatile
 800a240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	613b      	str	r3, [r7, #16]
}
 800a252:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a254:	4b15      	ldr	r3, [pc, #84]	@ (800a2ac <vTaskStartScheduler+0xcc>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	3354      	adds	r3, #84	@ 0x54
 800a25a:	4a15      	ldr	r2, [pc, #84]	@ (800a2b0 <vTaskStartScheduler+0xd0>)
 800a25c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a25e:	4b15      	ldr	r3, [pc, #84]	@ (800a2b4 <vTaskStartScheduler+0xd4>)
 800a260:	f04f 32ff 	mov.w	r2, #4294967295
 800a264:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a266:	4b14      	ldr	r3, [pc, #80]	@ (800a2b8 <vTaskStartScheduler+0xd8>)
 800a268:	2201      	movs	r2, #1
 800a26a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a26c:	4b13      	ldr	r3, [pc, #76]	@ (800a2bc <vTaskStartScheduler+0xdc>)
 800a26e:	2200      	movs	r2, #0
 800a270:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a272:	f001 f8e5 	bl	800b440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a276:	e00f      	b.n	800a298 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27e:	d10b      	bne.n	800a298 <vTaskStartScheduler+0xb8>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	60fb      	str	r3, [r7, #12]
}
 800a292:	bf00      	nop
 800a294:	bf00      	nop
 800a296:	e7fd      	b.n	800a294 <vTaskStartScheduler+0xb4>
}
 800a298:	bf00      	nop
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	0800f6f8 	.word	0x0800f6f8
 800a2a4:	0800a8f1 	.word	0x0800a8f1
 800a2a8:	200010b4 	.word	0x200010b4
 800a2ac:	20000bbc 	.word	0x20000bbc
 800a2b0:	200000b4 	.word	0x200000b4
 800a2b4:	200010b0 	.word	0x200010b0
 800a2b8:	2000109c 	.word	0x2000109c
 800a2bc:	20001094 	.word	0x20001094

0800a2c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a2c4:	4b04      	ldr	r3, [pc, #16]	@ (800a2d8 <vTaskSuspendAll+0x18>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3301      	adds	r3, #1
 800a2ca:	4a03      	ldr	r2, [pc, #12]	@ (800a2d8 <vTaskSuspendAll+0x18>)
 800a2cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a2ce:	bf00      	nop
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	200010b8 	.word	0x200010b8

0800a2dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a2ea:	4b42      	ldr	r3, [pc, #264]	@ (800a3f4 <xTaskResumeAll+0x118>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d10b      	bne.n	800a30a <xTaskResumeAll+0x2e>
	__asm volatile
 800a2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	603b      	str	r3, [r7, #0]
}
 800a304:	bf00      	nop
 800a306:	bf00      	nop
 800a308:	e7fd      	b.n	800a306 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a30a:	f001 f93d 	bl	800b588 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a30e:	4b39      	ldr	r3, [pc, #228]	@ (800a3f4 <xTaskResumeAll+0x118>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3b01      	subs	r3, #1
 800a314:	4a37      	ldr	r2, [pc, #220]	@ (800a3f4 <xTaskResumeAll+0x118>)
 800a316:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a318:	4b36      	ldr	r3, [pc, #216]	@ (800a3f4 <xTaskResumeAll+0x118>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d162      	bne.n	800a3e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a320:	4b35      	ldr	r3, [pc, #212]	@ (800a3f8 <xTaskResumeAll+0x11c>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d05e      	beq.n	800a3e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a328:	e02f      	b.n	800a38a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a32a:	4b34      	ldr	r3, [pc, #208]	@ (800a3fc <xTaskResumeAll+0x120>)
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	3318      	adds	r3, #24
 800a336:	4618      	mov	r0, r3
 800a338:	f7ff f870 	bl	800941c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	3304      	adds	r3, #4
 800a340:	4618      	mov	r0, r3
 800a342:	f7ff f86b 	bl	800941c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a34a:	4b2d      	ldr	r3, [pc, #180]	@ (800a400 <xTaskResumeAll+0x124>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d903      	bls.n	800a35a <xTaskResumeAll+0x7e>
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a356:	4a2a      	ldr	r2, [pc, #168]	@ (800a400 <xTaskResumeAll+0x124>)
 800a358:	6013      	str	r3, [r2, #0]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a35e:	4613      	mov	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	4a27      	ldr	r2, [pc, #156]	@ (800a404 <xTaskResumeAll+0x128>)
 800a368:	441a      	add	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	3304      	adds	r3, #4
 800a36e:	4619      	mov	r1, r3
 800a370:	4610      	mov	r0, r2
 800a372:	f7fe fff6 	bl	8009362 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a37a:	4b23      	ldr	r3, [pc, #140]	@ (800a408 <xTaskResumeAll+0x12c>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a380:	429a      	cmp	r2, r3
 800a382:	d302      	bcc.n	800a38a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a384:	4b21      	ldr	r3, [pc, #132]	@ (800a40c <xTaskResumeAll+0x130>)
 800a386:	2201      	movs	r2, #1
 800a388:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a38a:	4b1c      	ldr	r3, [pc, #112]	@ (800a3fc <xTaskResumeAll+0x120>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1cb      	bne.n	800a32a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a398:	f000 fb66 	bl	800aa68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a39c:	4b1c      	ldr	r3, [pc, #112]	@ (800a410 <xTaskResumeAll+0x134>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d010      	beq.n	800a3ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3a8:	f000 f846 	bl	800a438 <xTaskIncrementTick>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a3b2:	4b16      	ldr	r3, [pc, #88]	@ (800a40c <xTaskResumeAll+0x130>)
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1f1      	bne.n	800a3a8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a3c4:	4b12      	ldr	r3, [pc, #72]	@ (800a410 <xTaskResumeAll+0x134>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a3ca:	4b10      	ldr	r3, [pc, #64]	@ (800a40c <xTaskResumeAll+0x130>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d009      	beq.n	800a3e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a3d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a414 <xTaskResumeAll+0x138>)
 800a3d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3dc:	601a      	str	r2, [r3, #0]
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3e6:	f001 f901 	bl	800b5ec <vPortExitCritical>

	return xAlreadyYielded;
 800a3ea:	68bb      	ldr	r3, [r7, #8]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	200010b8 	.word	0x200010b8
 800a3f8:	20001090 	.word	0x20001090
 800a3fc:	20001050 	.word	0x20001050
 800a400:	20001098 	.word	0x20001098
 800a404:	20000bc0 	.word	0x20000bc0
 800a408:	20000bbc 	.word	0x20000bbc
 800a40c:	200010a4 	.word	0x200010a4
 800a410:	200010a0 	.word	0x200010a0
 800a414:	e000ed04 	.word	0xe000ed04

0800a418 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a41e:	4b05      	ldr	r3, [pc, #20]	@ (800a434 <xTaskGetTickCount+0x1c>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a424:	687b      	ldr	r3, [r7, #4]
}
 800a426:	4618      	mov	r0, r3
 800a428:	370c      	adds	r7, #12
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	20001094 	.word	0x20001094

0800a438 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a43e:	2300      	movs	r3, #0
 800a440:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a442:	4b4f      	ldr	r3, [pc, #316]	@ (800a580 <xTaskIncrementTick+0x148>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	f040 8090 	bne.w	800a56c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a44c:	4b4d      	ldr	r3, [pc, #308]	@ (800a584 <xTaskIncrementTick+0x14c>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3301      	adds	r3, #1
 800a452:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a454:	4a4b      	ldr	r2, [pc, #300]	@ (800a584 <xTaskIncrementTick+0x14c>)
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d121      	bne.n	800a4a4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a460:	4b49      	ldr	r3, [pc, #292]	@ (800a588 <xTaskIncrementTick+0x150>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00b      	beq.n	800a482 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	603b      	str	r3, [r7, #0]
}
 800a47c:	bf00      	nop
 800a47e:	bf00      	nop
 800a480:	e7fd      	b.n	800a47e <xTaskIncrementTick+0x46>
 800a482:	4b41      	ldr	r3, [pc, #260]	@ (800a588 <xTaskIncrementTick+0x150>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	60fb      	str	r3, [r7, #12]
 800a488:	4b40      	ldr	r3, [pc, #256]	@ (800a58c <xTaskIncrementTick+0x154>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a3e      	ldr	r2, [pc, #248]	@ (800a588 <xTaskIncrementTick+0x150>)
 800a48e:	6013      	str	r3, [r2, #0]
 800a490:	4a3e      	ldr	r2, [pc, #248]	@ (800a58c <xTaskIncrementTick+0x154>)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6013      	str	r3, [r2, #0]
 800a496:	4b3e      	ldr	r3, [pc, #248]	@ (800a590 <xTaskIncrementTick+0x158>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	3301      	adds	r3, #1
 800a49c:	4a3c      	ldr	r2, [pc, #240]	@ (800a590 <xTaskIncrementTick+0x158>)
 800a49e:	6013      	str	r3, [r2, #0]
 800a4a0:	f000 fae2 	bl	800aa68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4a4:	4b3b      	ldr	r3, [pc, #236]	@ (800a594 <xTaskIncrementTick+0x15c>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	693a      	ldr	r2, [r7, #16]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d349      	bcc.n	800a542 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4ae:	4b36      	ldr	r3, [pc, #216]	@ (800a588 <xTaskIncrementTick+0x150>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d104      	bne.n	800a4c2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4b8:	4b36      	ldr	r3, [pc, #216]	@ (800a594 <xTaskIncrementTick+0x15c>)
 800a4ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a4be:	601a      	str	r2, [r3, #0]
					break;
 800a4c0:	e03f      	b.n	800a542 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4c2:	4b31      	ldr	r3, [pc, #196]	@ (800a588 <xTaskIncrementTick+0x150>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d203      	bcs.n	800a4e2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4da:	4a2e      	ldr	r2, [pc, #184]	@ (800a594 <xTaskIncrementTick+0x15c>)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a4e0:	e02f      	b.n	800a542 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fe ff98 	bl	800941c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d004      	beq.n	800a4fe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	3318      	adds	r3, #24
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7fe ff8f 	bl	800941c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a502:	4b25      	ldr	r3, [pc, #148]	@ (800a598 <xTaskIncrementTick+0x160>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	429a      	cmp	r2, r3
 800a508:	d903      	bls.n	800a512 <xTaskIncrementTick+0xda>
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a50e:	4a22      	ldr	r2, [pc, #136]	@ (800a598 <xTaskIncrementTick+0x160>)
 800a510:	6013      	str	r3, [r2, #0]
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a516:	4613      	mov	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4413      	add	r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4a1f      	ldr	r2, [pc, #124]	@ (800a59c <xTaskIncrementTick+0x164>)
 800a520:	441a      	add	r2, r3
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	3304      	adds	r3, #4
 800a526:	4619      	mov	r1, r3
 800a528:	4610      	mov	r0, r2
 800a52a:	f7fe ff1a 	bl	8009362 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a532:	4b1b      	ldr	r3, [pc, #108]	@ (800a5a0 <xTaskIncrementTick+0x168>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a538:	429a      	cmp	r2, r3
 800a53a:	d3b8      	bcc.n	800a4ae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a53c:	2301      	movs	r3, #1
 800a53e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a540:	e7b5      	b.n	800a4ae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a542:	4b17      	ldr	r3, [pc, #92]	@ (800a5a0 <xTaskIncrementTick+0x168>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a548:	4914      	ldr	r1, [pc, #80]	@ (800a59c <xTaskIncrementTick+0x164>)
 800a54a:	4613      	mov	r3, r2
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	4413      	add	r3, r2
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	440b      	add	r3, r1
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d901      	bls.n	800a55e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a55a:	2301      	movs	r3, #1
 800a55c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a55e:	4b11      	ldr	r3, [pc, #68]	@ (800a5a4 <xTaskIncrementTick+0x16c>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d007      	beq.n	800a576 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a566:	2301      	movs	r3, #1
 800a568:	617b      	str	r3, [r7, #20]
 800a56a:	e004      	b.n	800a576 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a56c:	4b0e      	ldr	r3, [pc, #56]	@ (800a5a8 <xTaskIncrementTick+0x170>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	3301      	adds	r3, #1
 800a572:	4a0d      	ldr	r2, [pc, #52]	@ (800a5a8 <xTaskIncrementTick+0x170>)
 800a574:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a576:	697b      	ldr	r3, [r7, #20]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3718      	adds	r7, #24
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	200010b8 	.word	0x200010b8
 800a584:	20001094 	.word	0x20001094
 800a588:	20001048 	.word	0x20001048
 800a58c:	2000104c 	.word	0x2000104c
 800a590:	200010a8 	.word	0x200010a8
 800a594:	200010b0 	.word	0x200010b0
 800a598:	20001098 	.word	0x20001098
 800a59c:	20000bc0 	.word	0x20000bc0
 800a5a0:	20000bbc 	.word	0x20000bbc
 800a5a4:	200010a4 	.word	0x200010a4
 800a5a8:	200010a0 	.word	0x200010a0

0800a5ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5b2:	4b2b      	ldr	r3, [pc, #172]	@ (800a660 <vTaskSwitchContext+0xb4>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d003      	beq.n	800a5c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5ba:	4b2a      	ldr	r3, [pc, #168]	@ (800a664 <vTaskSwitchContext+0xb8>)
 800a5bc:	2201      	movs	r2, #1
 800a5be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5c0:	e047      	b.n	800a652 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a5c2:	4b28      	ldr	r3, [pc, #160]	@ (800a664 <vTaskSwitchContext+0xb8>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5c8:	4b27      	ldr	r3, [pc, #156]	@ (800a668 <vTaskSwitchContext+0xbc>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	60fb      	str	r3, [r7, #12]
 800a5ce:	e011      	b.n	800a5f4 <vTaskSwitchContext+0x48>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10b      	bne.n	800a5ee <vTaskSwitchContext+0x42>
	__asm volatile
 800a5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	607b      	str	r3, [r7, #4]
}
 800a5e8:	bf00      	nop
 800a5ea:	bf00      	nop
 800a5ec:	e7fd      	b.n	800a5ea <vTaskSwitchContext+0x3e>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	60fb      	str	r3, [r7, #12]
 800a5f4:	491d      	ldr	r1, [pc, #116]	@ (800a66c <vTaskSwitchContext+0xc0>)
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4413      	add	r3, r2
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	440b      	add	r3, r1
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d0e3      	beq.n	800a5d0 <vTaskSwitchContext+0x24>
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	4613      	mov	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	4413      	add	r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4a16      	ldr	r2, [pc, #88]	@ (800a66c <vTaskSwitchContext+0xc0>)
 800a614:	4413      	add	r3, r2
 800a616:	60bb      	str	r3, [r7, #8]
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	685a      	ldr	r2, [r3, #4]
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	605a      	str	r2, [r3, #4]
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	685a      	ldr	r2, [r3, #4]
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	3308      	adds	r3, #8
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d104      	bne.n	800a638 <vTaskSwitchContext+0x8c>
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	605a      	str	r2, [r3, #4]
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	4a0c      	ldr	r2, [pc, #48]	@ (800a670 <vTaskSwitchContext+0xc4>)
 800a640:	6013      	str	r3, [r2, #0]
 800a642:	4a09      	ldr	r2, [pc, #36]	@ (800a668 <vTaskSwitchContext+0xbc>)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a648:	4b09      	ldr	r3, [pc, #36]	@ (800a670 <vTaskSwitchContext+0xc4>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	3354      	adds	r3, #84	@ 0x54
 800a64e:	4a09      	ldr	r2, [pc, #36]	@ (800a674 <vTaskSwitchContext+0xc8>)
 800a650:	6013      	str	r3, [r2, #0]
}
 800a652:	bf00      	nop
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	200010b8 	.word	0x200010b8
 800a664:	200010a4 	.word	0x200010a4
 800a668:	20001098 	.word	0x20001098
 800a66c:	20000bc0 	.word	0x20000bc0
 800a670:	20000bbc 	.word	0x20000bbc
 800a674:	200000b4 	.word	0x200000b4

0800a678 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10b      	bne.n	800a6a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	60fb      	str	r3, [r7, #12]
}
 800a69a:	bf00      	nop
 800a69c:	bf00      	nop
 800a69e:	e7fd      	b.n	800a69c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6a0:	4b07      	ldr	r3, [pc, #28]	@ (800a6c0 <vTaskPlaceOnEventList+0x48>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	3318      	adds	r3, #24
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7fe fe7e 	bl	80093aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6ae:	2101      	movs	r1, #1
 800a6b0:	6838      	ldr	r0, [r7, #0]
 800a6b2:	f000 fa87 	bl	800abc4 <prvAddCurrentTaskToDelayedList>
}
 800a6b6:	bf00      	nop
 800a6b8:	3710      	adds	r7, #16
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	20000bbc 	.word	0x20000bbc

0800a6c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10b      	bne.n	800a6ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6da:	f383 8811 	msr	BASEPRI, r3
 800a6de:	f3bf 8f6f 	isb	sy
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	617b      	str	r3, [r7, #20]
}
 800a6e8:	bf00      	nop
 800a6ea:	bf00      	nop
 800a6ec:	e7fd      	b.n	800a6ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6ee:	4b0a      	ldr	r3, [pc, #40]	@ (800a718 <vTaskPlaceOnEventListRestricted+0x54>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	3318      	adds	r3, #24
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7fe fe33 	bl	8009362 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d002      	beq.n	800a708 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a702:	f04f 33ff 	mov.w	r3, #4294967295
 800a706:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a708:	6879      	ldr	r1, [r7, #4]
 800a70a:	68b8      	ldr	r0, [r7, #8]
 800a70c:	f000 fa5a 	bl	800abc4 <prvAddCurrentTaskToDelayedList>
	}
 800a710:	bf00      	nop
 800a712:	3718      	adds	r7, #24
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	20000bbc 	.word	0x20000bbc

0800a71c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10b      	bne.n	800a74a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	60fb      	str	r3, [r7, #12]
}
 800a744:	bf00      	nop
 800a746:	bf00      	nop
 800a748:	e7fd      	b.n	800a746 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	3318      	adds	r3, #24
 800a74e:	4618      	mov	r0, r3
 800a750:	f7fe fe64 	bl	800941c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a754:	4b1d      	ldr	r3, [pc, #116]	@ (800a7cc <xTaskRemoveFromEventList+0xb0>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d11d      	bne.n	800a798 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	3304      	adds	r3, #4
 800a760:	4618      	mov	r0, r3
 800a762:	f7fe fe5b 	bl	800941c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a76a:	4b19      	ldr	r3, [pc, #100]	@ (800a7d0 <xTaskRemoveFromEventList+0xb4>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d903      	bls.n	800a77a <xTaskRemoveFromEventList+0x5e>
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a776:	4a16      	ldr	r2, [pc, #88]	@ (800a7d0 <xTaskRemoveFromEventList+0xb4>)
 800a778:	6013      	str	r3, [r2, #0]
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a77e:	4613      	mov	r3, r2
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	4413      	add	r3, r2
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	4a13      	ldr	r2, [pc, #76]	@ (800a7d4 <xTaskRemoveFromEventList+0xb8>)
 800a788:	441a      	add	r2, r3
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	3304      	adds	r3, #4
 800a78e:	4619      	mov	r1, r3
 800a790:	4610      	mov	r0, r2
 800a792:	f7fe fde6 	bl	8009362 <vListInsertEnd>
 800a796:	e005      	b.n	800a7a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	3318      	adds	r3, #24
 800a79c:	4619      	mov	r1, r3
 800a79e:	480e      	ldr	r0, [pc, #56]	@ (800a7d8 <xTaskRemoveFromEventList+0xbc>)
 800a7a0:	f7fe fddf 	bl	8009362 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7a8:	4b0c      	ldr	r3, [pc, #48]	@ (800a7dc <xTaskRemoveFromEventList+0xc0>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d905      	bls.n	800a7be <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a7b6:	4b0a      	ldr	r3, [pc, #40]	@ (800a7e0 <xTaskRemoveFromEventList+0xc4>)
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	601a      	str	r2, [r3, #0]
 800a7bc:	e001      	b.n	800a7c2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a7c2:	697b      	ldr	r3, [r7, #20]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	200010b8 	.word	0x200010b8
 800a7d0:	20001098 	.word	0x20001098
 800a7d4:	20000bc0 	.word	0x20000bc0
 800a7d8:	20001050 	.word	0x20001050
 800a7dc:	20000bbc 	.word	0x20000bbc
 800a7e0:	200010a4 	.word	0x200010a4

0800a7e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a7ec:	4b06      	ldr	r3, [pc, #24]	@ (800a808 <vTaskInternalSetTimeOutState+0x24>)
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a7f4:	4b05      	ldr	r3, [pc, #20]	@ (800a80c <vTaskInternalSetTimeOutState+0x28>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	605a      	str	r2, [r3, #4]
}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	200010a8 	.word	0x200010a8
 800a80c:	20001094 	.word	0x20001094

0800a810 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b088      	sub	sp, #32
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10b      	bne.n	800a838 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	613b      	str	r3, [r7, #16]
}
 800a832:	bf00      	nop
 800a834:	bf00      	nop
 800a836:	e7fd      	b.n	800a834 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10b      	bne.n	800a856 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	60fb      	str	r3, [r7, #12]
}
 800a850:	bf00      	nop
 800a852:	bf00      	nop
 800a854:	e7fd      	b.n	800a852 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a856:	f000 fe97 	bl	800b588 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a85a:	4b1d      	ldr	r3, [pc, #116]	@ (800a8d0 <xTaskCheckForTimeOut+0xc0>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	69ba      	ldr	r2, [r7, #24]
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a872:	d102      	bne.n	800a87a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a874:	2300      	movs	r3, #0
 800a876:	61fb      	str	r3, [r7, #28]
 800a878:	e023      	b.n	800a8c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	4b15      	ldr	r3, [pc, #84]	@ (800a8d4 <xTaskCheckForTimeOut+0xc4>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	429a      	cmp	r2, r3
 800a884:	d007      	beq.n	800a896 <xTaskCheckForTimeOut+0x86>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	69ba      	ldr	r2, [r7, #24]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d302      	bcc.n	800a896 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a890:	2301      	movs	r3, #1
 800a892:	61fb      	str	r3, [r7, #28]
 800a894:	e015      	b.n	800a8c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d20b      	bcs.n	800a8b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	1ad2      	subs	r2, r2, r3
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f7ff ff99 	bl	800a7e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	61fb      	str	r3, [r7, #28]
 800a8b6:	e004      	b.n	800a8c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a8c2:	f000 fe93 	bl	800b5ec <vPortExitCritical>

	return xReturn;
 800a8c6:	69fb      	ldr	r3, [r7, #28]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3720      	adds	r7, #32
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	20001094 	.word	0x20001094
 800a8d4:	200010a8 	.word	0x200010a8

0800a8d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a8d8:	b480      	push	{r7}
 800a8da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a8dc:	4b03      	ldr	r3, [pc, #12]	@ (800a8ec <vTaskMissedYield+0x14>)
 800a8de:	2201      	movs	r2, #1
 800a8e0:	601a      	str	r2, [r3, #0]
}
 800a8e2:	bf00      	nop
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr
 800a8ec:	200010a4 	.word	0x200010a4

0800a8f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b082      	sub	sp, #8
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a8f8:	f000 f852 	bl	800a9a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8fc:	4b06      	ldr	r3, [pc, #24]	@ (800a918 <prvIdleTask+0x28>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2b01      	cmp	r3, #1
 800a902:	d9f9      	bls.n	800a8f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a904:	4b05      	ldr	r3, [pc, #20]	@ (800a91c <prvIdleTask+0x2c>)
 800a906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a90a:	601a      	str	r2, [r3, #0]
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a914:	e7f0      	b.n	800a8f8 <prvIdleTask+0x8>
 800a916:	bf00      	nop
 800a918:	20000bc0 	.word	0x20000bc0
 800a91c:	e000ed04 	.word	0xe000ed04

0800a920 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a926:	2300      	movs	r3, #0
 800a928:	607b      	str	r3, [r7, #4]
 800a92a:	e00c      	b.n	800a946 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	4613      	mov	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	4413      	add	r3, r2
 800a934:	009b      	lsls	r3, r3, #2
 800a936:	4a12      	ldr	r2, [pc, #72]	@ (800a980 <prvInitialiseTaskLists+0x60>)
 800a938:	4413      	add	r3, r2
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fe fce4 	bl	8009308 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	3301      	adds	r3, #1
 800a944:	607b      	str	r3, [r7, #4]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b37      	cmp	r3, #55	@ 0x37
 800a94a:	d9ef      	bls.n	800a92c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a94c:	480d      	ldr	r0, [pc, #52]	@ (800a984 <prvInitialiseTaskLists+0x64>)
 800a94e:	f7fe fcdb 	bl	8009308 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a952:	480d      	ldr	r0, [pc, #52]	@ (800a988 <prvInitialiseTaskLists+0x68>)
 800a954:	f7fe fcd8 	bl	8009308 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a958:	480c      	ldr	r0, [pc, #48]	@ (800a98c <prvInitialiseTaskLists+0x6c>)
 800a95a:	f7fe fcd5 	bl	8009308 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a95e:	480c      	ldr	r0, [pc, #48]	@ (800a990 <prvInitialiseTaskLists+0x70>)
 800a960:	f7fe fcd2 	bl	8009308 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a964:	480b      	ldr	r0, [pc, #44]	@ (800a994 <prvInitialiseTaskLists+0x74>)
 800a966:	f7fe fccf 	bl	8009308 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a96a:	4b0b      	ldr	r3, [pc, #44]	@ (800a998 <prvInitialiseTaskLists+0x78>)
 800a96c:	4a05      	ldr	r2, [pc, #20]	@ (800a984 <prvInitialiseTaskLists+0x64>)
 800a96e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a970:	4b0a      	ldr	r3, [pc, #40]	@ (800a99c <prvInitialiseTaskLists+0x7c>)
 800a972:	4a05      	ldr	r2, [pc, #20]	@ (800a988 <prvInitialiseTaskLists+0x68>)
 800a974:	601a      	str	r2, [r3, #0]
}
 800a976:	bf00      	nop
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	20000bc0 	.word	0x20000bc0
 800a984:	20001020 	.word	0x20001020
 800a988:	20001034 	.word	0x20001034
 800a98c:	20001050 	.word	0x20001050
 800a990:	20001064 	.word	0x20001064
 800a994:	2000107c 	.word	0x2000107c
 800a998:	20001048 	.word	0x20001048
 800a99c:	2000104c 	.word	0x2000104c

0800a9a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9a6:	e019      	b.n	800a9dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9a8:	f000 fdee 	bl	800b588 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9ac:	4b10      	ldr	r3, [pc, #64]	@ (800a9f0 <prvCheckTasksWaitingTermination+0x50>)
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7fe fd2f 	bl	800941c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9be:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f4 <prvCheckTasksWaitingTermination+0x54>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	4a0b      	ldr	r2, [pc, #44]	@ (800a9f4 <prvCheckTasksWaitingTermination+0x54>)
 800a9c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9c8:	4b0b      	ldr	r3, [pc, #44]	@ (800a9f8 <prvCheckTasksWaitingTermination+0x58>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	4a0a      	ldr	r2, [pc, #40]	@ (800a9f8 <prvCheckTasksWaitingTermination+0x58>)
 800a9d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9d2:	f000 fe0b 	bl	800b5ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 f810 	bl	800a9fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9dc:	4b06      	ldr	r3, [pc, #24]	@ (800a9f8 <prvCheckTasksWaitingTermination+0x58>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1e1      	bne.n	800a9a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a9e4:	bf00      	nop
 800a9e6:	bf00      	nop
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	20001064 	.word	0x20001064
 800a9f4:	20001090 	.word	0x20001090
 800a9f8:	20001078 	.word	0x20001078

0800a9fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	3354      	adds	r3, #84	@ 0x54
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f001 f97d 	bl	800bd08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d108      	bne.n	800aa2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f000 ffa3 	bl	800b968 <vPortFree>
				vPortFree( pxTCB );
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 ffa0 	bl	800b968 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa28:	e019      	b.n	800aa5e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d103      	bne.n	800aa3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 ff97 	bl	800b968 <vPortFree>
	}
 800aa3a:	e010      	b.n	800aa5e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d00b      	beq.n	800aa5e <prvDeleteTCB+0x62>
	__asm volatile
 800aa46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa4a:	f383 8811 	msr	BASEPRI, r3
 800aa4e:	f3bf 8f6f 	isb	sy
 800aa52:	f3bf 8f4f 	dsb	sy
 800aa56:	60fb      	str	r3, [r7, #12]
}
 800aa58:	bf00      	nop
 800aa5a:	bf00      	nop
 800aa5c:	e7fd      	b.n	800aa5a <prvDeleteTCB+0x5e>
	}
 800aa5e:	bf00      	nop
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
	...

0800aa68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b083      	sub	sp, #12
 800aa6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa6e:	4b0c      	ldr	r3, [pc, #48]	@ (800aaa0 <prvResetNextTaskUnblockTime+0x38>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d104      	bne.n	800aa82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa78:	4b0a      	ldr	r3, [pc, #40]	@ (800aaa4 <prvResetNextTaskUnblockTime+0x3c>)
 800aa7a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa80:	e008      	b.n	800aa94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa82:	4b07      	ldr	r3, [pc, #28]	@ (800aaa0 <prvResetNextTaskUnblockTime+0x38>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	4a04      	ldr	r2, [pc, #16]	@ (800aaa4 <prvResetNextTaskUnblockTime+0x3c>)
 800aa92:	6013      	str	r3, [r2, #0]
}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr
 800aaa0:	20001048 	.word	0x20001048
 800aaa4:	200010b0 	.word	0x200010b0

0800aaa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aaae:	4b0b      	ldr	r3, [pc, #44]	@ (800aadc <xTaskGetSchedulerState+0x34>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d102      	bne.n	800aabc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aab6:	2301      	movs	r3, #1
 800aab8:	607b      	str	r3, [r7, #4]
 800aaba:	e008      	b.n	800aace <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aabc:	4b08      	ldr	r3, [pc, #32]	@ (800aae0 <xTaskGetSchedulerState+0x38>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d102      	bne.n	800aaca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aac4:	2302      	movs	r3, #2
 800aac6:	607b      	str	r3, [r7, #4]
 800aac8:	e001      	b.n	800aace <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aaca:	2300      	movs	r3, #0
 800aacc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aace:	687b      	ldr	r3, [r7, #4]
	}
 800aad0:	4618      	mov	r0, r3
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr
 800aadc:	2000109c 	.word	0x2000109c
 800aae0:	200010b8 	.word	0x200010b8

0800aae4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d058      	beq.n	800abac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aafa:	4b2f      	ldr	r3, [pc, #188]	@ (800abb8 <xTaskPriorityDisinherit+0xd4>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	693a      	ldr	r2, [r7, #16]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d00b      	beq.n	800ab1c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	60fb      	str	r3, [r7, #12]
}
 800ab16:	bf00      	nop
 800ab18:	bf00      	nop
 800ab1a:	e7fd      	b.n	800ab18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10b      	bne.n	800ab3c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ab24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab28:	f383 8811 	msr	BASEPRI, r3
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	60bb      	str	r3, [r7, #8]
}
 800ab36:	bf00      	nop
 800ab38:	bf00      	nop
 800ab3a:	e7fd      	b.n	800ab38 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab40:	1e5a      	subs	r2, r3, #1
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d02c      	beq.n	800abac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d128      	bne.n	800abac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe fc5c 	bl	800941c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab7c:	4b0f      	ldr	r3, [pc, #60]	@ (800abbc <xTaskPriorityDisinherit+0xd8>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d903      	bls.n	800ab8c <xTaskPriorityDisinherit+0xa8>
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab88:	4a0c      	ldr	r2, [pc, #48]	@ (800abbc <xTaskPriorityDisinherit+0xd8>)
 800ab8a:	6013      	str	r3, [r2, #0]
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab90:	4613      	mov	r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	4413      	add	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4a09      	ldr	r2, [pc, #36]	@ (800abc0 <xTaskPriorityDisinherit+0xdc>)
 800ab9a:	441a      	add	r2, r3
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	3304      	adds	r3, #4
 800aba0:	4619      	mov	r1, r3
 800aba2:	4610      	mov	r0, r2
 800aba4:	f7fe fbdd 	bl	8009362 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aba8:	2301      	movs	r3, #1
 800abaa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abac:	697b      	ldr	r3, [r7, #20]
	}
 800abae:	4618      	mov	r0, r3
 800abb0:	3718      	adds	r7, #24
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	20000bbc 	.word	0x20000bbc
 800abbc:	20001098 	.word	0x20001098
 800abc0:	20000bc0 	.word	0x20000bc0

0800abc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800abce:	4b21      	ldr	r3, [pc, #132]	@ (800ac54 <prvAddCurrentTaskToDelayedList+0x90>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abd4:	4b20      	ldr	r3, [pc, #128]	@ (800ac58 <prvAddCurrentTaskToDelayedList+0x94>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3304      	adds	r3, #4
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe fc1e 	bl	800941c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe6:	d10a      	bne.n	800abfe <prvAddCurrentTaskToDelayedList+0x3a>
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d007      	beq.n	800abfe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abee:	4b1a      	ldr	r3, [pc, #104]	@ (800ac58 <prvAddCurrentTaskToDelayedList+0x94>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	3304      	adds	r3, #4
 800abf4:	4619      	mov	r1, r3
 800abf6:	4819      	ldr	r0, [pc, #100]	@ (800ac5c <prvAddCurrentTaskToDelayedList+0x98>)
 800abf8:	f7fe fbb3 	bl	8009362 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800abfc:	e026      	b.n	800ac4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4413      	add	r3, r2
 800ac04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ac06:	4b14      	ldr	r3, [pc, #80]	@ (800ac58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ac0e:	68ba      	ldr	r2, [r7, #8]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d209      	bcs.n	800ac2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac16:	4b12      	ldr	r3, [pc, #72]	@ (800ac60 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ac58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	3304      	adds	r3, #4
 800ac20:	4619      	mov	r1, r3
 800ac22:	4610      	mov	r0, r2
 800ac24:	f7fe fbc1 	bl	80093aa <vListInsert>
}
 800ac28:	e010      	b.n	800ac4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac2a:	4b0e      	ldr	r3, [pc, #56]	@ (800ac64 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	4b0a      	ldr	r3, [pc, #40]	@ (800ac58 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	3304      	adds	r3, #4
 800ac34:	4619      	mov	r1, r3
 800ac36:	4610      	mov	r0, r2
 800ac38:	f7fe fbb7 	bl	80093aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ac3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d202      	bcs.n	800ac4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ac46:	4a08      	ldr	r2, [pc, #32]	@ (800ac68 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	6013      	str	r3, [r2, #0]
}
 800ac4c:	bf00      	nop
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	20001094 	.word	0x20001094
 800ac58:	20000bbc 	.word	0x20000bbc
 800ac5c:	2000107c 	.word	0x2000107c
 800ac60:	2000104c 	.word	0x2000104c
 800ac64:	20001048 	.word	0x20001048
 800ac68:	200010b0 	.word	0x200010b0

0800ac6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08a      	sub	sp, #40	@ 0x28
 800ac70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac72:	2300      	movs	r3, #0
 800ac74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac76:	f000 fb13 	bl	800b2a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac7a:	4b1d      	ldr	r3, [pc, #116]	@ (800acf0 <xTimerCreateTimerTask+0x84>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d021      	beq.n	800acc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac86:	2300      	movs	r3, #0
 800ac88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac8a:	1d3a      	adds	r2, r7, #4
 800ac8c:	f107 0108 	add.w	r1, r7, #8
 800ac90:	f107 030c 	add.w	r3, r7, #12
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7fe fb1d 	bl	80092d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac9a:	6879      	ldr	r1, [r7, #4]
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	9202      	str	r2, [sp, #8]
 800aca2:	9301      	str	r3, [sp, #4]
 800aca4:	2302      	movs	r3, #2
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	2300      	movs	r3, #0
 800acaa:	460a      	mov	r2, r1
 800acac:	4911      	ldr	r1, [pc, #68]	@ (800acf4 <xTimerCreateTimerTask+0x88>)
 800acae:	4812      	ldr	r0, [pc, #72]	@ (800acf8 <xTimerCreateTimerTask+0x8c>)
 800acb0:	f7ff f8d8 	bl	8009e64 <xTaskCreateStatic>
 800acb4:	4603      	mov	r3, r0
 800acb6:	4a11      	ldr	r2, [pc, #68]	@ (800acfc <xTimerCreateTimerTask+0x90>)
 800acb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800acba:	4b10      	ldr	r3, [pc, #64]	@ (800acfc <xTimerCreateTimerTask+0x90>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d001      	beq.n	800acc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800acc2:	2301      	movs	r3, #1
 800acc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10b      	bne.n	800ace4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800accc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd0:	f383 8811 	msr	BASEPRI, r3
 800acd4:	f3bf 8f6f 	isb	sy
 800acd8:	f3bf 8f4f 	dsb	sy
 800acdc:	613b      	str	r3, [r7, #16]
}
 800acde:	bf00      	nop
 800ace0:	bf00      	nop
 800ace2:	e7fd      	b.n	800ace0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ace4:	697b      	ldr	r3, [r7, #20]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3718      	adds	r7, #24
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	200010ec 	.word	0x200010ec
 800acf4:	0800f700 	.word	0x0800f700
 800acf8:	0800ae39 	.word	0x0800ae39
 800acfc:	200010f0 	.word	0x200010f0

0800ad00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b08a      	sub	sp, #40	@ 0x28
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
 800ad0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10b      	bne.n	800ad30 <xTimerGenericCommand+0x30>
	__asm volatile
 800ad18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad1c:	f383 8811 	msr	BASEPRI, r3
 800ad20:	f3bf 8f6f 	isb	sy
 800ad24:	f3bf 8f4f 	dsb	sy
 800ad28:	623b      	str	r3, [r7, #32]
}
 800ad2a:	bf00      	nop
 800ad2c:	bf00      	nop
 800ad2e:	e7fd      	b.n	800ad2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ad30:	4b19      	ldr	r3, [pc, #100]	@ (800ad98 <xTimerGenericCommand+0x98>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d02a      	beq.n	800ad8e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	2b05      	cmp	r3, #5
 800ad48:	dc18      	bgt.n	800ad7c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ad4a:	f7ff fead 	bl	800aaa8 <xTaskGetSchedulerState>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d109      	bne.n	800ad68 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ad54:	4b10      	ldr	r3, [pc, #64]	@ (800ad98 <xTimerGenericCommand+0x98>)
 800ad56:	6818      	ldr	r0, [r3, #0]
 800ad58:	f107 0110 	add.w	r1, r7, #16
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad60:	f7fe fc90 	bl	8009684 <xQueueGenericSend>
 800ad64:	6278      	str	r0, [r7, #36]	@ 0x24
 800ad66:	e012      	b.n	800ad8e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ad68:	4b0b      	ldr	r3, [pc, #44]	@ (800ad98 <xTimerGenericCommand+0x98>)
 800ad6a:	6818      	ldr	r0, [r3, #0]
 800ad6c:	f107 0110 	add.w	r1, r7, #16
 800ad70:	2300      	movs	r3, #0
 800ad72:	2200      	movs	r2, #0
 800ad74:	f7fe fc86 	bl	8009684 <xQueueGenericSend>
 800ad78:	6278      	str	r0, [r7, #36]	@ 0x24
 800ad7a:	e008      	b.n	800ad8e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad7c:	4b06      	ldr	r3, [pc, #24]	@ (800ad98 <xTimerGenericCommand+0x98>)
 800ad7e:	6818      	ldr	r0, [r3, #0]
 800ad80:	f107 0110 	add.w	r1, r7, #16
 800ad84:	2300      	movs	r3, #0
 800ad86:	683a      	ldr	r2, [r7, #0]
 800ad88:	f7fe fd7e 	bl	8009888 <xQueueGenericSendFromISR>
 800ad8c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3728      	adds	r7, #40	@ 0x28
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	200010ec 	.word	0x200010ec

0800ad9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b088      	sub	sp, #32
 800ada0:	af02      	add	r7, sp, #8
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ada6:	4b23      	ldr	r3, [pc, #140]	@ (800ae34 <prvProcessExpiredTimer+0x98>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	3304      	adds	r3, #4
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7fe fb31 	bl	800941c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800adc0:	f003 0304 	and.w	r3, r3, #4
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d023      	beq.n	800ae10 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	699a      	ldr	r2, [r3, #24]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	18d1      	adds	r1, r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	6978      	ldr	r0, [r7, #20]
 800add6:	f000 f8d5 	bl	800af84 <prvInsertTimerInActiveList>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d020      	beq.n	800ae22 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ade0:	2300      	movs	r3, #0
 800ade2:	9300      	str	r3, [sp, #0]
 800ade4:	2300      	movs	r3, #0
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	2100      	movs	r1, #0
 800adea:	6978      	ldr	r0, [r7, #20]
 800adec:	f7ff ff88 	bl	800ad00 <xTimerGenericCommand>
 800adf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d114      	bne.n	800ae22 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800adf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adfc:	f383 8811 	msr	BASEPRI, r3
 800ae00:	f3bf 8f6f 	isb	sy
 800ae04:	f3bf 8f4f 	dsb	sy
 800ae08:	60fb      	str	r3, [r7, #12]
}
 800ae0a:	bf00      	nop
 800ae0c:	bf00      	nop
 800ae0e:	e7fd      	b.n	800ae0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae16:	f023 0301 	bic.w	r3, r3, #1
 800ae1a:	b2da      	uxtb	r2, r3
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	6978      	ldr	r0, [r7, #20]
 800ae28:	4798      	blx	r3
}
 800ae2a:	bf00      	nop
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	200010e4 	.word	0x200010e4

0800ae38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae40:	f107 0308 	add.w	r3, r7, #8
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 f859 	bl	800aefc <prvGetNextExpireTime>
 800ae4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f000 f805 	bl	800ae60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ae56:	f000 f8d7 	bl	800b008 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ae5a:	bf00      	nop
 800ae5c:	e7f0      	b.n	800ae40 <prvTimerTask+0x8>
	...

0800ae60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ae6a:	f7ff fa29 	bl	800a2c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae6e:	f107 0308 	add.w	r3, r7, #8
 800ae72:	4618      	mov	r0, r3
 800ae74:	f000 f866 	bl	800af44 <prvSampleTimeNow>
 800ae78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d130      	bne.n	800aee2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d10a      	bne.n	800ae9c <prvProcessTimerOrBlockTask+0x3c>
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d806      	bhi.n	800ae9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae8e:	f7ff fa25 	bl	800a2dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae92:	68f9      	ldr	r1, [r7, #12]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f7ff ff81 	bl	800ad9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae9a:	e024      	b.n	800aee6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d008      	beq.n	800aeb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800aea2:	4b13      	ldr	r3, [pc, #76]	@ (800aef0 <prvProcessTimerOrBlockTask+0x90>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d101      	bne.n	800aeb0 <prvProcessTimerOrBlockTask+0x50>
 800aeac:	2301      	movs	r3, #1
 800aeae:	e000      	b.n	800aeb2 <prvProcessTimerOrBlockTask+0x52>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aeb4:	4b0f      	ldr	r3, [pc, #60]	@ (800aef4 <prvProcessTimerOrBlockTask+0x94>)
 800aeb6:	6818      	ldr	r0, [r3, #0]
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	4619      	mov	r1, r3
 800aec2:	f7fe ff9b 	bl	8009dfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aec6:	f7ff fa09 	bl	800a2dc <xTaskResumeAll>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d10a      	bne.n	800aee6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aed0:	4b09      	ldr	r3, [pc, #36]	@ (800aef8 <prvProcessTimerOrBlockTask+0x98>)
 800aed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aed6:	601a      	str	r2, [r3, #0]
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	f3bf 8f6f 	isb	sy
}
 800aee0:	e001      	b.n	800aee6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aee2:	f7ff f9fb 	bl	800a2dc <xTaskResumeAll>
}
 800aee6:	bf00      	nop
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	200010e8 	.word	0x200010e8
 800aef4:	200010ec 	.word	0x200010ec
 800aef8:	e000ed04 	.word	0xe000ed04

0800aefc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800af04:	4b0e      	ldr	r3, [pc, #56]	@ (800af40 <prvGetNextExpireTime+0x44>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d101      	bne.n	800af12 <prvGetNextExpireTime+0x16>
 800af0e:	2201      	movs	r2, #1
 800af10:	e000      	b.n	800af14 <prvGetNextExpireTime+0x18>
 800af12:	2200      	movs	r2, #0
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d105      	bne.n	800af2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af20:	4b07      	ldr	r3, [pc, #28]	@ (800af40 <prvGetNextExpireTime+0x44>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	60fb      	str	r3, [r7, #12]
 800af2a:	e001      	b.n	800af30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800af30:	68fb      	ldr	r3, [r7, #12]
}
 800af32:	4618      	mov	r0, r3
 800af34:	3714      	adds	r7, #20
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	200010e4 	.word	0x200010e4

0800af44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800af4c:	f7ff fa64 	bl	800a418 <xTaskGetTickCount>
 800af50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800af52:	4b0b      	ldr	r3, [pc, #44]	@ (800af80 <prvSampleTimeNow+0x3c>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d205      	bcs.n	800af68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800af5c:	f000 f93a 	bl	800b1d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	601a      	str	r2, [r3, #0]
 800af66:	e002      	b.n	800af6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800af6e:	4a04      	ldr	r2, [pc, #16]	@ (800af80 <prvSampleTimeNow+0x3c>)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800af74:	68fb      	ldr	r3, [r7, #12]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	200010f4 	.word	0x200010f4

0800af84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b086      	sub	sp, #24
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
 800af90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af92:	2300      	movs	r3, #0
 800af94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d812      	bhi.n	800afd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	1ad2      	subs	r2, r2, r3
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	699b      	ldr	r3, [r3, #24]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d302      	bcc.n	800afbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800afb8:	2301      	movs	r3, #1
 800afba:	617b      	str	r3, [r7, #20]
 800afbc:	e01b      	b.n	800aff6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800afbe:	4b10      	ldr	r3, [pc, #64]	@ (800b000 <prvInsertTimerInActiveList+0x7c>)
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	3304      	adds	r3, #4
 800afc6:	4619      	mov	r1, r3
 800afc8:	4610      	mov	r0, r2
 800afca:	f7fe f9ee 	bl	80093aa <vListInsert>
 800afce:	e012      	b.n	800aff6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d206      	bcs.n	800afe6 <prvInsertTimerInActiveList+0x62>
 800afd8:	68ba      	ldr	r2, [r7, #8]
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	429a      	cmp	r2, r3
 800afde:	d302      	bcc.n	800afe6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800afe0:	2301      	movs	r3, #1
 800afe2:	617b      	str	r3, [r7, #20]
 800afe4:	e007      	b.n	800aff6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afe6:	4b07      	ldr	r3, [pc, #28]	@ (800b004 <prvInsertTimerInActiveList+0x80>)
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	3304      	adds	r3, #4
 800afee:	4619      	mov	r1, r3
 800aff0:	4610      	mov	r0, r2
 800aff2:	f7fe f9da 	bl	80093aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aff6:	697b      	ldr	r3, [r7, #20]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3718      	adds	r7, #24
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	200010e8 	.word	0x200010e8
 800b004:	200010e4 	.word	0x200010e4

0800b008 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b08e      	sub	sp, #56	@ 0x38
 800b00c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b00e:	e0ce      	b.n	800b1ae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	da19      	bge.n	800b04a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b016:	1d3b      	adds	r3, r7, #4
 800b018:	3304      	adds	r3, #4
 800b01a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10b      	bne.n	800b03a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b026:	f383 8811 	msr	BASEPRI, r3
 800b02a:	f3bf 8f6f 	isb	sy
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	61fb      	str	r3, [r7, #28]
}
 800b034:	bf00      	nop
 800b036:	bf00      	nop
 800b038:	e7fd      	b.n	800b036 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b040:	6850      	ldr	r0, [r2, #4]
 800b042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b044:	6892      	ldr	r2, [r2, #8]
 800b046:	4611      	mov	r1, r2
 800b048:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f2c0 80ae 	blt.w	800b1ae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b058:	695b      	ldr	r3, [r3, #20]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d004      	beq.n	800b068 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b05e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b060:	3304      	adds	r3, #4
 800b062:	4618      	mov	r0, r3
 800b064:	f7fe f9da 	bl	800941c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b068:	463b      	mov	r3, r7
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff ff6a 	bl	800af44 <prvSampleTimeNow>
 800b070:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2b09      	cmp	r3, #9
 800b076:	f200 8097 	bhi.w	800b1a8 <prvProcessReceivedCommands+0x1a0>
 800b07a:	a201      	add	r2, pc, #4	@ (adr r2, 800b080 <prvProcessReceivedCommands+0x78>)
 800b07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b080:	0800b0a9 	.word	0x0800b0a9
 800b084:	0800b0a9 	.word	0x0800b0a9
 800b088:	0800b0a9 	.word	0x0800b0a9
 800b08c:	0800b11f 	.word	0x0800b11f
 800b090:	0800b133 	.word	0x0800b133
 800b094:	0800b17f 	.word	0x0800b17f
 800b098:	0800b0a9 	.word	0x0800b0a9
 800b09c:	0800b0a9 	.word	0x0800b0a9
 800b0a0:	0800b11f 	.word	0x0800b11f
 800b0a4:	0800b133 	.word	0x0800b133
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0ae:	f043 0301 	orr.w	r3, r3, #1
 800b0b2:	b2da      	uxtb	r2, r3
 800b0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b0ba:	68ba      	ldr	r2, [r7, #8]
 800b0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	18d1      	adds	r1, r2, r3
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0c8:	f7ff ff5c 	bl	800af84 <prvInsertTimerInActiveList>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d06c      	beq.n	800b1ac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0e0:	f003 0304 	and.w	r3, r3, #4
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d061      	beq.n	800b1ac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b0e8:	68ba      	ldr	r2, [r7, #8]
 800b0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ec:	699b      	ldr	r3, [r3, #24]
 800b0ee:	441a      	add	r2, r3
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0fa:	f7ff fe01 	bl	800ad00 <xTimerGenericCommand>
 800b0fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b100:	6a3b      	ldr	r3, [r7, #32]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d152      	bne.n	800b1ac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b10a:	f383 8811 	msr	BASEPRI, r3
 800b10e:	f3bf 8f6f 	isb	sy
 800b112:	f3bf 8f4f 	dsb	sy
 800b116:	61bb      	str	r3, [r7, #24]
}
 800b118:	bf00      	nop
 800b11a:	bf00      	nop
 800b11c:	e7fd      	b.n	800b11a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b120:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b124:	f023 0301 	bic.w	r3, r3, #1
 800b128:	b2da      	uxtb	r2, r3
 800b12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b12c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b130:	e03d      	b.n	800b1ae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b134:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b138:	f043 0301 	orr.w	r3, r3, #1
 800b13c:	b2da      	uxtb	r2, r3
 800b13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b140:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b144:	68ba      	ldr	r2, [r7, #8]
 800b146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b148:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14c:	699b      	ldr	r3, [r3, #24]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10b      	bne.n	800b16a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	617b      	str	r3, [r7, #20]
}
 800b164:	bf00      	nop
 800b166:	bf00      	nop
 800b168:	e7fd      	b.n	800b166 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b16c:	699a      	ldr	r2, [r3, #24]
 800b16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b170:	18d1      	adds	r1, r2, r3
 800b172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b178:	f7ff ff04 	bl	800af84 <prvInsertTimerInActiveList>
					break;
 800b17c:	e017      	b.n	800b1ae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b180:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b184:	f003 0302 	and.w	r3, r3, #2
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d103      	bne.n	800b194 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b18c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b18e:	f000 fbeb 	bl	800b968 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b192:	e00c      	b.n	800b1ae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b196:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b19a:	f023 0301 	bic.w	r3, r3, #1
 800b19e:	b2da      	uxtb	r2, r3
 800b1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b1a6:	e002      	b.n	800b1ae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b1a8:	bf00      	nop
 800b1aa:	e000      	b.n	800b1ae <prvProcessReceivedCommands+0x1a6>
					break;
 800b1ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1ae:	4b08      	ldr	r3, [pc, #32]	@ (800b1d0 <prvProcessReceivedCommands+0x1c8>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	1d39      	adds	r1, r7, #4
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fe fc04 	bl	80099c4 <xQueueReceive>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f47f af26 	bne.w	800b010 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b1c4:	bf00      	nop
 800b1c6:	bf00      	nop
 800b1c8:	3730      	adds	r7, #48	@ 0x30
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	200010ec 	.word	0x200010ec

0800b1d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b088      	sub	sp, #32
 800b1d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b1da:	e049      	b.n	800b270 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b1dc:	4b2e      	ldr	r3, [pc, #184]	@ (800b298 <prvSwitchTimerLists+0xc4>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1e6:	4b2c      	ldr	r3, [pc, #176]	@ (800b298 <prvSwitchTimerLists+0xc4>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fe f911 	bl	800941c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6a1b      	ldr	r3, [r3, #32]
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b208:	f003 0304 	and.w	r3, r3, #4
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d02f      	beq.n	800b270 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	4413      	add	r3, r2
 800b218:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b21a:	68ba      	ldr	r2, [r7, #8]
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d90e      	bls.n	800b240 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b22e:	4b1a      	ldr	r3, [pc, #104]	@ (800b298 <prvSwitchTimerLists+0xc4>)
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	3304      	adds	r3, #4
 800b236:	4619      	mov	r1, r3
 800b238:	4610      	mov	r0, r2
 800b23a:	f7fe f8b6 	bl	80093aa <vListInsert>
 800b23e:	e017      	b.n	800b270 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b240:	2300      	movs	r3, #0
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	2300      	movs	r3, #0
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	2100      	movs	r1, #0
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f7ff fd58 	bl	800ad00 <xTimerGenericCommand>
 800b250:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10b      	bne.n	800b270 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b25c:	f383 8811 	msr	BASEPRI, r3
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	603b      	str	r3, [r7, #0]
}
 800b26a:	bf00      	nop
 800b26c:	bf00      	nop
 800b26e:	e7fd      	b.n	800b26c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b270:	4b09      	ldr	r3, [pc, #36]	@ (800b298 <prvSwitchTimerLists+0xc4>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1b0      	bne.n	800b1dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b27a:	4b07      	ldr	r3, [pc, #28]	@ (800b298 <prvSwitchTimerLists+0xc4>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b280:	4b06      	ldr	r3, [pc, #24]	@ (800b29c <prvSwitchTimerLists+0xc8>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a04      	ldr	r2, [pc, #16]	@ (800b298 <prvSwitchTimerLists+0xc4>)
 800b286:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b288:	4a04      	ldr	r2, [pc, #16]	@ (800b29c <prvSwitchTimerLists+0xc8>)
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	6013      	str	r3, [r2, #0]
}
 800b28e:	bf00      	nop
 800b290:	3718      	adds	r7, #24
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	200010e4 	.word	0x200010e4
 800b29c:	200010e8 	.word	0x200010e8

0800b2a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b2a6:	f000 f96f 	bl	800b588 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b2aa:	4b15      	ldr	r3, [pc, #84]	@ (800b300 <prvCheckForValidListAndQueue+0x60>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d120      	bne.n	800b2f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b2b2:	4814      	ldr	r0, [pc, #80]	@ (800b304 <prvCheckForValidListAndQueue+0x64>)
 800b2b4:	f7fe f828 	bl	8009308 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b2b8:	4813      	ldr	r0, [pc, #76]	@ (800b308 <prvCheckForValidListAndQueue+0x68>)
 800b2ba:	f7fe f825 	bl	8009308 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b2be:	4b13      	ldr	r3, [pc, #76]	@ (800b30c <prvCheckForValidListAndQueue+0x6c>)
 800b2c0:	4a10      	ldr	r2, [pc, #64]	@ (800b304 <prvCheckForValidListAndQueue+0x64>)
 800b2c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b2c4:	4b12      	ldr	r3, [pc, #72]	@ (800b310 <prvCheckForValidListAndQueue+0x70>)
 800b2c6:	4a10      	ldr	r2, [pc, #64]	@ (800b308 <prvCheckForValidListAndQueue+0x68>)
 800b2c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	4b11      	ldr	r3, [pc, #68]	@ (800b314 <prvCheckForValidListAndQueue+0x74>)
 800b2d0:	4a11      	ldr	r2, [pc, #68]	@ (800b318 <prvCheckForValidListAndQueue+0x78>)
 800b2d2:	2110      	movs	r1, #16
 800b2d4:	200a      	movs	r0, #10
 800b2d6:	f7fe f935 	bl	8009544 <xQueueGenericCreateStatic>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	4a08      	ldr	r2, [pc, #32]	@ (800b300 <prvCheckForValidListAndQueue+0x60>)
 800b2de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b2e0:	4b07      	ldr	r3, [pc, #28]	@ (800b300 <prvCheckForValidListAndQueue+0x60>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d005      	beq.n	800b2f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b2e8:	4b05      	ldr	r3, [pc, #20]	@ (800b300 <prvCheckForValidListAndQueue+0x60>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	490b      	ldr	r1, [pc, #44]	@ (800b31c <prvCheckForValidListAndQueue+0x7c>)
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe fd5a 	bl	8009da8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2f4:	f000 f97a 	bl	800b5ec <vPortExitCritical>
}
 800b2f8:	bf00      	nop
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	200010ec 	.word	0x200010ec
 800b304:	200010bc 	.word	0x200010bc
 800b308:	200010d0 	.word	0x200010d0
 800b30c:	200010e4 	.word	0x200010e4
 800b310:	200010e8 	.word	0x200010e8
 800b314:	20001198 	.word	0x20001198
 800b318:	200010f8 	.word	0x200010f8
 800b31c:	0800f708 	.word	0x0800f708

0800b320 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	3b04      	subs	r3, #4
 800b330:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	3b04      	subs	r3, #4
 800b33e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	f023 0201 	bic.w	r2, r3, #1
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	3b04      	subs	r3, #4
 800b34e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b350:	4a0c      	ldr	r2, [pc, #48]	@ (800b384 <pxPortInitialiseStack+0x64>)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	3b14      	subs	r3, #20
 800b35a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	3b04      	subs	r3, #4
 800b366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f06f 0202 	mvn.w	r2, #2
 800b36e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	3b20      	subs	r3, #32
 800b374:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b376:	68fb      	ldr	r3, [r7, #12]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3714      	adds	r7, #20
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr
 800b384:	0800b389 	.word	0x0800b389

0800b388 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b392:	4b13      	ldr	r3, [pc, #76]	@ (800b3e0 <prvTaskExitError+0x58>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b39a:	d00b      	beq.n	800b3b4 <prvTaskExitError+0x2c>
	__asm volatile
 800b39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a0:	f383 8811 	msr	BASEPRI, r3
 800b3a4:	f3bf 8f6f 	isb	sy
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	60fb      	str	r3, [r7, #12]
}
 800b3ae:	bf00      	nop
 800b3b0:	bf00      	nop
 800b3b2:	e7fd      	b.n	800b3b0 <prvTaskExitError+0x28>
	__asm volatile
 800b3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b8:	f383 8811 	msr	BASEPRI, r3
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	f3bf 8f4f 	dsb	sy
 800b3c4:	60bb      	str	r3, [r7, #8]
}
 800b3c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b3c8:	bf00      	nop
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d0fc      	beq.n	800b3ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b3d0:	bf00      	nop
 800b3d2:	bf00      	nop
 800b3d4:	3714      	adds	r7, #20
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	200000b0 	.word	0x200000b0
	...

0800b3f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b3f0:	4b07      	ldr	r3, [pc, #28]	@ (800b410 <pxCurrentTCBConst2>)
 800b3f2:	6819      	ldr	r1, [r3, #0]
 800b3f4:	6808      	ldr	r0, [r1, #0]
 800b3f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fa:	f380 8809 	msr	PSP, r0
 800b3fe:	f3bf 8f6f 	isb	sy
 800b402:	f04f 0000 	mov.w	r0, #0
 800b406:	f380 8811 	msr	BASEPRI, r0
 800b40a:	4770      	bx	lr
 800b40c:	f3af 8000 	nop.w

0800b410 <pxCurrentTCBConst2>:
 800b410:	20000bbc 	.word	0x20000bbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b414:	bf00      	nop
 800b416:	bf00      	nop

0800b418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b418:	4808      	ldr	r0, [pc, #32]	@ (800b43c <prvPortStartFirstTask+0x24>)
 800b41a:	6800      	ldr	r0, [r0, #0]
 800b41c:	6800      	ldr	r0, [r0, #0]
 800b41e:	f380 8808 	msr	MSP, r0
 800b422:	f04f 0000 	mov.w	r0, #0
 800b426:	f380 8814 	msr	CONTROL, r0
 800b42a:	b662      	cpsie	i
 800b42c:	b661      	cpsie	f
 800b42e:	f3bf 8f4f 	dsb	sy
 800b432:	f3bf 8f6f 	isb	sy
 800b436:	df00      	svc	0
 800b438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b43a:	bf00      	nop
 800b43c:	e000ed08 	.word	0xe000ed08

0800b440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b446:	4b47      	ldr	r3, [pc, #284]	@ (800b564 <xPortStartScheduler+0x124>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a47      	ldr	r2, [pc, #284]	@ (800b568 <xPortStartScheduler+0x128>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d10b      	bne.n	800b468 <xPortStartScheduler+0x28>
	__asm volatile
 800b450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b454:	f383 8811 	msr	BASEPRI, r3
 800b458:	f3bf 8f6f 	isb	sy
 800b45c:	f3bf 8f4f 	dsb	sy
 800b460:	613b      	str	r3, [r7, #16]
}
 800b462:	bf00      	nop
 800b464:	bf00      	nop
 800b466:	e7fd      	b.n	800b464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b468:	4b3e      	ldr	r3, [pc, #248]	@ (800b564 <xPortStartScheduler+0x124>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a3f      	ldr	r2, [pc, #252]	@ (800b56c <xPortStartScheduler+0x12c>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d10b      	bne.n	800b48a <xPortStartScheduler+0x4a>
	__asm volatile
 800b472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b476:	f383 8811 	msr	BASEPRI, r3
 800b47a:	f3bf 8f6f 	isb	sy
 800b47e:	f3bf 8f4f 	dsb	sy
 800b482:	60fb      	str	r3, [r7, #12]
}
 800b484:	bf00      	nop
 800b486:	bf00      	nop
 800b488:	e7fd      	b.n	800b486 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b48a:	4b39      	ldr	r3, [pc, #228]	@ (800b570 <xPortStartScheduler+0x130>)
 800b48c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	781b      	ldrb	r3, [r3, #0]
 800b492:	b2db      	uxtb	r3, r3
 800b494:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	22ff      	movs	r2, #255	@ 0xff
 800b49a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b4a4:	78fb      	ldrb	r3, [r7, #3]
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	4b31      	ldr	r3, [pc, #196]	@ (800b574 <xPortStartScheduler+0x134>)
 800b4b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b4b2:	4b31      	ldr	r3, [pc, #196]	@ (800b578 <xPortStartScheduler+0x138>)
 800b4b4:	2207      	movs	r2, #7
 800b4b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4b8:	e009      	b.n	800b4ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b4ba:	4b2f      	ldr	r3, [pc, #188]	@ (800b578 <xPortStartScheduler+0x138>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	4a2d      	ldr	r2, [pc, #180]	@ (800b578 <xPortStartScheduler+0x138>)
 800b4c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b4c4:	78fb      	ldrb	r3, [r7, #3]
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b4ce:	78fb      	ldrb	r3, [r7, #3]
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4d6:	2b80      	cmp	r3, #128	@ 0x80
 800b4d8:	d0ef      	beq.n	800b4ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b4da:	4b27      	ldr	r3, [pc, #156]	@ (800b578 <xPortStartScheduler+0x138>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f1c3 0307 	rsb	r3, r3, #7
 800b4e2:	2b04      	cmp	r3, #4
 800b4e4:	d00b      	beq.n	800b4fe <xPortStartScheduler+0xbe>
	__asm volatile
 800b4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	60bb      	str	r3, [r7, #8]
}
 800b4f8:	bf00      	nop
 800b4fa:	bf00      	nop
 800b4fc:	e7fd      	b.n	800b4fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b4fe:	4b1e      	ldr	r3, [pc, #120]	@ (800b578 <xPortStartScheduler+0x138>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	021b      	lsls	r3, r3, #8
 800b504:	4a1c      	ldr	r2, [pc, #112]	@ (800b578 <xPortStartScheduler+0x138>)
 800b506:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b508:	4b1b      	ldr	r3, [pc, #108]	@ (800b578 <xPortStartScheduler+0x138>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b510:	4a19      	ldr	r2, [pc, #100]	@ (800b578 <xPortStartScheduler+0x138>)
 800b512:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	b2da      	uxtb	r2, r3
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b51c:	4b17      	ldr	r3, [pc, #92]	@ (800b57c <xPortStartScheduler+0x13c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4a16      	ldr	r2, [pc, #88]	@ (800b57c <xPortStartScheduler+0x13c>)
 800b522:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b526:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b528:	4b14      	ldr	r3, [pc, #80]	@ (800b57c <xPortStartScheduler+0x13c>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a13      	ldr	r2, [pc, #76]	@ (800b57c <xPortStartScheduler+0x13c>)
 800b52e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b532:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b534:	f000 f8da 	bl	800b6ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b538:	4b11      	ldr	r3, [pc, #68]	@ (800b580 <xPortStartScheduler+0x140>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b53e:	f000 f8f9 	bl	800b734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b542:	4b10      	ldr	r3, [pc, #64]	@ (800b584 <xPortStartScheduler+0x144>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a0f      	ldr	r2, [pc, #60]	@ (800b584 <xPortStartScheduler+0x144>)
 800b548:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b54c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b54e:	f7ff ff63 	bl	800b418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b552:	f7ff f82b 	bl	800a5ac <vTaskSwitchContext>
	prvTaskExitError();
 800b556:	f7ff ff17 	bl	800b388 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	e000ed00 	.word	0xe000ed00
 800b568:	410fc271 	.word	0x410fc271
 800b56c:	410fc270 	.word	0x410fc270
 800b570:	e000e400 	.word	0xe000e400
 800b574:	200011e8 	.word	0x200011e8
 800b578:	200011ec 	.word	0x200011ec
 800b57c:	e000ed20 	.word	0xe000ed20
 800b580:	200000b0 	.word	0x200000b0
 800b584:	e000ef34 	.word	0xe000ef34

0800b588 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	607b      	str	r3, [r7, #4]
}
 800b5a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b5a2:	4b10      	ldr	r3, [pc, #64]	@ (800b5e4 <vPortEnterCritical+0x5c>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	4a0e      	ldr	r2, [pc, #56]	@ (800b5e4 <vPortEnterCritical+0x5c>)
 800b5aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b5ac:	4b0d      	ldr	r3, [pc, #52]	@ (800b5e4 <vPortEnterCritical+0x5c>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d110      	bne.n	800b5d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b5b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b5e8 <vPortEnterCritical+0x60>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00b      	beq.n	800b5d6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	603b      	str	r3, [r7, #0]
}
 800b5d0:	bf00      	nop
 800b5d2:	bf00      	nop
 800b5d4:	e7fd      	b.n	800b5d2 <vPortEnterCritical+0x4a>
	}
}
 800b5d6:	bf00      	nop
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	200000b0 	.word	0x200000b0
 800b5e8:	e000ed04 	.word	0xe000ed04

0800b5ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b5f2:	4b12      	ldr	r3, [pc, #72]	@ (800b63c <vPortExitCritical+0x50>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d10b      	bne.n	800b612 <vPortExitCritical+0x26>
	__asm volatile
 800b5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5fe:	f383 8811 	msr	BASEPRI, r3
 800b602:	f3bf 8f6f 	isb	sy
 800b606:	f3bf 8f4f 	dsb	sy
 800b60a:	607b      	str	r3, [r7, #4]
}
 800b60c:	bf00      	nop
 800b60e:	bf00      	nop
 800b610:	e7fd      	b.n	800b60e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b612:	4b0a      	ldr	r3, [pc, #40]	@ (800b63c <vPortExitCritical+0x50>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	3b01      	subs	r3, #1
 800b618:	4a08      	ldr	r2, [pc, #32]	@ (800b63c <vPortExitCritical+0x50>)
 800b61a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b61c:	4b07      	ldr	r3, [pc, #28]	@ (800b63c <vPortExitCritical+0x50>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d105      	bne.n	800b630 <vPortExitCritical+0x44>
 800b624:	2300      	movs	r3, #0
 800b626:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	f383 8811 	msr	BASEPRI, r3
}
 800b62e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	200000b0 	.word	0x200000b0

0800b640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b640:	f3ef 8009 	mrs	r0, PSP
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	4b15      	ldr	r3, [pc, #84]	@ (800b6a0 <pxCurrentTCBConst>)
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	f01e 0f10 	tst.w	lr, #16
 800b650:	bf08      	it	eq
 800b652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b65a:	6010      	str	r0, [r2, #0]
 800b65c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b660:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b664:	f380 8811 	msr	BASEPRI, r0
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	f3bf 8f6f 	isb	sy
 800b670:	f7fe ff9c 	bl	800a5ac <vTaskSwitchContext>
 800b674:	f04f 0000 	mov.w	r0, #0
 800b678:	f380 8811 	msr	BASEPRI, r0
 800b67c:	bc09      	pop	{r0, r3}
 800b67e:	6819      	ldr	r1, [r3, #0]
 800b680:	6808      	ldr	r0, [r1, #0]
 800b682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b686:	f01e 0f10 	tst.w	lr, #16
 800b68a:	bf08      	it	eq
 800b68c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b690:	f380 8809 	msr	PSP, r0
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	f3af 8000 	nop.w

0800b6a0 <pxCurrentTCBConst>:
 800b6a0:	20000bbc 	.word	0x20000bbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop

0800b6a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	607b      	str	r3, [r7, #4]
}
 800b6c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b6c2:	f7fe feb9 	bl	800a438 <xTaskIncrementTick>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d003      	beq.n	800b6d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b6cc:	4b06      	ldr	r3, [pc, #24]	@ (800b6e8 <xPortSysTickHandler+0x40>)
 800b6ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	f383 8811 	msr	BASEPRI, r3
}
 800b6de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b6e0:	bf00      	nop
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	e000ed04 	.word	0xe000ed04

0800b6ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b6f0:	4b0b      	ldr	r3, [pc, #44]	@ (800b720 <vPortSetupTimerInterrupt+0x34>)
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b6f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b724 <vPortSetupTimerInterrupt+0x38>)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b6fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b728 <vPortSetupTimerInterrupt+0x3c>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a0a      	ldr	r2, [pc, #40]	@ (800b72c <vPortSetupTimerInterrupt+0x40>)
 800b702:	fba2 2303 	umull	r2, r3, r2, r3
 800b706:	099b      	lsrs	r3, r3, #6
 800b708:	4a09      	ldr	r2, [pc, #36]	@ (800b730 <vPortSetupTimerInterrupt+0x44>)
 800b70a:	3b01      	subs	r3, #1
 800b70c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b70e:	4b04      	ldr	r3, [pc, #16]	@ (800b720 <vPortSetupTimerInterrupt+0x34>)
 800b710:	2207      	movs	r2, #7
 800b712:	601a      	str	r2, [r3, #0]
}
 800b714:	bf00      	nop
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	e000e010 	.word	0xe000e010
 800b724:	e000e018 	.word	0xe000e018
 800b728:	200000a4 	.word	0x200000a4
 800b72c:	10624dd3 	.word	0x10624dd3
 800b730:	e000e014 	.word	0xe000e014

0800b734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b734:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b744 <vPortEnableVFP+0x10>
 800b738:	6801      	ldr	r1, [r0, #0]
 800b73a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b73e:	6001      	str	r1, [r0, #0]
 800b740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b742:	bf00      	nop
 800b744:	e000ed88 	.word	0xe000ed88

0800b748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b74e:	f3ef 8305 	mrs	r3, IPSR
 800b752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2b0f      	cmp	r3, #15
 800b758:	d915      	bls.n	800b786 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b75a:	4a18      	ldr	r2, [pc, #96]	@ (800b7bc <vPortValidateInterruptPriority+0x74>)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	4413      	add	r3, r2
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b764:	4b16      	ldr	r3, [pc, #88]	@ (800b7c0 <vPortValidateInterruptPriority+0x78>)
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	7afa      	ldrb	r2, [r7, #11]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d20b      	bcs.n	800b786 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	607b      	str	r3, [r7, #4]
}
 800b780:	bf00      	nop
 800b782:	bf00      	nop
 800b784:	e7fd      	b.n	800b782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b786:	4b0f      	ldr	r3, [pc, #60]	@ (800b7c4 <vPortValidateInterruptPriority+0x7c>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b78e:	4b0e      	ldr	r3, [pc, #56]	@ (800b7c8 <vPortValidateInterruptPriority+0x80>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	429a      	cmp	r2, r3
 800b794:	d90b      	bls.n	800b7ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	603b      	str	r3, [r7, #0]
}
 800b7a8:	bf00      	nop
 800b7aa:	bf00      	nop
 800b7ac:	e7fd      	b.n	800b7aa <vPortValidateInterruptPriority+0x62>
	}
 800b7ae:	bf00      	nop
 800b7b0:	3714      	adds	r7, #20
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	e000e3f0 	.word	0xe000e3f0
 800b7c0:	200011e8 	.word	0x200011e8
 800b7c4:	e000ed0c 	.word	0xe000ed0c
 800b7c8:	200011ec 	.word	0x200011ec

0800b7cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b08a      	sub	sp, #40	@ 0x28
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b7d8:	f7fe fd72 	bl	800a2c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b7dc:	4b5c      	ldr	r3, [pc, #368]	@ (800b950 <pvPortMalloc+0x184>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d101      	bne.n	800b7e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b7e4:	f000 f924 	bl	800ba30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b7e8:	4b5a      	ldr	r3, [pc, #360]	@ (800b954 <pvPortMalloc+0x188>)
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4013      	ands	r3, r2
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f040 8095 	bne.w	800b920 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d01e      	beq.n	800b83a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b7fc:	2208      	movs	r2, #8
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4413      	add	r3, r2
 800b802:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f003 0307 	and.w	r3, r3, #7
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d015      	beq.n	800b83a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f023 0307 	bic.w	r3, r3, #7
 800b814:	3308      	adds	r3, #8
 800b816:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f003 0307 	and.w	r3, r3, #7
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00b      	beq.n	800b83a <pvPortMalloc+0x6e>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	617b      	str	r3, [r7, #20]
}
 800b834:	bf00      	nop
 800b836:	bf00      	nop
 800b838:	e7fd      	b.n	800b836 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d06f      	beq.n	800b920 <pvPortMalloc+0x154>
 800b840:	4b45      	ldr	r3, [pc, #276]	@ (800b958 <pvPortMalloc+0x18c>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	429a      	cmp	r2, r3
 800b848:	d86a      	bhi.n	800b920 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b84a:	4b44      	ldr	r3, [pc, #272]	@ (800b95c <pvPortMalloc+0x190>)
 800b84c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b84e:	4b43      	ldr	r3, [pc, #268]	@ (800b95c <pvPortMalloc+0x190>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b854:	e004      	b.n	800b860 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b858:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	429a      	cmp	r2, r3
 800b868:	d903      	bls.n	800b872 <pvPortMalloc+0xa6>
 800b86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1f1      	bne.n	800b856 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b872:	4b37      	ldr	r3, [pc, #220]	@ (800b950 <pvPortMalloc+0x184>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b878:	429a      	cmp	r2, r3
 800b87a:	d051      	beq.n	800b920 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b87c:	6a3b      	ldr	r3, [r7, #32]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2208      	movs	r2, #8
 800b882:	4413      	add	r3, r2
 800b884:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b890:	685a      	ldr	r2, [r3, #4]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	1ad2      	subs	r2, r2, r3
 800b896:	2308      	movs	r3, #8
 800b898:	005b      	lsls	r3, r3, #1
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d920      	bls.n	800b8e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b89e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	f003 0307 	and.w	r3, r3, #7
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00b      	beq.n	800b8c8 <pvPortMalloc+0xfc>
	__asm volatile
 800b8b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b4:	f383 8811 	msr	BASEPRI, r3
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	613b      	str	r3, [r7, #16]
}
 800b8c2:	bf00      	nop
 800b8c4:	bf00      	nop
 800b8c6:	e7fd      	b.n	800b8c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ca:	685a      	ldr	r2, [r3, #4]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	1ad2      	subs	r2, r2, r3
 800b8d0:	69bb      	ldr	r3, [r7, #24]
 800b8d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b8da:	69b8      	ldr	r0, [r7, #24]
 800b8dc:	f000 f90a 	bl	800baf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b8e0:	4b1d      	ldr	r3, [pc, #116]	@ (800b958 <pvPortMalloc+0x18c>)
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	1ad3      	subs	r3, r2, r3
 800b8ea:	4a1b      	ldr	r2, [pc, #108]	@ (800b958 <pvPortMalloc+0x18c>)
 800b8ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b8ee:	4b1a      	ldr	r3, [pc, #104]	@ (800b958 <pvPortMalloc+0x18c>)
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b960 <pvPortMalloc+0x194>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d203      	bcs.n	800b902 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b8fa:	4b17      	ldr	r3, [pc, #92]	@ (800b958 <pvPortMalloc+0x18c>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a18      	ldr	r2, [pc, #96]	@ (800b960 <pvPortMalloc+0x194>)
 800b900:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b904:	685a      	ldr	r2, [r3, #4]
 800b906:	4b13      	ldr	r3, [pc, #76]	@ (800b954 <pvPortMalloc+0x188>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	431a      	orrs	r2, r3
 800b90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b912:	2200      	movs	r2, #0
 800b914:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b916:	4b13      	ldr	r3, [pc, #76]	@ (800b964 <pvPortMalloc+0x198>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3301      	adds	r3, #1
 800b91c:	4a11      	ldr	r2, [pc, #68]	@ (800b964 <pvPortMalloc+0x198>)
 800b91e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b920:	f7fe fcdc 	bl	800a2dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	f003 0307 	and.w	r3, r3, #7
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00b      	beq.n	800b946 <pvPortMalloc+0x17a>
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	60fb      	str	r3, [r7, #12]
}
 800b940:	bf00      	nop
 800b942:	bf00      	nop
 800b944:	e7fd      	b.n	800b942 <pvPortMalloc+0x176>
	return pvReturn;
 800b946:	69fb      	ldr	r3, [r7, #28]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3728      	adds	r7, #40	@ 0x28
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	20006018 	.word	0x20006018
 800b954:	2000602c 	.word	0x2000602c
 800b958:	2000601c 	.word	0x2000601c
 800b95c:	20006010 	.word	0x20006010
 800b960:	20006020 	.word	0x20006020
 800b964:	20006024 	.word	0x20006024

0800b968 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d04f      	beq.n	800ba1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b97a:	2308      	movs	r3, #8
 800b97c:	425b      	negs	r3, r3
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	4413      	add	r3, r2
 800b982:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	685a      	ldr	r2, [r3, #4]
 800b98c:	4b25      	ldr	r3, [pc, #148]	@ (800ba24 <vPortFree+0xbc>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4013      	ands	r3, r2
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10b      	bne.n	800b9ae <vPortFree+0x46>
	__asm volatile
 800b996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99a:	f383 8811 	msr	BASEPRI, r3
 800b99e:	f3bf 8f6f 	isb	sy
 800b9a2:	f3bf 8f4f 	dsb	sy
 800b9a6:	60fb      	str	r3, [r7, #12]
}
 800b9a8:	bf00      	nop
 800b9aa:	bf00      	nop
 800b9ac:	e7fd      	b.n	800b9aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d00b      	beq.n	800b9ce <vPortFree+0x66>
	__asm volatile
 800b9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ba:	f383 8811 	msr	BASEPRI, r3
 800b9be:	f3bf 8f6f 	isb	sy
 800b9c2:	f3bf 8f4f 	dsb	sy
 800b9c6:	60bb      	str	r3, [r7, #8]
}
 800b9c8:	bf00      	nop
 800b9ca:	bf00      	nop
 800b9cc:	e7fd      	b.n	800b9ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	685a      	ldr	r2, [r3, #4]
 800b9d2:	4b14      	ldr	r3, [pc, #80]	@ (800ba24 <vPortFree+0xbc>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4013      	ands	r3, r2
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d01e      	beq.n	800ba1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d11a      	bne.n	800ba1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	685a      	ldr	r2, [r3, #4]
 800b9e8:	4b0e      	ldr	r3, [pc, #56]	@ (800ba24 <vPortFree+0xbc>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	43db      	mvns	r3, r3
 800b9ee:	401a      	ands	r2, r3
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b9f4:	f7fe fc64 	bl	800a2c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	685a      	ldr	r2, [r3, #4]
 800b9fc:	4b0a      	ldr	r3, [pc, #40]	@ (800ba28 <vPortFree+0xc0>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4413      	add	r3, r2
 800ba02:	4a09      	ldr	r2, [pc, #36]	@ (800ba28 <vPortFree+0xc0>)
 800ba04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba06:	6938      	ldr	r0, [r7, #16]
 800ba08:	f000 f874 	bl	800baf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ba0c:	4b07      	ldr	r3, [pc, #28]	@ (800ba2c <vPortFree+0xc4>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	3301      	adds	r3, #1
 800ba12:	4a06      	ldr	r2, [pc, #24]	@ (800ba2c <vPortFree+0xc4>)
 800ba14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ba16:	f7fe fc61 	bl	800a2dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ba1a:	bf00      	nop
 800ba1c:	3718      	adds	r7, #24
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	2000602c 	.word	0x2000602c
 800ba28:	2000601c 	.word	0x2000601c
 800ba2c:	20006028 	.word	0x20006028

0800ba30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ba36:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800ba3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ba3c:	4b27      	ldr	r3, [pc, #156]	@ (800badc <prvHeapInit+0xac>)
 800ba3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f003 0307 	and.w	r3, r3, #7
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00c      	beq.n	800ba64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	3307      	adds	r3, #7
 800ba4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f023 0307 	bic.w	r3, r3, #7
 800ba56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	4a1f      	ldr	r2, [pc, #124]	@ (800badc <prvHeapInit+0xac>)
 800ba60:	4413      	add	r3, r2
 800ba62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ba68:	4a1d      	ldr	r2, [pc, #116]	@ (800bae0 <prvHeapInit+0xb0>)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ba6e:	4b1c      	ldr	r3, [pc, #112]	@ (800bae0 <prvHeapInit+0xb0>)
 800ba70:	2200      	movs	r2, #0
 800ba72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	68ba      	ldr	r2, [r7, #8]
 800ba78:	4413      	add	r3, r2
 800ba7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ba7c:	2208      	movs	r2, #8
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	1a9b      	subs	r3, r3, r2
 800ba82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f023 0307 	bic.w	r3, r3, #7
 800ba8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4a15      	ldr	r2, [pc, #84]	@ (800bae4 <prvHeapInit+0xb4>)
 800ba90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ba92:	4b14      	ldr	r3, [pc, #80]	@ (800bae4 <prvHeapInit+0xb4>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2200      	movs	r2, #0
 800ba98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ba9a:	4b12      	ldr	r3, [pc, #72]	@ (800bae4 <prvHeapInit+0xb4>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	1ad2      	subs	r2, r2, r3
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bab0:	4b0c      	ldr	r3, [pc, #48]	@ (800bae4 <prvHeapInit+0xb4>)
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	4a0a      	ldr	r2, [pc, #40]	@ (800bae8 <prvHeapInit+0xb8>)
 800babe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	4a09      	ldr	r2, [pc, #36]	@ (800baec <prvHeapInit+0xbc>)
 800bac6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bac8:	4b09      	ldr	r3, [pc, #36]	@ (800baf0 <prvHeapInit+0xc0>)
 800baca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bace:	601a      	str	r2, [r3, #0]
}
 800bad0:	bf00      	nop
 800bad2:	3714      	adds	r7, #20
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr
 800badc:	200011f0 	.word	0x200011f0
 800bae0:	20006010 	.word	0x20006010
 800bae4:	20006018 	.word	0x20006018
 800bae8:	20006020 	.word	0x20006020
 800baec:	2000601c 	.word	0x2000601c
 800baf0:	2000602c 	.word	0x2000602c

0800baf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bafc:	4b28      	ldr	r3, [pc, #160]	@ (800bba0 <prvInsertBlockIntoFreeList+0xac>)
 800bafe:	60fb      	str	r3, [r7, #12]
 800bb00:	e002      	b.n	800bb08 <prvInsertBlockIntoFreeList+0x14>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	60fb      	str	r3, [r7, #12]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d8f7      	bhi.n	800bb02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	68ba      	ldr	r2, [r7, #8]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d108      	bne.n	800bb36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	685a      	ldr	r2, [r3, #4]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	441a      	add	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	68ba      	ldr	r2, [r7, #8]
 800bb40:	441a      	add	r2, r3
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d118      	bne.n	800bb7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	4b15      	ldr	r3, [pc, #84]	@ (800bba4 <prvInsertBlockIntoFreeList+0xb0>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d00d      	beq.n	800bb72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	685a      	ldr	r2, [r3, #4]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	441a      	add	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	601a      	str	r2, [r3, #0]
 800bb70:	e008      	b.n	800bb84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bb72:	4b0c      	ldr	r3, [pc, #48]	@ (800bba4 <prvInsertBlockIntoFreeList+0xb0>)
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	601a      	str	r2, [r3, #0]
 800bb7a:	e003      	b.n	800bb84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d002      	beq.n	800bb92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb92:	bf00      	nop
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	20006010 	.word	0x20006010
 800bba4:	20006018 	.word	0x20006018

0800bba8 <atoi>:
 800bba8:	220a      	movs	r2, #10
 800bbaa:	2100      	movs	r1, #0
 800bbac:	f000 b87a 	b.w	800bca4 <strtol>

0800bbb0 <_strtol_l.constprop.0>:
 800bbb0:	2b24      	cmp	r3, #36	@ 0x24
 800bbb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbb6:	4686      	mov	lr, r0
 800bbb8:	4690      	mov	r8, r2
 800bbba:	d801      	bhi.n	800bbc0 <_strtol_l.constprop.0+0x10>
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d106      	bne.n	800bbce <_strtol_l.constprop.0+0x1e>
 800bbc0:	f000 f8f8 	bl	800bdb4 <__errno>
 800bbc4:	2316      	movs	r3, #22
 800bbc6:	6003      	str	r3, [r0, #0]
 800bbc8:	2000      	movs	r0, #0
 800bbca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbce:	4834      	ldr	r0, [pc, #208]	@ (800bca0 <_strtol_l.constprop.0+0xf0>)
 800bbd0:	460d      	mov	r5, r1
 800bbd2:	462a      	mov	r2, r5
 800bbd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbd8:	5d06      	ldrb	r6, [r0, r4]
 800bbda:	f016 0608 	ands.w	r6, r6, #8
 800bbde:	d1f8      	bne.n	800bbd2 <_strtol_l.constprop.0+0x22>
 800bbe0:	2c2d      	cmp	r4, #45	@ 0x2d
 800bbe2:	d12d      	bne.n	800bc40 <_strtol_l.constprop.0+0x90>
 800bbe4:	782c      	ldrb	r4, [r5, #0]
 800bbe6:	2601      	movs	r6, #1
 800bbe8:	1c95      	adds	r5, r2, #2
 800bbea:	f033 0210 	bics.w	r2, r3, #16
 800bbee:	d109      	bne.n	800bc04 <_strtol_l.constprop.0+0x54>
 800bbf0:	2c30      	cmp	r4, #48	@ 0x30
 800bbf2:	d12a      	bne.n	800bc4a <_strtol_l.constprop.0+0x9a>
 800bbf4:	782a      	ldrb	r2, [r5, #0]
 800bbf6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bbfa:	2a58      	cmp	r2, #88	@ 0x58
 800bbfc:	d125      	bne.n	800bc4a <_strtol_l.constprop.0+0x9a>
 800bbfe:	786c      	ldrb	r4, [r5, #1]
 800bc00:	2310      	movs	r3, #16
 800bc02:	3502      	adds	r5, #2
 800bc04:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bc08:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	fbbc f9f3 	udiv	r9, ip, r3
 800bc12:	4610      	mov	r0, r2
 800bc14:	fb03 ca19 	mls	sl, r3, r9, ip
 800bc18:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bc1c:	2f09      	cmp	r7, #9
 800bc1e:	d81b      	bhi.n	800bc58 <_strtol_l.constprop.0+0xa8>
 800bc20:	463c      	mov	r4, r7
 800bc22:	42a3      	cmp	r3, r4
 800bc24:	dd27      	ble.n	800bc76 <_strtol_l.constprop.0+0xc6>
 800bc26:	1c57      	adds	r7, r2, #1
 800bc28:	d007      	beq.n	800bc3a <_strtol_l.constprop.0+0x8a>
 800bc2a:	4581      	cmp	r9, r0
 800bc2c:	d320      	bcc.n	800bc70 <_strtol_l.constprop.0+0xc0>
 800bc2e:	d101      	bne.n	800bc34 <_strtol_l.constprop.0+0x84>
 800bc30:	45a2      	cmp	sl, r4
 800bc32:	db1d      	blt.n	800bc70 <_strtol_l.constprop.0+0xc0>
 800bc34:	fb00 4003 	mla	r0, r0, r3, r4
 800bc38:	2201      	movs	r2, #1
 800bc3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc3e:	e7eb      	b.n	800bc18 <_strtol_l.constprop.0+0x68>
 800bc40:	2c2b      	cmp	r4, #43	@ 0x2b
 800bc42:	bf04      	itt	eq
 800bc44:	782c      	ldrbeq	r4, [r5, #0]
 800bc46:	1c95      	addeq	r5, r2, #2
 800bc48:	e7cf      	b.n	800bbea <_strtol_l.constprop.0+0x3a>
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d1da      	bne.n	800bc04 <_strtol_l.constprop.0+0x54>
 800bc4e:	2c30      	cmp	r4, #48	@ 0x30
 800bc50:	bf0c      	ite	eq
 800bc52:	2308      	moveq	r3, #8
 800bc54:	230a      	movne	r3, #10
 800bc56:	e7d5      	b.n	800bc04 <_strtol_l.constprop.0+0x54>
 800bc58:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bc5c:	2f19      	cmp	r7, #25
 800bc5e:	d801      	bhi.n	800bc64 <_strtol_l.constprop.0+0xb4>
 800bc60:	3c37      	subs	r4, #55	@ 0x37
 800bc62:	e7de      	b.n	800bc22 <_strtol_l.constprop.0+0x72>
 800bc64:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bc68:	2f19      	cmp	r7, #25
 800bc6a:	d804      	bhi.n	800bc76 <_strtol_l.constprop.0+0xc6>
 800bc6c:	3c57      	subs	r4, #87	@ 0x57
 800bc6e:	e7d8      	b.n	800bc22 <_strtol_l.constprop.0+0x72>
 800bc70:	f04f 32ff 	mov.w	r2, #4294967295
 800bc74:	e7e1      	b.n	800bc3a <_strtol_l.constprop.0+0x8a>
 800bc76:	1c53      	adds	r3, r2, #1
 800bc78:	d108      	bne.n	800bc8c <_strtol_l.constprop.0+0xdc>
 800bc7a:	2322      	movs	r3, #34	@ 0x22
 800bc7c:	f8ce 3000 	str.w	r3, [lr]
 800bc80:	4660      	mov	r0, ip
 800bc82:	f1b8 0f00 	cmp.w	r8, #0
 800bc86:	d0a0      	beq.n	800bbca <_strtol_l.constprop.0+0x1a>
 800bc88:	1e69      	subs	r1, r5, #1
 800bc8a:	e006      	b.n	800bc9a <_strtol_l.constprop.0+0xea>
 800bc8c:	b106      	cbz	r6, 800bc90 <_strtol_l.constprop.0+0xe0>
 800bc8e:	4240      	negs	r0, r0
 800bc90:	f1b8 0f00 	cmp.w	r8, #0
 800bc94:	d099      	beq.n	800bbca <_strtol_l.constprop.0+0x1a>
 800bc96:	2a00      	cmp	r2, #0
 800bc98:	d1f6      	bne.n	800bc88 <_strtol_l.constprop.0+0xd8>
 800bc9a:	f8c8 1000 	str.w	r1, [r8]
 800bc9e:	e794      	b.n	800bbca <_strtol_l.constprop.0+0x1a>
 800bca0:	0800f771 	.word	0x0800f771

0800bca4 <strtol>:
 800bca4:	4613      	mov	r3, r2
 800bca6:	460a      	mov	r2, r1
 800bca8:	4601      	mov	r1, r0
 800bcaa:	4802      	ldr	r0, [pc, #8]	@ (800bcb4 <strtol+0x10>)
 800bcac:	6800      	ldr	r0, [r0, #0]
 800bcae:	f7ff bf7f 	b.w	800bbb0 <_strtol_l.constprop.0>
 800bcb2:	bf00      	nop
 800bcb4:	200000b4 	.word	0x200000b4

0800bcb8 <siprintf>:
 800bcb8:	b40e      	push	{r1, r2, r3}
 800bcba:	b500      	push	{lr}
 800bcbc:	b09c      	sub	sp, #112	@ 0x70
 800bcbe:	ab1d      	add	r3, sp, #116	@ 0x74
 800bcc0:	9002      	str	r0, [sp, #8]
 800bcc2:	9006      	str	r0, [sp, #24]
 800bcc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bcc8:	4809      	ldr	r0, [pc, #36]	@ (800bcf0 <siprintf+0x38>)
 800bcca:	9107      	str	r1, [sp, #28]
 800bccc:	9104      	str	r1, [sp, #16]
 800bcce:	4909      	ldr	r1, [pc, #36]	@ (800bcf4 <siprintf+0x3c>)
 800bcd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcd4:	9105      	str	r1, [sp, #20]
 800bcd6:	6800      	ldr	r0, [r0, #0]
 800bcd8:	9301      	str	r3, [sp, #4]
 800bcda:	a902      	add	r1, sp, #8
 800bcdc:	f000 f9f8 	bl	800c0d0 <_svfiprintf_r>
 800bce0:	9b02      	ldr	r3, [sp, #8]
 800bce2:	2200      	movs	r2, #0
 800bce4:	701a      	strb	r2, [r3, #0]
 800bce6:	b01c      	add	sp, #112	@ 0x70
 800bce8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcec:	b003      	add	sp, #12
 800bcee:	4770      	bx	lr
 800bcf0:	200000b4 	.word	0x200000b4
 800bcf4:	ffff0208 	.word	0xffff0208

0800bcf8 <memset>:
 800bcf8:	4402      	add	r2, r0
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d100      	bne.n	800bd02 <memset+0xa>
 800bd00:	4770      	bx	lr
 800bd02:	f803 1b01 	strb.w	r1, [r3], #1
 800bd06:	e7f9      	b.n	800bcfc <memset+0x4>

0800bd08 <_reclaim_reent>:
 800bd08:	4b29      	ldr	r3, [pc, #164]	@ (800bdb0 <_reclaim_reent+0xa8>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4283      	cmp	r3, r0
 800bd0e:	b570      	push	{r4, r5, r6, lr}
 800bd10:	4604      	mov	r4, r0
 800bd12:	d04b      	beq.n	800bdac <_reclaim_reent+0xa4>
 800bd14:	69c3      	ldr	r3, [r0, #28]
 800bd16:	b1ab      	cbz	r3, 800bd44 <_reclaim_reent+0x3c>
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	b16b      	cbz	r3, 800bd38 <_reclaim_reent+0x30>
 800bd1c:	2500      	movs	r5, #0
 800bd1e:	69e3      	ldr	r3, [r4, #28]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	5959      	ldr	r1, [r3, r5]
 800bd24:	2900      	cmp	r1, #0
 800bd26:	d13b      	bne.n	800bda0 <_reclaim_reent+0x98>
 800bd28:	3504      	adds	r5, #4
 800bd2a:	2d80      	cmp	r5, #128	@ 0x80
 800bd2c:	d1f7      	bne.n	800bd1e <_reclaim_reent+0x16>
 800bd2e:	69e3      	ldr	r3, [r4, #28]
 800bd30:	4620      	mov	r0, r4
 800bd32:	68d9      	ldr	r1, [r3, #12]
 800bd34:	f000 f878 	bl	800be28 <_free_r>
 800bd38:	69e3      	ldr	r3, [r4, #28]
 800bd3a:	6819      	ldr	r1, [r3, #0]
 800bd3c:	b111      	cbz	r1, 800bd44 <_reclaim_reent+0x3c>
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f000 f872 	bl	800be28 <_free_r>
 800bd44:	6961      	ldr	r1, [r4, #20]
 800bd46:	b111      	cbz	r1, 800bd4e <_reclaim_reent+0x46>
 800bd48:	4620      	mov	r0, r4
 800bd4a:	f000 f86d 	bl	800be28 <_free_r>
 800bd4e:	69e1      	ldr	r1, [r4, #28]
 800bd50:	b111      	cbz	r1, 800bd58 <_reclaim_reent+0x50>
 800bd52:	4620      	mov	r0, r4
 800bd54:	f000 f868 	bl	800be28 <_free_r>
 800bd58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bd5a:	b111      	cbz	r1, 800bd62 <_reclaim_reent+0x5a>
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f000 f863 	bl	800be28 <_free_r>
 800bd62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd64:	b111      	cbz	r1, 800bd6c <_reclaim_reent+0x64>
 800bd66:	4620      	mov	r0, r4
 800bd68:	f000 f85e 	bl	800be28 <_free_r>
 800bd6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bd6e:	b111      	cbz	r1, 800bd76 <_reclaim_reent+0x6e>
 800bd70:	4620      	mov	r0, r4
 800bd72:	f000 f859 	bl	800be28 <_free_r>
 800bd76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bd78:	b111      	cbz	r1, 800bd80 <_reclaim_reent+0x78>
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f000 f854 	bl	800be28 <_free_r>
 800bd80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bd82:	b111      	cbz	r1, 800bd8a <_reclaim_reent+0x82>
 800bd84:	4620      	mov	r0, r4
 800bd86:	f000 f84f 	bl	800be28 <_free_r>
 800bd8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bd8c:	b111      	cbz	r1, 800bd94 <_reclaim_reent+0x8c>
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f000 f84a 	bl	800be28 <_free_r>
 800bd94:	6a23      	ldr	r3, [r4, #32]
 800bd96:	b14b      	cbz	r3, 800bdac <_reclaim_reent+0xa4>
 800bd98:	4620      	mov	r0, r4
 800bd9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd9e:	4718      	bx	r3
 800bda0:	680e      	ldr	r6, [r1, #0]
 800bda2:	4620      	mov	r0, r4
 800bda4:	f000 f840 	bl	800be28 <_free_r>
 800bda8:	4631      	mov	r1, r6
 800bdaa:	e7bb      	b.n	800bd24 <_reclaim_reent+0x1c>
 800bdac:	bd70      	pop	{r4, r5, r6, pc}
 800bdae:	bf00      	nop
 800bdb0:	200000b4 	.word	0x200000b4

0800bdb4 <__errno>:
 800bdb4:	4b01      	ldr	r3, [pc, #4]	@ (800bdbc <__errno+0x8>)
 800bdb6:	6818      	ldr	r0, [r3, #0]
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	200000b4 	.word	0x200000b4

0800bdc0 <__libc_init_array>:
 800bdc0:	b570      	push	{r4, r5, r6, lr}
 800bdc2:	4d0d      	ldr	r5, [pc, #52]	@ (800bdf8 <__libc_init_array+0x38>)
 800bdc4:	4c0d      	ldr	r4, [pc, #52]	@ (800bdfc <__libc_init_array+0x3c>)
 800bdc6:	1b64      	subs	r4, r4, r5
 800bdc8:	10a4      	asrs	r4, r4, #2
 800bdca:	2600      	movs	r6, #0
 800bdcc:	42a6      	cmp	r6, r4
 800bdce:	d109      	bne.n	800bde4 <__libc_init_array+0x24>
 800bdd0:	4d0b      	ldr	r5, [pc, #44]	@ (800be00 <__libc_init_array+0x40>)
 800bdd2:	4c0c      	ldr	r4, [pc, #48]	@ (800be04 <__libc_init_array+0x44>)
 800bdd4:	f003 fc68 	bl	800f6a8 <_init>
 800bdd8:	1b64      	subs	r4, r4, r5
 800bdda:	10a4      	asrs	r4, r4, #2
 800bddc:	2600      	movs	r6, #0
 800bdde:	42a6      	cmp	r6, r4
 800bde0:	d105      	bne.n	800bdee <__libc_init_array+0x2e>
 800bde2:	bd70      	pop	{r4, r5, r6, pc}
 800bde4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bde8:	4798      	blx	r3
 800bdea:	3601      	adds	r6, #1
 800bdec:	e7ee      	b.n	800bdcc <__libc_init_array+0xc>
 800bdee:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdf2:	4798      	blx	r3
 800bdf4:	3601      	adds	r6, #1
 800bdf6:	e7f2      	b.n	800bdde <__libc_init_array+0x1e>
 800bdf8:	0800fb28 	.word	0x0800fb28
 800bdfc:	0800fb28 	.word	0x0800fb28
 800be00:	0800fb28 	.word	0x0800fb28
 800be04:	0800fb2c 	.word	0x0800fb2c

0800be08 <__retarget_lock_acquire_recursive>:
 800be08:	4770      	bx	lr

0800be0a <__retarget_lock_release_recursive>:
 800be0a:	4770      	bx	lr

0800be0c <memcpy>:
 800be0c:	440a      	add	r2, r1
 800be0e:	4291      	cmp	r1, r2
 800be10:	f100 33ff 	add.w	r3, r0, #4294967295
 800be14:	d100      	bne.n	800be18 <memcpy+0xc>
 800be16:	4770      	bx	lr
 800be18:	b510      	push	{r4, lr}
 800be1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be22:	4291      	cmp	r1, r2
 800be24:	d1f9      	bne.n	800be1a <memcpy+0xe>
 800be26:	bd10      	pop	{r4, pc}

0800be28 <_free_r>:
 800be28:	b538      	push	{r3, r4, r5, lr}
 800be2a:	4605      	mov	r5, r0
 800be2c:	2900      	cmp	r1, #0
 800be2e:	d041      	beq.n	800beb4 <_free_r+0x8c>
 800be30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be34:	1f0c      	subs	r4, r1, #4
 800be36:	2b00      	cmp	r3, #0
 800be38:	bfb8      	it	lt
 800be3a:	18e4      	addlt	r4, r4, r3
 800be3c:	f000 f8e0 	bl	800c000 <__malloc_lock>
 800be40:	4a1d      	ldr	r2, [pc, #116]	@ (800beb8 <_free_r+0x90>)
 800be42:	6813      	ldr	r3, [r2, #0]
 800be44:	b933      	cbnz	r3, 800be54 <_free_r+0x2c>
 800be46:	6063      	str	r3, [r4, #4]
 800be48:	6014      	str	r4, [r2, #0]
 800be4a:	4628      	mov	r0, r5
 800be4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be50:	f000 b8dc 	b.w	800c00c <__malloc_unlock>
 800be54:	42a3      	cmp	r3, r4
 800be56:	d908      	bls.n	800be6a <_free_r+0x42>
 800be58:	6820      	ldr	r0, [r4, #0]
 800be5a:	1821      	adds	r1, r4, r0
 800be5c:	428b      	cmp	r3, r1
 800be5e:	bf01      	itttt	eq
 800be60:	6819      	ldreq	r1, [r3, #0]
 800be62:	685b      	ldreq	r3, [r3, #4]
 800be64:	1809      	addeq	r1, r1, r0
 800be66:	6021      	streq	r1, [r4, #0]
 800be68:	e7ed      	b.n	800be46 <_free_r+0x1e>
 800be6a:	461a      	mov	r2, r3
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	b10b      	cbz	r3, 800be74 <_free_r+0x4c>
 800be70:	42a3      	cmp	r3, r4
 800be72:	d9fa      	bls.n	800be6a <_free_r+0x42>
 800be74:	6811      	ldr	r1, [r2, #0]
 800be76:	1850      	adds	r0, r2, r1
 800be78:	42a0      	cmp	r0, r4
 800be7a:	d10b      	bne.n	800be94 <_free_r+0x6c>
 800be7c:	6820      	ldr	r0, [r4, #0]
 800be7e:	4401      	add	r1, r0
 800be80:	1850      	adds	r0, r2, r1
 800be82:	4283      	cmp	r3, r0
 800be84:	6011      	str	r1, [r2, #0]
 800be86:	d1e0      	bne.n	800be4a <_free_r+0x22>
 800be88:	6818      	ldr	r0, [r3, #0]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	6053      	str	r3, [r2, #4]
 800be8e:	4408      	add	r0, r1
 800be90:	6010      	str	r0, [r2, #0]
 800be92:	e7da      	b.n	800be4a <_free_r+0x22>
 800be94:	d902      	bls.n	800be9c <_free_r+0x74>
 800be96:	230c      	movs	r3, #12
 800be98:	602b      	str	r3, [r5, #0]
 800be9a:	e7d6      	b.n	800be4a <_free_r+0x22>
 800be9c:	6820      	ldr	r0, [r4, #0]
 800be9e:	1821      	adds	r1, r4, r0
 800bea0:	428b      	cmp	r3, r1
 800bea2:	bf04      	itt	eq
 800bea4:	6819      	ldreq	r1, [r3, #0]
 800bea6:	685b      	ldreq	r3, [r3, #4]
 800bea8:	6063      	str	r3, [r4, #4]
 800beaa:	bf04      	itt	eq
 800beac:	1809      	addeq	r1, r1, r0
 800beae:	6021      	streq	r1, [r4, #0]
 800beb0:	6054      	str	r4, [r2, #4]
 800beb2:	e7ca      	b.n	800be4a <_free_r+0x22>
 800beb4:	bd38      	pop	{r3, r4, r5, pc}
 800beb6:	bf00      	nop
 800beb8:	20006174 	.word	0x20006174

0800bebc <sbrk_aligned>:
 800bebc:	b570      	push	{r4, r5, r6, lr}
 800bebe:	4e0f      	ldr	r6, [pc, #60]	@ (800befc <sbrk_aligned+0x40>)
 800bec0:	460c      	mov	r4, r1
 800bec2:	6831      	ldr	r1, [r6, #0]
 800bec4:	4605      	mov	r5, r0
 800bec6:	b911      	cbnz	r1, 800bece <sbrk_aligned+0x12>
 800bec8:	f000 fba6 	bl	800c618 <_sbrk_r>
 800becc:	6030      	str	r0, [r6, #0]
 800bece:	4621      	mov	r1, r4
 800bed0:	4628      	mov	r0, r5
 800bed2:	f000 fba1 	bl	800c618 <_sbrk_r>
 800bed6:	1c43      	adds	r3, r0, #1
 800bed8:	d103      	bne.n	800bee2 <sbrk_aligned+0x26>
 800beda:	f04f 34ff 	mov.w	r4, #4294967295
 800bede:	4620      	mov	r0, r4
 800bee0:	bd70      	pop	{r4, r5, r6, pc}
 800bee2:	1cc4      	adds	r4, r0, #3
 800bee4:	f024 0403 	bic.w	r4, r4, #3
 800bee8:	42a0      	cmp	r0, r4
 800beea:	d0f8      	beq.n	800bede <sbrk_aligned+0x22>
 800beec:	1a21      	subs	r1, r4, r0
 800beee:	4628      	mov	r0, r5
 800bef0:	f000 fb92 	bl	800c618 <_sbrk_r>
 800bef4:	3001      	adds	r0, #1
 800bef6:	d1f2      	bne.n	800bede <sbrk_aligned+0x22>
 800bef8:	e7ef      	b.n	800beda <sbrk_aligned+0x1e>
 800befa:	bf00      	nop
 800befc:	20006170 	.word	0x20006170

0800bf00 <_malloc_r>:
 800bf00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf04:	1ccd      	adds	r5, r1, #3
 800bf06:	f025 0503 	bic.w	r5, r5, #3
 800bf0a:	3508      	adds	r5, #8
 800bf0c:	2d0c      	cmp	r5, #12
 800bf0e:	bf38      	it	cc
 800bf10:	250c      	movcc	r5, #12
 800bf12:	2d00      	cmp	r5, #0
 800bf14:	4606      	mov	r6, r0
 800bf16:	db01      	blt.n	800bf1c <_malloc_r+0x1c>
 800bf18:	42a9      	cmp	r1, r5
 800bf1a:	d904      	bls.n	800bf26 <_malloc_r+0x26>
 800bf1c:	230c      	movs	r3, #12
 800bf1e:	6033      	str	r3, [r6, #0]
 800bf20:	2000      	movs	r0, #0
 800bf22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bffc <_malloc_r+0xfc>
 800bf2a:	f000 f869 	bl	800c000 <__malloc_lock>
 800bf2e:	f8d8 3000 	ldr.w	r3, [r8]
 800bf32:	461c      	mov	r4, r3
 800bf34:	bb44      	cbnz	r4, 800bf88 <_malloc_r+0x88>
 800bf36:	4629      	mov	r1, r5
 800bf38:	4630      	mov	r0, r6
 800bf3a:	f7ff ffbf 	bl	800bebc <sbrk_aligned>
 800bf3e:	1c43      	adds	r3, r0, #1
 800bf40:	4604      	mov	r4, r0
 800bf42:	d158      	bne.n	800bff6 <_malloc_r+0xf6>
 800bf44:	f8d8 4000 	ldr.w	r4, [r8]
 800bf48:	4627      	mov	r7, r4
 800bf4a:	2f00      	cmp	r7, #0
 800bf4c:	d143      	bne.n	800bfd6 <_malloc_r+0xd6>
 800bf4e:	2c00      	cmp	r4, #0
 800bf50:	d04b      	beq.n	800bfea <_malloc_r+0xea>
 800bf52:	6823      	ldr	r3, [r4, #0]
 800bf54:	4639      	mov	r1, r7
 800bf56:	4630      	mov	r0, r6
 800bf58:	eb04 0903 	add.w	r9, r4, r3
 800bf5c:	f000 fb5c 	bl	800c618 <_sbrk_r>
 800bf60:	4581      	cmp	r9, r0
 800bf62:	d142      	bne.n	800bfea <_malloc_r+0xea>
 800bf64:	6821      	ldr	r1, [r4, #0]
 800bf66:	1a6d      	subs	r5, r5, r1
 800bf68:	4629      	mov	r1, r5
 800bf6a:	4630      	mov	r0, r6
 800bf6c:	f7ff ffa6 	bl	800bebc <sbrk_aligned>
 800bf70:	3001      	adds	r0, #1
 800bf72:	d03a      	beq.n	800bfea <_malloc_r+0xea>
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	442b      	add	r3, r5
 800bf78:	6023      	str	r3, [r4, #0]
 800bf7a:	f8d8 3000 	ldr.w	r3, [r8]
 800bf7e:	685a      	ldr	r2, [r3, #4]
 800bf80:	bb62      	cbnz	r2, 800bfdc <_malloc_r+0xdc>
 800bf82:	f8c8 7000 	str.w	r7, [r8]
 800bf86:	e00f      	b.n	800bfa8 <_malloc_r+0xa8>
 800bf88:	6822      	ldr	r2, [r4, #0]
 800bf8a:	1b52      	subs	r2, r2, r5
 800bf8c:	d420      	bmi.n	800bfd0 <_malloc_r+0xd0>
 800bf8e:	2a0b      	cmp	r2, #11
 800bf90:	d917      	bls.n	800bfc2 <_malloc_r+0xc2>
 800bf92:	1961      	adds	r1, r4, r5
 800bf94:	42a3      	cmp	r3, r4
 800bf96:	6025      	str	r5, [r4, #0]
 800bf98:	bf18      	it	ne
 800bf9a:	6059      	strne	r1, [r3, #4]
 800bf9c:	6863      	ldr	r3, [r4, #4]
 800bf9e:	bf08      	it	eq
 800bfa0:	f8c8 1000 	streq.w	r1, [r8]
 800bfa4:	5162      	str	r2, [r4, r5]
 800bfa6:	604b      	str	r3, [r1, #4]
 800bfa8:	4630      	mov	r0, r6
 800bfaa:	f000 f82f 	bl	800c00c <__malloc_unlock>
 800bfae:	f104 000b 	add.w	r0, r4, #11
 800bfb2:	1d23      	adds	r3, r4, #4
 800bfb4:	f020 0007 	bic.w	r0, r0, #7
 800bfb8:	1ac2      	subs	r2, r0, r3
 800bfba:	bf1c      	itt	ne
 800bfbc:	1a1b      	subne	r3, r3, r0
 800bfbe:	50a3      	strne	r3, [r4, r2]
 800bfc0:	e7af      	b.n	800bf22 <_malloc_r+0x22>
 800bfc2:	6862      	ldr	r2, [r4, #4]
 800bfc4:	42a3      	cmp	r3, r4
 800bfc6:	bf0c      	ite	eq
 800bfc8:	f8c8 2000 	streq.w	r2, [r8]
 800bfcc:	605a      	strne	r2, [r3, #4]
 800bfce:	e7eb      	b.n	800bfa8 <_malloc_r+0xa8>
 800bfd0:	4623      	mov	r3, r4
 800bfd2:	6864      	ldr	r4, [r4, #4]
 800bfd4:	e7ae      	b.n	800bf34 <_malloc_r+0x34>
 800bfd6:	463c      	mov	r4, r7
 800bfd8:	687f      	ldr	r7, [r7, #4]
 800bfda:	e7b6      	b.n	800bf4a <_malloc_r+0x4a>
 800bfdc:	461a      	mov	r2, r3
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	42a3      	cmp	r3, r4
 800bfe2:	d1fb      	bne.n	800bfdc <_malloc_r+0xdc>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	6053      	str	r3, [r2, #4]
 800bfe8:	e7de      	b.n	800bfa8 <_malloc_r+0xa8>
 800bfea:	230c      	movs	r3, #12
 800bfec:	6033      	str	r3, [r6, #0]
 800bfee:	4630      	mov	r0, r6
 800bff0:	f000 f80c 	bl	800c00c <__malloc_unlock>
 800bff4:	e794      	b.n	800bf20 <_malloc_r+0x20>
 800bff6:	6005      	str	r5, [r0, #0]
 800bff8:	e7d6      	b.n	800bfa8 <_malloc_r+0xa8>
 800bffa:	bf00      	nop
 800bffc:	20006174 	.word	0x20006174

0800c000 <__malloc_lock>:
 800c000:	4801      	ldr	r0, [pc, #4]	@ (800c008 <__malloc_lock+0x8>)
 800c002:	f7ff bf01 	b.w	800be08 <__retarget_lock_acquire_recursive>
 800c006:	bf00      	nop
 800c008:	2000616c 	.word	0x2000616c

0800c00c <__malloc_unlock>:
 800c00c:	4801      	ldr	r0, [pc, #4]	@ (800c014 <__malloc_unlock+0x8>)
 800c00e:	f7ff befc 	b.w	800be0a <__retarget_lock_release_recursive>
 800c012:	bf00      	nop
 800c014:	2000616c 	.word	0x2000616c

0800c018 <__ssputs_r>:
 800c018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c01c:	688e      	ldr	r6, [r1, #8]
 800c01e:	461f      	mov	r7, r3
 800c020:	42be      	cmp	r6, r7
 800c022:	680b      	ldr	r3, [r1, #0]
 800c024:	4682      	mov	sl, r0
 800c026:	460c      	mov	r4, r1
 800c028:	4690      	mov	r8, r2
 800c02a:	d82d      	bhi.n	800c088 <__ssputs_r+0x70>
 800c02c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c030:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c034:	d026      	beq.n	800c084 <__ssputs_r+0x6c>
 800c036:	6965      	ldr	r5, [r4, #20]
 800c038:	6909      	ldr	r1, [r1, #16]
 800c03a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c03e:	eba3 0901 	sub.w	r9, r3, r1
 800c042:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c046:	1c7b      	adds	r3, r7, #1
 800c048:	444b      	add	r3, r9
 800c04a:	106d      	asrs	r5, r5, #1
 800c04c:	429d      	cmp	r5, r3
 800c04e:	bf38      	it	cc
 800c050:	461d      	movcc	r5, r3
 800c052:	0553      	lsls	r3, r2, #21
 800c054:	d527      	bpl.n	800c0a6 <__ssputs_r+0x8e>
 800c056:	4629      	mov	r1, r5
 800c058:	f7ff ff52 	bl	800bf00 <_malloc_r>
 800c05c:	4606      	mov	r6, r0
 800c05e:	b360      	cbz	r0, 800c0ba <__ssputs_r+0xa2>
 800c060:	6921      	ldr	r1, [r4, #16]
 800c062:	464a      	mov	r2, r9
 800c064:	f7ff fed2 	bl	800be0c <memcpy>
 800c068:	89a3      	ldrh	r3, [r4, #12]
 800c06a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c06e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c072:	81a3      	strh	r3, [r4, #12]
 800c074:	6126      	str	r6, [r4, #16]
 800c076:	6165      	str	r5, [r4, #20]
 800c078:	444e      	add	r6, r9
 800c07a:	eba5 0509 	sub.w	r5, r5, r9
 800c07e:	6026      	str	r6, [r4, #0]
 800c080:	60a5      	str	r5, [r4, #8]
 800c082:	463e      	mov	r6, r7
 800c084:	42be      	cmp	r6, r7
 800c086:	d900      	bls.n	800c08a <__ssputs_r+0x72>
 800c088:	463e      	mov	r6, r7
 800c08a:	6820      	ldr	r0, [r4, #0]
 800c08c:	4632      	mov	r2, r6
 800c08e:	4641      	mov	r1, r8
 800c090:	f000 faa8 	bl	800c5e4 <memmove>
 800c094:	68a3      	ldr	r3, [r4, #8]
 800c096:	1b9b      	subs	r3, r3, r6
 800c098:	60a3      	str	r3, [r4, #8]
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	4433      	add	r3, r6
 800c09e:	6023      	str	r3, [r4, #0]
 800c0a0:	2000      	movs	r0, #0
 800c0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a6:	462a      	mov	r2, r5
 800c0a8:	f000 fac6 	bl	800c638 <_realloc_r>
 800c0ac:	4606      	mov	r6, r0
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d1e0      	bne.n	800c074 <__ssputs_r+0x5c>
 800c0b2:	6921      	ldr	r1, [r4, #16]
 800c0b4:	4650      	mov	r0, sl
 800c0b6:	f7ff feb7 	bl	800be28 <_free_r>
 800c0ba:	230c      	movs	r3, #12
 800c0bc:	f8ca 3000 	str.w	r3, [sl]
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0c6:	81a3      	strh	r3, [r4, #12]
 800c0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0cc:	e7e9      	b.n	800c0a2 <__ssputs_r+0x8a>
	...

0800c0d0 <_svfiprintf_r>:
 800c0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d4:	4698      	mov	r8, r3
 800c0d6:	898b      	ldrh	r3, [r1, #12]
 800c0d8:	061b      	lsls	r3, r3, #24
 800c0da:	b09d      	sub	sp, #116	@ 0x74
 800c0dc:	4607      	mov	r7, r0
 800c0de:	460d      	mov	r5, r1
 800c0e0:	4614      	mov	r4, r2
 800c0e2:	d510      	bpl.n	800c106 <_svfiprintf_r+0x36>
 800c0e4:	690b      	ldr	r3, [r1, #16]
 800c0e6:	b973      	cbnz	r3, 800c106 <_svfiprintf_r+0x36>
 800c0e8:	2140      	movs	r1, #64	@ 0x40
 800c0ea:	f7ff ff09 	bl	800bf00 <_malloc_r>
 800c0ee:	6028      	str	r0, [r5, #0]
 800c0f0:	6128      	str	r0, [r5, #16]
 800c0f2:	b930      	cbnz	r0, 800c102 <_svfiprintf_r+0x32>
 800c0f4:	230c      	movs	r3, #12
 800c0f6:	603b      	str	r3, [r7, #0]
 800c0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fc:	b01d      	add	sp, #116	@ 0x74
 800c0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c102:	2340      	movs	r3, #64	@ 0x40
 800c104:	616b      	str	r3, [r5, #20]
 800c106:	2300      	movs	r3, #0
 800c108:	9309      	str	r3, [sp, #36]	@ 0x24
 800c10a:	2320      	movs	r3, #32
 800c10c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c110:	f8cd 800c 	str.w	r8, [sp, #12]
 800c114:	2330      	movs	r3, #48	@ 0x30
 800c116:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c2b4 <_svfiprintf_r+0x1e4>
 800c11a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c11e:	f04f 0901 	mov.w	r9, #1
 800c122:	4623      	mov	r3, r4
 800c124:	469a      	mov	sl, r3
 800c126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c12a:	b10a      	cbz	r2, 800c130 <_svfiprintf_r+0x60>
 800c12c:	2a25      	cmp	r2, #37	@ 0x25
 800c12e:	d1f9      	bne.n	800c124 <_svfiprintf_r+0x54>
 800c130:	ebba 0b04 	subs.w	fp, sl, r4
 800c134:	d00b      	beq.n	800c14e <_svfiprintf_r+0x7e>
 800c136:	465b      	mov	r3, fp
 800c138:	4622      	mov	r2, r4
 800c13a:	4629      	mov	r1, r5
 800c13c:	4638      	mov	r0, r7
 800c13e:	f7ff ff6b 	bl	800c018 <__ssputs_r>
 800c142:	3001      	adds	r0, #1
 800c144:	f000 80a7 	beq.w	800c296 <_svfiprintf_r+0x1c6>
 800c148:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c14a:	445a      	add	r2, fp
 800c14c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c14e:	f89a 3000 	ldrb.w	r3, [sl]
 800c152:	2b00      	cmp	r3, #0
 800c154:	f000 809f 	beq.w	800c296 <_svfiprintf_r+0x1c6>
 800c158:	2300      	movs	r3, #0
 800c15a:	f04f 32ff 	mov.w	r2, #4294967295
 800c15e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c162:	f10a 0a01 	add.w	sl, sl, #1
 800c166:	9304      	str	r3, [sp, #16]
 800c168:	9307      	str	r3, [sp, #28]
 800c16a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c16e:	931a      	str	r3, [sp, #104]	@ 0x68
 800c170:	4654      	mov	r4, sl
 800c172:	2205      	movs	r2, #5
 800c174:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c178:	484e      	ldr	r0, [pc, #312]	@ (800c2b4 <_svfiprintf_r+0x1e4>)
 800c17a:	f7f4 f839 	bl	80001f0 <memchr>
 800c17e:	9a04      	ldr	r2, [sp, #16]
 800c180:	b9d8      	cbnz	r0, 800c1ba <_svfiprintf_r+0xea>
 800c182:	06d0      	lsls	r0, r2, #27
 800c184:	bf44      	itt	mi
 800c186:	2320      	movmi	r3, #32
 800c188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c18c:	0711      	lsls	r1, r2, #28
 800c18e:	bf44      	itt	mi
 800c190:	232b      	movmi	r3, #43	@ 0x2b
 800c192:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c196:	f89a 3000 	ldrb.w	r3, [sl]
 800c19a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c19c:	d015      	beq.n	800c1ca <_svfiprintf_r+0xfa>
 800c19e:	9a07      	ldr	r2, [sp, #28]
 800c1a0:	4654      	mov	r4, sl
 800c1a2:	2000      	movs	r0, #0
 800c1a4:	f04f 0c0a 	mov.w	ip, #10
 800c1a8:	4621      	mov	r1, r4
 800c1aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1ae:	3b30      	subs	r3, #48	@ 0x30
 800c1b0:	2b09      	cmp	r3, #9
 800c1b2:	d94b      	bls.n	800c24c <_svfiprintf_r+0x17c>
 800c1b4:	b1b0      	cbz	r0, 800c1e4 <_svfiprintf_r+0x114>
 800c1b6:	9207      	str	r2, [sp, #28]
 800c1b8:	e014      	b.n	800c1e4 <_svfiprintf_r+0x114>
 800c1ba:	eba0 0308 	sub.w	r3, r0, r8
 800c1be:	fa09 f303 	lsl.w	r3, r9, r3
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	9304      	str	r3, [sp, #16]
 800c1c6:	46a2      	mov	sl, r4
 800c1c8:	e7d2      	b.n	800c170 <_svfiprintf_r+0xa0>
 800c1ca:	9b03      	ldr	r3, [sp, #12]
 800c1cc:	1d19      	adds	r1, r3, #4
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	9103      	str	r1, [sp, #12]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	bfbb      	ittet	lt
 800c1d6:	425b      	neglt	r3, r3
 800c1d8:	f042 0202 	orrlt.w	r2, r2, #2
 800c1dc:	9307      	strge	r3, [sp, #28]
 800c1de:	9307      	strlt	r3, [sp, #28]
 800c1e0:	bfb8      	it	lt
 800c1e2:	9204      	strlt	r2, [sp, #16]
 800c1e4:	7823      	ldrb	r3, [r4, #0]
 800c1e6:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1e8:	d10a      	bne.n	800c200 <_svfiprintf_r+0x130>
 800c1ea:	7863      	ldrb	r3, [r4, #1]
 800c1ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1ee:	d132      	bne.n	800c256 <_svfiprintf_r+0x186>
 800c1f0:	9b03      	ldr	r3, [sp, #12]
 800c1f2:	1d1a      	adds	r2, r3, #4
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	9203      	str	r2, [sp, #12]
 800c1f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c1fc:	3402      	adds	r4, #2
 800c1fe:	9305      	str	r3, [sp, #20]
 800c200:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c2c4 <_svfiprintf_r+0x1f4>
 800c204:	7821      	ldrb	r1, [r4, #0]
 800c206:	2203      	movs	r2, #3
 800c208:	4650      	mov	r0, sl
 800c20a:	f7f3 fff1 	bl	80001f0 <memchr>
 800c20e:	b138      	cbz	r0, 800c220 <_svfiprintf_r+0x150>
 800c210:	9b04      	ldr	r3, [sp, #16]
 800c212:	eba0 000a 	sub.w	r0, r0, sl
 800c216:	2240      	movs	r2, #64	@ 0x40
 800c218:	4082      	lsls	r2, r0
 800c21a:	4313      	orrs	r3, r2
 800c21c:	3401      	adds	r4, #1
 800c21e:	9304      	str	r3, [sp, #16]
 800c220:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c224:	4824      	ldr	r0, [pc, #144]	@ (800c2b8 <_svfiprintf_r+0x1e8>)
 800c226:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c22a:	2206      	movs	r2, #6
 800c22c:	f7f3 ffe0 	bl	80001f0 <memchr>
 800c230:	2800      	cmp	r0, #0
 800c232:	d036      	beq.n	800c2a2 <_svfiprintf_r+0x1d2>
 800c234:	4b21      	ldr	r3, [pc, #132]	@ (800c2bc <_svfiprintf_r+0x1ec>)
 800c236:	bb1b      	cbnz	r3, 800c280 <_svfiprintf_r+0x1b0>
 800c238:	9b03      	ldr	r3, [sp, #12]
 800c23a:	3307      	adds	r3, #7
 800c23c:	f023 0307 	bic.w	r3, r3, #7
 800c240:	3308      	adds	r3, #8
 800c242:	9303      	str	r3, [sp, #12]
 800c244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c246:	4433      	add	r3, r6
 800c248:	9309      	str	r3, [sp, #36]	@ 0x24
 800c24a:	e76a      	b.n	800c122 <_svfiprintf_r+0x52>
 800c24c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c250:	460c      	mov	r4, r1
 800c252:	2001      	movs	r0, #1
 800c254:	e7a8      	b.n	800c1a8 <_svfiprintf_r+0xd8>
 800c256:	2300      	movs	r3, #0
 800c258:	3401      	adds	r4, #1
 800c25a:	9305      	str	r3, [sp, #20]
 800c25c:	4619      	mov	r1, r3
 800c25e:	f04f 0c0a 	mov.w	ip, #10
 800c262:	4620      	mov	r0, r4
 800c264:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c268:	3a30      	subs	r2, #48	@ 0x30
 800c26a:	2a09      	cmp	r2, #9
 800c26c:	d903      	bls.n	800c276 <_svfiprintf_r+0x1a6>
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d0c6      	beq.n	800c200 <_svfiprintf_r+0x130>
 800c272:	9105      	str	r1, [sp, #20]
 800c274:	e7c4      	b.n	800c200 <_svfiprintf_r+0x130>
 800c276:	fb0c 2101 	mla	r1, ip, r1, r2
 800c27a:	4604      	mov	r4, r0
 800c27c:	2301      	movs	r3, #1
 800c27e:	e7f0      	b.n	800c262 <_svfiprintf_r+0x192>
 800c280:	ab03      	add	r3, sp, #12
 800c282:	9300      	str	r3, [sp, #0]
 800c284:	462a      	mov	r2, r5
 800c286:	4b0e      	ldr	r3, [pc, #56]	@ (800c2c0 <_svfiprintf_r+0x1f0>)
 800c288:	a904      	add	r1, sp, #16
 800c28a:	4638      	mov	r0, r7
 800c28c:	f3af 8000 	nop.w
 800c290:	1c42      	adds	r2, r0, #1
 800c292:	4606      	mov	r6, r0
 800c294:	d1d6      	bne.n	800c244 <_svfiprintf_r+0x174>
 800c296:	89ab      	ldrh	r3, [r5, #12]
 800c298:	065b      	lsls	r3, r3, #25
 800c29a:	f53f af2d 	bmi.w	800c0f8 <_svfiprintf_r+0x28>
 800c29e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2a0:	e72c      	b.n	800c0fc <_svfiprintf_r+0x2c>
 800c2a2:	ab03      	add	r3, sp, #12
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	462a      	mov	r2, r5
 800c2a8:	4b05      	ldr	r3, [pc, #20]	@ (800c2c0 <_svfiprintf_r+0x1f0>)
 800c2aa:	a904      	add	r1, sp, #16
 800c2ac:	4638      	mov	r0, r7
 800c2ae:	f000 f879 	bl	800c3a4 <_printf_i>
 800c2b2:	e7ed      	b.n	800c290 <_svfiprintf_r+0x1c0>
 800c2b4:	0800f871 	.word	0x0800f871
 800c2b8:	0800f87b 	.word	0x0800f87b
 800c2bc:	00000000 	.word	0x00000000
 800c2c0:	0800c019 	.word	0x0800c019
 800c2c4:	0800f877 	.word	0x0800f877

0800c2c8 <_printf_common>:
 800c2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2cc:	4616      	mov	r6, r2
 800c2ce:	4698      	mov	r8, r3
 800c2d0:	688a      	ldr	r2, [r1, #8]
 800c2d2:	690b      	ldr	r3, [r1, #16]
 800c2d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	bfb8      	it	lt
 800c2dc:	4613      	movlt	r3, r2
 800c2de:	6033      	str	r3, [r6, #0]
 800c2e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c2e4:	4607      	mov	r7, r0
 800c2e6:	460c      	mov	r4, r1
 800c2e8:	b10a      	cbz	r2, 800c2ee <_printf_common+0x26>
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	6033      	str	r3, [r6, #0]
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	0699      	lsls	r1, r3, #26
 800c2f2:	bf42      	ittt	mi
 800c2f4:	6833      	ldrmi	r3, [r6, #0]
 800c2f6:	3302      	addmi	r3, #2
 800c2f8:	6033      	strmi	r3, [r6, #0]
 800c2fa:	6825      	ldr	r5, [r4, #0]
 800c2fc:	f015 0506 	ands.w	r5, r5, #6
 800c300:	d106      	bne.n	800c310 <_printf_common+0x48>
 800c302:	f104 0a19 	add.w	sl, r4, #25
 800c306:	68e3      	ldr	r3, [r4, #12]
 800c308:	6832      	ldr	r2, [r6, #0]
 800c30a:	1a9b      	subs	r3, r3, r2
 800c30c:	42ab      	cmp	r3, r5
 800c30e:	dc26      	bgt.n	800c35e <_printf_common+0x96>
 800c310:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c314:	6822      	ldr	r2, [r4, #0]
 800c316:	3b00      	subs	r3, #0
 800c318:	bf18      	it	ne
 800c31a:	2301      	movne	r3, #1
 800c31c:	0692      	lsls	r2, r2, #26
 800c31e:	d42b      	bmi.n	800c378 <_printf_common+0xb0>
 800c320:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c324:	4641      	mov	r1, r8
 800c326:	4638      	mov	r0, r7
 800c328:	47c8      	blx	r9
 800c32a:	3001      	adds	r0, #1
 800c32c:	d01e      	beq.n	800c36c <_printf_common+0xa4>
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	6922      	ldr	r2, [r4, #16]
 800c332:	f003 0306 	and.w	r3, r3, #6
 800c336:	2b04      	cmp	r3, #4
 800c338:	bf02      	ittt	eq
 800c33a:	68e5      	ldreq	r5, [r4, #12]
 800c33c:	6833      	ldreq	r3, [r6, #0]
 800c33e:	1aed      	subeq	r5, r5, r3
 800c340:	68a3      	ldr	r3, [r4, #8]
 800c342:	bf0c      	ite	eq
 800c344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c348:	2500      	movne	r5, #0
 800c34a:	4293      	cmp	r3, r2
 800c34c:	bfc4      	itt	gt
 800c34e:	1a9b      	subgt	r3, r3, r2
 800c350:	18ed      	addgt	r5, r5, r3
 800c352:	2600      	movs	r6, #0
 800c354:	341a      	adds	r4, #26
 800c356:	42b5      	cmp	r5, r6
 800c358:	d11a      	bne.n	800c390 <_printf_common+0xc8>
 800c35a:	2000      	movs	r0, #0
 800c35c:	e008      	b.n	800c370 <_printf_common+0xa8>
 800c35e:	2301      	movs	r3, #1
 800c360:	4652      	mov	r2, sl
 800c362:	4641      	mov	r1, r8
 800c364:	4638      	mov	r0, r7
 800c366:	47c8      	blx	r9
 800c368:	3001      	adds	r0, #1
 800c36a:	d103      	bne.n	800c374 <_printf_common+0xac>
 800c36c:	f04f 30ff 	mov.w	r0, #4294967295
 800c370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c374:	3501      	adds	r5, #1
 800c376:	e7c6      	b.n	800c306 <_printf_common+0x3e>
 800c378:	18e1      	adds	r1, r4, r3
 800c37a:	1c5a      	adds	r2, r3, #1
 800c37c:	2030      	movs	r0, #48	@ 0x30
 800c37e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c382:	4422      	add	r2, r4
 800c384:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c388:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c38c:	3302      	adds	r3, #2
 800c38e:	e7c7      	b.n	800c320 <_printf_common+0x58>
 800c390:	2301      	movs	r3, #1
 800c392:	4622      	mov	r2, r4
 800c394:	4641      	mov	r1, r8
 800c396:	4638      	mov	r0, r7
 800c398:	47c8      	blx	r9
 800c39a:	3001      	adds	r0, #1
 800c39c:	d0e6      	beq.n	800c36c <_printf_common+0xa4>
 800c39e:	3601      	adds	r6, #1
 800c3a0:	e7d9      	b.n	800c356 <_printf_common+0x8e>
	...

0800c3a4 <_printf_i>:
 800c3a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a8:	7e0f      	ldrb	r7, [r1, #24]
 800c3aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c3ac:	2f78      	cmp	r7, #120	@ 0x78
 800c3ae:	4691      	mov	r9, r2
 800c3b0:	4680      	mov	r8, r0
 800c3b2:	460c      	mov	r4, r1
 800c3b4:	469a      	mov	sl, r3
 800c3b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c3ba:	d807      	bhi.n	800c3cc <_printf_i+0x28>
 800c3bc:	2f62      	cmp	r7, #98	@ 0x62
 800c3be:	d80a      	bhi.n	800c3d6 <_printf_i+0x32>
 800c3c0:	2f00      	cmp	r7, #0
 800c3c2:	f000 80d2 	beq.w	800c56a <_printf_i+0x1c6>
 800c3c6:	2f58      	cmp	r7, #88	@ 0x58
 800c3c8:	f000 80b9 	beq.w	800c53e <_printf_i+0x19a>
 800c3cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c3d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c3d4:	e03a      	b.n	800c44c <_printf_i+0xa8>
 800c3d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c3da:	2b15      	cmp	r3, #21
 800c3dc:	d8f6      	bhi.n	800c3cc <_printf_i+0x28>
 800c3de:	a101      	add	r1, pc, #4	@ (adr r1, 800c3e4 <_printf_i+0x40>)
 800c3e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3e4:	0800c43d 	.word	0x0800c43d
 800c3e8:	0800c451 	.word	0x0800c451
 800c3ec:	0800c3cd 	.word	0x0800c3cd
 800c3f0:	0800c3cd 	.word	0x0800c3cd
 800c3f4:	0800c3cd 	.word	0x0800c3cd
 800c3f8:	0800c3cd 	.word	0x0800c3cd
 800c3fc:	0800c451 	.word	0x0800c451
 800c400:	0800c3cd 	.word	0x0800c3cd
 800c404:	0800c3cd 	.word	0x0800c3cd
 800c408:	0800c3cd 	.word	0x0800c3cd
 800c40c:	0800c3cd 	.word	0x0800c3cd
 800c410:	0800c551 	.word	0x0800c551
 800c414:	0800c47b 	.word	0x0800c47b
 800c418:	0800c50b 	.word	0x0800c50b
 800c41c:	0800c3cd 	.word	0x0800c3cd
 800c420:	0800c3cd 	.word	0x0800c3cd
 800c424:	0800c573 	.word	0x0800c573
 800c428:	0800c3cd 	.word	0x0800c3cd
 800c42c:	0800c47b 	.word	0x0800c47b
 800c430:	0800c3cd 	.word	0x0800c3cd
 800c434:	0800c3cd 	.word	0x0800c3cd
 800c438:	0800c513 	.word	0x0800c513
 800c43c:	6833      	ldr	r3, [r6, #0]
 800c43e:	1d1a      	adds	r2, r3, #4
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	6032      	str	r2, [r6, #0]
 800c444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c448:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c44c:	2301      	movs	r3, #1
 800c44e:	e09d      	b.n	800c58c <_printf_i+0x1e8>
 800c450:	6833      	ldr	r3, [r6, #0]
 800c452:	6820      	ldr	r0, [r4, #0]
 800c454:	1d19      	adds	r1, r3, #4
 800c456:	6031      	str	r1, [r6, #0]
 800c458:	0606      	lsls	r6, r0, #24
 800c45a:	d501      	bpl.n	800c460 <_printf_i+0xbc>
 800c45c:	681d      	ldr	r5, [r3, #0]
 800c45e:	e003      	b.n	800c468 <_printf_i+0xc4>
 800c460:	0645      	lsls	r5, r0, #25
 800c462:	d5fb      	bpl.n	800c45c <_printf_i+0xb8>
 800c464:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c468:	2d00      	cmp	r5, #0
 800c46a:	da03      	bge.n	800c474 <_printf_i+0xd0>
 800c46c:	232d      	movs	r3, #45	@ 0x2d
 800c46e:	426d      	negs	r5, r5
 800c470:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c474:	4859      	ldr	r0, [pc, #356]	@ (800c5dc <_printf_i+0x238>)
 800c476:	230a      	movs	r3, #10
 800c478:	e011      	b.n	800c49e <_printf_i+0xfa>
 800c47a:	6821      	ldr	r1, [r4, #0]
 800c47c:	6833      	ldr	r3, [r6, #0]
 800c47e:	0608      	lsls	r0, r1, #24
 800c480:	f853 5b04 	ldr.w	r5, [r3], #4
 800c484:	d402      	bmi.n	800c48c <_printf_i+0xe8>
 800c486:	0649      	lsls	r1, r1, #25
 800c488:	bf48      	it	mi
 800c48a:	b2ad      	uxthmi	r5, r5
 800c48c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c48e:	4853      	ldr	r0, [pc, #332]	@ (800c5dc <_printf_i+0x238>)
 800c490:	6033      	str	r3, [r6, #0]
 800c492:	bf14      	ite	ne
 800c494:	230a      	movne	r3, #10
 800c496:	2308      	moveq	r3, #8
 800c498:	2100      	movs	r1, #0
 800c49a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c49e:	6866      	ldr	r6, [r4, #4]
 800c4a0:	60a6      	str	r6, [r4, #8]
 800c4a2:	2e00      	cmp	r6, #0
 800c4a4:	bfa2      	ittt	ge
 800c4a6:	6821      	ldrge	r1, [r4, #0]
 800c4a8:	f021 0104 	bicge.w	r1, r1, #4
 800c4ac:	6021      	strge	r1, [r4, #0]
 800c4ae:	b90d      	cbnz	r5, 800c4b4 <_printf_i+0x110>
 800c4b0:	2e00      	cmp	r6, #0
 800c4b2:	d04b      	beq.n	800c54c <_printf_i+0x1a8>
 800c4b4:	4616      	mov	r6, r2
 800c4b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c4ba:	fb03 5711 	mls	r7, r3, r1, r5
 800c4be:	5dc7      	ldrb	r7, [r0, r7]
 800c4c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c4c4:	462f      	mov	r7, r5
 800c4c6:	42bb      	cmp	r3, r7
 800c4c8:	460d      	mov	r5, r1
 800c4ca:	d9f4      	bls.n	800c4b6 <_printf_i+0x112>
 800c4cc:	2b08      	cmp	r3, #8
 800c4ce:	d10b      	bne.n	800c4e8 <_printf_i+0x144>
 800c4d0:	6823      	ldr	r3, [r4, #0]
 800c4d2:	07df      	lsls	r7, r3, #31
 800c4d4:	d508      	bpl.n	800c4e8 <_printf_i+0x144>
 800c4d6:	6923      	ldr	r3, [r4, #16]
 800c4d8:	6861      	ldr	r1, [r4, #4]
 800c4da:	4299      	cmp	r1, r3
 800c4dc:	bfde      	ittt	le
 800c4de:	2330      	movle	r3, #48	@ 0x30
 800c4e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c4e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c4e8:	1b92      	subs	r2, r2, r6
 800c4ea:	6122      	str	r2, [r4, #16]
 800c4ec:	f8cd a000 	str.w	sl, [sp]
 800c4f0:	464b      	mov	r3, r9
 800c4f2:	aa03      	add	r2, sp, #12
 800c4f4:	4621      	mov	r1, r4
 800c4f6:	4640      	mov	r0, r8
 800c4f8:	f7ff fee6 	bl	800c2c8 <_printf_common>
 800c4fc:	3001      	adds	r0, #1
 800c4fe:	d14a      	bne.n	800c596 <_printf_i+0x1f2>
 800c500:	f04f 30ff 	mov.w	r0, #4294967295
 800c504:	b004      	add	sp, #16
 800c506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c50a:	6823      	ldr	r3, [r4, #0]
 800c50c:	f043 0320 	orr.w	r3, r3, #32
 800c510:	6023      	str	r3, [r4, #0]
 800c512:	4833      	ldr	r0, [pc, #204]	@ (800c5e0 <_printf_i+0x23c>)
 800c514:	2778      	movs	r7, #120	@ 0x78
 800c516:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	6831      	ldr	r1, [r6, #0]
 800c51e:	061f      	lsls	r7, r3, #24
 800c520:	f851 5b04 	ldr.w	r5, [r1], #4
 800c524:	d402      	bmi.n	800c52c <_printf_i+0x188>
 800c526:	065f      	lsls	r7, r3, #25
 800c528:	bf48      	it	mi
 800c52a:	b2ad      	uxthmi	r5, r5
 800c52c:	6031      	str	r1, [r6, #0]
 800c52e:	07d9      	lsls	r1, r3, #31
 800c530:	bf44      	itt	mi
 800c532:	f043 0320 	orrmi.w	r3, r3, #32
 800c536:	6023      	strmi	r3, [r4, #0]
 800c538:	b11d      	cbz	r5, 800c542 <_printf_i+0x19e>
 800c53a:	2310      	movs	r3, #16
 800c53c:	e7ac      	b.n	800c498 <_printf_i+0xf4>
 800c53e:	4827      	ldr	r0, [pc, #156]	@ (800c5dc <_printf_i+0x238>)
 800c540:	e7e9      	b.n	800c516 <_printf_i+0x172>
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	f023 0320 	bic.w	r3, r3, #32
 800c548:	6023      	str	r3, [r4, #0]
 800c54a:	e7f6      	b.n	800c53a <_printf_i+0x196>
 800c54c:	4616      	mov	r6, r2
 800c54e:	e7bd      	b.n	800c4cc <_printf_i+0x128>
 800c550:	6833      	ldr	r3, [r6, #0]
 800c552:	6825      	ldr	r5, [r4, #0]
 800c554:	6961      	ldr	r1, [r4, #20]
 800c556:	1d18      	adds	r0, r3, #4
 800c558:	6030      	str	r0, [r6, #0]
 800c55a:	062e      	lsls	r6, r5, #24
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	d501      	bpl.n	800c564 <_printf_i+0x1c0>
 800c560:	6019      	str	r1, [r3, #0]
 800c562:	e002      	b.n	800c56a <_printf_i+0x1c6>
 800c564:	0668      	lsls	r0, r5, #25
 800c566:	d5fb      	bpl.n	800c560 <_printf_i+0x1bc>
 800c568:	8019      	strh	r1, [r3, #0]
 800c56a:	2300      	movs	r3, #0
 800c56c:	6123      	str	r3, [r4, #16]
 800c56e:	4616      	mov	r6, r2
 800c570:	e7bc      	b.n	800c4ec <_printf_i+0x148>
 800c572:	6833      	ldr	r3, [r6, #0]
 800c574:	1d1a      	adds	r2, r3, #4
 800c576:	6032      	str	r2, [r6, #0]
 800c578:	681e      	ldr	r6, [r3, #0]
 800c57a:	6862      	ldr	r2, [r4, #4]
 800c57c:	2100      	movs	r1, #0
 800c57e:	4630      	mov	r0, r6
 800c580:	f7f3 fe36 	bl	80001f0 <memchr>
 800c584:	b108      	cbz	r0, 800c58a <_printf_i+0x1e6>
 800c586:	1b80      	subs	r0, r0, r6
 800c588:	6060      	str	r0, [r4, #4]
 800c58a:	6863      	ldr	r3, [r4, #4]
 800c58c:	6123      	str	r3, [r4, #16]
 800c58e:	2300      	movs	r3, #0
 800c590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c594:	e7aa      	b.n	800c4ec <_printf_i+0x148>
 800c596:	6923      	ldr	r3, [r4, #16]
 800c598:	4632      	mov	r2, r6
 800c59a:	4649      	mov	r1, r9
 800c59c:	4640      	mov	r0, r8
 800c59e:	47d0      	blx	sl
 800c5a0:	3001      	adds	r0, #1
 800c5a2:	d0ad      	beq.n	800c500 <_printf_i+0x15c>
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	079b      	lsls	r3, r3, #30
 800c5a8:	d413      	bmi.n	800c5d2 <_printf_i+0x22e>
 800c5aa:	68e0      	ldr	r0, [r4, #12]
 800c5ac:	9b03      	ldr	r3, [sp, #12]
 800c5ae:	4298      	cmp	r0, r3
 800c5b0:	bfb8      	it	lt
 800c5b2:	4618      	movlt	r0, r3
 800c5b4:	e7a6      	b.n	800c504 <_printf_i+0x160>
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	4632      	mov	r2, r6
 800c5ba:	4649      	mov	r1, r9
 800c5bc:	4640      	mov	r0, r8
 800c5be:	47d0      	blx	sl
 800c5c0:	3001      	adds	r0, #1
 800c5c2:	d09d      	beq.n	800c500 <_printf_i+0x15c>
 800c5c4:	3501      	adds	r5, #1
 800c5c6:	68e3      	ldr	r3, [r4, #12]
 800c5c8:	9903      	ldr	r1, [sp, #12]
 800c5ca:	1a5b      	subs	r3, r3, r1
 800c5cc:	42ab      	cmp	r3, r5
 800c5ce:	dcf2      	bgt.n	800c5b6 <_printf_i+0x212>
 800c5d0:	e7eb      	b.n	800c5aa <_printf_i+0x206>
 800c5d2:	2500      	movs	r5, #0
 800c5d4:	f104 0619 	add.w	r6, r4, #25
 800c5d8:	e7f5      	b.n	800c5c6 <_printf_i+0x222>
 800c5da:	bf00      	nop
 800c5dc:	0800f882 	.word	0x0800f882
 800c5e0:	0800f893 	.word	0x0800f893

0800c5e4 <memmove>:
 800c5e4:	4288      	cmp	r0, r1
 800c5e6:	b510      	push	{r4, lr}
 800c5e8:	eb01 0402 	add.w	r4, r1, r2
 800c5ec:	d902      	bls.n	800c5f4 <memmove+0x10>
 800c5ee:	4284      	cmp	r4, r0
 800c5f0:	4623      	mov	r3, r4
 800c5f2:	d807      	bhi.n	800c604 <memmove+0x20>
 800c5f4:	1e43      	subs	r3, r0, #1
 800c5f6:	42a1      	cmp	r1, r4
 800c5f8:	d008      	beq.n	800c60c <memmove+0x28>
 800c5fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c602:	e7f8      	b.n	800c5f6 <memmove+0x12>
 800c604:	4402      	add	r2, r0
 800c606:	4601      	mov	r1, r0
 800c608:	428a      	cmp	r2, r1
 800c60a:	d100      	bne.n	800c60e <memmove+0x2a>
 800c60c:	bd10      	pop	{r4, pc}
 800c60e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c612:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c616:	e7f7      	b.n	800c608 <memmove+0x24>

0800c618 <_sbrk_r>:
 800c618:	b538      	push	{r3, r4, r5, lr}
 800c61a:	4d06      	ldr	r5, [pc, #24]	@ (800c634 <_sbrk_r+0x1c>)
 800c61c:	2300      	movs	r3, #0
 800c61e:	4604      	mov	r4, r0
 800c620:	4608      	mov	r0, r1
 800c622:	602b      	str	r3, [r5, #0]
 800c624:	f7f8 ffca 	bl	80055bc <_sbrk>
 800c628:	1c43      	adds	r3, r0, #1
 800c62a:	d102      	bne.n	800c632 <_sbrk_r+0x1a>
 800c62c:	682b      	ldr	r3, [r5, #0]
 800c62e:	b103      	cbz	r3, 800c632 <_sbrk_r+0x1a>
 800c630:	6023      	str	r3, [r4, #0]
 800c632:	bd38      	pop	{r3, r4, r5, pc}
 800c634:	20006168 	.word	0x20006168

0800c638 <_realloc_r>:
 800c638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c63c:	4680      	mov	r8, r0
 800c63e:	4615      	mov	r5, r2
 800c640:	460c      	mov	r4, r1
 800c642:	b921      	cbnz	r1, 800c64e <_realloc_r+0x16>
 800c644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c648:	4611      	mov	r1, r2
 800c64a:	f7ff bc59 	b.w	800bf00 <_malloc_r>
 800c64e:	b92a      	cbnz	r2, 800c65c <_realloc_r+0x24>
 800c650:	f7ff fbea 	bl	800be28 <_free_r>
 800c654:	2400      	movs	r4, #0
 800c656:	4620      	mov	r0, r4
 800c658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c65c:	f000 f81a 	bl	800c694 <_malloc_usable_size_r>
 800c660:	4285      	cmp	r5, r0
 800c662:	4606      	mov	r6, r0
 800c664:	d802      	bhi.n	800c66c <_realloc_r+0x34>
 800c666:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c66a:	d8f4      	bhi.n	800c656 <_realloc_r+0x1e>
 800c66c:	4629      	mov	r1, r5
 800c66e:	4640      	mov	r0, r8
 800c670:	f7ff fc46 	bl	800bf00 <_malloc_r>
 800c674:	4607      	mov	r7, r0
 800c676:	2800      	cmp	r0, #0
 800c678:	d0ec      	beq.n	800c654 <_realloc_r+0x1c>
 800c67a:	42b5      	cmp	r5, r6
 800c67c:	462a      	mov	r2, r5
 800c67e:	4621      	mov	r1, r4
 800c680:	bf28      	it	cs
 800c682:	4632      	movcs	r2, r6
 800c684:	f7ff fbc2 	bl	800be0c <memcpy>
 800c688:	4621      	mov	r1, r4
 800c68a:	4640      	mov	r0, r8
 800c68c:	f7ff fbcc 	bl	800be28 <_free_r>
 800c690:	463c      	mov	r4, r7
 800c692:	e7e0      	b.n	800c656 <_realloc_r+0x1e>

0800c694 <_malloc_usable_size_r>:
 800c694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c698:	1f18      	subs	r0, r3, #4
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	bfbc      	itt	lt
 800c69e:	580b      	ldrlt	r3, [r1, r0]
 800c6a0:	18c0      	addlt	r0, r0, r3
 800c6a2:	4770      	bx	lr

0800c6a4 <acos>:
 800c6a4:	b538      	push	{r3, r4, r5, lr}
 800c6a6:	ed2d 8b02 	vpush	{d8}
 800c6aa:	ec55 4b10 	vmov	r4, r5, d0
 800c6ae:	f000 fff3 	bl	800d698 <__ieee754_acos>
 800c6b2:	4622      	mov	r2, r4
 800c6b4:	462b      	mov	r3, r5
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	eeb0 8a40 	vmov.f32	s16, s0
 800c6be:	eef0 8a60 	vmov.f32	s17, s1
 800c6c2:	f7f4 fa3b 	bl	8000b3c <__aeabi_dcmpun>
 800c6c6:	b9a8      	cbnz	r0, 800c6f4 <acos+0x50>
 800c6c8:	ec45 4b10 	vmov	d0, r4, r5
 800c6cc:	f000 fadc 	bl	800cc88 <fabs>
 800c6d0:	4b0c      	ldr	r3, [pc, #48]	@ (800c704 <acos+0x60>)
 800c6d2:	ec51 0b10 	vmov	r0, r1, d0
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f7f4 fa26 	bl	8000b28 <__aeabi_dcmpgt>
 800c6dc:	b150      	cbz	r0, 800c6f4 <acos+0x50>
 800c6de:	f7ff fb69 	bl	800bdb4 <__errno>
 800c6e2:	ecbd 8b02 	vpop	{d8}
 800c6e6:	2321      	movs	r3, #33	@ 0x21
 800c6e8:	6003      	str	r3, [r0, #0]
 800c6ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6ee:	4806      	ldr	r0, [pc, #24]	@ (800c708 <acos+0x64>)
 800c6f0:	f000 bb66 	b.w	800cdc0 <nan>
 800c6f4:	eeb0 0a48 	vmov.f32	s0, s16
 800c6f8:	eef0 0a68 	vmov.f32	s1, s17
 800c6fc:	ecbd 8b02 	vpop	{d8}
 800c700:	bd38      	pop	{r3, r4, r5, pc}
 800c702:	bf00      	nop
 800c704:	3ff00000 	.word	0x3ff00000
 800c708:	0800f876 	.word	0x0800f876

0800c70c <atan2>:
 800c70c:	f001 ba20 	b.w	800db50 <__ieee754_atan2>

0800c710 <hypot>:
 800c710:	b508      	push	{r3, lr}
 800c712:	ed2d 8b06 	vpush	{d8-d10}
 800c716:	eeb0 aa40 	vmov.f32	s20, s0
 800c71a:	eef0 aa60 	vmov.f32	s21, s1
 800c71e:	eeb0 9a41 	vmov.f32	s18, s2
 800c722:	eef0 9a61 	vmov.f32	s19, s3
 800c726:	f001 fad9 	bl	800dcdc <__ieee754_hypot>
 800c72a:	eeb0 8a40 	vmov.f32	s16, s0
 800c72e:	eef0 8a60 	vmov.f32	s17, s1
 800c732:	f000 fb39 	bl	800cda8 <finite>
 800c736:	b998      	cbnz	r0, 800c760 <hypot+0x50>
 800c738:	eeb0 0a4a 	vmov.f32	s0, s20
 800c73c:	eef0 0a6a 	vmov.f32	s1, s21
 800c740:	f000 fb32 	bl	800cda8 <finite>
 800c744:	b160      	cbz	r0, 800c760 <hypot+0x50>
 800c746:	eeb0 0a49 	vmov.f32	s0, s18
 800c74a:	eef0 0a69 	vmov.f32	s1, s19
 800c74e:	f000 fb2b 	bl	800cda8 <finite>
 800c752:	b128      	cbz	r0, 800c760 <hypot+0x50>
 800c754:	f7ff fb2e 	bl	800bdb4 <__errno>
 800c758:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 800c770 <hypot+0x60>
 800c75c:	2322      	movs	r3, #34	@ 0x22
 800c75e:	6003      	str	r3, [r0, #0]
 800c760:	eeb0 0a48 	vmov.f32	s0, s16
 800c764:	eef0 0a68 	vmov.f32	s1, s17
 800c768:	ecbd 8b06 	vpop	{d8-d10}
 800c76c:	bd08      	pop	{r3, pc}
 800c76e:	bf00      	nop
 800c770:	00000000 	.word	0x00000000
 800c774:	7ff00000 	.word	0x7ff00000

0800c778 <pow>:
 800c778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c77a:	ed2d 8b02 	vpush	{d8}
 800c77e:	eeb0 8a40 	vmov.f32	s16, s0
 800c782:	eef0 8a60 	vmov.f32	s17, s1
 800c786:	ec55 4b11 	vmov	r4, r5, d1
 800c78a:	f001 fbbd 	bl	800df08 <__ieee754_pow>
 800c78e:	4622      	mov	r2, r4
 800c790:	462b      	mov	r3, r5
 800c792:	4620      	mov	r0, r4
 800c794:	4629      	mov	r1, r5
 800c796:	ec57 6b10 	vmov	r6, r7, d0
 800c79a:	f7f4 f9cf 	bl	8000b3c <__aeabi_dcmpun>
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	d13b      	bne.n	800c81a <pow+0xa2>
 800c7a2:	ec51 0b18 	vmov	r0, r1, d8
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	f7f4 f995 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7ae:	b1b8      	cbz	r0, 800c7e0 <pow+0x68>
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	4629      	mov	r1, r5
 800c7b8:	f7f4 f98e 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	d146      	bne.n	800c84e <pow+0xd6>
 800c7c0:	ec45 4b10 	vmov	d0, r4, r5
 800c7c4:	f000 faf0 	bl	800cda8 <finite>
 800c7c8:	b338      	cbz	r0, 800c81a <pow+0xa2>
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	f7f4 f98b 	bl	8000aec <__aeabi_dcmplt>
 800c7d6:	b300      	cbz	r0, 800c81a <pow+0xa2>
 800c7d8:	f7ff faec 	bl	800bdb4 <__errno>
 800c7dc:	2322      	movs	r3, #34	@ 0x22
 800c7de:	e01b      	b.n	800c818 <pow+0xa0>
 800c7e0:	ec47 6b10 	vmov	d0, r6, r7
 800c7e4:	f000 fae0 	bl	800cda8 <finite>
 800c7e8:	b9e0      	cbnz	r0, 800c824 <pow+0xac>
 800c7ea:	eeb0 0a48 	vmov.f32	s0, s16
 800c7ee:	eef0 0a68 	vmov.f32	s1, s17
 800c7f2:	f000 fad9 	bl	800cda8 <finite>
 800c7f6:	b1a8      	cbz	r0, 800c824 <pow+0xac>
 800c7f8:	ec45 4b10 	vmov	d0, r4, r5
 800c7fc:	f000 fad4 	bl	800cda8 <finite>
 800c800:	b180      	cbz	r0, 800c824 <pow+0xac>
 800c802:	4632      	mov	r2, r6
 800c804:	463b      	mov	r3, r7
 800c806:	4630      	mov	r0, r6
 800c808:	4639      	mov	r1, r7
 800c80a:	f7f4 f997 	bl	8000b3c <__aeabi_dcmpun>
 800c80e:	2800      	cmp	r0, #0
 800c810:	d0e2      	beq.n	800c7d8 <pow+0x60>
 800c812:	f7ff facf 	bl	800bdb4 <__errno>
 800c816:	2321      	movs	r3, #33	@ 0x21
 800c818:	6003      	str	r3, [r0, #0]
 800c81a:	ecbd 8b02 	vpop	{d8}
 800c81e:	ec47 6b10 	vmov	d0, r6, r7
 800c822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c824:	2200      	movs	r2, #0
 800c826:	2300      	movs	r3, #0
 800c828:	4630      	mov	r0, r6
 800c82a:	4639      	mov	r1, r7
 800c82c:	f7f4 f954 	bl	8000ad8 <__aeabi_dcmpeq>
 800c830:	2800      	cmp	r0, #0
 800c832:	d0f2      	beq.n	800c81a <pow+0xa2>
 800c834:	eeb0 0a48 	vmov.f32	s0, s16
 800c838:	eef0 0a68 	vmov.f32	s1, s17
 800c83c:	f000 fab4 	bl	800cda8 <finite>
 800c840:	2800      	cmp	r0, #0
 800c842:	d0ea      	beq.n	800c81a <pow+0xa2>
 800c844:	ec45 4b10 	vmov	d0, r4, r5
 800c848:	f000 faae 	bl	800cda8 <finite>
 800c84c:	e7c3      	b.n	800c7d6 <pow+0x5e>
 800c84e:	4f01      	ldr	r7, [pc, #4]	@ (800c854 <pow+0xdc>)
 800c850:	2600      	movs	r6, #0
 800c852:	e7e2      	b.n	800c81a <pow+0xa2>
 800c854:	3ff00000 	.word	0x3ff00000

0800c858 <sqrt>:
 800c858:	b538      	push	{r3, r4, r5, lr}
 800c85a:	ed2d 8b02 	vpush	{d8}
 800c85e:	ec55 4b10 	vmov	r4, r5, d0
 800c862:	f000 fab5 	bl	800cdd0 <__ieee754_sqrt>
 800c866:	4622      	mov	r2, r4
 800c868:	462b      	mov	r3, r5
 800c86a:	4620      	mov	r0, r4
 800c86c:	4629      	mov	r1, r5
 800c86e:	eeb0 8a40 	vmov.f32	s16, s0
 800c872:	eef0 8a60 	vmov.f32	s17, s1
 800c876:	f7f4 f961 	bl	8000b3c <__aeabi_dcmpun>
 800c87a:	b990      	cbnz	r0, 800c8a2 <sqrt+0x4a>
 800c87c:	2200      	movs	r2, #0
 800c87e:	2300      	movs	r3, #0
 800c880:	4620      	mov	r0, r4
 800c882:	4629      	mov	r1, r5
 800c884:	f7f4 f932 	bl	8000aec <__aeabi_dcmplt>
 800c888:	b158      	cbz	r0, 800c8a2 <sqrt+0x4a>
 800c88a:	f7ff fa93 	bl	800bdb4 <__errno>
 800c88e:	2321      	movs	r3, #33	@ 0x21
 800c890:	6003      	str	r3, [r0, #0]
 800c892:	2200      	movs	r2, #0
 800c894:	2300      	movs	r3, #0
 800c896:	4610      	mov	r0, r2
 800c898:	4619      	mov	r1, r3
 800c89a:	f7f3 ffdf 	bl	800085c <__aeabi_ddiv>
 800c89e:	ec41 0b18 	vmov	d8, r0, r1
 800c8a2:	eeb0 0a48 	vmov.f32	s0, s16
 800c8a6:	eef0 0a68 	vmov.f32	s1, s17
 800c8aa:	ecbd 8b02 	vpop	{d8}
 800c8ae:	bd38      	pop	{r3, r4, r5, pc}

0800c8b0 <atan>:
 800c8b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b4:	ec55 4b10 	vmov	r4, r5, d0
 800c8b8:	4bbf      	ldr	r3, [pc, #764]	@ (800cbb8 <atan+0x308>)
 800c8ba:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800c8be:	429e      	cmp	r6, r3
 800c8c0:	46ab      	mov	fp, r5
 800c8c2:	d918      	bls.n	800c8f6 <atan+0x46>
 800c8c4:	4bbd      	ldr	r3, [pc, #756]	@ (800cbbc <atan+0x30c>)
 800c8c6:	429e      	cmp	r6, r3
 800c8c8:	d801      	bhi.n	800c8ce <atan+0x1e>
 800c8ca:	d109      	bne.n	800c8e0 <atan+0x30>
 800c8cc:	b144      	cbz	r4, 800c8e0 <atan+0x30>
 800c8ce:	4622      	mov	r2, r4
 800c8d0:	462b      	mov	r3, r5
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	4629      	mov	r1, r5
 800c8d6:	f7f3 fce1 	bl	800029c <__adddf3>
 800c8da:	4604      	mov	r4, r0
 800c8dc:	460d      	mov	r5, r1
 800c8de:	e006      	b.n	800c8ee <atan+0x3e>
 800c8e0:	f1bb 0f00 	cmp.w	fp, #0
 800c8e4:	f340 812b 	ble.w	800cb3e <atan+0x28e>
 800c8e8:	a597      	add	r5, pc, #604	@ (adr r5, 800cb48 <atan+0x298>)
 800c8ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c8ee:	ec45 4b10 	vmov	d0, r4, r5
 800c8f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f6:	4bb2      	ldr	r3, [pc, #712]	@ (800cbc0 <atan+0x310>)
 800c8f8:	429e      	cmp	r6, r3
 800c8fa:	d813      	bhi.n	800c924 <atan+0x74>
 800c8fc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800c900:	429e      	cmp	r6, r3
 800c902:	d80c      	bhi.n	800c91e <atan+0x6e>
 800c904:	a392      	add	r3, pc, #584	@ (adr r3, 800cb50 <atan+0x2a0>)
 800c906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90a:	4620      	mov	r0, r4
 800c90c:	4629      	mov	r1, r5
 800c90e:	f7f3 fcc5 	bl	800029c <__adddf3>
 800c912:	4bac      	ldr	r3, [pc, #688]	@ (800cbc4 <atan+0x314>)
 800c914:	2200      	movs	r2, #0
 800c916:	f7f4 f907 	bl	8000b28 <__aeabi_dcmpgt>
 800c91a:	2800      	cmp	r0, #0
 800c91c:	d1e7      	bne.n	800c8ee <atan+0x3e>
 800c91e:	f04f 3aff 	mov.w	sl, #4294967295
 800c922:	e029      	b.n	800c978 <atan+0xc8>
 800c924:	f000 f9b0 	bl	800cc88 <fabs>
 800c928:	4ba7      	ldr	r3, [pc, #668]	@ (800cbc8 <atan+0x318>)
 800c92a:	429e      	cmp	r6, r3
 800c92c:	ec55 4b10 	vmov	r4, r5, d0
 800c930:	f200 80bc 	bhi.w	800caac <atan+0x1fc>
 800c934:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800c938:	429e      	cmp	r6, r3
 800c93a:	f200 809e 	bhi.w	800ca7a <atan+0x1ca>
 800c93e:	4622      	mov	r2, r4
 800c940:	462b      	mov	r3, r5
 800c942:	4620      	mov	r0, r4
 800c944:	4629      	mov	r1, r5
 800c946:	f7f3 fca9 	bl	800029c <__adddf3>
 800c94a:	4b9e      	ldr	r3, [pc, #632]	@ (800cbc4 <atan+0x314>)
 800c94c:	2200      	movs	r2, #0
 800c94e:	f7f3 fca3 	bl	8000298 <__aeabi_dsub>
 800c952:	2200      	movs	r2, #0
 800c954:	4606      	mov	r6, r0
 800c956:	460f      	mov	r7, r1
 800c958:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c95c:	4620      	mov	r0, r4
 800c95e:	4629      	mov	r1, r5
 800c960:	f7f3 fc9c 	bl	800029c <__adddf3>
 800c964:	4602      	mov	r2, r0
 800c966:	460b      	mov	r3, r1
 800c968:	4630      	mov	r0, r6
 800c96a:	4639      	mov	r1, r7
 800c96c:	f7f3 ff76 	bl	800085c <__aeabi_ddiv>
 800c970:	f04f 0a00 	mov.w	sl, #0
 800c974:	4604      	mov	r4, r0
 800c976:	460d      	mov	r5, r1
 800c978:	4622      	mov	r2, r4
 800c97a:	462b      	mov	r3, r5
 800c97c:	4620      	mov	r0, r4
 800c97e:	4629      	mov	r1, r5
 800c980:	f7f3 fe42 	bl	8000608 <__aeabi_dmul>
 800c984:	4602      	mov	r2, r0
 800c986:	460b      	mov	r3, r1
 800c988:	4680      	mov	r8, r0
 800c98a:	4689      	mov	r9, r1
 800c98c:	f7f3 fe3c 	bl	8000608 <__aeabi_dmul>
 800c990:	a371      	add	r3, pc, #452	@ (adr r3, 800cb58 <atan+0x2a8>)
 800c992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c996:	4606      	mov	r6, r0
 800c998:	460f      	mov	r7, r1
 800c99a:	f7f3 fe35 	bl	8000608 <__aeabi_dmul>
 800c99e:	a370      	add	r3, pc, #448	@ (adr r3, 800cb60 <atan+0x2b0>)
 800c9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a4:	f7f3 fc7a 	bl	800029c <__adddf3>
 800c9a8:	4632      	mov	r2, r6
 800c9aa:	463b      	mov	r3, r7
 800c9ac:	f7f3 fe2c 	bl	8000608 <__aeabi_dmul>
 800c9b0:	a36d      	add	r3, pc, #436	@ (adr r3, 800cb68 <atan+0x2b8>)
 800c9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b6:	f7f3 fc71 	bl	800029c <__adddf3>
 800c9ba:	4632      	mov	r2, r6
 800c9bc:	463b      	mov	r3, r7
 800c9be:	f7f3 fe23 	bl	8000608 <__aeabi_dmul>
 800c9c2:	a36b      	add	r3, pc, #428	@ (adr r3, 800cb70 <atan+0x2c0>)
 800c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c8:	f7f3 fc68 	bl	800029c <__adddf3>
 800c9cc:	4632      	mov	r2, r6
 800c9ce:	463b      	mov	r3, r7
 800c9d0:	f7f3 fe1a 	bl	8000608 <__aeabi_dmul>
 800c9d4:	a368      	add	r3, pc, #416	@ (adr r3, 800cb78 <atan+0x2c8>)
 800c9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9da:	f7f3 fc5f 	bl	800029c <__adddf3>
 800c9de:	4632      	mov	r2, r6
 800c9e0:	463b      	mov	r3, r7
 800c9e2:	f7f3 fe11 	bl	8000608 <__aeabi_dmul>
 800c9e6:	a366      	add	r3, pc, #408	@ (adr r3, 800cb80 <atan+0x2d0>)
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	f7f3 fc56 	bl	800029c <__adddf3>
 800c9f0:	4642      	mov	r2, r8
 800c9f2:	464b      	mov	r3, r9
 800c9f4:	f7f3 fe08 	bl	8000608 <__aeabi_dmul>
 800c9f8:	a363      	add	r3, pc, #396	@ (adr r3, 800cb88 <atan+0x2d8>)
 800c9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fe:	4680      	mov	r8, r0
 800ca00:	4689      	mov	r9, r1
 800ca02:	4630      	mov	r0, r6
 800ca04:	4639      	mov	r1, r7
 800ca06:	f7f3 fdff 	bl	8000608 <__aeabi_dmul>
 800ca0a:	a361      	add	r3, pc, #388	@ (adr r3, 800cb90 <atan+0x2e0>)
 800ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca10:	f7f3 fc42 	bl	8000298 <__aeabi_dsub>
 800ca14:	4632      	mov	r2, r6
 800ca16:	463b      	mov	r3, r7
 800ca18:	f7f3 fdf6 	bl	8000608 <__aeabi_dmul>
 800ca1c:	a35e      	add	r3, pc, #376	@ (adr r3, 800cb98 <atan+0x2e8>)
 800ca1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca22:	f7f3 fc39 	bl	8000298 <__aeabi_dsub>
 800ca26:	4632      	mov	r2, r6
 800ca28:	463b      	mov	r3, r7
 800ca2a:	f7f3 fded 	bl	8000608 <__aeabi_dmul>
 800ca2e:	a35c      	add	r3, pc, #368	@ (adr r3, 800cba0 <atan+0x2f0>)
 800ca30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca34:	f7f3 fc30 	bl	8000298 <__aeabi_dsub>
 800ca38:	4632      	mov	r2, r6
 800ca3a:	463b      	mov	r3, r7
 800ca3c:	f7f3 fde4 	bl	8000608 <__aeabi_dmul>
 800ca40:	a359      	add	r3, pc, #356	@ (adr r3, 800cba8 <atan+0x2f8>)
 800ca42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca46:	f7f3 fc27 	bl	8000298 <__aeabi_dsub>
 800ca4a:	4632      	mov	r2, r6
 800ca4c:	463b      	mov	r3, r7
 800ca4e:	f7f3 fddb 	bl	8000608 <__aeabi_dmul>
 800ca52:	4602      	mov	r2, r0
 800ca54:	460b      	mov	r3, r1
 800ca56:	4640      	mov	r0, r8
 800ca58:	4649      	mov	r1, r9
 800ca5a:	f7f3 fc1f 	bl	800029c <__adddf3>
 800ca5e:	4622      	mov	r2, r4
 800ca60:	462b      	mov	r3, r5
 800ca62:	f7f3 fdd1 	bl	8000608 <__aeabi_dmul>
 800ca66:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	d148      	bne.n	800cb02 <atan+0x252>
 800ca70:	4620      	mov	r0, r4
 800ca72:	4629      	mov	r1, r5
 800ca74:	f7f3 fc10 	bl	8000298 <__aeabi_dsub>
 800ca78:	e72f      	b.n	800c8da <atan+0x2a>
 800ca7a:	4b52      	ldr	r3, [pc, #328]	@ (800cbc4 <atan+0x314>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	4620      	mov	r0, r4
 800ca80:	4629      	mov	r1, r5
 800ca82:	f7f3 fc09 	bl	8000298 <__aeabi_dsub>
 800ca86:	4b4f      	ldr	r3, [pc, #316]	@ (800cbc4 <atan+0x314>)
 800ca88:	4606      	mov	r6, r0
 800ca8a:	460f      	mov	r7, r1
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	4620      	mov	r0, r4
 800ca90:	4629      	mov	r1, r5
 800ca92:	f7f3 fc03 	bl	800029c <__adddf3>
 800ca96:	4602      	mov	r2, r0
 800ca98:	460b      	mov	r3, r1
 800ca9a:	4630      	mov	r0, r6
 800ca9c:	4639      	mov	r1, r7
 800ca9e:	f7f3 fedd 	bl	800085c <__aeabi_ddiv>
 800caa2:	f04f 0a01 	mov.w	sl, #1
 800caa6:	4604      	mov	r4, r0
 800caa8:	460d      	mov	r5, r1
 800caaa:	e765      	b.n	800c978 <atan+0xc8>
 800caac:	4b47      	ldr	r3, [pc, #284]	@ (800cbcc <atan+0x31c>)
 800caae:	429e      	cmp	r6, r3
 800cab0:	d21c      	bcs.n	800caec <atan+0x23c>
 800cab2:	4b47      	ldr	r3, [pc, #284]	@ (800cbd0 <atan+0x320>)
 800cab4:	2200      	movs	r2, #0
 800cab6:	4620      	mov	r0, r4
 800cab8:	4629      	mov	r1, r5
 800caba:	f7f3 fbed 	bl	8000298 <__aeabi_dsub>
 800cabe:	4b44      	ldr	r3, [pc, #272]	@ (800cbd0 <atan+0x320>)
 800cac0:	4606      	mov	r6, r0
 800cac2:	460f      	mov	r7, r1
 800cac4:	2200      	movs	r2, #0
 800cac6:	4620      	mov	r0, r4
 800cac8:	4629      	mov	r1, r5
 800caca:	f7f3 fd9d 	bl	8000608 <__aeabi_dmul>
 800cace:	4b3d      	ldr	r3, [pc, #244]	@ (800cbc4 <atan+0x314>)
 800cad0:	2200      	movs	r2, #0
 800cad2:	f7f3 fbe3 	bl	800029c <__adddf3>
 800cad6:	4602      	mov	r2, r0
 800cad8:	460b      	mov	r3, r1
 800cada:	4630      	mov	r0, r6
 800cadc:	4639      	mov	r1, r7
 800cade:	f7f3 febd 	bl	800085c <__aeabi_ddiv>
 800cae2:	f04f 0a02 	mov.w	sl, #2
 800cae6:	4604      	mov	r4, r0
 800cae8:	460d      	mov	r5, r1
 800caea:	e745      	b.n	800c978 <atan+0xc8>
 800caec:	4622      	mov	r2, r4
 800caee:	462b      	mov	r3, r5
 800caf0:	4938      	ldr	r1, [pc, #224]	@ (800cbd4 <atan+0x324>)
 800caf2:	2000      	movs	r0, #0
 800caf4:	f7f3 feb2 	bl	800085c <__aeabi_ddiv>
 800caf8:	f04f 0a03 	mov.w	sl, #3
 800cafc:	4604      	mov	r4, r0
 800cafe:	460d      	mov	r5, r1
 800cb00:	e73a      	b.n	800c978 <atan+0xc8>
 800cb02:	4b35      	ldr	r3, [pc, #212]	@ (800cbd8 <atan+0x328>)
 800cb04:	4e35      	ldr	r6, [pc, #212]	@ (800cbdc <atan+0x32c>)
 800cb06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0e:	f7f3 fbc3 	bl	8000298 <__aeabi_dsub>
 800cb12:	4622      	mov	r2, r4
 800cb14:	462b      	mov	r3, r5
 800cb16:	f7f3 fbbf 	bl	8000298 <__aeabi_dsub>
 800cb1a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cb1e:	4602      	mov	r2, r0
 800cb20:	460b      	mov	r3, r1
 800cb22:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cb26:	f7f3 fbb7 	bl	8000298 <__aeabi_dsub>
 800cb2a:	f1bb 0f00 	cmp.w	fp, #0
 800cb2e:	4604      	mov	r4, r0
 800cb30:	460d      	mov	r5, r1
 800cb32:	f6bf aedc 	bge.w	800c8ee <atan+0x3e>
 800cb36:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cb3a:	461d      	mov	r5, r3
 800cb3c:	e6d7      	b.n	800c8ee <atan+0x3e>
 800cb3e:	a51c      	add	r5, pc, #112	@ (adr r5, 800cbb0 <atan+0x300>)
 800cb40:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb44:	e6d3      	b.n	800c8ee <atan+0x3e>
 800cb46:	bf00      	nop
 800cb48:	54442d18 	.word	0x54442d18
 800cb4c:	3ff921fb 	.word	0x3ff921fb
 800cb50:	8800759c 	.word	0x8800759c
 800cb54:	7e37e43c 	.word	0x7e37e43c
 800cb58:	e322da11 	.word	0xe322da11
 800cb5c:	3f90ad3a 	.word	0x3f90ad3a
 800cb60:	24760deb 	.word	0x24760deb
 800cb64:	3fa97b4b 	.word	0x3fa97b4b
 800cb68:	a0d03d51 	.word	0xa0d03d51
 800cb6c:	3fb10d66 	.word	0x3fb10d66
 800cb70:	c54c206e 	.word	0xc54c206e
 800cb74:	3fb745cd 	.word	0x3fb745cd
 800cb78:	920083ff 	.word	0x920083ff
 800cb7c:	3fc24924 	.word	0x3fc24924
 800cb80:	5555550d 	.word	0x5555550d
 800cb84:	3fd55555 	.word	0x3fd55555
 800cb88:	2c6a6c2f 	.word	0x2c6a6c2f
 800cb8c:	bfa2b444 	.word	0xbfa2b444
 800cb90:	52defd9a 	.word	0x52defd9a
 800cb94:	3fadde2d 	.word	0x3fadde2d
 800cb98:	af749a6d 	.word	0xaf749a6d
 800cb9c:	3fb3b0f2 	.word	0x3fb3b0f2
 800cba0:	fe231671 	.word	0xfe231671
 800cba4:	3fbc71c6 	.word	0x3fbc71c6
 800cba8:	9998ebc4 	.word	0x9998ebc4
 800cbac:	3fc99999 	.word	0x3fc99999
 800cbb0:	54442d18 	.word	0x54442d18
 800cbb4:	bff921fb 	.word	0xbff921fb
 800cbb8:	440fffff 	.word	0x440fffff
 800cbbc:	7ff00000 	.word	0x7ff00000
 800cbc0:	3fdbffff 	.word	0x3fdbffff
 800cbc4:	3ff00000 	.word	0x3ff00000
 800cbc8:	3ff2ffff 	.word	0x3ff2ffff
 800cbcc:	40038000 	.word	0x40038000
 800cbd0:	3ff80000 	.word	0x3ff80000
 800cbd4:	bff00000 	.word	0xbff00000
 800cbd8:	0800f8a8 	.word	0x0800f8a8
 800cbdc:	0800f8c8 	.word	0x0800f8c8

0800cbe0 <cos>:
 800cbe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbe2:	ec53 2b10 	vmov	r2, r3, d0
 800cbe6:	4826      	ldr	r0, [pc, #152]	@ (800cc80 <cos+0xa0>)
 800cbe8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cbec:	4281      	cmp	r1, r0
 800cbee:	d806      	bhi.n	800cbfe <cos+0x1e>
 800cbf0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800cc78 <cos+0x98>
 800cbf4:	b005      	add	sp, #20
 800cbf6:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbfa:	f000 b9c5 	b.w	800cf88 <__kernel_cos>
 800cbfe:	4821      	ldr	r0, [pc, #132]	@ (800cc84 <cos+0xa4>)
 800cc00:	4281      	cmp	r1, r0
 800cc02:	d908      	bls.n	800cc16 <cos+0x36>
 800cc04:	4610      	mov	r0, r2
 800cc06:	4619      	mov	r1, r3
 800cc08:	f7f3 fb46 	bl	8000298 <__aeabi_dsub>
 800cc0c:	ec41 0b10 	vmov	d0, r0, r1
 800cc10:	b005      	add	sp, #20
 800cc12:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc16:	4668      	mov	r0, sp
 800cc18:	f001 feba 	bl	800e990 <__ieee754_rem_pio2>
 800cc1c:	f000 0003 	and.w	r0, r0, #3
 800cc20:	2801      	cmp	r0, #1
 800cc22:	d00b      	beq.n	800cc3c <cos+0x5c>
 800cc24:	2802      	cmp	r0, #2
 800cc26:	d015      	beq.n	800cc54 <cos+0x74>
 800cc28:	b9d8      	cbnz	r0, 800cc62 <cos+0x82>
 800cc2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc2e:	ed9d 0b00 	vldr	d0, [sp]
 800cc32:	f000 f9a9 	bl	800cf88 <__kernel_cos>
 800cc36:	ec51 0b10 	vmov	r0, r1, d0
 800cc3a:	e7e7      	b.n	800cc0c <cos+0x2c>
 800cc3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc40:	ed9d 0b00 	vldr	d0, [sp]
 800cc44:	f000 fa68 	bl	800d118 <__kernel_sin>
 800cc48:	ec53 2b10 	vmov	r2, r3, d0
 800cc4c:	4610      	mov	r0, r2
 800cc4e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cc52:	e7db      	b.n	800cc0c <cos+0x2c>
 800cc54:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc58:	ed9d 0b00 	vldr	d0, [sp]
 800cc5c:	f000 f994 	bl	800cf88 <__kernel_cos>
 800cc60:	e7f2      	b.n	800cc48 <cos+0x68>
 800cc62:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc66:	ed9d 0b00 	vldr	d0, [sp]
 800cc6a:	2001      	movs	r0, #1
 800cc6c:	f000 fa54 	bl	800d118 <__kernel_sin>
 800cc70:	e7e1      	b.n	800cc36 <cos+0x56>
 800cc72:	bf00      	nop
 800cc74:	f3af 8000 	nop.w
	...
 800cc80:	3fe921fb 	.word	0x3fe921fb
 800cc84:	7fefffff 	.word	0x7fefffff

0800cc88 <fabs>:
 800cc88:	ec51 0b10 	vmov	r0, r1, d0
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cc92:	ec43 2b10 	vmov	d0, r2, r3
 800cc96:	4770      	bx	lr

0800cc98 <sin>:
 800cc98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc9a:	ec53 2b10 	vmov	r2, r3, d0
 800cc9e:	4826      	ldr	r0, [pc, #152]	@ (800cd38 <sin+0xa0>)
 800cca0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cca4:	4281      	cmp	r1, r0
 800cca6:	d807      	bhi.n	800ccb8 <sin+0x20>
 800cca8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800cd30 <sin+0x98>
 800ccac:	2000      	movs	r0, #0
 800ccae:	b005      	add	sp, #20
 800ccb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccb4:	f000 ba30 	b.w	800d118 <__kernel_sin>
 800ccb8:	4820      	ldr	r0, [pc, #128]	@ (800cd3c <sin+0xa4>)
 800ccba:	4281      	cmp	r1, r0
 800ccbc:	d908      	bls.n	800ccd0 <sin+0x38>
 800ccbe:	4610      	mov	r0, r2
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	f7f3 fae9 	bl	8000298 <__aeabi_dsub>
 800ccc6:	ec41 0b10 	vmov	d0, r0, r1
 800ccca:	b005      	add	sp, #20
 800cccc:	f85d fb04 	ldr.w	pc, [sp], #4
 800ccd0:	4668      	mov	r0, sp
 800ccd2:	f001 fe5d 	bl	800e990 <__ieee754_rem_pio2>
 800ccd6:	f000 0003 	and.w	r0, r0, #3
 800ccda:	2801      	cmp	r0, #1
 800ccdc:	d00c      	beq.n	800ccf8 <sin+0x60>
 800ccde:	2802      	cmp	r0, #2
 800cce0:	d011      	beq.n	800cd06 <sin+0x6e>
 800cce2:	b9e8      	cbnz	r0, 800cd20 <sin+0x88>
 800cce4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cce8:	ed9d 0b00 	vldr	d0, [sp]
 800ccec:	2001      	movs	r0, #1
 800ccee:	f000 fa13 	bl	800d118 <__kernel_sin>
 800ccf2:	ec51 0b10 	vmov	r0, r1, d0
 800ccf6:	e7e6      	b.n	800ccc6 <sin+0x2e>
 800ccf8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ccfc:	ed9d 0b00 	vldr	d0, [sp]
 800cd00:	f000 f942 	bl	800cf88 <__kernel_cos>
 800cd04:	e7f5      	b.n	800ccf2 <sin+0x5a>
 800cd06:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd0a:	ed9d 0b00 	vldr	d0, [sp]
 800cd0e:	2001      	movs	r0, #1
 800cd10:	f000 fa02 	bl	800d118 <__kernel_sin>
 800cd14:	ec53 2b10 	vmov	r2, r3, d0
 800cd18:	4610      	mov	r0, r2
 800cd1a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cd1e:	e7d2      	b.n	800ccc6 <sin+0x2e>
 800cd20:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd24:	ed9d 0b00 	vldr	d0, [sp]
 800cd28:	f000 f92e 	bl	800cf88 <__kernel_cos>
 800cd2c:	e7f2      	b.n	800cd14 <sin+0x7c>
 800cd2e:	bf00      	nop
	...
 800cd38:	3fe921fb 	.word	0x3fe921fb
 800cd3c:	7fefffff 	.word	0x7fefffff

0800cd40 <tan>:
 800cd40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd42:	ec53 2b10 	vmov	r2, r3, d0
 800cd46:	4816      	ldr	r0, [pc, #88]	@ (800cda0 <tan+0x60>)
 800cd48:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cd4c:	4281      	cmp	r1, r0
 800cd4e:	d807      	bhi.n	800cd60 <tan+0x20>
 800cd50:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 800cd98 <tan+0x58>
 800cd54:	2001      	movs	r0, #1
 800cd56:	b005      	add	sp, #20
 800cd58:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd5c:	f000 ba98 	b.w	800d290 <__kernel_tan>
 800cd60:	4810      	ldr	r0, [pc, #64]	@ (800cda4 <tan+0x64>)
 800cd62:	4281      	cmp	r1, r0
 800cd64:	d908      	bls.n	800cd78 <tan+0x38>
 800cd66:	4610      	mov	r0, r2
 800cd68:	4619      	mov	r1, r3
 800cd6a:	f7f3 fa95 	bl	8000298 <__aeabi_dsub>
 800cd6e:	ec41 0b10 	vmov	d0, r0, r1
 800cd72:	b005      	add	sp, #20
 800cd74:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd78:	4668      	mov	r0, sp
 800cd7a:	f001 fe09 	bl	800e990 <__ieee754_rem_pio2>
 800cd7e:	0040      	lsls	r0, r0, #1
 800cd80:	f000 0002 	and.w	r0, r0, #2
 800cd84:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd88:	ed9d 0b00 	vldr	d0, [sp]
 800cd8c:	f1c0 0001 	rsb	r0, r0, #1
 800cd90:	f000 fa7e 	bl	800d290 <__kernel_tan>
 800cd94:	e7ed      	b.n	800cd72 <tan+0x32>
 800cd96:	bf00      	nop
	...
 800cda0:	3fe921fb 	.word	0x3fe921fb
 800cda4:	7fefffff 	.word	0x7fefffff

0800cda8 <finite>:
 800cda8:	b082      	sub	sp, #8
 800cdaa:	ed8d 0b00 	vstr	d0, [sp]
 800cdae:	9801      	ldr	r0, [sp, #4]
 800cdb0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800cdb4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800cdb8:	0fc0      	lsrs	r0, r0, #31
 800cdba:	b002      	add	sp, #8
 800cdbc:	4770      	bx	lr
	...

0800cdc0 <nan>:
 800cdc0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cdc8 <nan+0x8>
 800cdc4:	4770      	bx	lr
 800cdc6:	bf00      	nop
 800cdc8:	00000000 	.word	0x00000000
 800cdcc:	7ff80000 	.word	0x7ff80000

0800cdd0 <__ieee754_sqrt>:
 800cdd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdd4:	4a68      	ldr	r2, [pc, #416]	@ (800cf78 <__ieee754_sqrt+0x1a8>)
 800cdd6:	ec55 4b10 	vmov	r4, r5, d0
 800cdda:	43aa      	bics	r2, r5
 800cddc:	462b      	mov	r3, r5
 800cdde:	4621      	mov	r1, r4
 800cde0:	d110      	bne.n	800ce04 <__ieee754_sqrt+0x34>
 800cde2:	4622      	mov	r2, r4
 800cde4:	4620      	mov	r0, r4
 800cde6:	4629      	mov	r1, r5
 800cde8:	f7f3 fc0e 	bl	8000608 <__aeabi_dmul>
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	f7f3 fa52 	bl	800029c <__adddf3>
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	460d      	mov	r5, r1
 800cdfc:	ec45 4b10 	vmov	d0, r4, r5
 800ce00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce04:	2d00      	cmp	r5, #0
 800ce06:	dc0e      	bgt.n	800ce26 <__ieee754_sqrt+0x56>
 800ce08:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ce0c:	4322      	orrs	r2, r4
 800ce0e:	d0f5      	beq.n	800cdfc <__ieee754_sqrt+0x2c>
 800ce10:	b19d      	cbz	r5, 800ce3a <__ieee754_sqrt+0x6a>
 800ce12:	4622      	mov	r2, r4
 800ce14:	4620      	mov	r0, r4
 800ce16:	4629      	mov	r1, r5
 800ce18:	f7f3 fa3e 	bl	8000298 <__aeabi_dsub>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	460b      	mov	r3, r1
 800ce20:	f7f3 fd1c 	bl	800085c <__aeabi_ddiv>
 800ce24:	e7e8      	b.n	800cdf8 <__ieee754_sqrt+0x28>
 800ce26:	152a      	asrs	r2, r5, #20
 800ce28:	d115      	bne.n	800ce56 <__ieee754_sqrt+0x86>
 800ce2a:	2000      	movs	r0, #0
 800ce2c:	e009      	b.n	800ce42 <__ieee754_sqrt+0x72>
 800ce2e:	0acb      	lsrs	r3, r1, #11
 800ce30:	3a15      	subs	r2, #21
 800ce32:	0549      	lsls	r1, r1, #21
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d0fa      	beq.n	800ce2e <__ieee754_sqrt+0x5e>
 800ce38:	e7f7      	b.n	800ce2a <__ieee754_sqrt+0x5a>
 800ce3a:	462a      	mov	r2, r5
 800ce3c:	e7fa      	b.n	800ce34 <__ieee754_sqrt+0x64>
 800ce3e:	005b      	lsls	r3, r3, #1
 800ce40:	3001      	adds	r0, #1
 800ce42:	02dc      	lsls	r4, r3, #11
 800ce44:	d5fb      	bpl.n	800ce3e <__ieee754_sqrt+0x6e>
 800ce46:	1e44      	subs	r4, r0, #1
 800ce48:	1b12      	subs	r2, r2, r4
 800ce4a:	f1c0 0420 	rsb	r4, r0, #32
 800ce4e:	fa21 f404 	lsr.w	r4, r1, r4
 800ce52:	4323      	orrs	r3, r4
 800ce54:	4081      	lsls	r1, r0
 800ce56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ce5a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ce5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ce62:	07d2      	lsls	r2, r2, #31
 800ce64:	bf5c      	itt	pl
 800ce66:	005b      	lslpl	r3, r3, #1
 800ce68:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ce6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce70:	bf58      	it	pl
 800ce72:	0049      	lslpl	r1, r1, #1
 800ce74:	2600      	movs	r6, #0
 800ce76:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ce7a:	106d      	asrs	r5, r5, #1
 800ce7c:	0049      	lsls	r1, r1, #1
 800ce7e:	2016      	movs	r0, #22
 800ce80:	4632      	mov	r2, r6
 800ce82:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ce86:	1917      	adds	r7, r2, r4
 800ce88:	429f      	cmp	r7, r3
 800ce8a:	bfde      	ittt	le
 800ce8c:	193a      	addle	r2, r7, r4
 800ce8e:	1bdb      	suble	r3, r3, r7
 800ce90:	1936      	addle	r6, r6, r4
 800ce92:	0fcf      	lsrs	r7, r1, #31
 800ce94:	3801      	subs	r0, #1
 800ce96:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ce9a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ce9e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cea2:	d1f0      	bne.n	800ce86 <__ieee754_sqrt+0xb6>
 800cea4:	4604      	mov	r4, r0
 800cea6:	2720      	movs	r7, #32
 800cea8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ceac:	429a      	cmp	r2, r3
 800ceae:	eb00 0e0c 	add.w	lr, r0, ip
 800ceb2:	db02      	blt.n	800ceba <__ieee754_sqrt+0xea>
 800ceb4:	d113      	bne.n	800cede <__ieee754_sqrt+0x10e>
 800ceb6:	458e      	cmp	lr, r1
 800ceb8:	d811      	bhi.n	800cede <__ieee754_sqrt+0x10e>
 800ceba:	f1be 0f00 	cmp.w	lr, #0
 800cebe:	eb0e 000c 	add.w	r0, lr, ip
 800cec2:	da42      	bge.n	800cf4a <__ieee754_sqrt+0x17a>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	db40      	blt.n	800cf4a <__ieee754_sqrt+0x17a>
 800cec8:	f102 0801 	add.w	r8, r2, #1
 800cecc:	1a9b      	subs	r3, r3, r2
 800cece:	458e      	cmp	lr, r1
 800ced0:	bf88      	it	hi
 800ced2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ced6:	eba1 010e 	sub.w	r1, r1, lr
 800ceda:	4464      	add	r4, ip
 800cedc:	4642      	mov	r2, r8
 800cede:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800cee2:	3f01      	subs	r7, #1
 800cee4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800cee8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ceec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cef0:	d1dc      	bne.n	800ceac <__ieee754_sqrt+0xdc>
 800cef2:	4319      	orrs	r1, r3
 800cef4:	d01b      	beq.n	800cf2e <__ieee754_sqrt+0x15e>
 800cef6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800cf7c <__ieee754_sqrt+0x1ac>
 800cefa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800cf80 <__ieee754_sqrt+0x1b0>
 800cefe:	e9da 0100 	ldrd	r0, r1, [sl]
 800cf02:	e9db 2300 	ldrd	r2, r3, [fp]
 800cf06:	f7f3 f9c7 	bl	8000298 <__aeabi_dsub>
 800cf0a:	e9da 8900 	ldrd	r8, r9, [sl]
 800cf0e:	4602      	mov	r2, r0
 800cf10:	460b      	mov	r3, r1
 800cf12:	4640      	mov	r0, r8
 800cf14:	4649      	mov	r1, r9
 800cf16:	f7f3 fdf3 	bl	8000b00 <__aeabi_dcmple>
 800cf1a:	b140      	cbz	r0, 800cf2e <__ieee754_sqrt+0x15e>
 800cf1c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cf20:	e9da 0100 	ldrd	r0, r1, [sl]
 800cf24:	e9db 2300 	ldrd	r2, r3, [fp]
 800cf28:	d111      	bne.n	800cf4e <__ieee754_sqrt+0x17e>
 800cf2a:	3601      	adds	r6, #1
 800cf2c:	463c      	mov	r4, r7
 800cf2e:	1072      	asrs	r2, r6, #1
 800cf30:	0863      	lsrs	r3, r4, #1
 800cf32:	07f1      	lsls	r1, r6, #31
 800cf34:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800cf38:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800cf3c:	bf48      	it	mi
 800cf3e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800cf42:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800cf46:	4618      	mov	r0, r3
 800cf48:	e756      	b.n	800cdf8 <__ieee754_sqrt+0x28>
 800cf4a:	4690      	mov	r8, r2
 800cf4c:	e7be      	b.n	800cecc <__ieee754_sqrt+0xfc>
 800cf4e:	f7f3 f9a5 	bl	800029c <__adddf3>
 800cf52:	e9da 8900 	ldrd	r8, r9, [sl]
 800cf56:	4602      	mov	r2, r0
 800cf58:	460b      	mov	r3, r1
 800cf5a:	4640      	mov	r0, r8
 800cf5c:	4649      	mov	r1, r9
 800cf5e:	f7f3 fdc5 	bl	8000aec <__aeabi_dcmplt>
 800cf62:	b120      	cbz	r0, 800cf6e <__ieee754_sqrt+0x19e>
 800cf64:	1ca0      	adds	r0, r4, #2
 800cf66:	bf08      	it	eq
 800cf68:	3601      	addeq	r6, #1
 800cf6a:	3402      	adds	r4, #2
 800cf6c:	e7df      	b.n	800cf2e <__ieee754_sqrt+0x15e>
 800cf6e:	1c63      	adds	r3, r4, #1
 800cf70:	f023 0401 	bic.w	r4, r3, #1
 800cf74:	e7db      	b.n	800cf2e <__ieee754_sqrt+0x15e>
 800cf76:	bf00      	nop
 800cf78:	7ff00000 	.word	0x7ff00000
 800cf7c:	20000110 	.word	0x20000110
 800cf80:	20000108 	.word	0x20000108
 800cf84:	00000000 	.word	0x00000000

0800cf88 <__kernel_cos>:
 800cf88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf8c:	ec57 6b10 	vmov	r6, r7, d0
 800cf90:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800cf94:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800cf98:	ed8d 1b00 	vstr	d1, [sp]
 800cf9c:	d206      	bcs.n	800cfac <__kernel_cos+0x24>
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	4639      	mov	r1, r7
 800cfa2:	f7f3 fde1 	bl	8000b68 <__aeabi_d2iz>
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	f000 8088 	beq.w	800d0bc <__kernel_cos+0x134>
 800cfac:	4632      	mov	r2, r6
 800cfae:	463b      	mov	r3, r7
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	4639      	mov	r1, r7
 800cfb4:	f7f3 fb28 	bl	8000608 <__aeabi_dmul>
 800cfb8:	4b51      	ldr	r3, [pc, #324]	@ (800d100 <__kernel_cos+0x178>)
 800cfba:	2200      	movs	r2, #0
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	460d      	mov	r5, r1
 800cfc0:	f7f3 fb22 	bl	8000608 <__aeabi_dmul>
 800cfc4:	a340      	add	r3, pc, #256	@ (adr r3, 800d0c8 <__kernel_cos+0x140>)
 800cfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfca:	4682      	mov	sl, r0
 800cfcc:	468b      	mov	fp, r1
 800cfce:	4620      	mov	r0, r4
 800cfd0:	4629      	mov	r1, r5
 800cfd2:	f7f3 fb19 	bl	8000608 <__aeabi_dmul>
 800cfd6:	a33e      	add	r3, pc, #248	@ (adr r3, 800d0d0 <__kernel_cos+0x148>)
 800cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfdc:	f7f3 f95e 	bl	800029c <__adddf3>
 800cfe0:	4622      	mov	r2, r4
 800cfe2:	462b      	mov	r3, r5
 800cfe4:	f7f3 fb10 	bl	8000608 <__aeabi_dmul>
 800cfe8:	a33b      	add	r3, pc, #236	@ (adr r3, 800d0d8 <__kernel_cos+0x150>)
 800cfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfee:	f7f3 f953 	bl	8000298 <__aeabi_dsub>
 800cff2:	4622      	mov	r2, r4
 800cff4:	462b      	mov	r3, r5
 800cff6:	f7f3 fb07 	bl	8000608 <__aeabi_dmul>
 800cffa:	a339      	add	r3, pc, #228	@ (adr r3, 800d0e0 <__kernel_cos+0x158>)
 800cffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d000:	f7f3 f94c 	bl	800029c <__adddf3>
 800d004:	4622      	mov	r2, r4
 800d006:	462b      	mov	r3, r5
 800d008:	f7f3 fafe 	bl	8000608 <__aeabi_dmul>
 800d00c:	a336      	add	r3, pc, #216	@ (adr r3, 800d0e8 <__kernel_cos+0x160>)
 800d00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d012:	f7f3 f941 	bl	8000298 <__aeabi_dsub>
 800d016:	4622      	mov	r2, r4
 800d018:	462b      	mov	r3, r5
 800d01a:	f7f3 faf5 	bl	8000608 <__aeabi_dmul>
 800d01e:	a334      	add	r3, pc, #208	@ (adr r3, 800d0f0 <__kernel_cos+0x168>)
 800d020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d024:	f7f3 f93a 	bl	800029c <__adddf3>
 800d028:	4622      	mov	r2, r4
 800d02a:	462b      	mov	r3, r5
 800d02c:	f7f3 faec 	bl	8000608 <__aeabi_dmul>
 800d030:	4622      	mov	r2, r4
 800d032:	462b      	mov	r3, r5
 800d034:	f7f3 fae8 	bl	8000608 <__aeabi_dmul>
 800d038:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d03c:	4604      	mov	r4, r0
 800d03e:	460d      	mov	r5, r1
 800d040:	4630      	mov	r0, r6
 800d042:	4639      	mov	r1, r7
 800d044:	f7f3 fae0 	bl	8000608 <__aeabi_dmul>
 800d048:	460b      	mov	r3, r1
 800d04a:	4602      	mov	r2, r0
 800d04c:	4629      	mov	r1, r5
 800d04e:	4620      	mov	r0, r4
 800d050:	f7f3 f922 	bl	8000298 <__aeabi_dsub>
 800d054:	4b2b      	ldr	r3, [pc, #172]	@ (800d104 <__kernel_cos+0x17c>)
 800d056:	4598      	cmp	r8, r3
 800d058:	4606      	mov	r6, r0
 800d05a:	460f      	mov	r7, r1
 800d05c:	d810      	bhi.n	800d080 <__kernel_cos+0xf8>
 800d05e:	4602      	mov	r2, r0
 800d060:	460b      	mov	r3, r1
 800d062:	4650      	mov	r0, sl
 800d064:	4659      	mov	r1, fp
 800d066:	f7f3 f917 	bl	8000298 <__aeabi_dsub>
 800d06a:	460b      	mov	r3, r1
 800d06c:	4926      	ldr	r1, [pc, #152]	@ (800d108 <__kernel_cos+0x180>)
 800d06e:	4602      	mov	r2, r0
 800d070:	2000      	movs	r0, #0
 800d072:	f7f3 f911 	bl	8000298 <__aeabi_dsub>
 800d076:	ec41 0b10 	vmov	d0, r0, r1
 800d07a:	b003      	add	sp, #12
 800d07c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d080:	4b22      	ldr	r3, [pc, #136]	@ (800d10c <__kernel_cos+0x184>)
 800d082:	4921      	ldr	r1, [pc, #132]	@ (800d108 <__kernel_cos+0x180>)
 800d084:	4598      	cmp	r8, r3
 800d086:	bf8c      	ite	hi
 800d088:	4d21      	ldrhi	r5, [pc, #132]	@ (800d110 <__kernel_cos+0x188>)
 800d08a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800d08e:	2400      	movs	r4, #0
 800d090:	4622      	mov	r2, r4
 800d092:	462b      	mov	r3, r5
 800d094:	2000      	movs	r0, #0
 800d096:	f7f3 f8ff 	bl	8000298 <__aeabi_dsub>
 800d09a:	4622      	mov	r2, r4
 800d09c:	4680      	mov	r8, r0
 800d09e:	4689      	mov	r9, r1
 800d0a0:	462b      	mov	r3, r5
 800d0a2:	4650      	mov	r0, sl
 800d0a4:	4659      	mov	r1, fp
 800d0a6:	f7f3 f8f7 	bl	8000298 <__aeabi_dsub>
 800d0aa:	4632      	mov	r2, r6
 800d0ac:	463b      	mov	r3, r7
 800d0ae:	f7f3 f8f3 	bl	8000298 <__aeabi_dsub>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	4640      	mov	r0, r8
 800d0b8:	4649      	mov	r1, r9
 800d0ba:	e7da      	b.n	800d072 <__kernel_cos+0xea>
 800d0bc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800d0f8 <__kernel_cos+0x170>
 800d0c0:	e7db      	b.n	800d07a <__kernel_cos+0xf2>
 800d0c2:	bf00      	nop
 800d0c4:	f3af 8000 	nop.w
 800d0c8:	be8838d4 	.word	0xbe8838d4
 800d0cc:	bda8fae9 	.word	0xbda8fae9
 800d0d0:	bdb4b1c4 	.word	0xbdb4b1c4
 800d0d4:	3e21ee9e 	.word	0x3e21ee9e
 800d0d8:	809c52ad 	.word	0x809c52ad
 800d0dc:	3e927e4f 	.word	0x3e927e4f
 800d0e0:	19cb1590 	.word	0x19cb1590
 800d0e4:	3efa01a0 	.word	0x3efa01a0
 800d0e8:	16c15177 	.word	0x16c15177
 800d0ec:	3f56c16c 	.word	0x3f56c16c
 800d0f0:	5555554c 	.word	0x5555554c
 800d0f4:	3fa55555 	.word	0x3fa55555
 800d0f8:	00000000 	.word	0x00000000
 800d0fc:	3ff00000 	.word	0x3ff00000
 800d100:	3fe00000 	.word	0x3fe00000
 800d104:	3fd33332 	.word	0x3fd33332
 800d108:	3ff00000 	.word	0x3ff00000
 800d10c:	3fe90000 	.word	0x3fe90000
 800d110:	3fd20000 	.word	0x3fd20000
 800d114:	00000000 	.word	0x00000000

0800d118 <__kernel_sin>:
 800d118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d11c:	ec55 4b10 	vmov	r4, r5, d0
 800d120:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d124:	b085      	sub	sp, #20
 800d126:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d12a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d12e:	4680      	mov	r8, r0
 800d130:	d205      	bcs.n	800d13e <__kernel_sin+0x26>
 800d132:	4620      	mov	r0, r4
 800d134:	4629      	mov	r1, r5
 800d136:	f7f3 fd17 	bl	8000b68 <__aeabi_d2iz>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d052      	beq.n	800d1e4 <__kernel_sin+0xcc>
 800d13e:	4622      	mov	r2, r4
 800d140:	462b      	mov	r3, r5
 800d142:	4620      	mov	r0, r4
 800d144:	4629      	mov	r1, r5
 800d146:	f7f3 fa5f 	bl	8000608 <__aeabi_dmul>
 800d14a:	4682      	mov	sl, r0
 800d14c:	468b      	mov	fp, r1
 800d14e:	4602      	mov	r2, r0
 800d150:	460b      	mov	r3, r1
 800d152:	4620      	mov	r0, r4
 800d154:	4629      	mov	r1, r5
 800d156:	f7f3 fa57 	bl	8000608 <__aeabi_dmul>
 800d15a:	a342      	add	r3, pc, #264	@ (adr r3, 800d264 <__kernel_sin+0x14c>)
 800d15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d160:	e9cd 0100 	strd	r0, r1, [sp]
 800d164:	4650      	mov	r0, sl
 800d166:	4659      	mov	r1, fp
 800d168:	f7f3 fa4e 	bl	8000608 <__aeabi_dmul>
 800d16c:	a33f      	add	r3, pc, #252	@ (adr r3, 800d26c <__kernel_sin+0x154>)
 800d16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d172:	f7f3 f891 	bl	8000298 <__aeabi_dsub>
 800d176:	4652      	mov	r2, sl
 800d178:	465b      	mov	r3, fp
 800d17a:	f7f3 fa45 	bl	8000608 <__aeabi_dmul>
 800d17e:	a33d      	add	r3, pc, #244	@ (adr r3, 800d274 <__kernel_sin+0x15c>)
 800d180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d184:	f7f3 f88a 	bl	800029c <__adddf3>
 800d188:	4652      	mov	r2, sl
 800d18a:	465b      	mov	r3, fp
 800d18c:	f7f3 fa3c 	bl	8000608 <__aeabi_dmul>
 800d190:	a33a      	add	r3, pc, #232	@ (adr r3, 800d27c <__kernel_sin+0x164>)
 800d192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d196:	f7f3 f87f 	bl	8000298 <__aeabi_dsub>
 800d19a:	4652      	mov	r2, sl
 800d19c:	465b      	mov	r3, fp
 800d19e:	f7f3 fa33 	bl	8000608 <__aeabi_dmul>
 800d1a2:	a338      	add	r3, pc, #224	@ (adr r3, 800d284 <__kernel_sin+0x16c>)
 800d1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a8:	f7f3 f878 	bl	800029c <__adddf3>
 800d1ac:	4606      	mov	r6, r0
 800d1ae:	460f      	mov	r7, r1
 800d1b0:	f1b8 0f00 	cmp.w	r8, #0
 800d1b4:	d11b      	bne.n	800d1ee <__kernel_sin+0xd6>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	4650      	mov	r0, sl
 800d1bc:	4659      	mov	r1, fp
 800d1be:	f7f3 fa23 	bl	8000608 <__aeabi_dmul>
 800d1c2:	a325      	add	r3, pc, #148	@ (adr r3, 800d258 <__kernel_sin+0x140>)
 800d1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c8:	f7f3 f866 	bl	8000298 <__aeabi_dsub>
 800d1cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1d0:	f7f3 fa1a 	bl	8000608 <__aeabi_dmul>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	4620      	mov	r0, r4
 800d1da:	4629      	mov	r1, r5
 800d1dc:	f7f3 f85e 	bl	800029c <__adddf3>
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	460d      	mov	r5, r1
 800d1e4:	ec45 4b10 	vmov	d0, r4, r5
 800d1e8:	b005      	add	sp, #20
 800d1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1f2:	4b1b      	ldr	r3, [pc, #108]	@ (800d260 <__kernel_sin+0x148>)
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f7f3 fa07 	bl	8000608 <__aeabi_dmul>
 800d1fa:	4632      	mov	r2, r6
 800d1fc:	4680      	mov	r8, r0
 800d1fe:	4689      	mov	r9, r1
 800d200:	463b      	mov	r3, r7
 800d202:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d206:	f7f3 f9ff 	bl	8000608 <__aeabi_dmul>
 800d20a:	4602      	mov	r2, r0
 800d20c:	460b      	mov	r3, r1
 800d20e:	4640      	mov	r0, r8
 800d210:	4649      	mov	r1, r9
 800d212:	f7f3 f841 	bl	8000298 <__aeabi_dsub>
 800d216:	4652      	mov	r2, sl
 800d218:	465b      	mov	r3, fp
 800d21a:	f7f3 f9f5 	bl	8000608 <__aeabi_dmul>
 800d21e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d222:	f7f3 f839 	bl	8000298 <__aeabi_dsub>
 800d226:	a30c      	add	r3, pc, #48	@ (adr r3, 800d258 <__kernel_sin+0x140>)
 800d228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22c:	4606      	mov	r6, r0
 800d22e:	460f      	mov	r7, r1
 800d230:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d234:	f7f3 f9e8 	bl	8000608 <__aeabi_dmul>
 800d238:	4602      	mov	r2, r0
 800d23a:	460b      	mov	r3, r1
 800d23c:	4630      	mov	r0, r6
 800d23e:	4639      	mov	r1, r7
 800d240:	f7f3 f82c 	bl	800029c <__adddf3>
 800d244:	4602      	mov	r2, r0
 800d246:	460b      	mov	r3, r1
 800d248:	4620      	mov	r0, r4
 800d24a:	4629      	mov	r1, r5
 800d24c:	f7f3 f824 	bl	8000298 <__aeabi_dsub>
 800d250:	e7c6      	b.n	800d1e0 <__kernel_sin+0xc8>
 800d252:	bf00      	nop
 800d254:	f3af 8000 	nop.w
 800d258:	55555549 	.word	0x55555549
 800d25c:	3fc55555 	.word	0x3fc55555
 800d260:	3fe00000 	.word	0x3fe00000
 800d264:	5acfd57c 	.word	0x5acfd57c
 800d268:	3de5d93a 	.word	0x3de5d93a
 800d26c:	8a2b9ceb 	.word	0x8a2b9ceb
 800d270:	3e5ae5e6 	.word	0x3e5ae5e6
 800d274:	57b1fe7d 	.word	0x57b1fe7d
 800d278:	3ec71de3 	.word	0x3ec71de3
 800d27c:	19c161d5 	.word	0x19c161d5
 800d280:	3f2a01a0 	.word	0x3f2a01a0
 800d284:	1110f8a6 	.word	0x1110f8a6
 800d288:	3f811111 	.word	0x3f811111
 800d28c:	00000000 	.word	0x00000000

0800d290 <__kernel_tan>:
 800d290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d294:	ec5b ab10 	vmov	sl, fp, d0
 800d298:	4bdb      	ldr	r3, [pc, #876]	@ (800d608 <__kernel_tan+0x378>)
 800d29a:	b089      	sub	sp, #36	@ 0x24
 800d29c:	f02b 4700 	bic.w	r7, fp, #2147483648	@ 0x80000000
 800d2a0:	429f      	cmp	r7, r3
 800d2a2:	ec59 8b11 	vmov	r8, r9, d1
 800d2a6:	4606      	mov	r6, r0
 800d2a8:	f8cd b008 	str.w	fp, [sp, #8]
 800d2ac:	d85d      	bhi.n	800d36a <__kernel_tan+0xda>
 800d2ae:	4650      	mov	r0, sl
 800d2b0:	4659      	mov	r1, fp
 800d2b2:	f7f3 fc59 	bl	8000b68 <__aeabi_d2iz>
 800d2b6:	4605      	mov	r5, r0
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	d17c      	bne.n	800d3b6 <__kernel_tan+0x126>
 800d2bc:	1c73      	adds	r3, r6, #1
 800d2be:	4652      	mov	r2, sl
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	433b      	orrs	r3, r7
 800d2c4:	d110      	bne.n	800d2e8 <__kernel_tan+0x58>
 800d2c6:	ec4b ab10 	vmov	d0, sl, fp
 800d2ca:	f7ff fcdd 	bl	800cc88 <fabs>
 800d2ce:	49cf      	ldr	r1, [pc, #828]	@ (800d60c <__kernel_tan+0x37c>)
 800d2d0:	ec53 2b10 	vmov	r2, r3, d0
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	f7f3 fac1 	bl	800085c <__aeabi_ddiv>
 800d2da:	4682      	mov	sl, r0
 800d2dc:	468b      	mov	fp, r1
 800d2de:	ec4b ab10 	vmov	d0, sl, fp
 800d2e2:	b009      	add	sp, #36	@ 0x24
 800d2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e8:	2e01      	cmp	r6, #1
 800d2ea:	d0f8      	beq.n	800d2de <__kernel_tan+0x4e>
 800d2ec:	4642      	mov	r2, r8
 800d2ee:	464b      	mov	r3, r9
 800d2f0:	4650      	mov	r0, sl
 800d2f2:	4659      	mov	r1, fp
 800d2f4:	f7f2 ffd2 	bl	800029c <__adddf3>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	460f      	mov	r7, r1
 800d2fe:	2000      	movs	r0, #0
 800d300:	49c3      	ldr	r1, [pc, #780]	@ (800d610 <__kernel_tan+0x380>)
 800d302:	f7f3 faab 	bl	800085c <__aeabi_ddiv>
 800d306:	e9cd 0100 	strd	r0, r1, [sp]
 800d30a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d30e:	462e      	mov	r6, r5
 800d310:	4652      	mov	r2, sl
 800d312:	462c      	mov	r4, r5
 800d314:	4630      	mov	r0, r6
 800d316:	461d      	mov	r5, r3
 800d318:	4639      	mov	r1, r7
 800d31a:	465b      	mov	r3, fp
 800d31c:	f7f2 ffbc 	bl	8000298 <__aeabi_dsub>
 800d320:	4602      	mov	r2, r0
 800d322:	460b      	mov	r3, r1
 800d324:	4640      	mov	r0, r8
 800d326:	4649      	mov	r1, r9
 800d328:	f7f2 ffb6 	bl	8000298 <__aeabi_dsub>
 800d32c:	4632      	mov	r2, r6
 800d32e:	462b      	mov	r3, r5
 800d330:	f7f3 f96a 	bl	8000608 <__aeabi_dmul>
 800d334:	4632      	mov	r2, r6
 800d336:	4682      	mov	sl, r0
 800d338:	468b      	mov	fp, r1
 800d33a:	462b      	mov	r3, r5
 800d33c:	4630      	mov	r0, r6
 800d33e:	4639      	mov	r1, r7
 800d340:	f7f3 f962 	bl	8000608 <__aeabi_dmul>
 800d344:	4bb1      	ldr	r3, [pc, #708]	@ (800d60c <__kernel_tan+0x37c>)
 800d346:	2200      	movs	r2, #0
 800d348:	f7f2 ffa8 	bl	800029c <__adddf3>
 800d34c:	4602      	mov	r2, r0
 800d34e:	460b      	mov	r3, r1
 800d350:	4650      	mov	r0, sl
 800d352:	4659      	mov	r1, fp
 800d354:	f7f2 ffa2 	bl	800029c <__adddf3>
 800d358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d35c:	f7f3 f954 	bl	8000608 <__aeabi_dmul>
 800d360:	4622      	mov	r2, r4
 800d362:	462b      	mov	r3, r5
 800d364:	f7f2 ff9a 	bl	800029c <__adddf3>
 800d368:	e7b7      	b.n	800d2da <__kernel_tan+0x4a>
 800d36a:	4baa      	ldr	r3, [pc, #680]	@ (800d614 <__kernel_tan+0x384>)
 800d36c:	429f      	cmp	r7, r3
 800d36e:	d922      	bls.n	800d3b6 <__kernel_tan+0x126>
 800d370:	9b02      	ldr	r3, [sp, #8]
 800d372:	2b00      	cmp	r3, #0
 800d374:	da05      	bge.n	800d382 <__kernel_tan+0xf2>
 800d376:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d37a:	469b      	mov	fp, r3
 800d37c:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d380:	4699      	mov	r9, r3
 800d382:	4652      	mov	r2, sl
 800d384:	465b      	mov	r3, fp
 800d386:	a182      	add	r1, pc, #520	@ (adr r1, 800d590 <__kernel_tan+0x300>)
 800d388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d38c:	f7f2 ff84 	bl	8000298 <__aeabi_dsub>
 800d390:	4642      	mov	r2, r8
 800d392:	464b      	mov	r3, r9
 800d394:	4604      	mov	r4, r0
 800d396:	460d      	mov	r5, r1
 800d398:	a17f      	add	r1, pc, #508	@ (adr r1, 800d598 <__kernel_tan+0x308>)
 800d39a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d39e:	f7f2 ff7b 	bl	8000298 <__aeabi_dsub>
 800d3a2:	4622      	mov	r2, r4
 800d3a4:	462b      	mov	r3, r5
 800d3a6:	f7f2 ff79 	bl	800029c <__adddf3>
 800d3aa:	f04f 0800 	mov.w	r8, #0
 800d3ae:	4682      	mov	sl, r0
 800d3b0:	468b      	mov	fp, r1
 800d3b2:	f04f 0900 	mov.w	r9, #0
 800d3b6:	4652      	mov	r2, sl
 800d3b8:	465b      	mov	r3, fp
 800d3ba:	4650      	mov	r0, sl
 800d3bc:	4659      	mov	r1, fp
 800d3be:	f7f3 f923 	bl	8000608 <__aeabi_dmul>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	e9cd 2300 	strd	r2, r3, [sp]
 800d3ca:	f7f3 f91d 	bl	8000608 <__aeabi_dmul>
 800d3ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3d2:	4604      	mov	r4, r0
 800d3d4:	460d      	mov	r5, r1
 800d3d6:	4650      	mov	r0, sl
 800d3d8:	4659      	mov	r1, fp
 800d3da:	f7f3 f915 	bl	8000608 <__aeabi_dmul>
 800d3de:	a370      	add	r3, pc, #448	@ (adr r3, 800d5a0 <__kernel_tan+0x310>)
 800d3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	4629      	mov	r1, r5
 800d3ec:	f7f3 f90c 	bl	8000608 <__aeabi_dmul>
 800d3f0:	a36d      	add	r3, pc, #436	@ (adr r3, 800d5a8 <__kernel_tan+0x318>)
 800d3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f6:	f7f2 ff51 	bl	800029c <__adddf3>
 800d3fa:	4622      	mov	r2, r4
 800d3fc:	462b      	mov	r3, r5
 800d3fe:	f7f3 f903 	bl	8000608 <__aeabi_dmul>
 800d402:	a36b      	add	r3, pc, #428	@ (adr r3, 800d5b0 <__kernel_tan+0x320>)
 800d404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d408:	f7f2 ff48 	bl	800029c <__adddf3>
 800d40c:	4622      	mov	r2, r4
 800d40e:	462b      	mov	r3, r5
 800d410:	f7f3 f8fa 	bl	8000608 <__aeabi_dmul>
 800d414:	a368      	add	r3, pc, #416	@ (adr r3, 800d5b8 <__kernel_tan+0x328>)
 800d416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41a:	f7f2 ff3f 	bl	800029c <__adddf3>
 800d41e:	4622      	mov	r2, r4
 800d420:	462b      	mov	r3, r5
 800d422:	f7f3 f8f1 	bl	8000608 <__aeabi_dmul>
 800d426:	a366      	add	r3, pc, #408	@ (adr r3, 800d5c0 <__kernel_tan+0x330>)
 800d428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42c:	f7f2 ff36 	bl	800029c <__adddf3>
 800d430:	4622      	mov	r2, r4
 800d432:	462b      	mov	r3, r5
 800d434:	f7f3 f8e8 	bl	8000608 <__aeabi_dmul>
 800d438:	a363      	add	r3, pc, #396	@ (adr r3, 800d5c8 <__kernel_tan+0x338>)
 800d43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43e:	f7f2 ff2d 	bl	800029c <__adddf3>
 800d442:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d446:	f7f3 f8df 	bl	8000608 <__aeabi_dmul>
 800d44a:	a361      	add	r3, pc, #388	@ (adr r3, 800d5d0 <__kernel_tan+0x340>)
 800d44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d450:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d454:	4620      	mov	r0, r4
 800d456:	4629      	mov	r1, r5
 800d458:	f7f3 f8d6 	bl	8000608 <__aeabi_dmul>
 800d45c:	a35e      	add	r3, pc, #376	@ (adr r3, 800d5d8 <__kernel_tan+0x348>)
 800d45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d462:	f7f2 ff1b 	bl	800029c <__adddf3>
 800d466:	4622      	mov	r2, r4
 800d468:	462b      	mov	r3, r5
 800d46a:	f7f3 f8cd 	bl	8000608 <__aeabi_dmul>
 800d46e:	a35c      	add	r3, pc, #368	@ (adr r3, 800d5e0 <__kernel_tan+0x350>)
 800d470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d474:	f7f2 ff12 	bl	800029c <__adddf3>
 800d478:	4622      	mov	r2, r4
 800d47a:	462b      	mov	r3, r5
 800d47c:	f7f3 f8c4 	bl	8000608 <__aeabi_dmul>
 800d480:	a359      	add	r3, pc, #356	@ (adr r3, 800d5e8 <__kernel_tan+0x358>)
 800d482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d486:	f7f2 ff09 	bl	800029c <__adddf3>
 800d48a:	4622      	mov	r2, r4
 800d48c:	462b      	mov	r3, r5
 800d48e:	f7f3 f8bb 	bl	8000608 <__aeabi_dmul>
 800d492:	a357      	add	r3, pc, #348	@ (adr r3, 800d5f0 <__kernel_tan+0x360>)
 800d494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d498:	f7f2 ff00 	bl	800029c <__adddf3>
 800d49c:	4622      	mov	r2, r4
 800d49e:	462b      	mov	r3, r5
 800d4a0:	f7f3 f8b2 	bl	8000608 <__aeabi_dmul>
 800d4a4:	a354      	add	r3, pc, #336	@ (adr r3, 800d5f8 <__kernel_tan+0x368>)
 800d4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4aa:	f7f2 fef7 	bl	800029c <__adddf3>
 800d4ae:	4602      	mov	r2, r0
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4b6:	f7f2 fef1 	bl	800029c <__adddf3>
 800d4ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4be:	f7f3 f8a3 	bl	8000608 <__aeabi_dmul>
 800d4c2:	4642      	mov	r2, r8
 800d4c4:	464b      	mov	r3, r9
 800d4c6:	f7f2 fee9 	bl	800029c <__adddf3>
 800d4ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4ce:	f7f3 f89b 	bl	8000608 <__aeabi_dmul>
 800d4d2:	4642      	mov	r2, r8
 800d4d4:	464b      	mov	r3, r9
 800d4d6:	f7f2 fee1 	bl	800029c <__adddf3>
 800d4da:	a349      	add	r3, pc, #292	@ (adr r3, 800d600 <__kernel_tan+0x370>)
 800d4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e0:	4604      	mov	r4, r0
 800d4e2:	460d      	mov	r5, r1
 800d4e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4e8:	f7f3 f88e 	bl	8000608 <__aeabi_dmul>
 800d4ec:	4622      	mov	r2, r4
 800d4ee:	462b      	mov	r3, r5
 800d4f0:	f7f2 fed4 	bl	800029c <__adddf3>
 800d4f4:	e9cd 0100 	strd	r0, r1, [sp]
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	4659      	mov	r1, fp
 800d4fe:	4650      	mov	r0, sl
 800d500:	f7f2 fecc 	bl	800029c <__adddf3>
 800d504:	4b43      	ldr	r3, [pc, #268]	@ (800d614 <__kernel_tan+0x384>)
 800d506:	429f      	cmp	r7, r3
 800d508:	4604      	mov	r4, r0
 800d50a:	460d      	mov	r5, r1
 800d50c:	f240 8084 	bls.w	800d618 <__kernel_tan+0x388>
 800d510:	4630      	mov	r0, r6
 800d512:	f7f3 f80f 	bl	8000534 <__aeabi_i2d>
 800d516:	4622      	mov	r2, r4
 800d518:	4680      	mov	r8, r0
 800d51a:	4689      	mov	r9, r1
 800d51c:	462b      	mov	r3, r5
 800d51e:	4620      	mov	r0, r4
 800d520:	4629      	mov	r1, r5
 800d522:	f7f3 f871 	bl	8000608 <__aeabi_dmul>
 800d526:	4642      	mov	r2, r8
 800d528:	4606      	mov	r6, r0
 800d52a:	460f      	mov	r7, r1
 800d52c:	464b      	mov	r3, r9
 800d52e:	4620      	mov	r0, r4
 800d530:	4629      	mov	r1, r5
 800d532:	f7f2 feb3 	bl	800029c <__adddf3>
 800d536:	4602      	mov	r2, r0
 800d538:	460b      	mov	r3, r1
 800d53a:	4630      	mov	r0, r6
 800d53c:	4639      	mov	r1, r7
 800d53e:	f7f3 f98d 	bl	800085c <__aeabi_ddiv>
 800d542:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d546:	f7f2 fea7 	bl	8000298 <__aeabi_dsub>
 800d54a:	4602      	mov	r2, r0
 800d54c:	460b      	mov	r3, r1
 800d54e:	4650      	mov	r0, sl
 800d550:	4659      	mov	r1, fp
 800d552:	f7f2 fea1 	bl	8000298 <__aeabi_dsub>
 800d556:	4602      	mov	r2, r0
 800d558:	460b      	mov	r3, r1
 800d55a:	f7f2 fe9f 	bl	800029c <__adddf3>
 800d55e:	4602      	mov	r2, r0
 800d560:	460b      	mov	r3, r1
 800d562:	4640      	mov	r0, r8
 800d564:	4649      	mov	r1, r9
 800d566:	f7f2 fe97 	bl	8000298 <__aeabi_dsub>
 800d56a:	9b02      	ldr	r3, [sp, #8]
 800d56c:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800d570:	f00a 0a02 	and.w	sl, sl, #2
 800d574:	4604      	mov	r4, r0
 800d576:	f1ca 0001 	rsb	r0, sl, #1
 800d57a:	460d      	mov	r5, r1
 800d57c:	f7f2 ffda 	bl	8000534 <__aeabi_i2d>
 800d580:	4602      	mov	r2, r0
 800d582:	460b      	mov	r3, r1
 800d584:	4620      	mov	r0, r4
 800d586:	4629      	mov	r1, r5
 800d588:	f7f3 f83e 	bl	8000608 <__aeabi_dmul>
 800d58c:	e6a5      	b.n	800d2da <__kernel_tan+0x4a>
 800d58e:	bf00      	nop
 800d590:	54442d18 	.word	0x54442d18
 800d594:	3fe921fb 	.word	0x3fe921fb
 800d598:	33145c07 	.word	0x33145c07
 800d59c:	3c81a626 	.word	0x3c81a626
 800d5a0:	74bf7ad4 	.word	0x74bf7ad4
 800d5a4:	3efb2a70 	.word	0x3efb2a70
 800d5a8:	32f0a7e9 	.word	0x32f0a7e9
 800d5ac:	3f12b80f 	.word	0x3f12b80f
 800d5b0:	1a8d1068 	.word	0x1a8d1068
 800d5b4:	3f3026f7 	.word	0x3f3026f7
 800d5b8:	fee08315 	.word	0xfee08315
 800d5bc:	3f57dbc8 	.word	0x3f57dbc8
 800d5c0:	e96e8493 	.word	0xe96e8493
 800d5c4:	3f8226e3 	.word	0x3f8226e3
 800d5c8:	1bb341fe 	.word	0x1bb341fe
 800d5cc:	3faba1ba 	.word	0x3faba1ba
 800d5d0:	db605373 	.word	0xdb605373
 800d5d4:	bef375cb 	.word	0xbef375cb
 800d5d8:	a03792a6 	.word	0xa03792a6
 800d5dc:	3f147e88 	.word	0x3f147e88
 800d5e0:	f2f26501 	.word	0xf2f26501
 800d5e4:	3f4344d8 	.word	0x3f4344d8
 800d5e8:	c9560328 	.word	0xc9560328
 800d5ec:	3f6d6d22 	.word	0x3f6d6d22
 800d5f0:	8406d637 	.word	0x8406d637
 800d5f4:	3f9664f4 	.word	0x3f9664f4
 800d5f8:	1110fe7a 	.word	0x1110fe7a
 800d5fc:	3fc11111 	.word	0x3fc11111
 800d600:	55555563 	.word	0x55555563
 800d604:	3fd55555 	.word	0x3fd55555
 800d608:	3e2fffff 	.word	0x3e2fffff
 800d60c:	3ff00000 	.word	0x3ff00000
 800d610:	bff00000 	.word	0xbff00000
 800d614:	3fe59427 	.word	0x3fe59427
 800d618:	2e01      	cmp	r6, #1
 800d61a:	d033      	beq.n	800d684 <__kernel_tan+0x3f4>
 800d61c:	f04f 0800 	mov.w	r8, #0
 800d620:	4689      	mov	r9, r1
 800d622:	4602      	mov	r2, r0
 800d624:	460b      	mov	r3, r1
 800d626:	2000      	movs	r0, #0
 800d628:	4918      	ldr	r1, [pc, #96]	@ (800d68c <__kernel_tan+0x3fc>)
 800d62a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d62e:	f7f3 f915 	bl	800085c <__aeabi_ddiv>
 800d632:	4652      	mov	r2, sl
 800d634:	460f      	mov	r7, r1
 800d636:	465b      	mov	r3, fp
 800d638:	4606      	mov	r6, r0
 800d63a:	460d      	mov	r5, r1
 800d63c:	4640      	mov	r0, r8
 800d63e:	4649      	mov	r1, r9
 800d640:	f7f2 fe2a 	bl	8000298 <__aeabi_dsub>
 800d644:	4602      	mov	r2, r0
 800d646:	460b      	mov	r3, r1
 800d648:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d64c:	f7f2 fe24 	bl	8000298 <__aeabi_dsub>
 800d650:	4642      	mov	r2, r8
 800d652:	463b      	mov	r3, r7
 800d654:	f7f2 ffd8 	bl	8000608 <__aeabi_dmul>
 800d658:	4642      	mov	r2, r8
 800d65a:	4682      	mov	sl, r0
 800d65c:	468b      	mov	fp, r1
 800d65e:	463b      	mov	r3, r7
 800d660:	4640      	mov	r0, r8
 800d662:	4649      	mov	r1, r9
 800d664:	f7f2 ffd0 	bl	8000608 <__aeabi_dmul>
 800d668:	4b09      	ldr	r3, [pc, #36]	@ (800d690 <__kernel_tan+0x400>)
 800d66a:	2200      	movs	r2, #0
 800d66c:	f7f2 fe16 	bl	800029c <__adddf3>
 800d670:	4602      	mov	r2, r0
 800d672:	460b      	mov	r3, r1
 800d674:	4650      	mov	r0, sl
 800d676:	4659      	mov	r1, fp
 800d678:	f7f2 fe10 	bl	800029c <__adddf3>
 800d67c:	4644      	mov	r4, r8
 800d67e:	4632      	mov	r2, r6
 800d680:	463b      	mov	r3, r7
 800d682:	e66b      	b.n	800d35c <__kernel_tan+0xcc>
 800d684:	4682      	mov	sl, r0
 800d686:	468b      	mov	fp, r1
 800d688:	e629      	b.n	800d2de <__kernel_tan+0x4e>
 800d68a:	bf00      	nop
 800d68c:	bff00000 	.word	0xbff00000
 800d690:	3ff00000 	.word	0x3ff00000
 800d694:	00000000 	.word	0x00000000

0800d698 <__ieee754_acos>:
 800d698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d69c:	ec55 4b10 	vmov	r4, r5, d0
 800d6a0:	49b7      	ldr	r1, [pc, #732]	@ (800d980 <__ieee754_acos+0x2e8>)
 800d6a2:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d6a6:	428b      	cmp	r3, r1
 800d6a8:	d919      	bls.n	800d6de <__ieee754_acos+0x46>
 800d6aa:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800d6ae:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800d6b2:	4323      	orrs	r3, r4
 800d6b4:	d106      	bne.n	800d6c4 <__ieee754_acos+0x2c>
 800d6b6:	2d00      	cmp	r5, #0
 800d6b8:	f340 8210 	ble.w	800dadc <__ieee754_acos+0x444>
 800d6bc:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 800d910 <__ieee754_acos+0x278>
 800d6c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c4:	4622      	mov	r2, r4
 800d6c6:	462b      	mov	r3, r5
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	4629      	mov	r1, r5
 800d6cc:	f7f2 fde4 	bl	8000298 <__aeabi_dsub>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	460b      	mov	r3, r1
 800d6d4:	f7f3 f8c2 	bl	800085c <__aeabi_ddiv>
 800d6d8:	ec41 0b10 	vmov	d0, r0, r1
 800d6dc:	e7f0      	b.n	800d6c0 <__ieee754_acos+0x28>
 800d6de:	49a9      	ldr	r1, [pc, #676]	@ (800d984 <__ieee754_acos+0x2ec>)
 800d6e0:	428b      	cmp	r3, r1
 800d6e2:	f200 8085 	bhi.w	800d7f0 <__ieee754_acos+0x158>
 800d6e6:	4aa8      	ldr	r2, [pc, #672]	@ (800d988 <__ieee754_acos+0x2f0>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	f240 81fa 	bls.w	800dae2 <__ieee754_acos+0x44a>
 800d6ee:	4622      	mov	r2, r4
 800d6f0:	462b      	mov	r3, r5
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	4629      	mov	r1, r5
 800d6f6:	f7f2 ff87 	bl	8000608 <__aeabi_dmul>
 800d6fa:	a387      	add	r3, pc, #540	@ (adr r3, 800d918 <__ieee754_acos+0x280>)
 800d6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d700:	4606      	mov	r6, r0
 800d702:	460f      	mov	r7, r1
 800d704:	f7f2 ff80 	bl	8000608 <__aeabi_dmul>
 800d708:	a385      	add	r3, pc, #532	@ (adr r3, 800d920 <__ieee754_acos+0x288>)
 800d70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70e:	f7f2 fdc5 	bl	800029c <__adddf3>
 800d712:	4632      	mov	r2, r6
 800d714:	463b      	mov	r3, r7
 800d716:	f7f2 ff77 	bl	8000608 <__aeabi_dmul>
 800d71a:	a383      	add	r3, pc, #524	@ (adr r3, 800d928 <__ieee754_acos+0x290>)
 800d71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d720:	f7f2 fdba 	bl	8000298 <__aeabi_dsub>
 800d724:	4632      	mov	r2, r6
 800d726:	463b      	mov	r3, r7
 800d728:	f7f2 ff6e 	bl	8000608 <__aeabi_dmul>
 800d72c:	a380      	add	r3, pc, #512	@ (adr r3, 800d930 <__ieee754_acos+0x298>)
 800d72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d732:	f7f2 fdb3 	bl	800029c <__adddf3>
 800d736:	4632      	mov	r2, r6
 800d738:	463b      	mov	r3, r7
 800d73a:	f7f2 ff65 	bl	8000608 <__aeabi_dmul>
 800d73e:	a37e      	add	r3, pc, #504	@ (adr r3, 800d938 <__ieee754_acos+0x2a0>)
 800d740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d744:	f7f2 fda8 	bl	8000298 <__aeabi_dsub>
 800d748:	4632      	mov	r2, r6
 800d74a:	463b      	mov	r3, r7
 800d74c:	f7f2 ff5c 	bl	8000608 <__aeabi_dmul>
 800d750:	a37b      	add	r3, pc, #492	@ (adr r3, 800d940 <__ieee754_acos+0x2a8>)
 800d752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d756:	f7f2 fda1 	bl	800029c <__adddf3>
 800d75a:	4632      	mov	r2, r6
 800d75c:	463b      	mov	r3, r7
 800d75e:	f7f2 ff53 	bl	8000608 <__aeabi_dmul>
 800d762:	a379      	add	r3, pc, #484	@ (adr r3, 800d948 <__ieee754_acos+0x2b0>)
 800d764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d768:	4680      	mov	r8, r0
 800d76a:	4689      	mov	r9, r1
 800d76c:	4630      	mov	r0, r6
 800d76e:	4639      	mov	r1, r7
 800d770:	f7f2 ff4a 	bl	8000608 <__aeabi_dmul>
 800d774:	a376      	add	r3, pc, #472	@ (adr r3, 800d950 <__ieee754_acos+0x2b8>)
 800d776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d77a:	f7f2 fd8d 	bl	8000298 <__aeabi_dsub>
 800d77e:	4632      	mov	r2, r6
 800d780:	463b      	mov	r3, r7
 800d782:	f7f2 ff41 	bl	8000608 <__aeabi_dmul>
 800d786:	a374      	add	r3, pc, #464	@ (adr r3, 800d958 <__ieee754_acos+0x2c0>)
 800d788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78c:	f7f2 fd86 	bl	800029c <__adddf3>
 800d790:	4632      	mov	r2, r6
 800d792:	463b      	mov	r3, r7
 800d794:	f7f2 ff38 	bl	8000608 <__aeabi_dmul>
 800d798:	a371      	add	r3, pc, #452	@ (adr r3, 800d960 <__ieee754_acos+0x2c8>)
 800d79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d79e:	f7f2 fd7b 	bl	8000298 <__aeabi_dsub>
 800d7a2:	4632      	mov	r2, r6
 800d7a4:	463b      	mov	r3, r7
 800d7a6:	f7f2 ff2f 	bl	8000608 <__aeabi_dmul>
 800d7aa:	4b78      	ldr	r3, [pc, #480]	@ (800d98c <__ieee754_acos+0x2f4>)
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f7f2 fd75 	bl	800029c <__adddf3>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	4640      	mov	r0, r8
 800d7b8:	4649      	mov	r1, r9
 800d7ba:	f7f3 f84f 	bl	800085c <__aeabi_ddiv>
 800d7be:	4622      	mov	r2, r4
 800d7c0:	462b      	mov	r3, r5
 800d7c2:	f7f2 ff21 	bl	8000608 <__aeabi_dmul>
 800d7c6:	4602      	mov	r2, r0
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	a167      	add	r1, pc, #412	@ (adr r1, 800d968 <__ieee754_acos+0x2d0>)
 800d7cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7d0:	f7f2 fd62 	bl	8000298 <__aeabi_dsub>
 800d7d4:	4602      	mov	r2, r0
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	4620      	mov	r0, r4
 800d7da:	4629      	mov	r1, r5
 800d7dc:	f7f2 fd5c 	bl	8000298 <__aeabi_dsub>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	a162      	add	r1, pc, #392	@ (adr r1, 800d970 <__ieee754_acos+0x2d8>)
 800d7e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7ea:	f7f2 fd55 	bl	8000298 <__aeabi_dsub>
 800d7ee:	e773      	b.n	800d6d8 <__ieee754_acos+0x40>
 800d7f0:	2d00      	cmp	r5, #0
 800d7f2:	f280 80cf 	bge.w	800d994 <__ieee754_acos+0x2fc>
 800d7f6:	4b65      	ldr	r3, [pc, #404]	@ (800d98c <__ieee754_acos+0x2f4>)
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	4629      	mov	r1, r5
 800d7fe:	f7f2 fd4d 	bl	800029c <__adddf3>
 800d802:	4b63      	ldr	r3, [pc, #396]	@ (800d990 <__ieee754_acos+0x2f8>)
 800d804:	2200      	movs	r2, #0
 800d806:	f7f2 feff 	bl	8000608 <__aeabi_dmul>
 800d80a:	a343      	add	r3, pc, #268	@ (adr r3, 800d918 <__ieee754_acos+0x280>)
 800d80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d810:	4604      	mov	r4, r0
 800d812:	460d      	mov	r5, r1
 800d814:	f7f2 fef8 	bl	8000608 <__aeabi_dmul>
 800d818:	a341      	add	r3, pc, #260	@ (adr r3, 800d920 <__ieee754_acos+0x288>)
 800d81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81e:	f7f2 fd3d 	bl	800029c <__adddf3>
 800d822:	4622      	mov	r2, r4
 800d824:	462b      	mov	r3, r5
 800d826:	f7f2 feef 	bl	8000608 <__aeabi_dmul>
 800d82a:	a33f      	add	r3, pc, #252	@ (adr r3, 800d928 <__ieee754_acos+0x290>)
 800d82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d830:	f7f2 fd32 	bl	8000298 <__aeabi_dsub>
 800d834:	4622      	mov	r2, r4
 800d836:	462b      	mov	r3, r5
 800d838:	f7f2 fee6 	bl	8000608 <__aeabi_dmul>
 800d83c:	a33c      	add	r3, pc, #240	@ (adr r3, 800d930 <__ieee754_acos+0x298>)
 800d83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d842:	f7f2 fd2b 	bl	800029c <__adddf3>
 800d846:	4622      	mov	r2, r4
 800d848:	462b      	mov	r3, r5
 800d84a:	f7f2 fedd 	bl	8000608 <__aeabi_dmul>
 800d84e:	a33a      	add	r3, pc, #232	@ (adr r3, 800d938 <__ieee754_acos+0x2a0>)
 800d850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d854:	f7f2 fd20 	bl	8000298 <__aeabi_dsub>
 800d858:	4622      	mov	r2, r4
 800d85a:	462b      	mov	r3, r5
 800d85c:	f7f2 fed4 	bl	8000608 <__aeabi_dmul>
 800d860:	a337      	add	r3, pc, #220	@ (adr r3, 800d940 <__ieee754_acos+0x2a8>)
 800d862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d866:	f7f2 fd19 	bl	800029c <__adddf3>
 800d86a:	4622      	mov	r2, r4
 800d86c:	462b      	mov	r3, r5
 800d86e:	f7f2 fecb 	bl	8000608 <__aeabi_dmul>
 800d872:	a335      	add	r3, pc, #212	@ (adr r3, 800d948 <__ieee754_acos+0x2b0>)
 800d874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d878:	4606      	mov	r6, r0
 800d87a:	460f      	mov	r7, r1
 800d87c:	4620      	mov	r0, r4
 800d87e:	4629      	mov	r1, r5
 800d880:	f7f2 fec2 	bl	8000608 <__aeabi_dmul>
 800d884:	a332      	add	r3, pc, #200	@ (adr r3, 800d950 <__ieee754_acos+0x2b8>)
 800d886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88a:	f7f2 fd05 	bl	8000298 <__aeabi_dsub>
 800d88e:	4622      	mov	r2, r4
 800d890:	462b      	mov	r3, r5
 800d892:	f7f2 feb9 	bl	8000608 <__aeabi_dmul>
 800d896:	a330      	add	r3, pc, #192	@ (adr r3, 800d958 <__ieee754_acos+0x2c0>)
 800d898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89c:	f7f2 fcfe 	bl	800029c <__adddf3>
 800d8a0:	4622      	mov	r2, r4
 800d8a2:	462b      	mov	r3, r5
 800d8a4:	f7f2 feb0 	bl	8000608 <__aeabi_dmul>
 800d8a8:	a32d      	add	r3, pc, #180	@ (adr r3, 800d960 <__ieee754_acos+0x2c8>)
 800d8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ae:	f7f2 fcf3 	bl	8000298 <__aeabi_dsub>
 800d8b2:	4622      	mov	r2, r4
 800d8b4:	462b      	mov	r3, r5
 800d8b6:	f7f2 fea7 	bl	8000608 <__aeabi_dmul>
 800d8ba:	4b34      	ldr	r3, [pc, #208]	@ (800d98c <__ieee754_acos+0x2f4>)
 800d8bc:	2200      	movs	r2, #0
 800d8be:	f7f2 fced 	bl	800029c <__adddf3>
 800d8c2:	ec45 4b10 	vmov	d0, r4, r5
 800d8c6:	4680      	mov	r8, r0
 800d8c8:	4689      	mov	r9, r1
 800d8ca:	f7ff fa81 	bl	800cdd0 <__ieee754_sqrt>
 800d8ce:	ec55 4b10 	vmov	r4, r5, d0
 800d8d2:	4642      	mov	r2, r8
 800d8d4:	464b      	mov	r3, r9
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	4639      	mov	r1, r7
 800d8da:	f7f2 ffbf 	bl	800085c <__aeabi_ddiv>
 800d8de:	4622      	mov	r2, r4
 800d8e0:	462b      	mov	r3, r5
 800d8e2:	f7f2 fe91 	bl	8000608 <__aeabi_dmul>
 800d8e6:	a320      	add	r3, pc, #128	@ (adr r3, 800d968 <__ieee754_acos+0x2d0>)
 800d8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ec:	f7f2 fcd4 	bl	8000298 <__aeabi_dsub>
 800d8f0:	4622      	mov	r2, r4
 800d8f2:	462b      	mov	r3, r5
 800d8f4:	f7f2 fcd2 	bl	800029c <__adddf3>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	f7f2 fcce 	bl	800029c <__adddf3>
 800d900:	4602      	mov	r2, r0
 800d902:	460b      	mov	r3, r1
 800d904:	a11c      	add	r1, pc, #112	@ (adr r1, 800d978 <__ieee754_acos+0x2e0>)
 800d906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d90a:	e76e      	b.n	800d7ea <__ieee754_acos+0x152>
 800d90c:	f3af 8000 	nop.w
	...
 800d918:	0dfdf709 	.word	0x0dfdf709
 800d91c:	3f023de1 	.word	0x3f023de1
 800d920:	7501b288 	.word	0x7501b288
 800d924:	3f49efe0 	.word	0x3f49efe0
 800d928:	b5688f3b 	.word	0xb5688f3b
 800d92c:	3fa48228 	.word	0x3fa48228
 800d930:	0e884455 	.word	0x0e884455
 800d934:	3fc9c155 	.word	0x3fc9c155
 800d938:	03eb6f7d 	.word	0x03eb6f7d
 800d93c:	3fd4d612 	.word	0x3fd4d612
 800d940:	55555555 	.word	0x55555555
 800d944:	3fc55555 	.word	0x3fc55555
 800d948:	b12e9282 	.word	0xb12e9282
 800d94c:	3fb3b8c5 	.word	0x3fb3b8c5
 800d950:	1b8d0159 	.word	0x1b8d0159
 800d954:	3fe6066c 	.word	0x3fe6066c
 800d958:	9c598ac8 	.word	0x9c598ac8
 800d95c:	40002ae5 	.word	0x40002ae5
 800d960:	1c8a2d4b 	.word	0x1c8a2d4b
 800d964:	40033a27 	.word	0x40033a27
 800d968:	33145c07 	.word	0x33145c07
 800d96c:	3c91a626 	.word	0x3c91a626
 800d970:	54442d18 	.word	0x54442d18
 800d974:	3ff921fb 	.word	0x3ff921fb
 800d978:	54442d18 	.word	0x54442d18
 800d97c:	400921fb 	.word	0x400921fb
 800d980:	3fefffff 	.word	0x3fefffff
 800d984:	3fdfffff 	.word	0x3fdfffff
 800d988:	3c600000 	.word	0x3c600000
 800d98c:	3ff00000 	.word	0x3ff00000
 800d990:	3fe00000 	.word	0x3fe00000
 800d994:	4622      	mov	r2, r4
 800d996:	462b      	mov	r3, r5
 800d998:	496b      	ldr	r1, [pc, #428]	@ (800db48 <__ieee754_acos+0x4b0>)
 800d99a:	2000      	movs	r0, #0
 800d99c:	f7f2 fc7c 	bl	8000298 <__aeabi_dsub>
 800d9a0:	4b6a      	ldr	r3, [pc, #424]	@ (800db4c <__ieee754_acos+0x4b4>)
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	f7f2 fe30 	bl	8000608 <__aeabi_dmul>
 800d9a8:	4604      	mov	r4, r0
 800d9aa:	460d      	mov	r5, r1
 800d9ac:	ec45 4b10 	vmov	d0, r4, r5
 800d9b0:	f7ff fa0e 	bl	800cdd0 <__ieee754_sqrt>
 800d9b4:	a34c      	add	r3, pc, #304	@ (adr r3, 800dae8 <__ieee754_acos+0x450>)
 800d9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	4629      	mov	r1, r5
 800d9be:	ec59 8b10 	vmov	r8, r9, d0
 800d9c2:	f7f2 fe21 	bl	8000608 <__aeabi_dmul>
 800d9c6:	a34a      	add	r3, pc, #296	@ (adr r3, 800daf0 <__ieee754_acos+0x458>)
 800d9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9cc:	f7f2 fc66 	bl	800029c <__adddf3>
 800d9d0:	4622      	mov	r2, r4
 800d9d2:	462b      	mov	r3, r5
 800d9d4:	f7f2 fe18 	bl	8000608 <__aeabi_dmul>
 800d9d8:	a347      	add	r3, pc, #284	@ (adr r3, 800daf8 <__ieee754_acos+0x460>)
 800d9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9de:	f7f2 fc5b 	bl	8000298 <__aeabi_dsub>
 800d9e2:	4622      	mov	r2, r4
 800d9e4:	462b      	mov	r3, r5
 800d9e6:	f7f2 fe0f 	bl	8000608 <__aeabi_dmul>
 800d9ea:	a345      	add	r3, pc, #276	@ (adr r3, 800db00 <__ieee754_acos+0x468>)
 800d9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f0:	f7f2 fc54 	bl	800029c <__adddf3>
 800d9f4:	4622      	mov	r2, r4
 800d9f6:	462b      	mov	r3, r5
 800d9f8:	f7f2 fe06 	bl	8000608 <__aeabi_dmul>
 800d9fc:	a342      	add	r3, pc, #264	@ (adr r3, 800db08 <__ieee754_acos+0x470>)
 800d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da02:	f7f2 fc49 	bl	8000298 <__aeabi_dsub>
 800da06:	4622      	mov	r2, r4
 800da08:	462b      	mov	r3, r5
 800da0a:	f7f2 fdfd 	bl	8000608 <__aeabi_dmul>
 800da0e:	a340      	add	r3, pc, #256	@ (adr r3, 800db10 <__ieee754_acos+0x478>)
 800da10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da14:	f7f2 fc42 	bl	800029c <__adddf3>
 800da18:	4622      	mov	r2, r4
 800da1a:	462b      	mov	r3, r5
 800da1c:	f7f2 fdf4 	bl	8000608 <__aeabi_dmul>
 800da20:	a33d      	add	r3, pc, #244	@ (adr r3, 800db18 <__ieee754_acos+0x480>)
 800da22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da26:	4682      	mov	sl, r0
 800da28:	468b      	mov	fp, r1
 800da2a:	4620      	mov	r0, r4
 800da2c:	4629      	mov	r1, r5
 800da2e:	f7f2 fdeb 	bl	8000608 <__aeabi_dmul>
 800da32:	a33b      	add	r3, pc, #236	@ (adr r3, 800db20 <__ieee754_acos+0x488>)
 800da34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da38:	f7f2 fc2e 	bl	8000298 <__aeabi_dsub>
 800da3c:	4622      	mov	r2, r4
 800da3e:	462b      	mov	r3, r5
 800da40:	f7f2 fde2 	bl	8000608 <__aeabi_dmul>
 800da44:	a338      	add	r3, pc, #224	@ (adr r3, 800db28 <__ieee754_acos+0x490>)
 800da46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4a:	f7f2 fc27 	bl	800029c <__adddf3>
 800da4e:	4622      	mov	r2, r4
 800da50:	462b      	mov	r3, r5
 800da52:	f7f2 fdd9 	bl	8000608 <__aeabi_dmul>
 800da56:	a336      	add	r3, pc, #216	@ (adr r3, 800db30 <__ieee754_acos+0x498>)
 800da58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5c:	f7f2 fc1c 	bl	8000298 <__aeabi_dsub>
 800da60:	4622      	mov	r2, r4
 800da62:	462b      	mov	r3, r5
 800da64:	f7f2 fdd0 	bl	8000608 <__aeabi_dmul>
 800da68:	4b37      	ldr	r3, [pc, #220]	@ (800db48 <__ieee754_acos+0x4b0>)
 800da6a:	2200      	movs	r2, #0
 800da6c:	f7f2 fc16 	bl	800029c <__adddf3>
 800da70:	4602      	mov	r2, r0
 800da72:	460b      	mov	r3, r1
 800da74:	4650      	mov	r0, sl
 800da76:	4659      	mov	r1, fp
 800da78:	f7f2 fef0 	bl	800085c <__aeabi_ddiv>
 800da7c:	4642      	mov	r2, r8
 800da7e:	464b      	mov	r3, r9
 800da80:	f7f2 fdc2 	bl	8000608 <__aeabi_dmul>
 800da84:	2600      	movs	r6, #0
 800da86:	4682      	mov	sl, r0
 800da88:	468b      	mov	fp, r1
 800da8a:	4632      	mov	r2, r6
 800da8c:	464b      	mov	r3, r9
 800da8e:	4630      	mov	r0, r6
 800da90:	4649      	mov	r1, r9
 800da92:	f7f2 fdb9 	bl	8000608 <__aeabi_dmul>
 800da96:	4602      	mov	r2, r0
 800da98:	460b      	mov	r3, r1
 800da9a:	4620      	mov	r0, r4
 800da9c:	4629      	mov	r1, r5
 800da9e:	f7f2 fbfb 	bl	8000298 <__aeabi_dsub>
 800daa2:	4632      	mov	r2, r6
 800daa4:	4604      	mov	r4, r0
 800daa6:	460d      	mov	r5, r1
 800daa8:	464b      	mov	r3, r9
 800daaa:	4640      	mov	r0, r8
 800daac:	4649      	mov	r1, r9
 800daae:	f7f2 fbf5 	bl	800029c <__adddf3>
 800dab2:	4602      	mov	r2, r0
 800dab4:	460b      	mov	r3, r1
 800dab6:	4620      	mov	r0, r4
 800dab8:	4629      	mov	r1, r5
 800daba:	f7f2 fecf 	bl	800085c <__aeabi_ddiv>
 800dabe:	4602      	mov	r2, r0
 800dac0:	460b      	mov	r3, r1
 800dac2:	4650      	mov	r0, sl
 800dac4:	4659      	mov	r1, fp
 800dac6:	f7f2 fbe9 	bl	800029c <__adddf3>
 800daca:	4632      	mov	r2, r6
 800dacc:	464b      	mov	r3, r9
 800dace:	f7f2 fbe5 	bl	800029c <__adddf3>
 800dad2:	4602      	mov	r2, r0
 800dad4:	460b      	mov	r3, r1
 800dad6:	f7f2 fbe1 	bl	800029c <__adddf3>
 800dada:	e5fd      	b.n	800d6d8 <__ieee754_acos+0x40>
 800dadc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800db38 <__ieee754_acos+0x4a0>
 800dae0:	e5ee      	b.n	800d6c0 <__ieee754_acos+0x28>
 800dae2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800db40 <__ieee754_acos+0x4a8>
 800dae6:	e5eb      	b.n	800d6c0 <__ieee754_acos+0x28>
 800dae8:	0dfdf709 	.word	0x0dfdf709
 800daec:	3f023de1 	.word	0x3f023de1
 800daf0:	7501b288 	.word	0x7501b288
 800daf4:	3f49efe0 	.word	0x3f49efe0
 800daf8:	b5688f3b 	.word	0xb5688f3b
 800dafc:	3fa48228 	.word	0x3fa48228
 800db00:	0e884455 	.word	0x0e884455
 800db04:	3fc9c155 	.word	0x3fc9c155
 800db08:	03eb6f7d 	.word	0x03eb6f7d
 800db0c:	3fd4d612 	.word	0x3fd4d612
 800db10:	55555555 	.word	0x55555555
 800db14:	3fc55555 	.word	0x3fc55555
 800db18:	b12e9282 	.word	0xb12e9282
 800db1c:	3fb3b8c5 	.word	0x3fb3b8c5
 800db20:	1b8d0159 	.word	0x1b8d0159
 800db24:	3fe6066c 	.word	0x3fe6066c
 800db28:	9c598ac8 	.word	0x9c598ac8
 800db2c:	40002ae5 	.word	0x40002ae5
 800db30:	1c8a2d4b 	.word	0x1c8a2d4b
 800db34:	40033a27 	.word	0x40033a27
 800db38:	54442d18 	.word	0x54442d18
 800db3c:	400921fb 	.word	0x400921fb
 800db40:	54442d18 	.word	0x54442d18
 800db44:	3ff921fb 	.word	0x3ff921fb
 800db48:	3ff00000 	.word	0x3ff00000
 800db4c:	3fe00000 	.word	0x3fe00000

0800db50 <__ieee754_atan2>:
 800db50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db54:	ec57 6b11 	vmov	r6, r7, d1
 800db58:	4273      	negs	r3, r6
 800db5a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800dcd8 <__ieee754_atan2+0x188>
 800db5e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800db62:	4333      	orrs	r3, r6
 800db64:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800db68:	4543      	cmp	r3, r8
 800db6a:	ec51 0b10 	vmov	r0, r1, d0
 800db6e:	4635      	mov	r5, r6
 800db70:	d809      	bhi.n	800db86 <__ieee754_atan2+0x36>
 800db72:	4244      	negs	r4, r0
 800db74:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800db78:	4304      	orrs	r4, r0
 800db7a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800db7e:	4544      	cmp	r4, r8
 800db80:	468e      	mov	lr, r1
 800db82:	4681      	mov	r9, r0
 800db84:	d907      	bls.n	800db96 <__ieee754_atan2+0x46>
 800db86:	4632      	mov	r2, r6
 800db88:	463b      	mov	r3, r7
 800db8a:	f7f2 fb87 	bl	800029c <__adddf3>
 800db8e:	ec41 0b10 	vmov	d0, r0, r1
 800db92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db96:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800db9a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800db9e:	4334      	orrs	r4, r6
 800dba0:	d103      	bne.n	800dbaa <__ieee754_atan2+0x5a>
 800dba2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dba6:	f7fe be83 	b.w	800c8b0 <atan>
 800dbaa:	17bc      	asrs	r4, r7, #30
 800dbac:	f004 0402 	and.w	r4, r4, #2
 800dbb0:	ea53 0909 	orrs.w	r9, r3, r9
 800dbb4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800dbb8:	d107      	bne.n	800dbca <__ieee754_atan2+0x7a>
 800dbba:	2c02      	cmp	r4, #2
 800dbbc:	d05f      	beq.n	800dc7e <__ieee754_atan2+0x12e>
 800dbbe:	2c03      	cmp	r4, #3
 800dbc0:	d1e5      	bne.n	800db8e <__ieee754_atan2+0x3e>
 800dbc2:	a141      	add	r1, pc, #260	@ (adr r1, 800dcc8 <__ieee754_atan2+0x178>)
 800dbc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbc8:	e7e1      	b.n	800db8e <__ieee754_atan2+0x3e>
 800dbca:	4315      	orrs	r5, r2
 800dbcc:	d106      	bne.n	800dbdc <__ieee754_atan2+0x8c>
 800dbce:	f1be 0f00 	cmp.w	lr, #0
 800dbd2:	da5f      	bge.n	800dc94 <__ieee754_atan2+0x144>
 800dbd4:	a13e      	add	r1, pc, #248	@ (adr r1, 800dcd0 <__ieee754_atan2+0x180>)
 800dbd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbda:	e7d8      	b.n	800db8e <__ieee754_atan2+0x3e>
 800dbdc:	4542      	cmp	r2, r8
 800dbde:	d10f      	bne.n	800dc00 <__ieee754_atan2+0xb0>
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	f104 34ff 	add.w	r4, r4, #4294967295
 800dbe6:	d107      	bne.n	800dbf8 <__ieee754_atan2+0xa8>
 800dbe8:	2c02      	cmp	r4, #2
 800dbea:	d84c      	bhi.n	800dc86 <__ieee754_atan2+0x136>
 800dbec:	4b34      	ldr	r3, [pc, #208]	@ (800dcc0 <__ieee754_atan2+0x170>)
 800dbee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dbf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dbf6:	e7ca      	b.n	800db8e <__ieee754_atan2+0x3e>
 800dbf8:	2c02      	cmp	r4, #2
 800dbfa:	d848      	bhi.n	800dc8e <__ieee754_atan2+0x13e>
 800dbfc:	4b31      	ldr	r3, [pc, #196]	@ (800dcc4 <__ieee754_atan2+0x174>)
 800dbfe:	e7f6      	b.n	800dbee <__ieee754_atan2+0x9e>
 800dc00:	4543      	cmp	r3, r8
 800dc02:	d0e4      	beq.n	800dbce <__ieee754_atan2+0x7e>
 800dc04:	1a9b      	subs	r3, r3, r2
 800dc06:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800dc0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dc0e:	da1e      	bge.n	800dc4e <__ieee754_atan2+0xfe>
 800dc10:	2f00      	cmp	r7, #0
 800dc12:	da01      	bge.n	800dc18 <__ieee754_atan2+0xc8>
 800dc14:	323c      	adds	r2, #60	@ 0x3c
 800dc16:	db1e      	blt.n	800dc56 <__ieee754_atan2+0x106>
 800dc18:	4632      	mov	r2, r6
 800dc1a:	463b      	mov	r3, r7
 800dc1c:	f7f2 fe1e 	bl	800085c <__aeabi_ddiv>
 800dc20:	ec41 0b10 	vmov	d0, r0, r1
 800dc24:	f7ff f830 	bl	800cc88 <fabs>
 800dc28:	f7fe fe42 	bl	800c8b0 <atan>
 800dc2c:	ec51 0b10 	vmov	r0, r1, d0
 800dc30:	2c01      	cmp	r4, #1
 800dc32:	d013      	beq.n	800dc5c <__ieee754_atan2+0x10c>
 800dc34:	2c02      	cmp	r4, #2
 800dc36:	d015      	beq.n	800dc64 <__ieee754_atan2+0x114>
 800dc38:	2c00      	cmp	r4, #0
 800dc3a:	d0a8      	beq.n	800db8e <__ieee754_atan2+0x3e>
 800dc3c:	a318      	add	r3, pc, #96	@ (adr r3, 800dca0 <__ieee754_atan2+0x150>)
 800dc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc42:	f7f2 fb29 	bl	8000298 <__aeabi_dsub>
 800dc46:	a318      	add	r3, pc, #96	@ (adr r3, 800dca8 <__ieee754_atan2+0x158>)
 800dc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4c:	e014      	b.n	800dc78 <__ieee754_atan2+0x128>
 800dc4e:	a118      	add	r1, pc, #96	@ (adr r1, 800dcb0 <__ieee754_atan2+0x160>)
 800dc50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc54:	e7ec      	b.n	800dc30 <__ieee754_atan2+0xe0>
 800dc56:	2000      	movs	r0, #0
 800dc58:	2100      	movs	r1, #0
 800dc5a:	e7e9      	b.n	800dc30 <__ieee754_atan2+0xe0>
 800dc5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dc60:	4619      	mov	r1, r3
 800dc62:	e794      	b.n	800db8e <__ieee754_atan2+0x3e>
 800dc64:	a30e      	add	r3, pc, #56	@ (adr r3, 800dca0 <__ieee754_atan2+0x150>)
 800dc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6a:	f7f2 fb15 	bl	8000298 <__aeabi_dsub>
 800dc6e:	4602      	mov	r2, r0
 800dc70:	460b      	mov	r3, r1
 800dc72:	a10d      	add	r1, pc, #52	@ (adr r1, 800dca8 <__ieee754_atan2+0x158>)
 800dc74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc78:	f7f2 fb0e 	bl	8000298 <__aeabi_dsub>
 800dc7c:	e787      	b.n	800db8e <__ieee754_atan2+0x3e>
 800dc7e:	a10a      	add	r1, pc, #40	@ (adr r1, 800dca8 <__ieee754_atan2+0x158>)
 800dc80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc84:	e783      	b.n	800db8e <__ieee754_atan2+0x3e>
 800dc86:	a10c      	add	r1, pc, #48	@ (adr r1, 800dcb8 <__ieee754_atan2+0x168>)
 800dc88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc8c:	e77f      	b.n	800db8e <__ieee754_atan2+0x3e>
 800dc8e:	2000      	movs	r0, #0
 800dc90:	2100      	movs	r1, #0
 800dc92:	e77c      	b.n	800db8e <__ieee754_atan2+0x3e>
 800dc94:	a106      	add	r1, pc, #24	@ (adr r1, 800dcb0 <__ieee754_atan2+0x160>)
 800dc96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc9a:	e778      	b.n	800db8e <__ieee754_atan2+0x3e>
 800dc9c:	f3af 8000 	nop.w
 800dca0:	33145c07 	.word	0x33145c07
 800dca4:	3ca1a626 	.word	0x3ca1a626
 800dca8:	54442d18 	.word	0x54442d18
 800dcac:	400921fb 	.word	0x400921fb
 800dcb0:	54442d18 	.word	0x54442d18
 800dcb4:	3ff921fb 	.word	0x3ff921fb
 800dcb8:	54442d18 	.word	0x54442d18
 800dcbc:	3fe921fb 	.word	0x3fe921fb
 800dcc0:	0800f900 	.word	0x0800f900
 800dcc4:	0800f8e8 	.word	0x0800f8e8
 800dcc8:	54442d18 	.word	0x54442d18
 800dccc:	c00921fb 	.word	0xc00921fb
 800dcd0:	54442d18 	.word	0x54442d18
 800dcd4:	bff921fb 	.word	0xbff921fb
 800dcd8:	7ff00000 	.word	0x7ff00000

0800dcdc <__ieee754_hypot>:
 800dcdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce0:	ec51 0b10 	vmov	r0, r1, d0
 800dce4:	ec53 2b11 	vmov	r2, r3, d1
 800dce8:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 800dcec:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800dcf0:	42a5      	cmp	r5, r4
 800dcf2:	b087      	sub	sp, #28
 800dcf4:	da05      	bge.n	800dd02 <__ieee754_hypot+0x26>
 800dcf6:	462e      	mov	r6, r5
 800dcf8:	4625      	mov	r5, r4
 800dcfa:	4634      	mov	r4, r6
 800dcfc:	4606      	mov	r6, r0
 800dcfe:	4610      	mov	r0, r2
 800dd00:	4632      	mov	r2, r6
 800dd02:	1b2b      	subs	r3, r5, r4
 800dd04:	f1b3 7f70 	cmp.w	r3, #62914560	@ 0x3c00000
 800dd08:	4629      	mov	r1, r5
 800dd0a:	4682      	mov	sl, r0
 800dd0c:	46ab      	mov	fp, r5
 800dd0e:	4616      	mov	r6, r2
 800dd10:	4627      	mov	r7, r4
 800dd12:	dd05      	ble.n	800dd20 <__ieee754_hypot+0x44>
 800dd14:	4623      	mov	r3, r4
 800dd16:	f7f2 fac1 	bl	800029c <__adddf3>
 800dd1a:	4682      	mov	sl, r0
 800dd1c:	468b      	mov	fp, r1
 800dd1e:	e016      	b.n	800dd4e <__ieee754_hypot+0x72>
 800dd20:	4b75      	ldr	r3, [pc, #468]	@ (800def8 <__ieee754_hypot+0x21c>)
 800dd22:	429d      	cmp	r5, r3
 800dd24:	f340 8096 	ble.w	800de54 <__ieee754_hypot+0x178>
 800dd28:	4b74      	ldr	r3, [pc, #464]	@ (800defc <__ieee754_hypot+0x220>)
 800dd2a:	429d      	cmp	r5, r3
 800dd2c:	dd14      	ble.n	800dd58 <__ieee754_hypot+0x7c>
 800dd2e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800dd32:	4305      	orrs	r5, r0
 800dd34:	d004      	beq.n	800dd40 <__ieee754_hypot+0x64>
 800dd36:	4623      	mov	r3, r4
 800dd38:	f7f2 fab0 	bl	800029c <__adddf3>
 800dd3c:	4682      	mov	sl, r0
 800dd3e:	468b      	mov	fp, r1
 800dd40:	f084 44ff 	eor.w	r4, r4, #2139095040	@ 0x7f800000
 800dd44:	f484 04e0 	eor.w	r4, r4, #7340032	@ 0x700000
 800dd48:	4334      	orrs	r4, r6
 800dd4a:	f000 80d2 	beq.w	800def2 <__ieee754_hypot+0x216>
 800dd4e:	ec4b ab10 	vmov	d0, sl, fp
 800dd52:	b007      	add	sp, #28
 800dd54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd58:	f1a5 5516 	sub.w	r5, r5, #629145600	@ 0x25800000
 800dd5c:	f1a4 5416 	sub.w	r4, r4, #629145600	@ 0x25800000
 800dd60:	46ab      	mov	fp, r5
 800dd62:	4627      	mov	r7, r4
 800dd64:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800dd68:	9301      	str	r3, [sp, #4]
 800dd6a:	4b65      	ldr	r3, [pc, #404]	@ (800df00 <__ieee754_hypot+0x224>)
 800dd6c:	429c      	cmp	r4, r3
 800dd6e:	dc19      	bgt.n	800dda4 <__ieee754_hypot+0xc8>
 800dd70:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800dd74:	da70      	bge.n	800de58 <__ieee754_hypot+0x17c>
 800dd76:	4633      	mov	r3, r6
 800dd78:	4323      	orrs	r3, r4
 800dd7a:	d0e8      	beq.n	800dd4e <__ieee754_hypot+0x72>
 800dd7c:	4b61      	ldr	r3, [pc, #388]	@ (800df04 <__ieee754_hypot+0x228>)
 800dd7e:	2200      	movs	r2, #0
 800dd80:	4630      	mov	r0, r6
 800dd82:	4639      	mov	r1, r7
 800dd84:	f7f2 fc40 	bl	8000608 <__aeabi_dmul>
 800dd88:	4b5e      	ldr	r3, [pc, #376]	@ (800df04 <__ieee754_hypot+0x228>)
 800dd8a:	4606      	mov	r6, r0
 800dd8c:	460f      	mov	r7, r1
 800dd8e:	4650      	mov	r0, sl
 800dd90:	4659      	mov	r1, fp
 800dd92:	2200      	movs	r2, #0
 800dd94:	f7f2 fc38 	bl	8000608 <__aeabi_dmul>
 800dd98:	9b01      	ldr	r3, [sp, #4]
 800dd9a:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800dd9e:	4682      	mov	sl, r0
 800dda0:	468b      	mov	fp, r1
 800dda2:	9301      	str	r3, [sp, #4]
 800dda4:	4632      	mov	r2, r6
 800dda6:	463b      	mov	r3, r7
 800dda8:	4650      	mov	r0, sl
 800ddaa:	4659      	mov	r1, fp
 800ddac:	f7f2 fa74 	bl	8000298 <__aeabi_dsub>
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	4680      	mov	r8, r0
 800ddb6:	4689      	mov	r9, r1
 800ddb8:	4630      	mov	r0, r6
 800ddba:	4639      	mov	r1, r7
 800ddbc:	f7f2 fe96 	bl	8000aec <__aeabi_dcmplt>
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	2800      	cmp	r0, #0
 800ddc4:	d053      	beq.n	800de6e <__ieee754_hypot+0x192>
 800ddc6:	462b      	mov	r3, r5
 800ddc8:	4610      	mov	r0, r2
 800ddca:	4629      	mov	r1, r5
 800ddcc:	4614      	mov	r4, r2
 800ddce:	f7f2 fc1b 	bl	8000608 <__aeabi_dmul>
 800ddd2:	4632      	mov	r2, r6
 800ddd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddd8:	463b      	mov	r3, r7
 800ddda:	4630      	mov	r0, r6
 800dddc:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800dde0:	f7f2 fc12 	bl	8000608 <__aeabi_dmul>
 800dde4:	4622      	mov	r2, r4
 800dde6:	4606      	mov	r6, r0
 800dde8:	460f      	mov	r7, r1
 800ddea:	462b      	mov	r3, r5
 800ddec:	4650      	mov	r0, sl
 800ddee:	4659      	mov	r1, fp
 800ddf0:	f7f2 fa54 	bl	800029c <__adddf3>
 800ddf4:	4622      	mov	r2, r4
 800ddf6:	4680      	mov	r8, r0
 800ddf8:	4689      	mov	r9, r1
 800ddfa:	462b      	mov	r3, r5
 800ddfc:	4650      	mov	r0, sl
 800ddfe:	4659      	mov	r1, fp
 800de00:	f7f2 fa4a 	bl	8000298 <__aeabi_dsub>
 800de04:	4602      	mov	r2, r0
 800de06:	460b      	mov	r3, r1
 800de08:	4640      	mov	r0, r8
 800de0a:	4649      	mov	r1, r9
 800de0c:	f7f2 fbfc 	bl	8000608 <__aeabi_dmul>
 800de10:	4602      	mov	r2, r0
 800de12:	460b      	mov	r3, r1
 800de14:	4630      	mov	r0, r6
 800de16:	4639      	mov	r1, r7
 800de18:	f7f2 fa3e 	bl	8000298 <__aeabi_dsub>
 800de1c:	4602      	mov	r2, r0
 800de1e:	460b      	mov	r3, r1
 800de20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de24:	f7f2 fa38 	bl	8000298 <__aeabi_dsub>
 800de28:	ec41 0b10 	vmov	d0, r0, r1
 800de2c:	f7fe ffd0 	bl	800cdd0 <__ieee754_sqrt>
 800de30:	9b01      	ldr	r3, [sp, #4]
 800de32:	ec5b ab10 	vmov	sl, fp, d0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d089      	beq.n	800dd4e <__ieee754_hypot+0x72>
 800de3a:	051b      	lsls	r3, r3, #20
 800de3c:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800de40:	2000      	movs	r0, #0
 800de42:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800de46:	4602      	mov	r2, r0
 800de48:	460b      	mov	r3, r1
 800de4a:	4650      	mov	r0, sl
 800de4c:	4659      	mov	r1, fp
 800de4e:	f7f2 fbdb 	bl	8000608 <__aeabi_dmul>
 800de52:	e762      	b.n	800dd1a <__ieee754_hypot+0x3e>
 800de54:	2300      	movs	r3, #0
 800de56:	e787      	b.n	800dd68 <__ieee754_hypot+0x8c>
 800de58:	9b01      	ldr	r3, [sp, #4]
 800de5a:	f105 5516 	add.w	r5, r5, #629145600	@ 0x25800000
 800de5e:	f104 5416 	add.w	r4, r4, #629145600	@ 0x25800000
 800de62:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800de66:	9301      	str	r3, [sp, #4]
 800de68:	46ab      	mov	fp, r5
 800de6a:	4627      	mov	r7, r4
 800de6c:	e79a      	b.n	800dda4 <__ieee754_hypot+0xc8>
 800de6e:	4623      	mov	r3, r4
 800de70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800de74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de78:	2200      	movs	r2, #0
 800de7a:	f505 1380 	add.w	r3, r5, #1048576	@ 0x100000
 800de7e:	4614      	mov	r4, r2
 800de80:	461d      	mov	r5, r3
 800de82:	f7f2 fbc1 	bl	8000608 <__aeabi_dmul>
 800de86:	4642      	mov	r2, r8
 800de88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de8c:	464b      	mov	r3, r9
 800de8e:	4640      	mov	r0, r8
 800de90:	f109 4100 	add.w	r1, r9, #2147483648	@ 0x80000000
 800de94:	f7f2 fbb8 	bl	8000608 <__aeabi_dmul>
 800de98:	4652      	mov	r2, sl
 800de9a:	465b      	mov	r3, fp
 800de9c:	4680      	mov	r8, r0
 800de9e:	4689      	mov	r9, r1
 800dea0:	4650      	mov	r0, sl
 800dea2:	4659      	mov	r1, fp
 800dea4:	f7f2 f9fa 	bl	800029c <__adddf3>
 800dea8:	4622      	mov	r2, r4
 800deaa:	462b      	mov	r3, r5
 800deac:	f7f2 f9f4 	bl	8000298 <__aeabi_dsub>
 800deb0:	4632      	mov	r2, r6
 800deb2:	463b      	mov	r3, r7
 800deb4:	f7f2 fba8 	bl	8000608 <__aeabi_dmul>
 800deb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800debc:	4682      	mov	sl, r0
 800debe:	468b      	mov	fp, r1
 800dec0:	4630      	mov	r0, r6
 800dec2:	4639      	mov	r1, r7
 800dec4:	f7f2 f9e8 	bl	8000298 <__aeabi_dsub>
 800dec8:	4622      	mov	r2, r4
 800deca:	462b      	mov	r3, r5
 800decc:	f7f2 fb9c 	bl	8000608 <__aeabi_dmul>
 800ded0:	4602      	mov	r2, r0
 800ded2:	460b      	mov	r3, r1
 800ded4:	4650      	mov	r0, sl
 800ded6:	4659      	mov	r1, fp
 800ded8:	f7f2 f9e0 	bl	800029c <__adddf3>
 800dedc:	4602      	mov	r2, r0
 800dede:	460b      	mov	r3, r1
 800dee0:	4640      	mov	r0, r8
 800dee2:	4649      	mov	r1, r9
 800dee4:	f7f2 f9d8 	bl	8000298 <__aeabi_dsub>
 800dee8:	4602      	mov	r2, r0
 800deea:	460b      	mov	r3, r1
 800deec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800def0:	e798      	b.n	800de24 <__ieee754_hypot+0x148>
 800def2:	46b2      	mov	sl, r6
 800def4:	46bb      	mov	fp, r7
 800def6:	e72a      	b.n	800dd4e <__ieee754_hypot+0x72>
 800def8:	5f300000 	.word	0x5f300000
 800defc:	7fefffff 	.word	0x7fefffff
 800df00:	20afffff 	.word	0x20afffff
 800df04:	7fd00000 	.word	0x7fd00000

0800df08 <__ieee754_pow>:
 800df08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df0c:	b091      	sub	sp, #68	@ 0x44
 800df0e:	ed8d 1b00 	vstr	d1, [sp]
 800df12:	e9dd 1900 	ldrd	r1, r9, [sp]
 800df16:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800df1a:	ea5a 0001 	orrs.w	r0, sl, r1
 800df1e:	ec57 6b10 	vmov	r6, r7, d0
 800df22:	d113      	bne.n	800df4c <__ieee754_pow+0x44>
 800df24:	19b3      	adds	r3, r6, r6
 800df26:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800df2a:	4152      	adcs	r2, r2
 800df2c:	4298      	cmp	r0, r3
 800df2e:	4b98      	ldr	r3, [pc, #608]	@ (800e190 <__ieee754_pow+0x288>)
 800df30:	4193      	sbcs	r3, r2
 800df32:	f080 84ea 	bcs.w	800e90a <__ieee754_pow+0xa02>
 800df36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df3a:	4630      	mov	r0, r6
 800df3c:	4639      	mov	r1, r7
 800df3e:	f7f2 f9ad 	bl	800029c <__adddf3>
 800df42:	ec41 0b10 	vmov	d0, r0, r1
 800df46:	b011      	add	sp, #68	@ 0x44
 800df48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df4c:	4a91      	ldr	r2, [pc, #580]	@ (800e194 <__ieee754_pow+0x28c>)
 800df4e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800df52:	4590      	cmp	r8, r2
 800df54:	463d      	mov	r5, r7
 800df56:	4633      	mov	r3, r6
 800df58:	d806      	bhi.n	800df68 <__ieee754_pow+0x60>
 800df5a:	d101      	bne.n	800df60 <__ieee754_pow+0x58>
 800df5c:	2e00      	cmp	r6, #0
 800df5e:	d1ea      	bne.n	800df36 <__ieee754_pow+0x2e>
 800df60:	4592      	cmp	sl, r2
 800df62:	d801      	bhi.n	800df68 <__ieee754_pow+0x60>
 800df64:	d10e      	bne.n	800df84 <__ieee754_pow+0x7c>
 800df66:	b169      	cbz	r1, 800df84 <__ieee754_pow+0x7c>
 800df68:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800df6c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800df70:	431d      	orrs	r5, r3
 800df72:	d1e0      	bne.n	800df36 <__ieee754_pow+0x2e>
 800df74:	e9dd 3200 	ldrd	r3, r2, [sp]
 800df78:	18db      	adds	r3, r3, r3
 800df7a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800df7e:	4152      	adcs	r2, r2
 800df80:	429d      	cmp	r5, r3
 800df82:	e7d4      	b.n	800df2e <__ieee754_pow+0x26>
 800df84:	2d00      	cmp	r5, #0
 800df86:	46c3      	mov	fp, r8
 800df88:	da3a      	bge.n	800e000 <__ieee754_pow+0xf8>
 800df8a:	4a83      	ldr	r2, [pc, #524]	@ (800e198 <__ieee754_pow+0x290>)
 800df8c:	4592      	cmp	sl, r2
 800df8e:	d84d      	bhi.n	800e02c <__ieee754_pow+0x124>
 800df90:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800df94:	4592      	cmp	sl, r2
 800df96:	f240 84c7 	bls.w	800e928 <__ieee754_pow+0xa20>
 800df9a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800df9e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800dfa2:	2a14      	cmp	r2, #20
 800dfa4:	dd0f      	ble.n	800dfc6 <__ieee754_pow+0xbe>
 800dfa6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800dfaa:	fa21 f402 	lsr.w	r4, r1, r2
 800dfae:	fa04 f202 	lsl.w	r2, r4, r2
 800dfb2:	428a      	cmp	r2, r1
 800dfb4:	f040 84b8 	bne.w	800e928 <__ieee754_pow+0xa20>
 800dfb8:	f004 0401 	and.w	r4, r4, #1
 800dfbc:	f1c4 0402 	rsb	r4, r4, #2
 800dfc0:	2900      	cmp	r1, #0
 800dfc2:	d158      	bne.n	800e076 <__ieee754_pow+0x16e>
 800dfc4:	e00e      	b.n	800dfe4 <__ieee754_pow+0xdc>
 800dfc6:	2900      	cmp	r1, #0
 800dfc8:	d154      	bne.n	800e074 <__ieee754_pow+0x16c>
 800dfca:	f1c2 0214 	rsb	r2, r2, #20
 800dfce:	fa4a f402 	asr.w	r4, sl, r2
 800dfd2:	fa04 f202 	lsl.w	r2, r4, r2
 800dfd6:	4552      	cmp	r2, sl
 800dfd8:	f040 84a3 	bne.w	800e922 <__ieee754_pow+0xa1a>
 800dfdc:	f004 0401 	and.w	r4, r4, #1
 800dfe0:	f1c4 0402 	rsb	r4, r4, #2
 800dfe4:	4a6d      	ldr	r2, [pc, #436]	@ (800e19c <__ieee754_pow+0x294>)
 800dfe6:	4592      	cmp	sl, r2
 800dfe8:	d12e      	bne.n	800e048 <__ieee754_pow+0x140>
 800dfea:	f1b9 0f00 	cmp.w	r9, #0
 800dfee:	f280 8494 	bge.w	800e91a <__ieee754_pow+0xa12>
 800dff2:	496a      	ldr	r1, [pc, #424]	@ (800e19c <__ieee754_pow+0x294>)
 800dff4:	4632      	mov	r2, r6
 800dff6:	463b      	mov	r3, r7
 800dff8:	2000      	movs	r0, #0
 800dffa:	f7f2 fc2f 	bl	800085c <__aeabi_ddiv>
 800dffe:	e7a0      	b.n	800df42 <__ieee754_pow+0x3a>
 800e000:	2400      	movs	r4, #0
 800e002:	bbc1      	cbnz	r1, 800e076 <__ieee754_pow+0x16e>
 800e004:	4a63      	ldr	r2, [pc, #396]	@ (800e194 <__ieee754_pow+0x28c>)
 800e006:	4592      	cmp	sl, r2
 800e008:	d1ec      	bne.n	800dfe4 <__ieee754_pow+0xdc>
 800e00a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800e00e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800e012:	431a      	orrs	r2, r3
 800e014:	f000 8479 	beq.w	800e90a <__ieee754_pow+0xa02>
 800e018:	4b61      	ldr	r3, [pc, #388]	@ (800e1a0 <__ieee754_pow+0x298>)
 800e01a:	4598      	cmp	r8, r3
 800e01c:	d908      	bls.n	800e030 <__ieee754_pow+0x128>
 800e01e:	f1b9 0f00 	cmp.w	r9, #0
 800e022:	f2c0 8476 	blt.w	800e912 <__ieee754_pow+0xa0a>
 800e026:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e02a:	e78a      	b.n	800df42 <__ieee754_pow+0x3a>
 800e02c:	2402      	movs	r4, #2
 800e02e:	e7e8      	b.n	800e002 <__ieee754_pow+0xfa>
 800e030:	f1b9 0f00 	cmp.w	r9, #0
 800e034:	f04f 0000 	mov.w	r0, #0
 800e038:	f04f 0100 	mov.w	r1, #0
 800e03c:	da81      	bge.n	800df42 <__ieee754_pow+0x3a>
 800e03e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e042:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e046:	e77c      	b.n	800df42 <__ieee754_pow+0x3a>
 800e048:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800e04c:	d106      	bne.n	800e05c <__ieee754_pow+0x154>
 800e04e:	4632      	mov	r2, r6
 800e050:	463b      	mov	r3, r7
 800e052:	4630      	mov	r0, r6
 800e054:	4639      	mov	r1, r7
 800e056:	f7f2 fad7 	bl	8000608 <__aeabi_dmul>
 800e05a:	e772      	b.n	800df42 <__ieee754_pow+0x3a>
 800e05c:	4a51      	ldr	r2, [pc, #324]	@ (800e1a4 <__ieee754_pow+0x29c>)
 800e05e:	4591      	cmp	r9, r2
 800e060:	d109      	bne.n	800e076 <__ieee754_pow+0x16e>
 800e062:	2d00      	cmp	r5, #0
 800e064:	db07      	blt.n	800e076 <__ieee754_pow+0x16e>
 800e066:	ec47 6b10 	vmov	d0, r6, r7
 800e06a:	b011      	add	sp, #68	@ 0x44
 800e06c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e070:	f7fe beae 	b.w	800cdd0 <__ieee754_sqrt>
 800e074:	2400      	movs	r4, #0
 800e076:	ec47 6b10 	vmov	d0, r6, r7
 800e07a:	9302      	str	r3, [sp, #8]
 800e07c:	f7fe fe04 	bl	800cc88 <fabs>
 800e080:	9b02      	ldr	r3, [sp, #8]
 800e082:	ec51 0b10 	vmov	r0, r1, d0
 800e086:	bb53      	cbnz	r3, 800e0de <__ieee754_pow+0x1d6>
 800e088:	4b44      	ldr	r3, [pc, #272]	@ (800e19c <__ieee754_pow+0x294>)
 800e08a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800e08e:	429a      	cmp	r2, r3
 800e090:	d002      	beq.n	800e098 <__ieee754_pow+0x190>
 800e092:	f1b8 0f00 	cmp.w	r8, #0
 800e096:	d122      	bne.n	800e0de <__ieee754_pow+0x1d6>
 800e098:	f1b9 0f00 	cmp.w	r9, #0
 800e09c:	da05      	bge.n	800e0aa <__ieee754_pow+0x1a2>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	2000      	movs	r0, #0
 800e0a4:	493d      	ldr	r1, [pc, #244]	@ (800e19c <__ieee754_pow+0x294>)
 800e0a6:	f7f2 fbd9 	bl	800085c <__aeabi_ddiv>
 800e0aa:	2d00      	cmp	r5, #0
 800e0ac:	f6bf af49 	bge.w	800df42 <__ieee754_pow+0x3a>
 800e0b0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800e0b4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800e0b8:	ea58 0804 	orrs.w	r8, r8, r4
 800e0bc:	d108      	bne.n	800e0d0 <__ieee754_pow+0x1c8>
 800e0be:	4602      	mov	r2, r0
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	4610      	mov	r0, r2
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	f7f2 f8e7 	bl	8000298 <__aeabi_dsub>
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	e794      	b.n	800dffa <__ieee754_pow+0xf2>
 800e0d0:	2c01      	cmp	r4, #1
 800e0d2:	f47f af36 	bne.w	800df42 <__ieee754_pow+0x3a>
 800e0d6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e0da:	4619      	mov	r1, r3
 800e0dc:	e731      	b.n	800df42 <__ieee754_pow+0x3a>
 800e0de:	0feb      	lsrs	r3, r5, #31
 800e0e0:	3b01      	subs	r3, #1
 800e0e2:	ea53 0204 	orrs.w	r2, r3, r4
 800e0e6:	d102      	bne.n	800e0ee <__ieee754_pow+0x1e6>
 800e0e8:	4632      	mov	r2, r6
 800e0ea:	463b      	mov	r3, r7
 800e0ec:	e7e9      	b.n	800e0c2 <__ieee754_pow+0x1ba>
 800e0ee:	3c01      	subs	r4, #1
 800e0f0:	431c      	orrs	r4, r3
 800e0f2:	d016      	beq.n	800e122 <__ieee754_pow+0x21a>
 800e0f4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800e180 <__ieee754_pow+0x278>
 800e0f8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800e0fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e100:	f240 8112 	bls.w	800e328 <__ieee754_pow+0x420>
 800e104:	4b28      	ldr	r3, [pc, #160]	@ (800e1a8 <__ieee754_pow+0x2a0>)
 800e106:	459a      	cmp	sl, r3
 800e108:	4b25      	ldr	r3, [pc, #148]	@ (800e1a0 <__ieee754_pow+0x298>)
 800e10a:	d916      	bls.n	800e13a <__ieee754_pow+0x232>
 800e10c:	4598      	cmp	r8, r3
 800e10e:	d80b      	bhi.n	800e128 <__ieee754_pow+0x220>
 800e110:	f1b9 0f00 	cmp.w	r9, #0
 800e114:	da0b      	bge.n	800e12e <__ieee754_pow+0x226>
 800e116:	2000      	movs	r0, #0
 800e118:	b011      	add	sp, #68	@ 0x44
 800e11a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e11e:	f000 bee7 	b.w	800eef0 <__math_oflow>
 800e122:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800e188 <__ieee754_pow+0x280>
 800e126:	e7e7      	b.n	800e0f8 <__ieee754_pow+0x1f0>
 800e128:	f1b9 0f00 	cmp.w	r9, #0
 800e12c:	dcf3      	bgt.n	800e116 <__ieee754_pow+0x20e>
 800e12e:	2000      	movs	r0, #0
 800e130:	b011      	add	sp, #68	@ 0x44
 800e132:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e136:	f000 bed3 	b.w	800eee0 <__math_uflow>
 800e13a:	4598      	cmp	r8, r3
 800e13c:	d20c      	bcs.n	800e158 <__ieee754_pow+0x250>
 800e13e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e142:	2200      	movs	r2, #0
 800e144:	2300      	movs	r3, #0
 800e146:	f7f2 fcd1 	bl	8000aec <__aeabi_dcmplt>
 800e14a:	3800      	subs	r0, #0
 800e14c:	bf18      	it	ne
 800e14e:	2001      	movne	r0, #1
 800e150:	f1b9 0f00 	cmp.w	r9, #0
 800e154:	daec      	bge.n	800e130 <__ieee754_pow+0x228>
 800e156:	e7df      	b.n	800e118 <__ieee754_pow+0x210>
 800e158:	4b10      	ldr	r3, [pc, #64]	@ (800e19c <__ieee754_pow+0x294>)
 800e15a:	4598      	cmp	r8, r3
 800e15c:	f04f 0200 	mov.w	r2, #0
 800e160:	d924      	bls.n	800e1ac <__ieee754_pow+0x2a4>
 800e162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e166:	2300      	movs	r3, #0
 800e168:	f7f2 fcc0 	bl	8000aec <__aeabi_dcmplt>
 800e16c:	3800      	subs	r0, #0
 800e16e:	bf18      	it	ne
 800e170:	2001      	movne	r0, #1
 800e172:	f1b9 0f00 	cmp.w	r9, #0
 800e176:	dccf      	bgt.n	800e118 <__ieee754_pow+0x210>
 800e178:	e7da      	b.n	800e130 <__ieee754_pow+0x228>
 800e17a:	bf00      	nop
 800e17c:	f3af 8000 	nop.w
 800e180:	00000000 	.word	0x00000000
 800e184:	3ff00000 	.word	0x3ff00000
 800e188:	00000000 	.word	0x00000000
 800e18c:	bff00000 	.word	0xbff00000
 800e190:	fff00000 	.word	0xfff00000
 800e194:	7ff00000 	.word	0x7ff00000
 800e198:	433fffff 	.word	0x433fffff
 800e19c:	3ff00000 	.word	0x3ff00000
 800e1a0:	3fefffff 	.word	0x3fefffff
 800e1a4:	3fe00000 	.word	0x3fe00000
 800e1a8:	43f00000 	.word	0x43f00000
 800e1ac:	4b5a      	ldr	r3, [pc, #360]	@ (800e318 <__ieee754_pow+0x410>)
 800e1ae:	f7f2 f873 	bl	8000298 <__aeabi_dsub>
 800e1b2:	a351      	add	r3, pc, #324	@ (adr r3, 800e2f8 <__ieee754_pow+0x3f0>)
 800e1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b8:	4604      	mov	r4, r0
 800e1ba:	460d      	mov	r5, r1
 800e1bc:	f7f2 fa24 	bl	8000608 <__aeabi_dmul>
 800e1c0:	a34f      	add	r3, pc, #316	@ (adr r3, 800e300 <__ieee754_pow+0x3f8>)
 800e1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c6:	4606      	mov	r6, r0
 800e1c8:	460f      	mov	r7, r1
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	4629      	mov	r1, r5
 800e1ce:	f7f2 fa1b 	bl	8000608 <__aeabi_dmul>
 800e1d2:	4b52      	ldr	r3, [pc, #328]	@ (800e31c <__ieee754_pow+0x414>)
 800e1d4:	4682      	mov	sl, r0
 800e1d6:	468b      	mov	fp, r1
 800e1d8:	2200      	movs	r2, #0
 800e1da:	4620      	mov	r0, r4
 800e1dc:	4629      	mov	r1, r5
 800e1de:	f7f2 fa13 	bl	8000608 <__aeabi_dmul>
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	a148      	add	r1, pc, #288	@ (adr r1, 800e308 <__ieee754_pow+0x400>)
 800e1e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1ec:	f7f2 f854 	bl	8000298 <__aeabi_dsub>
 800e1f0:	4622      	mov	r2, r4
 800e1f2:	462b      	mov	r3, r5
 800e1f4:	f7f2 fa08 	bl	8000608 <__aeabi_dmul>
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	2000      	movs	r0, #0
 800e1fe:	4948      	ldr	r1, [pc, #288]	@ (800e320 <__ieee754_pow+0x418>)
 800e200:	f7f2 f84a 	bl	8000298 <__aeabi_dsub>
 800e204:	4622      	mov	r2, r4
 800e206:	4680      	mov	r8, r0
 800e208:	4689      	mov	r9, r1
 800e20a:	462b      	mov	r3, r5
 800e20c:	4620      	mov	r0, r4
 800e20e:	4629      	mov	r1, r5
 800e210:	f7f2 f9fa 	bl	8000608 <__aeabi_dmul>
 800e214:	4602      	mov	r2, r0
 800e216:	460b      	mov	r3, r1
 800e218:	4640      	mov	r0, r8
 800e21a:	4649      	mov	r1, r9
 800e21c:	f7f2 f9f4 	bl	8000608 <__aeabi_dmul>
 800e220:	a33b      	add	r3, pc, #236	@ (adr r3, 800e310 <__ieee754_pow+0x408>)
 800e222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e226:	f7f2 f9ef 	bl	8000608 <__aeabi_dmul>
 800e22a:	4602      	mov	r2, r0
 800e22c:	460b      	mov	r3, r1
 800e22e:	4650      	mov	r0, sl
 800e230:	4659      	mov	r1, fp
 800e232:	f7f2 f831 	bl	8000298 <__aeabi_dsub>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	4680      	mov	r8, r0
 800e23c:	4689      	mov	r9, r1
 800e23e:	4630      	mov	r0, r6
 800e240:	4639      	mov	r1, r7
 800e242:	f7f2 f82b 	bl	800029c <__adddf3>
 800e246:	2400      	movs	r4, #0
 800e248:	4632      	mov	r2, r6
 800e24a:	463b      	mov	r3, r7
 800e24c:	4620      	mov	r0, r4
 800e24e:	460d      	mov	r5, r1
 800e250:	f7f2 f822 	bl	8000298 <__aeabi_dsub>
 800e254:	4602      	mov	r2, r0
 800e256:	460b      	mov	r3, r1
 800e258:	4640      	mov	r0, r8
 800e25a:	4649      	mov	r1, r9
 800e25c:	f7f2 f81c 	bl	8000298 <__aeabi_dsub>
 800e260:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e264:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e268:	2300      	movs	r3, #0
 800e26a:	9304      	str	r3, [sp, #16]
 800e26c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e270:	4606      	mov	r6, r0
 800e272:	460f      	mov	r7, r1
 800e274:	4652      	mov	r2, sl
 800e276:	465b      	mov	r3, fp
 800e278:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e27c:	f7f2 f80c 	bl	8000298 <__aeabi_dsub>
 800e280:	4622      	mov	r2, r4
 800e282:	462b      	mov	r3, r5
 800e284:	f7f2 f9c0 	bl	8000608 <__aeabi_dmul>
 800e288:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e28c:	4680      	mov	r8, r0
 800e28e:	4689      	mov	r9, r1
 800e290:	4630      	mov	r0, r6
 800e292:	4639      	mov	r1, r7
 800e294:	f7f2 f9b8 	bl	8000608 <__aeabi_dmul>
 800e298:	4602      	mov	r2, r0
 800e29a:	460b      	mov	r3, r1
 800e29c:	4640      	mov	r0, r8
 800e29e:	4649      	mov	r1, r9
 800e2a0:	f7f1 fffc 	bl	800029c <__adddf3>
 800e2a4:	4652      	mov	r2, sl
 800e2a6:	465b      	mov	r3, fp
 800e2a8:	4606      	mov	r6, r0
 800e2aa:	460f      	mov	r7, r1
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	4629      	mov	r1, r5
 800e2b0:	f7f2 f9aa 	bl	8000608 <__aeabi_dmul>
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	4680      	mov	r8, r0
 800e2ba:	4689      	mov	r9, r1
 800e2bc:	4630      	mov	r0, r6
 800e2be:	4639      	mov	r1, r7
 800e2c0:	f7f1 ffec 	bl	800029c <__adddf3>
 800e2c4:	4b17      	ldr	r3, [pc, #92]	@ (800e324 <__ieee754_pow+0x41c>)
 800e2c6:	4299      	cmp	r1, r3
 800e2c8:	4604      	mov	r4, r0
 800e2ca:	460d      	mov	r5, r1
 800e2cc:	468a      	mov	sl, r1
 800e2ce:	468b      	mov	fp, r1
 800e2d0:	f340 82ef 	ble.w	800e8b2 <__ieee754_pow+0x9aa>
 800e2d4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800e2d8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800e2dc:	4303      	orrs	r3, r0
 800e2de:	f000 81e8 	beq.w	800e6b2 <__ieee754_pow+0x7aa>
 800e2e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	f7f2 fbff 	bl	8000aec <__aeabi_dcmplt>
 800e2ee:	3800      	subs	r0, #0
 800e2f0:	bf18      	it	ne
 800e2f2:	2001      	movne	r0, #1
 800e2f4:	e710      	b.n	800e118 <__ieee754_pow+0x210>
 800e2f6:	bf00      	nop
 800e2f8:	60000000 	.word	0x60000000
 800e2fc:	3ff71547 	.word	0x3ff71547
 800e300:	f85ddf44 	.word	0xf85ddf44
 800e304:	3e54ae0b 	.word	0x3e54ae0b
 800e308:	55555555 	.word	0x55555555
 800e30c:	3fd55555 	.word	0x3fd55555
 800e310:	652b82fe 	.word	0x652b82fe
 800e314:	3ff71547 	.word	0x3ff71547
 800e318:	3ff00000 	.word	0x3ff00000
 800e31c:	3fd00000 	.word	0x3fd00000
 800e320:	3fe00000 	.word	0x3fe00000
 800e324:	408fffff 	.word	0x408fffff
 800e328:	4bd5      	ldr	r3, [pc, #852]	@ (800e680 <__ieee754_pow+0x778>)
 800e32a:	402b      	ands	r3, r5
 800e32c:	2200      	movs	r2, #0
 800e32e:	b92b      	cbnz	r3, 800e33c <__ieee754_pow+0x434>
 800e330:	4bd4      	ldr	r3, [pc, #848]	@ (800e684 <__ieee754_pow+0x77c>)
 800e332:	f7f2 f969 	bl	8000608 <__aeabi_dmul>
 800e336:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800e33a:	468b      	mov	fp, r1
 800e33c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800e340:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e344:	4413      	add	r3, r2
 800e346:	930a      	str	r3, [sp, #40]	@ 0x28
 800e348:	4bcf      	ldr	r3, [pc, #828]	@ (800e688 <__ieee754_pow+0x780>)
 800e34a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800e34e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800e352:	459b      	cmp	fp, r3
 800e354:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e358:	dd08      	ble.n	800e36c <__ieee754_pow+0x464>
 800e35a:	4bcc      	ldr	r3, [pc, #816]	@ (800e68c <__ieee754_pow+0x784>)
 800e35c:	459b      	cmp	fp, r3
 800e35e:	f340 81a5 	ble.w	800e6ac <__ieee754_pow+0x7a4>
 800e362:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e364:	3301      	adds	r3, #1
 800e366:	930a      	str	r3, [sp, #40]	@ 0x28
 800e368:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800e36c:	f04f 0a00 	mov.w	sl, #0
 800e370:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e374:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e376:	4bc6      	ldr	r3, [pc, #792]	@ (800e690 <__ieee754_pow+0x788>)
 800e378:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e37c:	ed93 7b00 	vldr	d7, [r3]
 800e380:	4629      	mov	r1, r5
 800e382:	ec53 2b17 	vmov	r2, r3, d7
 800e386:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e38a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e38e:	f7f1 ff83 	bl	8000298 <__aeabi_dsub>
 800e392:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e396:	4606      	mov	r6, r0
 800e398:	460f      	mov	r7, r1
 800e39a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e39e:	f7f1 ff7d 	bl	800029c <__adddf3>
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	460b      	mov	r3, r1
 800e3a6:	2000      	movs	r0, #0
 800e3a8:	49ba      	ldr	r1, [pc, #744]	@ (800e694 <__ieee754_pow+0x78c>)
 800e3aa:	f7f2 fa57 	bl	800085c <__aeabi_ddiv>
 800e3ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	4630      	mov	r0, r6
 800e3b8:	4639      	mov	r1, r7
 800e3ba:	f7f2 f925 	bl	8000608 <__aeabi_dmul>
 800e3be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3c2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800e3c6:	106d      	asrs	r5, r5, #1
 800e3c8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800e3cc:	f04f 0b00 	mov.w	fp, #0
 800e3d0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800e3d4:	4661      	mov	r1, ip
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e3dc:	4658      	mov	r0, fp
 800e3de:	46e1      	mov	r9, ip
 800e3e0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800e3e4:	4614      	mov	r4, r2
 800e3e6:	461d      	mov	r5, r3
 800e3e8:	f7f2 f90e 	bl	8000608 <__aeabi_dmul>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	4630      	mov	r0, r6
 800e3f2:	4639      	mov	r1, r7
 800e3f4:	f7f1 ff50 	bl	8000298 <__aeabi_dsub>
 800e3f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e3fc:	4606      	mov	r6, r0
 800e3fe:	460f      	mov	r7, r1
 800e400:	4620      	mov	r0, r4
 800e402:	4629      	mov	r1, r5
 800e404:	f7f1 ff48 	bl	8000298 <__aeabi_dsub>
 800e408:	4602      	mov	r2, r0
 800e40a:	460b      	mov	r3, r1
 800e40c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e410:	f7f1 ff42 	bl	8000298 <__aeabi_dsub>
 800e414:	465a      	mov	r2, fp
 800e416:	464b      	mov	r3, r9
 800e418:	f7f2 f8f6 	bl	8000608 <__aeabi_dmul>
 800e41c:	4602      	mov	r2, r0
 800e41e:	460b      	mov	r3, r1
 800e420:	4630      	mov	r0, r6
 800e422:	4639      	mov	r1, r7
 800e424:	f7f1 ff38 	bl	8000298 <__aeabi_dsub>
 800e428:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e42c:	f7f2 f8ec 	bl	8000608 <__aeabi_dmul>
 800e430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e434:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e438:	4610      	mov	r0, r2
 800e43a:	4619      	mov	r1, r3
 800e43c:	f7f2 f8e4 	bl	8000608 <__aeabi_dmul>
 800e440:	a37d      	add	r3, pc, #500	@ (adr r3, 800e638 <__ieee754_pow+0x730>)
 800e442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e446:	4604      	mov	r4, r0
 800e448:	460d      	mov	r5, r1
 800e44a:	f7f2 f8dd 	bl	8000608 <__aeabi_dmul>
 800e44e:	a37c      	add	r3, pc, #496	@ (adr r3, 800e640 <__ieee754_pow+0x738>)
 800e450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e454:	f7f1 ff22 	bl	800029c <__adddf3>
 800e458:	4622      	mov	r2, r4
 800e45a:	462b      	mov	r3, r5
 800e45c:	f7f2 f8d4 	bl	8000608 <__aeabi_dmul>
 800e460:	a379      	add	r3, pc, #484	@ (adr r3, 800e648 <__ieee754_pow+0x740>)
 800e462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e466:	f7f1 ff19 	bl	800029c <__adddf3>
 800e46a:	4622      	mov	r2, r4
 800e46c:	462b      	mov	r3, r5
 800e46e:	f7f2 f8cb 	bl	8000608 <__aeabi_dmul>
 800e472:	a377      	add	r3, pc, #476	@ (adr r3, 800e650 <__ieee754_pow+0x748>)
 800e474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e478:	f7f1 ff10 	bl	800029c <__adddf3>
 800e47c:	4622      	mov	r2, r4
 800e47e:	462b      	mov	r3, r5
 800e480:	f7f2 f8c2 	bl	8000608 <__aeabi_dmul>
 800e484:	a374      	add	r3, pc, #464	@ (adr r3, 800e658 <__ieee754_pow+0x750>)
 800e486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48a:	f7f1 ff07 	bl	800029c <__adddf3>
 800e48e:	4622      	mov	r2, r4
 800e490:	462b      	mov	r3, r5
 800e492:	f7f2 f8b9 	bl	8000608 <__aeabi_dmul>
 800e496:	a372      	add	r3, pc, #456	@ (adr r3, 800e660 <__ieee754_pow+0x758>)
 800e498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49c:	f7f1 fefe 	bl	800029c <__adddf3>
 800e4a0:	4622      	mov	r2, r4
 800e4a2:	4606      	mov	r6, r0
 800e4a4:	460f      	mov	r7, r1
 800e4a6:	462b      	mov	r3, r5
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	4629      	mov	r1, r5
 800e4ac:	f7f2 f8ac 	bl	8000608 <__aeabi_dmul>
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	4630      	mov	r0, r6
 800e4b6:	4639      	mov	r1, r7
 800e4b8:	f7f2 f8a6 	bl	8000608 <__aeabi_dmul>
 800e4bc:	465a      	mov	r2, fp
 800e4be:	4604      	mov	r4, r0
 800e4c0:	460d      	mov	r5, r1
 800e4c2:	464b      	mov	r3, r9
 800e4c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4c8:	f7f1 fee8 	bl	800029c <__adddf3>
 800e4cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e4d0:	f7f2 f89a 	bl	8000608 <__aeabi_dmul>
 800e4d4:	4622      	mov	r2, r4
 800e4d6:	462b      	mov	r3, r5
 800e4d8:	f7f1 fee0 	bl	800029c <__adddf3>
 800e4dc:	465a      	mov	r2, fp
 800e4de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e4e2:	464b      	mov	r3, r9
 800e4e4:	4658      	mov	r0, fp
 800e4e6:	4649      	mov	r1, r9
 800e4e8:	f7f2 f88e 	bl	8000608 <__aeabi_dmul>
 800e4ec:	4b6a      	ldr	r3, [pc, #424]	@ (800e698 <__ieee754_pow+0x790>)
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	4606      	mov	r6, r0
 800e4f2:	460f      	mov	r7, r1
 800e4f4:	f7f1 fed2 	bl	800029c <__adddf3>
 800e4f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e4fc:	f7f1 fece 	bl	800029c <__adddf3>
 800e500:	46d8      	mov	r8, fp
 800e502:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800e506:	460d      	mov	r5, r1
 800e508:	465a      	mov	r2, fp
 800e50a:	460b      	mov	r3, r1
 800e50c:	4640      	mov	r0, r8
 800e50e:	4649      	mov	r1, r9
 800e510:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800e514:	f7f2 f878 	bl	8000608 <__aeabi_dmul>
 800e518:	465c      	mov	r4, fp
 800e51a:	4680      	mov	r8, r0
 800e51c:	4689      	mov	r9, r1
 800e51e:	4b5e      	ldr	r3, [pc, #376]	@ (800e698 <__ieee754_pow+0x790>)
 800e520:	2200      	movs	r2, #0
 800e522:	4620      	mov	r0, r4
 800e524:	4629      	mov	r1, r5
 800e526:	f7f1 feb7 	bl	8000298 <__aeabi_dsub>
 800e52a:	4632      	mov	r2, r6
 800e52c:	463b      	mov	r3, r7
 800e52e:	f7f1 feb3 	bl	8000298 <__aeabi_dsub>
 800e532:	4602      	mov	r2, r0
 800e534:	460b      	mov	r3, r1
 800e536:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e53a:	f7f1 fead 	bl	8000298 <__aeabi_dsub>
 800e53e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e542:	f7f2 f861 	bl	8000608 <__aeabi_dmul>
 800e546:	4622      	mov	r2, r4
 800e548:	4606      	mov	r6, r0
 800e54a:	460f      	mov	r7, r1
 800e54c:	462b      	mov	r3, r5
 800e54e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e552:	f7f2 f859 	bl	8000608 <__aeabi_dmul>
 800e556:	4602      	mov	r2, r0
 800e558:	460b      	mov	r3, r1
 800e55a:	4630      	mov	r0, r6
 800e55c:	4639      	mov	r1, r7
 800e55e:	f7f1 fe9d 	bl	800029c <__adddf3>
 800e562:	4606      	mov	r6, r0
 800e564:	460f      	mov	r7, r1
 800e566:	4602      	mov	r2, r0
 800e568:	460b      	mov	r3, r1
 800e56a:	4640      	mov	r0, r8
 800e56c:	4649      	mov	r1, r9
 800e56e:	f7f1 fe95 	bl	800029c <__adddf3>
 800e572:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800e576:	a33c      	add	r3, pc, #240	@ (adr r3, 800e668 <__ieee754_pow+0x760>)
 800e578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57c:	4658      	mov	r0, fp
 800e57e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800e582:	460d      	mov	r5, r1
 800e584:	f7f2 f840 	bl	8000608 <__aeabi_dmul>
 800e588:	465c      	mov	r4, fp
 800e58a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e58e:	4642      	mov	r2, r8
 800e590:	464b      	mov	r3, r9
 800e592:	4620      	mov	r0, r4
 800e594:	4629      	mov	r1, r5
 800e596:	f7f1 fe7f 	bl	8000298 <__aeabi_dsub>
 800e59a:	4602      	mov	r2, r0
 800e59c:	460b      	mov	r3, r1
 800e59e:	4630      	mov	r0, r6
 800e5a0:	4639      	mov	r1, r7
 800e5a2:	f7f1 fe79 	bl	8000298 <__aeabi_dsub>
 800e5a6:	a332      	add	r3, pc, #200	@ (adr r3, 800e670 <__ieee754_pow+0x768>)
 800e5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ac:	f7f2 f82c 	bl	8000608 <__aeabi_dmul>
 800e5b0:	a331      	add	r3, pc, #196	@ (adr r3, 800e678 <__ieee754_pow+0x770>)
 800e5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b6:	4606      	mov	r6, r0
 800e5b8:	460f      	mov	r7, r1
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	4629      	mov	r1, r5
 800e5be:	f7f2 f823 	bl	8000608 <__aeabi_dmul>
 800e5c2:	4602      	mov	r2, r0
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	4630      	mov	r0, r6
 800e5c8:	4639      	mov	r1, r7
 800e5ca:	f7f1 fe67 	bl	800029c <__adddf3>
 800e5ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e5d0:	4b32      	ldr	r3, [pc, #200]	@ (800e69c <__ieee754_pow+0x794>)
 800e5d2:	4413      	add	r3, r2
 800e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d8:	f7f1 fe60 	bl	800029c <__adddf3>
 800e5dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e5e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e5e2:	f7f1 ffa7 	bl	8000534 <__aeabi_i2d>
 800e5e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e5e8:	4b2d      	ldr	r3, [pc, #180]	@ (800e6a0 <__ieee754_pow+0x798>)
 800e5ea:	4413      	add	r3, r2
 800e5ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e5f0:	4606      	mov	r6, r0
 800e5f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e5f6:	460f      	mov	r7, r1
 800e5f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5fc:	f7f1 fe4e 	bl	800029c <__adddf3>
 800e600:	4642      	mov	r2, r8
 800e602:	464b      	mov	r3, r9
 800e604:	f7f1 fe4a 	bl	800029c <__adddf3>
 800e608:	4632      	mov	r2, r6
 800e60a:	463b      	mov	r3, r7
 800e60c:	f7f1 fe46 	bl	800029c <__adddf3>
 800e610:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800e614:	4632      	mov	r2, r6
 800e616:	463b      	mov	r3, r7
 800e618:	4658      	mov	r0, fp
 800e61a:	460d      	mov	r5, r1
 800e61c:	f7f1 fe3c 	bl	8000298 <__aeabi_dsub>
 800e620:	4642      	mov	r2, r8
 800e622:	464b      	mov	r3, r9
 800e624:	f7f1 fe38 	bl	8000298 <__aeabi_dsub>
 800e628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e62c:	f7f1 fe34 	bl	8000298 <__aeabi_dsub>
 800e630:	465c      	mov	r4, fp
 800e632:	4602      	mov	r2, r0
 800e634:	e036      	b.n	800e6a4 <__ieee754_pow+0x79c>
 800e636:	bf00      	nop
 800e638:	4a454eef 	.word	0x4a454eef
 800e63c:	3fca7e28 	.word	0x3fca7e28
 800e640:	93c9db65 	.word	0x93c9db65
 800e644:	3fcd864a 	.word	0x3fcd864a
 800e648:	a91d4101 	.word	0xa91d4101
 800e64c:	3fd17460 	.word	0x3fd17460
 800e650:	518f264d 	.word	0x518f264d
 800e654:	3fd55555 	.word	0x3fd55555
 800e658:	db6fabff 	.word	0xdb6fabff
 800e65c:	3fdb6db6 	.word	0x3fdb6db6
 800e660:	33333303 	.word	0x33333303
 800e664:	3fe33333 	.word	0x3fe33333
 800e668:	e0000000 	.word	0xe0000000
 800e66c:	3feec709 	.word	0x3feec709
 800e670:	dc3a03fd 	.word	0xdc3a03fd
 800e674:	3feec709 	.word	0x3feec709
 800e678:	145b01f5 	.word	0x145b01f5
 800e67c:	be3e2fe0 	.word	0xbe3e2fe0
 800e680:	7ff00000 	.word	0x7ff00000
 800e684:	43400000 	.word	0x43400000
 800e688:	0003988e 	.word	0x0003988e
 800e68c:	000bb679 	.word	0x000bb679
 800e690:	0800f938 	.word	0x0800f938
 800e694:	3ff00000 	.word	0x3ff00000
 800e698:	40080000 	.word	0x40080000
 800e69c:	0800f918 	.word	0x0800f918
 800e6a0:	0800f928 	.word	0x0800f928
 800e6a4:	460b      	mov	r3, r1
 800e6a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6aa:	e5d7      	b.n	800e25c <__ieee754_pow+0x354>
 800e6ac:	f04f 0a01 	mov.w	sl, #1
 800e6b0:	e65e      	b.n	800e370 <__ieee754_pow+0x468>
 800e6b2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800e984 <__ieee754_pow+0xa7c>)
 800e6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b8:	4630      	mov	r0, r6
 800e6ba:	4639      	mov	r1, r7
 800e6bc:	f7f1 fdee 	bl	800029c <__adddf3>
 800e6c0:	4642      	mov	r2, r8
 800e6c2:	e9cd 0100 	strd	r0, r1, [sp]
 800e6c6:	464b      	mov	r3, r9
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	4629      	mov	r1, r5
 800e6cc:	f7f1 fde4 	bl	8000298 <__aeabi_dsub>
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	460b      	mov	r3, r1
 800e6d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6d8:	f7f2 fa26 	bl	8000b28 <__aeabi_dcmpgt>
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	f47f ae00 	bne.w	800e2e2 <__ieee754_pow+0x3da>
 800e6e2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800e6e6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e6ea:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800e6ee:	fa43 fa0a 	asr.w	sl, r3, sl
 800e6f2:	44da      	add	sl, fp
 800e6f4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e6f8:	489d      	ldr	r0, [pc, #628]	@ (800e970 <__ieee754_pow+0xa68>)
 800e6fa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800e6fe:	4108      	asrs	r0, r1
 800e700:	ea00 030a 	and.w	r3, r0, sl
 800e704:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e708:	f1c1 0114 	rsb	r1, r1, #20
 800e70c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800e710:	fa4a fa01 	asr.w	sl, sl, r1
 800e714:	f1bb 0f00 	cmp.w	fp, #0
 800e718:	4640      	mov	r0, r8
 800e71a:	4649      	mov	r1, r9
 800e71c:	f04f 0200 	mov.w	r2, #0
 800e720:	bfb8      	it	lt
 800e722:	f1ca 0a00 	rsblt	sl, sl, #0
 800e726:	f7f1 fdb7 	bl	8000298 <__aeabi_dsub>
 800e72a:	4680      	mov	r8, r0
 800e72c:	4689      	mov	r9, r1
 800e72e:	4632      	mov	r2, r6
 800e730:	463b      	mov	r3, r7
 800e732:	4640      	mov	r0, r8
 800e734:	4649      	mov	r1, r9
 800e736:	f7f1 fdb1 	bl	800029c <__adddf3>
 800e73a:	2400      	movs	r4, #0
 800e73c:	a37c      	add	r3, pc, #496	@ (adr r3, 800e930 <__ieee754_pow+0xa28>)
 800e73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e742:	4620      	mov	r0, r4
 800e744:	460d      	mov	r5, r1
 800e746:	f7f1 ff5f 	bl	8000608 <__aeabi_dmul>
 800e74a:	4642      	mov	r2, r8
 800e74c:	e9cd 0100 	strd	r0, r1, [sp]
 800e750:	464b      	mov	r3, r9
 800e752:	4620      	mov	r0, r4
 800e754:	4629      	mov	r1, r5
 800e756:	f7f1 fd9f 	bl	8000298 <__aeabi_dsub>
 800e75a:	4602      	mov	r2, r0
 800e75c:	460b      	mov	r3, r1
 800e75e:	4630      	mov	r0, r6
 800e760:	4639      	mov	r1, r7
 800e762:	f7f1 fd99 	bl	8000298 <__aeabi_dsub>
 800e766:	a374      	add	r3, pc, #464	@ (adr r3, 800e938 <__ieee754_pow+0xa30>)
 800e768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e76c:	f7f1 ff4c 	bl	8000608 <__aeabi_dmul>
 800e770:	a373      	add	r3, pc, #460	@ (adr r3, 800e940 <__ieee754_pow+0xa38>)
 800e772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e776:	4680      	mov	r8, r0
 800e778:	4689      	mov	r9, r1
 800e77a:	4620      	mov	r0, r4
 800e77c:	4629      	mov	r1, r5
 800e77e:	f7f1 ff43 	bl	8000608 <__aeabi_dmul>
 800e782:	4602      	mov	r2, r0
 800e784:	460b      	mov	r3, r1
 800e786:	4640      	mov	r0, r8
 800e788:	4649      	mov	r1, r9
 800e78a:	f7f1 fd87 	bl	800029c <__adddf3>
 800e78e:	4604      	mov	r4, r0
 800e790:	460d      	mov	r5, r1
 800e792:	4602      	mov	r2, r0
 800e794:	460b      	mov	r3, r1
 800e796:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e79a:	f7f1 fd7f 	bl	800029c <__adddf3>
 800e79e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7a2:	4680      	mov	r8, r0
 800e7a4:	4689      	mov	r9, r1
 800e7a6:	f7f1 fd77 	bl	8000298 <__aeabi_dsub>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	4629      	mov	r1, r5
 800e7b2:	f7f1 fd71 	bl	8000298 <__aeabi_dsub>
 800e7b6:	4642      	mov	r2, r8
 800e7b8:	4606      	mov	r6, r0
 800e7ba:	460f      	mov	r7, r1
 800e7bc:	464b      	mov	r3, r9
 800e7be:	4640      	mov	r0, r8
 800e7c0:	4649      	mov	r1, r9
 800e7c2:	f7f1 ff21 	bl	8000608 <__aeabi_dmul>
 800e7c6:	a360      	add	r3, pc, #384	@ (adr r3, 800e948 <__ieee754_pow+0xa40>)
 800e7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	460d      	mov	r5, r1
 800e7d0:	f7f1 ff1a 	bl	8000608 <__aeabi_dmul>
 800e7d4:	a35e      	add	r3, pc, #376	@ (adr r3, 800e950 <__ieee754_pow+0xa48>)
 800e7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7da:	f7f1 fd5d 	bl	8000298 <__aeabi_dsub>
 800e7de:	4622      	mov	r2, r4
 800e7e0:	462b      	mov	r3, r5
 800e7e2:	f7f1 ff11 	bl	8000608 <__aeabi_dmul>
 800e7e6:	a35c      	add	r3, pc, #368	@ (adr r3, 800e958 <__ieee754_pow+0xa50>)
 800e7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ec:	f7f1 fd56 	bl	800029c <__adddf3>
 800e7f0:	4622      	mov	r2, r4
 800e7f2:	462b      	mov	r3, r5
 800e7f4:	f7f1 ff08 	bl	8000608 <__aeabi_dmul>
 800e7f8:	a359      	add	r3, pc, #356	@ (adr r3, 800e960 <__ieee754_pow+0xa58>)
 800e7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fe:	f7f1 fd4b 	bl	8000298 <__aeabi_dsub>
 800e802:	4622      	mov	r2, r4
 800e804:	462b      	mov	r3, r5
 800e806:	f7f1 feff 	bl	8000608 <__aeabi_dmul>
 800e80a:	a357      	add	r3, pc, #348	@ (adr r3, 800e968 <__ieee754_pow+0xa60>)
 800e80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e810:	f7f1 fd44 	bl	800029c <__adddf3>
 800e814:	4622      	mov	r2, r4
 800e816:	462b      	mov	r3, r5
 800e818:	f7f1 fef6 	bl	8000608 <__aeabi_dmul>
 800e81c:	4602      	mov	r2, r0
 800e81e:	460b      	mov	r3, r1
 800e820:	4640      	mov	r0, r8
 800e822:	4649      	mov	r1, r9
 800e824:	f7f1 fd38 	bl	8000298 <__aeabi_dsub>
 800e828:	4604      	mov	r4, r0
 800e82a:	460d      	mov	r5, r1
 800e82c:	4602      	mov	r2, r0
 800e82e:	460b      	mov	r3, r1
 800e830:	4640      	mov	r0, r8
 800e832:	4649      	mov	r1, r9
 800e834:	f7f1 fee8 	bl	8000608 <__aeabi_dmul>
 800e838:	2200      	movs	r2, #0
 800e83a:	e9cd 0100 	strd	r0, r1, [sp]
 800e83e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e842:	4620      	mov	r0, r4
 800e844:	4629      	mov	r1, r5
 800e846:	f7f1 fd27 	bl	8000298 <__aeabi_dsub>
 800e84a:	4602      	mov	r2, r0
 800e84c:	460b      	mov	r3, r1
 800e84e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e852:	f7f2 f803 	bl	800085c <__aeabi_ddiv>
 800e856:	4632      	mov	r2, r6
 800e858:	4604      	mov	r4, r0
 800e85a:	460d      	mov	r5, r1
 800e85c:	463b      	mov	r3, r7
 800e85e:	4640      	mov	r0, r8
 800e860:	4649      	mov	r1, r9
 800e862:	f7f1 fed1 	bl	8000608 <__aeabi_dmul>
 800e866:	4632      	mov	r2, r6
 800e868:	463b      	mov	r3, r7
 800e86a:	f7f1 fd17 	bl	800029c <__adddf3>
 800e86e:	4602      	mov	r2, r0
 800e870:	460b      	mov	r3, r1
 800e872:	4620      	mov	r0, r4
 800e874:	4629      	mov	r1, r5
 800e876:	f7f1 fd0f 	bl	8000298 <__aeabi_dsub>
 800e87a:	4642      	mov	r2, r8
 800e87c:	464b      	mov	r3, r9
 800e87e:	f7f1 fd0b 	bl	8000298 <__aeabi_dsub>
 800e882:	460b      	mov	r3, r1
 800e884:	4602      	mov	r2, r0
 800e886:	493b      	ldr	r1, [pc, #236]	@ (800e974 <__ieee754_pow+0xa6c>)
 800e888:	2000      	movs	r0, #0
 800e88a:	f7f1 fd05 	bl	8000298 <__aeabi_dsub>
 800e88e:	ec41 0b10 	vmov	d0, r0, r1
 800e892:	ee10 3a90 	vmov	r3, s1
 800e896:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e89a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e89e:	da30      	bge.n	800e902 <__ieee754_pow+0x9fa>
 800e8a0:	4650      	mov	r0, sl
 800e8a2:	f000 fa71 	bl	800ed88 <scalbn>
 800e8a6:	ec51 0b10 	vmov	r0, r1, d0
 800e8aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8ae:	f7ff bbd2 	b.w	800e056 <__ieee754_pow+0x14e>
 800e8b2:	4c31      	ldr	r4, [pc, #196]	@ (800e978 <__ieee754_pow+0xa70>)
 800e8b4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e8b8:	42a3      	cmp	r3, r4
 800e8ba:	d91a      	bls.n	800e8f2 <__ieee754_pow+0x9ea>
 800e8bc:	4b2f      	ldr	r3, [pc, #188]	@ (800e97c <__ieee754_pow+0xa74>)
 800e8be:	440b      	add	r3, r1
 800e8c0:	4303      	orrs	r3, r0
 800e8c2:	d009      	beq.n	800e8d8 <__ieee754_pow+0x9d0>
 800e8c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	f7f2 f90e 	bl	8000aec <__aeabi_dcmplt>
 800e8d0:	3800      	subs	r0, #0
 800e8d2:	bf18      	it	ne
 800e8d4:	2001      	movne	r0, #1
 800e8d6:	e42b      	b.n	800e130 <__ieee754_pow+0x228>
 800e8d8:	4642      	mov	r2, r8
 800e8da:	464b      	mov	r3, r9
 800e8dc:	f7f1 fcdc 	bl	8000298 <__aeabi_dsub>
 800e8e0:	4632      	mov	r2, r6
 800e8e2:	463b      	mov	r3, r7
 800e8e4:	f7f2 f916 	bl	8000b14 <__aeabi_dcmpge>
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	d1eb      	bne.n	800e8c4 <__ieee754_pow+0x9bc>
 800e8ec:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800e98c <__ieee754_pow+0xa84>
 800e8f0:	e6f7      	b.n	800e6e2 <__ieee754_pow+0x7da>
 800e8f2:	469a      	mov	sl, r3
 800e8f4:	4b22      	ldr	r3, [pc, #136]	@ (800e980 <__ieee754_pow+0xa78>)
 800e8f6:	459a      	cmp	sl, r3
 800e8f8:	f63f aef3 	bhi.w	800e6e2 <__ieee754_pow+0x7da>
 800e8fc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e900:	e715      	b.n	800e72e <__ieee754_pow+0x826>
 800e902:	ec51 0b10 	vmov	r0, r1, d0
 800e906:	4619      	mov	r1, r3
 800e908:	e7cf      	b.n	800e8aa <__ieee754_pow+0x9a2>
 800e90a:	491a      	ldr	r1, [pc, #104]	@ (800e974 <__ieee754_pow+0xa6c>)
 800e90c:	2000      	movs	r0, #0
 800e90e:	f7ff bb18 	b.w	800df42 <__ieee754_pow+0x3a>
 800e912:	2000      	movs	r0, #0
 800e914:	2100      	movs	r1, #0
 800e916:	f7ff bb14 	b.w	800df42 <__ieee754_pow+0x3a>
 800e91a:	4630      	mov	r0, r6
 800e91c:	4639      	mov	r1, r7
 800e91e:	f7ff bb10 	b.w	800df42 <__ieee754_pow+0x3a>
 800e922:	460c      	mov	r4, r1
 800e924:	f7ff bb5e 	b.w	800dfe4 <__ieee754_pow+0xdc>
 800e928:	2400      	movs	r4, #0
 800e92a:	f7ff bb49 	b.w	800dfc0 <__ieee754_pow+0xb8>
 800e92e:	bf00      	nop
 800e930:	00000000 	.word	0x00000000
 800e934:	3fe62e43 	.word	0x3fe62e43
 800e938:	fefa39ef 	.word	0xfefa39ef
 800e93c:	3fe62e42 	.word	0x3fe62e42
 800e940:	0ca86c39 	.word	0x0ca86c39
 800e944:	be205c61 	.word	0xbe205c61
 800e948:	72bea4d0 	.word	0x72bea4d0
 800e94c:	3e663769 	.word	0x3e663769
 800e950:	c5d26bf1 	.word	0xc5d26bf1
 800e954:	3ebbbd41 	.word	0x3ebbbd41
 800e958:	af25de2c 	.word	0xaf25de2c
 800e95c:	3f11566a 	.word	0x3f11566a
 800e960:	16bebd93 	.word	0x16bebd93
 800e964:	3f66c16c 	.word	0x3f66c16c
 800e968:	5555553e 	.word	0x5555553e
 800e96c:	3fc55555 	.word	0x3fc55555
 800e970:	fff00000 	.word	0xfff00000
 800e974:	3ff00000 	.word	0x3ff00000
 800e978:	4090cbff 	.word	0x4090cbff
 800e97c:	3f6f3400 	.word	0x3f6f3400
 800e980:	3fe00000 	.word	0x3fe00000
 800e984:	652b82fe 	.word	0x652b82fe
 800e988:	3c971547 	.word	0x3c971547
 800e98c:	4090cc00 	.word	0x4090cc00

0800e990 <__ieee754_rem_pio2>:
 800e990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e994:	ec57 6b10 	vmov	r6, r7, d0
 800e998:	4bc5      	ldr	r3, [pc, #788]	@ (800ecb0 <__ieee754_rem_pio2+0x320>)
 800e99a:	b08d      	sub	sp, #52	@ 0x34
 800e99c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e9a0:	4598      	cmp	r8, r3
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	9704      	str	r7, [sp, #16]
 800e9a6:	d807      	bhi.n	800e9b8 <__ieee754_rem_pio2+0x28>
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	ed80 0b00 	vstr	d0, [r0]
 800e9b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e9b4:	2500      	movs	r5, #0
 800e9b6:	e028      	b.n	800ea0a <__ieee754_rem_pio2+0x7a>
 800e9b8:	4bbe      	ldr	r3, [pc, #760]	@ (800ecb4 <__ieee754_rem_pio2+0x324>)
 800e9ba:	4598      	cmp	r8, r3
 800e9bc:	d878      	bhi.n	800eab0 <__ieee754_rem_pio2+0x120>
 800e9be:	9b04      	ldr	r3, [sp, #16]
 800e9c0:	4dbd      	ldr	r5, [pc, #756]	@ (800ecb8 <__ieee754_rem_pio2+0x328>)
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ec78 <__ieee754_rem_pio2+0x2e8>)
 800e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9cc:	4639      	mov	r1, r7
 800e9ce:	dd38      	ble.n	800ea42 <__ieee754_rem_pio2+0xb2>
 800e9d0:	f7f1 fc62 	bl	8000298 <__aeabi_dsub>
 800e9d4:	45a8      	cmp	r8, r5
 800e9d6:	4606      	mov	r6, r0
 800e9d8:	460f      	mov	r7, r1
 800e9da:	d01a      	beq.n	800ea12 <__ieee754_rem_pio2+0x82>
 800e9dc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ec80 <__ieee754_rem_pio2+0x2f0>)
 800e9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e2:	f7f1 fc59 	bl	8000298 <__aeabi_dsub>
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	4680      	mov	r8, r0
 800e9ec:	4689      	mov	r9, r1
 800e9ee:	4630      	mov	r0, r6
 800e9f0:	4639      	mov	r1, r7
 800e9f2:	f7f1 fc51 	bl	8000298 <__aeabi_dsub>
 800e9f6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ec80 <__ieee754_rem_pio2+0x2f0>)
 800e9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fc:	f7f1 fc4c 	bl	8000298 <__aeabi_dsub>
 800ea00:	e9c4 8900 	strd	r8, r9, [r4]
 800ea04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ea08:	2501      	movs	r5, #1
 800ea0a:	4628      	mov	r0, r5
 800ea0c:	b00d      	add	sp, #52	@ 0x34
 800ea0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea12:	a39d      	add	r3, pc, #628	@ (adr r3, 800ec88 <__ieee754_rem_pio2+0x2f8>)
 800ea14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea18:	f7f1 fc3e 	bl	8000298 <__aeabi_dsub>
 800ea1c:	a39c      	add	r3, pc, #624	@ (adr r3, 800ec90 <__ieee754_rem_pio2+0x300>)
 800ea1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea22:	4606      	mov	r6, r0
 800ea24:	460f      	mov	r7, r1
 800ea26:	f7f1 fc37 	bl	8000298 <__aeabi_dsub>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	460b      	mov	r3, r1
 800ea2e:	4680      	mov	r8, r0
 800ea30:	4689      	mov	r9, r1
 800ea32:	4630      	mov	r0, r6
 800ea34:	4639      	mov	r1, r7
 800ea36:	f7f1 fc2f 	bl	8000298 <__aeabi_dsub>
 800ea3a:	a395      	add	r3, pc, #596	@ (adr r3, 800ec90 <__ieee754_rem_pio2+0x300>)
 800ea3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea40:	e7dc      	b.n	800e9fc <__ieee754_rem_pio2+0x6c>
 800ea42:	f7f1 fc2b 	bl	800029c <__adddf3>
 800ea46:	45a8      	cmp	r8, r5
 800ea48:	4606      	mov	r6, r0
 800ea4a:	460f      	mov	r7, r1
 800ea4c:	d018      	beq.n	800ea80 <__ieee754_rem_pio2+0xf0>
 800ea4e:	a38c      	add	r3, pc, #560	@ (adr r3, 800ec80 <__ieee754_rem_pio2+0x2f0>)
 800ea50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea54:	f7f1 fc22 	bl	800029c <__adddf3>
 800ea58:	4602      	mov	r2, r0
 800ea5a:	460b      	mov	r3, r1
 800ea5c:	4680      	mov	r8, r0
 800ea5e:	4689      	mov	r9, r1
 800ea60:	4630      	mov	r0, r6
 800ea62:	4639      	mov	r1, r7
 800ea64:	f7f1 fc18 	bl	8000298 <__aeabi_dsub>
 800ea68:	a385      	add	r3, pc, #532	@ (adr r3, 800ec80 <__ieee754_rem_pio2+0x2f0>)
 800ea6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6e:	f7f1 fc15 	bl	800029c <__adddf3>
 800ea72:	f04f 35ff 	mov.w	r5, #4294967295
 800ea76:	e9c4 8900 	strd	r8, r9, [r4]
 800ea7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ea7e:	e7c4      	b.n	800ea0a <__ieee754_rem_pio2+0x7a>
 800ea80:	a381      	add	r3, pc, #516	@ (adr r3, 800ec88 <__ieee754_rem_pio2+0x2f8>)
 800ea82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea86:	f7f1 fc09 	bl	800029c <__adddf3>
 800ea8a:	a381      	add	r3, pc, #516	@ (adr r3, 800ec90 <__ieee754_rem_pio2+0x300>)
 800ea8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea90:	4606      	mov	r6, r0
 800ea92:	460f      	mov	r7, r1
 800ea94:	f7f1 fc02 	bl	800029c <__adddf3>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	4680      	mov	r8, r0
 800ea9e:	4689      	mov	r9, r1
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	4639      	mov	r1, r7
 800eaa4:	f7f1 fbf8 	bl	8000298 <__aeabi_dsub>
 800eaa8:	a379      	add	r3, pc, #484	@ (adr r3, 800ec90 <__ieee754_rem_pio2+0x300>)
 800eaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaae:	e7de      	b.n	800ea6e <__ieee754_rem_pio2+0xde>
 800eab0:	4b82      	ldr	r3, [pc, #520]	@ (800ecbc <__ieee754_rem_pio2+0x32c>)
 800eab2:	4598      	cmp	r8, r3
 800eab4:	f200 80d1 	bhi.w	800ec5a <__ieee754_rem_pio2+0x2ca>
 800eab8:	f7fe f8e6 	bl	800cc88 <fabs>
 800eabc:	ec57 6b10 	vmov	r6, r7, d0
 800eac0:	a375      	add	r3, pc, #468	@ (adr r3, 800ec98 <__ieee754_rem_pio2+0x308>)
 800eac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac6:	4630      	mov	r0, r6
 800eac8:	4639      	mov	r1, r7
 800eaca:	f7f1 fd9d 	bl	8000608 <__aeabi_dmul>
 800eace:	4b7c      	ldr	r3, [pc, #496]	@ (800ecc0 <__ieee754_rem_pio2+0x330>)
 800ead0:	2200      	movs	r2, #0
 800ead2:	f7f1 fbe3 	bl	800029c <__adddf3>
 800ead6:	f7f2 f847 	bl	8000b68 <__aeabi_d2iz>
 800eada:	4605      	mov	r5, r0
 800eadc:	f7f1 fd2a 	bl	8000534 <__aeabi_i2d>
 800eae0:	4602      	mov	r2, r0
 800eae2:	460b      	mov	r3, r1
 800eae4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eae8:	a363      	add	r3, pc, #396	@ (adr r3, 800ec78 <__ieee754_rem_pio2+0x2e8>)
 800eaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaee:	f7f1 fd8b 	bl	8000608 <__aeabi_dmul>
 800eaf2:	4602      	mov	r2, r0
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	4630      	mov	r0, r6
 800eaf8:	4639      	mov	r1, r7
 800eafa:	f7f1 fbcd 	bl	8000298 <__aeabi_dsub>
 800eafe:	a360      	add	r3, pc, #384	@ (adr r3, 800ec80 <__ieee754_rem_pio2+0x2f0>)
 800eb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb04:	4682      	mov	sl, r0
 800eb06:	468b      	mov	fp, r1
 800eb08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb0c:	f7f1 fd7c 	bl	8000608 <__aeabi_dmul>
 800eb10:	2d1f      	cmp	r5, #31
 800eb12:	4606      	mov	r6, r0
 800eb14:	460f      	mov	r7, r1
 800eb16:	dc0c      	bgt.n	800eb32 <__ieee754_rem_pio2+0x1a2>
 800eb18:	4b6a      	ldr	r3, [pc, #424]	@ (800ecc4 <__ieee754_rem_pio2+0x334>)
 800eb1a:	1e6a      	subs	r2, r5, #1
 800eb1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb20:	4543      	cmp	r3, r8
 800eb22:	d006      	beq.n	800eb32 <__ieee754_rem_pio2+0x1a2>
 800eb24:	4632      	mov	r2, r6
 800eb26:	463b      	mov	r3, r7
 800eb28:	4650      	mov	r0, sl
 800eb2a:	4659      	mov	r1, fp
 800eb2c:	f7f1 fbb4 	bl	8000298 <__aeabi_dsub>
 800eb30:	e00e      	b.n	800eb50 <__ieee754_rem_pio2+0x1c0>
 800eb32:	463b      	mov	r3, r7
 800eb34:	4632      	mov	r2, r6
 800eb36:	4650      	mov	r0, sl
 800eb38:	4659      	mov	r1, fp
 800eb3a:	f7f1 fbad 	bl	8000298 <__aeabi_dsub>
 800eb3e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eb42:	9305      	str	r3, [sp, #20]
 800eb44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eb48:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800eb4c:	2b10      	cmp	r3, #16
 800eb4e:	dc02      	bgt.n	800eb56 <__ieee754_rem_pio2+0x1c6>
 800eb50:	e9c4 0100 	strd	r0, r1, [r4]
 800eb54:	e039      	b.n	800ebca <__ieee754_rem_pio2+0x23a>
 800eb56:	a34c      	add	r3, pc, #304	@ (adr r3, 800ec88 <__ieee754_rem_pio2+0x2f8>)
 800eb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb60:	f7f1 fd52 	bl	8000608 <__aeabi_dmul>
 800eb64:	4606      	mov	r6, r0
 800eb66:	460f      	mov	r7, r1
 800eb68:	4602      	mov	r2, r0
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	4650      	mov	r0, sl
 800eb6e:	4659      	mov	r1, fp
 800eb70:	f7f1 fb92 	bl	8000298 <__aeabi_dsub>
 800eb74:	4602      	mov	r2, r0
 800eb76:	460b      	mov	r3, r1
 800eb78:	4680      	mov	r8, r0
 800eb7a:	4689      	mov	r9, r1
 800eb7c:	4650      	mov	r0, sl
 800eb7e:	4659      	mov	r1, fp
 800eb80:	f7f1 fb8a 	bl	8000298 <__aeabi_dsub>
 800eb84:	4632      	mov	r2, r6
 800eb86:	463b      	mov	r3, r7
 800eb88:	f7f1 fb86 	bl	8000298 <__aeabi_dsub>
 800eb8c:	a340      	add	r3, pc, #256	@ (adr r3, 800ec90 <__ieee754_rem_pio2+0x300>)
 800eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb92:	4606      	mov	r6, r0
 800eb94:	460f      	mov	r7, r1
 800eb96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb9a:	f7f1 fd35 	bl	8000608 <__aeabi_dmul>
 800eb9e:	4632      	mov	r2, r6
 800eba0:	463b      	mov	r3, r7
 800eba2:	f7f1 fb79 	bl	8000298 <__aeabi_dsub>
 800eba6:	4602      	mov	r2, r0
 800eba8:	460b      	mov	r3, r1
 800ebaa:	4606      	mov	r6, r0
 800ebac:	460f      	mov	r7, r1
 800ebae:	4640      	mov	r0, r8
 800ebb0:	4649      	mov	r1, r9
 800ebb2:	f7f1 fb71 	bl	8000298 <__aeabi_dsub>
 800ebb6:	9a05      	ldr	r2, [sp, #20]
 800ebb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ebbc:	1ad3      	subs	r3, r2, r3
 800ebbe:	2b31      	cmp	r3, #49	@ 0x31
 800ebc0:	dc20      	bgt.n	800ec04 <__ieee754_rem_pio2+0x274>
 800ebc2:	e9c4 0100 	strd	r0, r1, [r4]
 800ebc6:	46c2      	mov	sl, r8
 800ebc8:	46cb      	mov	fp, r9
 800ebca:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ebce:	4650      	mov	r0, sl
 800ebd0:	4642      	mov	r2, r8
 800ebd2:	464b      	mov	r3, r9
 800ebd4:	4659      	mov	r1, fp
 800ebd6:	f7f1 fb5f 	bl	8000298 <__aeabi_dsub>
 800ebda:	463b      	mov	r3, r7
 800ebdc:	4632      	mov	r2, r6
 800ebde:	f7f1 fb5b 	bl	8000298 <__aeabi_dsub>
 800ebe2:	9b04      	ldr	r3, [sp, #16]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ebea:	f6bf af0e 	bge.w	800ea0a <__ieee754_rem_pio2+0x7a>
 800ebee:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ebf2:	6063      	str	r3, [r4, #4]
 800ebf4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ebf8:	f8c4 8000 	str.w	r8, [r4]
 800ebfc:	60a0      	str	r0, [r4, #8]
 800ebfe:	60e3      	str	r3, [r4, #12]
 800ec00:	426d      	negs	r5, r5
 800ec02:	e702      	b.n	800ea0a <__ieee754_rem_pio2+0x7a>
 800ec04:	a326      	add	r3, pc, #152	@ (adr r3, 800eca0 <__ieee754_rem_pio2+0x310>)
 800ec06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec0e:	f7f1 fcfb 	bl	8000608 <__aeabi_dmul>
 800ec12:	4606      	mov	r6, r0
 800ec14:	460f      	mov	r7, r1
 800ec16:	4602      	mov	r2, r0
 800ec18:	460b      	mov	r3, r1
 800ec1a:	4640      	mov	r0, r8
 800ec1c:	4649      	mov	r1, r9
 800ec1e:	f7f1 fb3b 	bl	8000298 <__aeabi_dsub>
 800ec22:	4602      	mov	r2, r0
 800ec24:	460b      	mov	r3, r1
 800ec26:	4682      	mov	sl, r0
 800ec28:	468b      	mov	fp, r1
 800ec2a:	4640      	mov	r0, r8
 800ec2c:	4649      	mov	r1, r9
 800ec2e:	f7f1 fb33 	bl	8000298 <__aeabi_dsub>
 800ec32:	4632      	mov	r2, r6
 800ec34:	463b      	mov	r3, r7
 800ec36:	f7f1 fb2f 	bl	8000298 <__aeabi_dsub>
 800ec3a:	a31b      	add	r3, pc, #108	@ (adr r3, 800eca8 <__ieee754_rem_pio2+0x318>)
 800ec3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec40:	4606      	mov	r6, r0
 800ec42:	460f      	mov	r7, r1
 800ec44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec48:	f7f1 fcde 	bl	8000608 <__aeabi_dmul>
 800ec4c:	4632      	mov	r2, r6
 800ec4e:	463b      	mov	r3, r7
 800ec50:	f7f1 fb22 	bl	8000298 <__aeabi_dsub>
 800ec54:	4606      	mov	r6, r0
 800ec56:	460f      	mov	r7, r1
 800ec58:	e764      	b.n	800eb24 <__ieee754_rem_pio2+0x194>
 800ec5a:	4b1b      	ldr	r3, [pc, #108]	@ (800ecc8 <__ieee754_rem_pio2+0x338>)
 800ec5c:	4598      	cmp	r8, r3
 800ec5e:	d935      	bls.n	800eccc <__ieee754_rem_pio2+0x33c>
 800ec60:	4632      	mov	r2, r6
 800ec62:	463b      	mov	r3, r7
 800ec64:	4630      	mov	r0, r6
 800ec66:	4639      	mov	r1, r7
 800ec68:	f7f1 fb16 	bl	8000298 <__aeabi_dsub>
 800ec6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ec70:	e9c4 0100 	strd	r0, r1, [r4]
 800ec74:	e69e      	b.n	800e9b4 <__ieee754_rem_pio2+0x24>
 800ec76:	bf00      	nop
 800ec78:	54400000 	.word	0x54400000
 800ec7c:	3ff921fb 	.word	0x3ff921fb
 800ec80:	1a626331 	.word	0x1a626331
 800ec84:	3dd0b461 	.word	0x3dd0b461
 800ec88:	1a600000 	.word	0x1a600000
 800ec8c:	3dd0b461 	.word	0x3dd0b461
 800ec90:	2e037073 	.word	0x2e037073
 800ec94:	3ba3198a 	.word	0x3ba3198a
 800ec98:	6dc9c883 	.word	0x6dc9c883
 800ec9c:	3fe45f30 	.word	0x3fe45f30
 800eca0:	2e000000 	.word	0x2e000000
 800eca4:	3ba3198a 	.word	0x3ba3198a
 800eca8:	252049c1 	.word	0x252049c1
 800ecac:	397b839a 	.word	0x397b839a
 800ecb0:	3fe921fb 	.word	0x3fe921fb
 800ecb4:	4002d97b 	.word	0x4002d97b
 800ecb8:	3ff921fb 	.word	0x3ff921fb
 800ecbc:	413921fb 	.word	0x413921fb
 800ecc0:	3fe00000 	.word	0x3fe00000
 800ecc4:	0800f948 	.word	0x0800f948
 800ecc8:	7fefffff 	.word	0x7fefffff
 800eccc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ecd0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ecd4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ecd8:	4630      	mov	r0, r6
 800ecda:	460f      	mov	r7, r1
 800ecdc:	f7f1 ff44 	bl	8000b68 <__aeabi_d2iz>
 800ece0:	f7f1 fc28 	bl	8000534 <__aeabi_i2d>
 800ece4:	4602      	mov	r2, r0
 800ece6:	460b      	mov	r3, r1
 800ece8:	4630      	mov	r0, r6
 800ecea:	4639      	mov	r1, r7
 800ecec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ecf0:	f7f1 fad2 	bl	8000298 <__aeabi_dsub>
 800ecf4:	4b22      	ldr	r3, [pc, #136]	@ (800ed80 <__ieee754_rem_pio2+0x3f0>)
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	f7f1 fc86 	bl	8000608 <__aeabi_dmul>
 800ecfc:	460f      	mov	r7, r1
 800ecfe:	4606      	mov	r6, r0
 800ed00:	f7f1 ff32 	bl	8000b68 <__aeabi_d2iz>
 800ed04:	f7f1 fc16 	bl	8000534 <__aeabi_i2d>
 800ed08:	4602      	mov	r2, r0
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	4630      	mov	r0, r6
 800ed0e:	4639      	mov	r1, r7
 800ed10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ed14:	f7f1 fac0 	bl	8000298 <__aeabi_dsub>
 800ed18:	4b19      	ldr	r3, [pc, #100]	@ (800ed80 <__ieee754_rem_pio2+0x3f0>)
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f7f1 fc74 	bl	8000608 <__aeabi_dmul>
 800ed20:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ed24:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ed28:	f04f 0803 	mov.w	r8, #3
 800ed2c:	2600      	movs	r6, #0
 800ed2e:	2700      	movs	r7, #0
 800ed30:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ed34:	4632      	mov	r2, r6
 800ed36:	463b      	mov	r3, r7
 800ed38:	46c2      	mov	sl, r8
 800ed3a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ed3e:	f7f1 fecb 	bl	8000ad8 <__aeabi_dcmpeq>
 800ed42:	2800      	cmp	r0, #0
 800ed44:	d1f4      	bne.n	800ed30 <__ieee754_rem_pio2+0x3a0>
 800ed46:	4b0f      	ldr	r3, [pc, #60]	@ (800ed84 <__ieee754_rem_pio2+0x3f4>)
 800ed48:	9301      	str	r3, [sp, #4]
 800ed4a:	2302      	movs	r3, #2
 800ed4c:	9300      	str	r3, [sp, #0]
 800ed4e:	462a      	mov	r2, r5
 800ed50:	4653      	mov	r3, sl
 800ed52:	4621      	mov	r1, r4
 800ed54:	a806      	add	r0, sp, #24
 800ed56:	f000 f8d3 	bl	800ef00 <__kernel_rem_pio2>
 800ed5a:	9b04      	ldr	r3, [sp, #16]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	4605      	mov	r5, r0
 800ed60:	f6bf ae53 	bge.w	800ea0a <__ieee754_rem_pio2+0x7a>
 800ed64:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ed68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ed6c:	e9c4 2300 	strd	r2, r3, [r4]
 800ed70:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ed74:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ed78:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ed7c:	e740      	b.n	800ec00 <__ieee754_rem_pio2+0x270>
 800ed7e:	bf00      	nop
 800ed80:	41700000 	.word	0x41700000
 800ed84:	0800f9c8 	.word	0x0800f9c8

0800ed88 <scalbn>:
 800ed88:	b570      	push	{r4, r5, r6, lr}
 800ed8a:	ec55 4b10 	vmov	r4, r5, d0
 800ed8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ed92:	4606      	mov	r6, r0
 800ed94:	462b      	mov	r3, r5
 800ed96:	b991      	cbnz	r1, 800edbe <scalbn+0x36>
 800ed98:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ed9c:	4323      	orrs	r3, r4
 800ed9e:	d03d      	beq.n	800ee1c <scalbn+0x94>
 800eda0:	4b35      	ldr	r3, [pc, #212]	@ (800ee78 <scalbn+0xf0>)
 800eda2:	4620      	mov	r0, r4
 800eda4:	4629      	mov	r1, r5
 800eda6:	2200      	movs	r2, #0
 800eda8:	f7f1 fc2e 	bl	8000608 <__aeabi_dmul>
 800edac:	4b33      	ldr	r3, [pc, #204]	@ (800ee7c <scalbn+0xf4>)
 800edae:	429e      	cmp	r6, r3
 800edb0:	4604      	mov	r4, r0
 800edb2:	460d      	mov	r5, r1
 800edb4:	da0f      	bge.n	800edd6 <scalbn+0x4e>
 800edb6:	a328      	add	r3, pc, #160	@ (adr r3, 800ee58 <scalbn+0xd0>)
 800edb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edbc:	e01e      	b.n	800edfc <scalbn+0x74>
 800edbe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800edc2:	4291      	cmp	r1, r2
 800edc4:	d10b      	bne.n	800edde <scalbn+0x56>
 800edc6:	4622      	mov	r2, r4
 800edc8:	4620      	mov	r0, r4
 800edca:	4629      	mov	r1, r5
 800edcc:	f7f1 fa66 	bl	800029c <__adddf3>
 800edd0:	4604      	mov	r4, r0
 800edd2:	460d      	mov	r5, r1
 800edd4:	e022      	b.n	800ee1c <scalbn+0x94>
 800edd6:	460b      	mov	r3, r1
 800edd8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800eddc:	3936      	subs	r1, #54	@ 0x36
 800edde:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ede2:	4296      	cmp	r6, r2
 800ede4:	dd0d      	ble.n	800ee02 <scalbn+0x7a>
 800ede6:	2d00      	cmp	r5, #0
 800ede8:	a11d      	add	r1, pc, #116	@ (adr r1, 800ee60 <scalbn+0xd8>)
 800edea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edee:	da02      	bge.n	800edf6 <scalbn+0x6e>
 800edf0:	a11d      	add	r1, pc, #116	@ (adr r1, 800ee68 <scalbn+0xe0>)
 800edf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edf6:	a31a      	add	r3, pc, #104	@ (adr r3, 800ee60 <scalbn+0xd8>)
 800edf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfc:	f7f1 fc04 	bl	8000608 <__aeabi_dmul>
 800ee00:	e7e6      	b.n	800edd0 <scalbn+0x48>
 800ee02:	1872      	adds	r2, r6, r1
 800ee04:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ee08:	428a      	cmp	r2, r1
 800ee0a:	dcec      	bgt.n	800ede6 <scalbn+0x5e>
 800ee0c:	2a00      	cmp	r2, #0
 800ee0e:	dd08      	ble.n	800ee22 <scalbn+0x9a>
 800ee10:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ee14:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ee18:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ee1c:	ec45 4b10 	vmov	d0, r4, r5
 800ee20:	bd70      	pop	{r4, r5, r6, pc}
 800ee22:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ee26:	da08      	bge.n	800ee3a <scalbn+0xb2>
 800ee28:	2d00      	cmp	r5, #0
 800ee2a:	a10b      	add	r1, pc, #44	@ (adr r1, 800ee58 <scalbn+0xd0>)
 800ee2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee30:	dac1      	bge.n	800edb6 <scalbn+0x2e>
 800ee32:	a10f      	add	r1, pc, #60	@ (adr r1, 800ee70 <scalbn+0xe8>)
 800ee34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee38:	e7bd      	b.n	800edb6 <scalbn+0x2e>
 800ee3a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ee3e:	3236      	adds	r2, #54	@ 0x36
 800ee40:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ee44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ee48:	4620      	mov	r0, r4
 800ee4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ee80 <scalbn+0xf8>)
 800ee4c:	4629      	mov	r1, r5
 800ee4e:	2200      	movs	r2, #0
 800ee50:	e7d4      	b.n	800edfc <scalbn+0x74>
 800ee52:	bf00      	nop
 800ee54:	f3af 8000 	nop.w
 800ee58:	c2f8f359 	.word	0xc2f8f359
 800ee5c:	01a56e1f 	.word	0x01a56e1f
 800ee60:	8800759c 	.word	0x8800759c
 800ee64:	7e37e43c 	.word	0x7e37e43c
 800ee68:	8800759c 	.word	0x8800759c
 800ee6c:	fe37e43c 	.word	0xfe37e43c
 800ee70:	c2f8f359 	.word	0xc2f8f359
 800ee74:	81a56e1f 	.word	0x81a56e1f
 800ee78:	43500000 	.word	0x43500000
 800ee7c:	ffff3cb0 	.word	0xffff3cb0
 800ee80:	3c900000 	.word	0x3c900000

0800ee84 <with_errno>:
 800ee84:	b510      	push	{r4, lr}
 800ee86:	ed2d 8b02 	vpush	{d8}
 800ee8a:	eeb0 8a40 	vmov.f32	s16, s0
 800ee8e:	eef0 8a60 	vmov.f32	s17, s1
 800ee92:	4604      	mov	r4, r0
 800ee94:	f7fc ff8e 	bl	800bdb4 <__errno>
 800ee98:	eeb0 0a48 	vmov.f32	s0, s16
 800ee9c:	eef0 0a68 	vmov.f32	s1, s17
 800eea0:	ecbd 8b02 	vpop	{d8}
 800eea4:	6004      	str	r4, [r0, #0]
 800eea6:	bd10      	pop	{r4, pc}

0800eea8 <xflow>:
 800eea8:	4603      	mov	r3, r0
 800eeaa:	b507      	push	{r0, r1, r2, lr}
 800eeac:	ec51 0b10 	vmov	r0, r1, d0
 800eeb0:	b183      	cbz	r3, 800eed4 <xflow+0x2c>
 800eeb2:	4602      	mov	r2, r0
 800eeb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eeb8:	e9cd 2300 	strd	r2, r3, [sp]
 800eebc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eec0:	f7f1 fba2 	bl	8000608 <__aeabi_dmul>
 800eec4:	ec41 0b10 	vmov	d0, r0, r1
 800eec8:	2022      	movs	r0, #34	@ 0x22
 800eeca:	b003      	add	sp, #12
 800eecc:	f85d eb04 	ldr.w	lr, [sp], #4
 800eed0:	f7ff bfd8 	b.w	800ee84 <with_errno>
 800eed4:	4602      	mov	r2, r0
 800eed6:	460b      	mov	r3, r1
 800eed8:	e7ee      	b.n	800eeb8 <xflow+0x10>
 800eeda:	0000      	movs	r0, r0
 800eedc:	0000      	movs	r0, r0
	...

0800eee0 <__math_uflow>:
 800eee0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800eee8 <__math_uflow+0x8>
 800eee4:	f7ff bfe0 	b.w	800eea8 <xflow>
 800eee8:	00000000 	.word	0x00000000
 800eeec:	10000000 	.word	0x10000000

0800eef0 <__math_oflow>:
 800eef0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800eef8 <__math_oflow+0x8>
 800eef4:	f7ff bfd8 	b.w	800eea8 <xflow>
 800eef8:	00000000 	.word	0x00000000
 800eefc:	70000000 	.word	0x70000000

0800ef00 <__kernel_rem_pio2>:
 800ef00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef04:	ed2d 8b02 	vpush	{d8}
 800ef08:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ef0c:	f112 0f14 	cmn.w	r2, #20
 800ef10:	9306      	str	r3, [sp, #24]
 800ef12:	9104      	str	r1, [sp, #16]
 800ef14:	4bbe      	ldr	r3, [pc, #760]	@ (800f210 <__kernel_rem_pio2+0x310>)
 800ef16:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800ef18:	9008      	str	r0, [sp, #32]
 800ef1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef1e:	9300      	str	r3, [sp, #0]
 800ef20:	9b06      	ldr	r3, [sp, #24]
 800ef22:	f103 33ff 	add.w	r3, r3, #4294967295
 800ef26:	bfa8      	it	ge
 800ef28:	1ed4      	subge	r4, r2, #3
 800ef2a:	9305      	str	r3, [sp, #20]
 800ef2c:	bfb2      	itee	lt
 800ef2e:	2400      	movlt	r4, #0
 800ef30:	2318      	movge	r3, #24
 800ef32:	fb94 f4f3 	sdivge	r4, r4, r3
 800ef36:	f06f 0317 	mvn.w	r3, #23
 800ef3a:	fb04 3303 	mla	r3, r4, r3, r3
 800ef3e:	eb03 0b02 	add.w	fp, r3, r2
 800ef42:	9b00      	ldr	r3, [sp, #0]
 800ef44:	9a05      	ldr	r2, [sp, #20]
 800ef46:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800f200 <__kernel_rem_pio2+0x300>
 800ef4a:	eb03 0802 	add.w	r8, r3, r2
 800ef4e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ef50:	1aa7      	subs	r7, r4, r2
 800ef52:	ae20      	add	r6, sp, #128	@ 0x80
 800ef54:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ef58:	2500      	movs	r5, #0
 800ef5a:	4545      	cmp	r5, r8
 800ef5c:	dd13      	ble.n	800ef86 <__kernel_rem_pio2+0x86>
 800ef5e:	9b06      	ldr	r3, [sp, #24]
 800ef60:	aa20      	add	r2, sp, #128	@ 0x80
 800ef62:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ef66:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800ef6a:	f04f 0800 	mov.w	r8, #0
 800ef6e:	9b00      	ldr	r3, [sp, #0]
 800ef70:	4598      	cmp	r8, r3
 800ef72:	dc31      	bgt.n	800efd8 <__kernel_rem_pio2+0xd8>
 800ef74:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800f200 <__kernel_rem_pio2+0x300>
 800ef78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ef7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ef80:	462f      	mov	r7, r5
 800ef82:	2600      	movs	r6, #0
 800ef84:	e01b      	b.n	800efbe <__kernel_rem_pio2+0xbe>
 800ef86:	42ef      	cmn	r7, r5
 800ef88:	d407      	bmi.n	800ef9a <__kernel_rem_pio2+0x9a>
 800ef8a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ef8e:	f7f1 fad1 	bl	8000534 <__aeabi_i2d>
 800ef92:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ef96:	3501      	adds	r5, #1
 800ef98:	e7df      	b.n	800ef5a <__kernel_rem_pio2+0x5a>
 800ef9a:	ec51 0b18 	vmov	r0, r1, d8
 800ef9e:	e7f8      	b.n	800ef92 <__kernel_rem_pio2+0x92>
 800efa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efa4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800efa8:	f7f1 fb2e 	bl	8000608 <__aeabi_dmul>
 800efac:	4602      	mov	r2, r0
 800efae:	460b      	mov	r3, r1
 800efb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efb4:	f7f1 f972 	bl	800029c <__adddf3>
 800efb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efbc:	3601      	adds	r6, #1
 800efbe:	9b05      	ldr	r3, [sp, #20]
 800efc0:	429e      	cmp	r6, r3
 800efc2:	f1a7 0708 	sub.w	r7, r7, #8
 800efc6:	ddeb      	ble.n	800efa0 <__kernel_rem_pio2+0xa0>
 800efc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800efcc:	f108 0801 	add.w	r8, r8, #1
 800efd0:	ecaa 7b02 	vstmia	sl!, {d7}
 800efd4:	3508      	adds	r5, #8
 800efd6:	e7ca      	b.n	800ef6e <__kernel_rem_pio2+0x6e>
 800efd8:	9b00      	ldr	r3, [sp, #0]
 800efda:	f8dd 8000 	ldr.w	r8, [sp]
 800efde:	aa0c      	add	r2, sp, #48	@ 0x30
 800efe0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800efe4:	930a      	str	r3, [sp, #40]	@ 0x28
 800efe6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800efe8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800efec:	9309      	str	r3, [sp, #36]	@ 0x24
 800efee:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800eff2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eff4:	ab98      	add	r3, sp, #608	@ 0x260
 800eff6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800effa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800effe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f002:	ac0c      	add	r4, sp, #48	@ 0x30
 800f004:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f006:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800f00a:	46a1      	mov	r9, r4
 800f00c:	46c2      	mov	sl, r8
 800f00e:	f1ba 0f00 	cmp.w	sl, #0
 800f012:	f1a5 0508 	sub.w	r5, r5, #8
 800f016:	dc77      	bgt.n	800f108 <__kernel_rem_pio2+0x208>
 800f018:	4658      	mov	r0, fp
 800f01a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f01e:	f7ff feb3 	bl	800ed88 <scalbn>
 800f022:	ec57 6b10 	vmov	r6, r7, d0
 800f026:	2200      	movs	r2, #0
 800f028:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f02c:	4630      	mov	r0, r6
 800f02e:	4639      	mov	r1, r7
 800f030:	f7f1 faea 	bl	8000608 <__aeabi_dmul>
 800f034:	ec41 0b10 	vmov	d0, r0, r1
 800f038:	f000 faba 	bl	800f5b0 <floor>
 800f03c:	4b75      	ldr	r3, [pc, #468]	@ (800f214 <__kernel_rem_pio2+0x314>)
 800f03e:	ec51 0b10 	vmov	r0, r1, d0
 800f042:	2200      	movs	r2, #0
 800f044:	f7f1 fae0 	bl	8000608 <__aeabi_dmul>
 800f048:	4602      	mov	r2, r0
 800f04a:	460b      	mov	r3, r1
 800f04c:	4630      	mov	r0, r6
 800f04e:	4639      	mov	r1, r7
 800f050:	f7f1 f922 	bl	8000298 <__aeabi_dsub>
 800f054:	460f      	mov	r7, r1
 800f056:	4606      	mov	r6, r0
 800f058:	f7f1 fd86 	bl	8000b68 <__aeabi_d2iz>
 800f05c:	9002      	str	r0, [sp, #8]
 800f05e:	f7f1 fa69 	bl	8000534 <__aeabi_i2d>
 800f062:	4602      	mov	r2, r0
 800f064:	460b      	mov	r3, r1
 800f066:	4630      	mov	r0, r6
 800f068:	4639      	mov	r1, r7
 800f06a:	f7f1 f915 	bl	8000298 <__aeabi_dsub>
 800f06e:	f1bb 0f00 	cmp.w	fp, #0
 800f072:	4606      	mov	r6, r0
 800f074:	460f      	mov	r7, r1
 800f076:	dd6c      	ble.n	800f152 <__kernel_rem_pio2+0x252>
 800f078:	f108 31ff 	add.w	r1, r8, #4294967295
 800f07c:	ab0c      	add	r3, sp, #48	@ 0x30
 800f07e:	9d02      	ldr	r5, [sp, #8]
 800f080:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f084:	f1cb 0018 	rsb	r0, fp, #24
 800f088:	fa43 f200 	asr.w	r2, r3, r0
 800f08c:	4415      	add	r5, r2
 800f08e:	4082      	lsls	r2, r0
 800f090:	1a9b      	subs	r3, r3, r2
 800f092:	aa0c      	add	r2, sp, #48	@ 0x30
 800f094:	9502      	str	r5, [sp, #8]
 800f096:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f09a:	f1cb 0217 	rsb	r2, fp, #23
 800f09e:	fa43 f902 	asr.w	r9, r3, r2
 800f0a2:	f1b9 0f00 	cmp.w	r9, #0
 800f0a6:	dd64      	ble.n	800f172 <__kernel_rem_pio2+0x272>
 800f0a8:	9b02      	ldr	r3, [sp, #8]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	9302      	str	r3, [sp, #8]
 800f0b0:	4615      	mov	r5, r2
 800f0b2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800f0b6:	4590      	cmp	r8, r2
 800f0b8:	f300 80b8 	bgt.w	800f22c <__kernel_rem_pio2+0x32c>
 800f0bc:	f1bb 0f00 	cmp.w	fp, #0
 800f0c0:	dd07      	ble.n	800f0d2 <__kernel_rem_pio2+0x1d2>
 800f0c2:	f1bb 0f01 	cmp.w	fp, #1
 800f0c6:	f000 80bf 	beq.w	800f248 <__kernel_rem_pio2+0x348>
 800f0ca:	f1bb 0f02 	cmp.w	fp, #2
 800f0ce:	f000 80c6 	beq.w	800f25e <__kernel_rem_pio2+0x35e>
 800f0d2:	f1b9 0f02 	cmp.w	r9, #2
 800f0d6:	d14c      	bne.n	800f172 <__kernel_rem_pio2+0x272>
 800f0d8:	4632      	mov	r2, r6
 800f0da:	463b      	mov	r3, r7
 800f0dc:	494e      	ldr	r1, [pc, #312]	@ (800f218 <__kernel_rem_pio2+0x318>)
 800f0de:	2000      	movs	r0, #0
 800f0e0:	f7f1 f8da 	bl	8000298 <__aeabi_dsub>
 800f0e4:	4606      	mov	r6, r0
 800f0e6:	460f      	mov	r7, r1
 800f0e8:	2d00      	cmp	r5, #0
 800f0ea:	d042      	beq.n	800f172 <__kernel_rem_pio2+0x272>
 800f0ec:	4658      	mov	r0, fp
 800f0ee:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800f208 <__kernel_rem_pio2+0x308>
 800f0f2:	f7ff fe49 	bl	800ed88 <scalbn>
 800f0f6:	4630      	mov	r0, r6
 800f0f8:	4639      	mov	r1, r7
 800f0fa:	ec53 2b10 	vmov	r2, r3, d0
 800f0fe:	f7f1 f8cb 	bl	8000298 <__aeabi_dsub>
 800f102:	4606      	mov	r6, r0
 800f104:	460f      	mov	r7, r1
 800f106:	e034      	b.n	800f172 <__kernel_rem_pio2+0x272>
 800f108:	4b44      	ldr	r3, [pc, #272]	@ (800f21c <__kernel_rem_pio2+0x31c>)
 800f10a:	2200      	movs	r2, #0
 800f10c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f110:	f7f1 fa7a 	bl	8000608 <__aeabi_dmul>
 800f114:	f7f1 fd28 	bl	8000b68 <__aeabi_d2iz>
 800f118:	f7f1 fa0c 	bl	8000534 <__aeabi_i2d>
 800f11c:	4b40      	ldr	r3, [pc, #256]	@ (800f220 <__kernel_rem_pio2+0x320>)
 800f11e:	2200      	movs	r2, #0
 800f120:	4606      	mov	r6, r0
 800f122:	460f      	mov	r7, r1
 800f124:	f7f1 fa70 	bl	8000608 <__aeabi_dmul>
 800f128:	4602      	mov	r2, r0
 800f12a:	460b      	mov	r3, r1
 800f12c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f130:	f7f1 f8b2 	bl	8000298 <__aeabi_dsub>
 800f134:	f7f1 fd18 	bl	8000b68 <__aeabi_d2iz>
 800f138:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f13c:	f849 0b04 	str.w	r0, [r9], #4
 800f140:	4639      	mov	r1, r7
 800f142:	4630      	mov	r0, r6
 800f144:	f7f1 f8aa 	bl	800029c <__adddf3>
 800f148:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f14c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f150:	e75d      	b.n	800f00e <__kernel_rem_pio2+0x10e>
 800f152:	d107      	bne.n	800f164 <__kernel_rem_pio2+0x264>
 800f154:	f108 33ff 	add.w	r3, r8, #4294967295
 800f158:	aa0c      	add	r2, sp, #48	@ 0x30
 800f15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f15e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800f162:	e79e      	b.n	800f0a2 <__kernel_rem_pio2+0x1a2>
 800f164:	4b2f      	ldr	r3, [pc, #188]	@ (800f224 <__kernel_rem_pio2+0x324>)
 800f166:	2200      	movs	r2, #0
 800f168:	f7f1 fcd4 	bl	8000b14 <__aeabi_dcmpge>
 800f16c:	2800      	cmp	r0, #0
 800f16e:	d143      	bne.n	800f1f8 <__kernel_rem_pio2+0x2f8>
 800f170:	4681      	mov	r9, r0
 800f172:	2200      	movs	r2, #0
 800f174:	2300      	movs	r3, #0
 800f176:	4630      	mov	r0, r6
 800f178:	4639      	mov	r1, r7
 800f17a:	f7f1 fcad 	bl	8000ad8 <__aeabi_dcmpeq>
 800f17e:	2800      	cmp	r0, #0
 800f180:	f000 80bf 	beq.w	800f302 <__kernel_rem_pio2+0x402>
 800f184:	f108 33ff 	add.w	r3, r8, #4294967295
 800f188:	2200      	movs	r2, #0
 800f18a:	9900      	ldr	r1, [sp, #0]
 800f18c:	428b      	cmp	r3, r1
 800f18e:	da6e      	bge.n	800f26e <__kernel_rem_pio2+0x36e>
 800f190:	2a00      	cmp	r2, #0
 800f192:	f000 8089 	beq.w	800f2a8 <__kernel_rem_pio2+0x3a8>
 800f196:	f108 38ff 	add.w	r8, r8, #4294967295
 800f19a:	ab0c      	add	r3, sp, #48	@ 0x30
 800f19c:	f1ab 0b18 	sub.w	fp, fp, #24
 800f1a0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d0f6      	beq.n	800f196 <__kernel_rem_pio2+0x296>
 800f1a8:	4658      	mov	r0, fp
 800f1aa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800f208 <__kernel_rem_pio2+0x308>
 800f1ae:	f7ff fdeb 	bl	800ed88 <scalbn>
 800f1b2:	f108 0301 	add.w	r3, r8, #1
 800f1b6:	00da      	lsls	r2, r3, #3
 800f1b8:	9205      	str	r2, [sp, #20]
 800f1ba:	ec55 4b10 	vmov	r4, r5, d0
 800f1be:	aa70      	add	r2, sp, #448	@ 0x1c0
 800f1c0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800f21c <__kernel_rem_pio2+0x31c>
 800f1c4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800f1c8:	4646      	mov	r6, r8
 800f1ca:	f04f 0a00 	mov.w	sl, #0
 800f1ce:	2e00      	cmp	r6, #0
 800f1d0:	f280 80cf 	bge.w	800f372 <__kernel_rem_pio2+0x472>
 800f1d4:	4644      	mov	r4, r8
 800f1d6:	2c00      	cmp	r4, #0
 800f1d8:	f2c0 80fd 	blt.w	800f3d6 <__kernel_rem_pio2+0x4d6>
 800f1dc:	4b12      	ldr	r3, [pc, #72]	@ (800f228 <__kernel_rem_pio2+0x328>)
 800f1de:	461f      	mov	r7, r3
 800f1e0:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f1e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f1e6:	9306      	str	r3, [sp, #24]
 800f1e8:	f04f 0a00 	mov.w	sl, #0
 800f1ec:	f04f 0b00 	mov.w	fp, #0
 800f1f0:	2600      	movs	r6, #0
 800f1f2:	eba8 0504 	sub.w	r5, r8, r4
 800f1f6:	e0e2      	b.n	800f3be <__kernel_rem_pio2+0x4be>
 800f1f8:	f04f 0902 	mov.w	r9, #2
 800f1fc:	e754      	b.n	800f0a8 <__kernel_rem_pio2+0x1a8>
 800f1fe:	bf00      	nop
	...
 800f20c:	3ff00000 	.word	0x3ff00000
 800f210:	0800fb10 	.word	0x0800fb10
 800f214:	40200000 	.word	0x40200000
 800f218:	3ff00000 	.word	0x3ff00000
 800f21c:	3e700000 	.word	0x3e700000
 800f220:	41700000 	.word	0x41700000
 800f224:	3fe00000 	.word	0x3fe00000
 800f228:	0800fad0 	.word	0x0800fad0
 800f22c:	f854 3b04 	ldr.w	r3, [r4], #4
 800f230:	b945      	cbnz	r5, 800f244 <__kernel_rem_pio2+0x344>
 800f232:	b123      	cbz	r3, 800f23e <__kernel_rem_pio2+0x33e>
 800f234:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800f238:	f844 3c04 	str.w	r3, [r4, #-4]
 800f23c:	2301      	movs	r3, #1
 800f23e:	3201      	adds	r2, #1
 800f240:	461d      	mov	r5, r3
 800f242:	e738      	b.n	800f0b6 <__kernel_rem_pio2+0x1b6>
 800f244:	1acb      	subs	r3, r1, r3
 800f246:	e7f7      	b.n	800f238 <__kernel_rem_pio2+0x338>
 800f248:	f108 32ff 	add.w	r2, r8, #4294967295
 800f24c:	ab0c      	add	r3, sp, #48	@ 0x30
 800f24e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f252:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f256:	a90c      	add	r1, sp, #48	@ 0x30
 800f258:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f25c:	e739      	b.n	800f0d2 <__kernel_rem_pio2+0x1d2>
 800f25e:	f108 32ff 	add.w	r2, r8, #4294967295
 800f262:	ab0c      	add	r3, sp, #48	@ 0x30
 800f264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f268:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f26c:	e7f3      	b.n	800f256 <__kernel_rem_pio2+0x356>
 800f26e:	a90c      	add	r1, sp, #48	@ 0x30
 800f270:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f274:	3b01      	subs	r3, #1
 800f276:	430a      	orrs	r2, r1
 800f278:	e787      	b.n	800f18a <__kernel_rem_pio2+0x28a>
 800f27a:	3401      	adds	r4, #1
 800f27c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f280:	2a00      	cmp	r2, #0
 800f282:	d0fa      	beq.n	800f27a <__kernel_rem_pio2+0x37a>
 800f284:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f286:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f28a:	eb0d 0503 	add.w	r5, sp, r3
 800f28e:	9b06      	ldr	r3, [sp, #24]
 800f290:	aa20      	add	r2, sp, #128	@ 0x80
 800f292:	4443      	add	r3, r8
 800f294:	f108 0701 	add.w	r7, r8, #1
 800f298:	3d98      	subs	r5, #152	@ 0x98
 800f29a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800f29e:	4444      	add	r4, r8
 800f2a0:	42bc      	cmp	r4, r7
 800f2a2:	da04      	bge.n	800f2ae <__kernel_rem_pio2+0x3ae>
 800f2a4:	46a0      	mov	r8, r4
 800f2a6:	e6a2      	b.n	800efee <__kernel_rem_pio2+0xee>
 800f2a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2aa:	2401      	movs	r4, #1
 800f2ac:	e7e6      	b.n	800f27c <__kernel_rem_pio2+0x37c>
 800f2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2b0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f2b4:	f7f1 f93e 	bl	8000534 <__aeabi_i2d>
 800f2b8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800f580 <__kernel_rem_pio2+0x680>
 800f2bc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f2c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f2c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f2c8:	46b2      	mov	sl, r6
 800f2ca:	f04f 0800 	mov.w	r8, #0
 800f2ce:	9b05      	ldr	r3, [sp, #20]
 800f2d0:	4598      	cmp	r8, r3
 800f2d2:	dd05      	ble.n	800f2e0 <__kernel_rem_pio2+0x3e0>
 800f2d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f2d8:	3701      	adds	r7, #1
 800f2da:	eca5 7b02 	vstmia	r5!, {d7}
 800f2de:	e7df      	b.n	800f2a0 <__kernel_rem_pio2+0x3a0>
 800f2e0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800f2e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f2e8:	f7f1 f98e 	bl	8000608 <__aeabi_dmul>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2f4:	f7f0 ffd2 	bl	800029c <__adddf3>
 800f2f8:	f108 0801 	add.w	r8, r8, #1
 800f2fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f300:	e7e5      	b.n	800f2ce <__kernel_rem_pio2+0x3ce>
 800f302:	f1cb 0000 	rsb	r0, fp, #0
 800f306:	ec47 6b10 	vmov	d0, r6, r7
 800f30a:	f7ff fd3d 	bl	800ed88 <scalbn>
 800f30e:	ec55 4b10 	vmov	r4, r5, d0
 800f312:	4b9d      	ldr	r3, [pc, #628]	@ (800f588 <__kernel_rem_pio2+0x688>)
 800f314:	2200      	movs	r2, #0
 800f316:	4620      	mov	r0, r4
 800f318:	4629      	mov	r1, r5
 800f31a:	f7f1 fbfb 	bl	8000b14 <__aeabi_dcmpge>
 800f31e:	b300      	cbz	r0, 800f362 <__kernel_rem_pio2+0x462>
 800f320:	4b9a      	ldr	r3, [pc, #616]	@ (800f58c <__kernel_rem_pio2+0x68c>)
 800f322:	2200      	movs	r2, #0
 800f324:	4620      	mov	r0, r4
 800f326:	4629      	mov	r1, r5
 800f328:	f7f1 f96e 	bl	8000608 <__aeabi_dmul>
 800f32c:	f7f1 fc1c 	bl	8000b68 <__aeabi_d2iz>
 800f330:	4606      	mov	r6, r0
 800f332:	f7f1 f8ff 	bl	8000534 <__aeabi_i2d>
 800f336:	4b94      	ldr	r3, [pc, #592]	@ (800f588 <__kernel_rem_pio2+0x688>)
 800f338:	2200      	movs	r2, #0
 800f33a:	f7f1 f965 	bl	8000608 <__aeabi_dmul>
 800f33e:	460b      	mov	r3, r1
 800f340:	4602      	mov	r2, r0
 800f342:	4629      	mov	r1, r5
 800f344:	4620      	mov	r0, r4
 800f346:	f7f0 ffa7 	bl	8000298 <__aeabi_dsub>
 800f34a:	f7f1 fc0d 	bl	8000b68 <__aeabi_d2iz>
 800f34e:	ab0c      	add	r3, sp, #48	@ 0x30
 800f350:	f10b 0b18 	add.w	fp, fp, #24
 800f354:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f358:	f108 0801 	add.w	r8, r8, #1
 800f35c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f360:	e722      	b.n	800f1a8 <__kernel_rem_pio2+0x2a8>
 800f362:	4620      	mov	r0, r4
 800f364:	4629      	mov	r1, r5
 800f366:	f7f1 fbff 	bl	8000b68 <__aeabi_d2iz>
 800f36a:	ab0c      	add	r3, sp, #48	@ 0x30
 800f36c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f370:	e71a      	b.n	800f1a8 <__kernel_rem_pio2+0x2a8>
 800f372:	ab0c      	add	r3, sp, #48	@ 0x30
 800f374:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f378:	f7f1 f8dc 	bl	8000534 <__aeabi_i2d>
 800f37c:	4622      	mov	r2, r4
 800f37e:	462b      	mov	r3, r5
 800f380:	f7f1 f942 	bl	8000608 <__aeabi_dmul>
 800f384:	4652      	mov	r2, sl
 800f386:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800f38a:	465b      	mov	r3, fp
 800f38c:	4620      	mov	r0, r4
 800f38e:	4629      	mov	r1, r5
 800f390:	f7f1 f93a 	bl	8000608 <__aeabi_dmul>
 800f394:	3e01      	subs	r6, #1
 800f396:	4604      	mov	r4, r0
 800f398:	460d      	mov	r5, r1
 800f39a:	e718      	b.n	800f1ce <__kernel_rem_pio2+0x2ce>
 800f39c:	9906      	ldr	r1, [sp, #24]
 800f39e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800f3a2:	9106      	str	r1, [sp, #24]
 800f3a4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800f3a8:	f7f1 f92e 	bl	8000608 <__aeabi_dmul>
 800f3ac:	4602      	mov	r2, r0
 800f3ae:	460b      	mov	r3, r1
 800f3b0:	4650      	mov	r0, sl
 800f3b2:	4659      	mov	r1, fp
 800f3b4:	f7f0 ff72 	bl	800029c <__adddf3>
 800f3b8:	3601      	adds	r6, #1
 800f3ba:	4682      	mov	sl, r0
 800f3bc:	468b      	mov	fp, r1
 800f3be:	9b00      	ldr	r3, [sp, #0]
 800f3c0:	429e      	cmp	r6, r3
 800f3c2:	dc01      	bgt.n	800f3c8 <__kernel_rem_pio2+0x4c8>
 800f3c4:	42b5      	cmp	r5, r6
 800f3c6:	dae9      	bge.n	800f39c <__kernel_rem_pio2+0x49c>
 800f3c8:	ab48      	add	r3, sp, #288	@ 0x120
 800f3ca:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f3ce:	e9c5 ab00 	strd	sl, fp, [r5]
 800f3d2:	3c01      	subs	r4, #1
 800f3d4:	e6ff      	b.n	800f1d6 <__kernel_rem_pio2+0x2d6>
 800f3d6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f3d8:	2b02      	cmp	r3, #2
 800f3da:	dc0b      	bgt.n	800f3f4 <__kernel_rem_pio2+0x4f4>
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	dc39      	bgt.n	800f454 <__kernel_rem_pio2+0x554>
 800f3e0:	d05d      	beq.n	800f49e <__kernel_rem_pio2+0x59e>
 800f3e2:	9b02      	ldr	r3, [sp, #8]
 800f3e4:	f003 0007 	and.w	r0, r3, #7
 800f3e8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800f3ec:	ecbd 8b02 	vpop	{d8}
 800f3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3f4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f3f6:	2b03      	cmp	r3, #3
 800f3f8:	d1f3      	bne.n	800f3e2 <__kernel_rem_pio2+0x4e2>
 800f3fa:	9b05      	ldr	r3, [sp, #20]
 800f3fc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f400:	eb0d 0403 	add.w	r4, sp, r3
 800f404:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800f408:	4625      	mov	r5, r4
 800f40a:	46c2      	mov	sl, r8
 800f40c:	f1ba 0f00 	cmp.w	sl, #0
 800f410:	f1a5 0508 	sub.w	r5, r5, #8
 800f414:	dc6b      	bgt.n	800f4ee <__kernel_rem_pio2+0x5ee>
 800f416:	4645      	mov	r5, r8
 800f418:	2d01      	cmp	r5, #1
 800f41a:	f1a4 0408 	sub.w	r4, r4, #8
 800f41e:	f300 8087 	bgt.w	800f530 <__kernel_rem_pio2+0x630>
 800f422:	9c05      	ldr	r4, [sp, #20]
 800f424:	ab48      	add	r3, sp, #288	@ 0x120
 800f426:	441c      	add	r4, r3
 800f428:	2000      	movs	r0, #0
 800f42a:	2100      	movs	r1, #0
 800f42c:	f1b8 0f01 	cmp.w	r8, #1
 800f430:	f300 809c 	bgt.w	800f56c <__kernel_rem_pio2+0x66c>
 800f434:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800f438:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800f43c:	f1b9 0f00 	cmp.w	r9, #0
 800f440:	f040 80a6 	bne.w	800f590 <__kernel_rem_pio2+0x690>
 800f444:	9b04      	ldr	r3, [sp, #16]
 800f446:	e9c3 7800 	strd	r7, r8, [r3]
 800f44a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f44e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f452:	e7c6      	b.n	800f3e2 <__kernel_rem_pio2+0x4e2>
 800f454:	9d05      	ldr	r5, [sp, #20]
 800f456:	ab48      	add	r3, sp, #288	@ 0x120
 800f458:	441d      	add	r5, r3
 800f45a:	4644      	mov	r4, r8
 800f45c:	2000      	movs	r0, #0
 800f45e:	2100      	movs	r1, #0
 800f460:	2c00      	cmp	r4, #0
 800f462:	da35      	bge.n	800f4d0 <__kernel_rem_pio2+0x5d0>
 800f464:	f1b9 0f00 	cmp.w	r9, #0
 800f468:	d038      	beq.n	800f4dc <__kernel_rem_pio2+0x5dc>
 800f46a:	4602      	mov	r2, r0
 800f46c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f470:	9c04      	ldr	r4, [sp, #16]
 800f472:	e9c4 2300 	strd	r2, r3, [r4]
 800f476:	4602      	mov	r2, r0
 800f478:	460b      	mov	r3, r1
 800f47a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800f47e:	f7f0 ff0b 	bl	8000298 <__aeabi_dsub>
 800f482:	ad4a      	add	r5, sp, #296	@ 0x128
 800f484:	2401      	movs	r4, #1
 800f486:	45a0      	cmp	r8, r4
 800f488:	da2b      	bge.n	800f4e2 <__kernel_rem_pio2+0x5e2>
 800f48a:	f1b9 0f00 	cmp.w	r9, #0
 800f48e:	d002      	beq.n	800f496 <__kernel_rem_pio2+0x596>
 800f490:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f494:	4619      	mov	r1, r3
 800f496:	9b04      	ldr	r3, [sp, #16]
 800f498:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f49c:	e7a1      	b.n	800f3e2 <__kernel_rem_pio2+0x4e2>
 800f49e:	9c05      	ldr	r4, [sp, #20]
 800f4a0:	ab48      	add	r3, sp, #288	@ 0x120
 800f4a2:	441c      	add	r4, r3
 800f4a4:	2000      	movs	r0, #0
 800f4a6:	2100      	movs	r1, #0
 800f4a8:	f1b8 0f00 	cmp.w	r8, #0
 800f4ac:	da09      	bge.n	800f4c2 <__kernel_rem_pio2+0x5c2>
 800f4ae:	f1b9 0f00 	cmp.w	r9, #0
 800f4b2:	d002      	beq.n	800f4ba <__kernel_rem_pio2+0x5ba>
 800f4b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	9b04      	ldr	r3, [sp, #16]
 800f4bc:	e9c3 0100 	strd	r0, r1, [r3]
 800f4c0:	e78f      	b.n	800f3e2 <__kernel_rem_pio2+0x4e2>
 800f4c2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f4c6:	f7f0 fee9 	bl	800029c <__adddf3>
 800f4ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800f4ce:	e7eb      	b.n	800f4a8 <__kernel_rem_pio2+0x5a8>
 800f4d0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800f4d4:	f7f0 fee2 	bl	800029c <__adddf3>
 800f4d8:	3c01      	subs	r4, #1
 800f4da:	e7c1      	b.n	800f460 <__kernel_rem_pio2+0x560>
 800f4dc:	4602      	mov	r2, r0
 800f4de:	460b      	mov	r3, r1
 800f4e0:	e7c6      	b.n	800f470 <__kernel_rem_pio2+0x570>
 800f4e2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f4e6:	f7f0 fed9 	bl	800029c <__adddf3>
 800f4ea:	3401      	adds	r4, #1
 800f4ec:	e7cb      	b.n	800f486 <__kernel_rem_pio2+0x586>
 800f4ee:	ed95 7b00 	vldr	d7, [r5]
 800f4f2:	ed8d 7b00 	vstr	d7, [sp]
 800f4f6:	ed95 7b02 	vldr	d7, [r5, #8]
 800f4fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4fe:	ec53 2b17 	vmov	r2, r3, d7
 800f502:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f506:	f7f0 fec9 	bl	800029c <__adddf3>
 800f50a:	4602      	mov	r2, r0
 800f50c:	460b      	mov	r3, r1
 800f50e:	4606      	mov	r6, r0
 800f510:	460f      	mov	r7, r1
 800f512:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f516:	f7f0 febf 	bl	8000298 <__aeabi_dsub>
 800f51a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f51e:	f7f0 febd 	bl	800029c <__adddf3>
 800f522:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f526:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800f52a:	e9c5 6700 	strd	r6, r7, [r5]
 800f52e:	e76d      	b.n	800f40c <__kernel_rem_pio2+0x50c>
 800f530:	ed94 7b00 	vldr	d7, [r4]
 800f534:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800f538:	ec51 0b17 	vmov	r0, r1, d7
 800f53c:	4652      	mov	r2, sl
 800f53e:	465b      	mov	r3, fp
 800f540:	ed8d 7b00 	vstr	d7, [sp]
 800f544:	f7f0 feaa 	bl	800029c <__adddf3>
 800f548:	4602      	mov	r2, r0
 800f54a:	460b      	mov	r3, r1
 800f54c:	4606      	mov	r6, r0
 800f54e:	460f      	mov	r7, r1
 800f550:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f554:	f7f0 fea0 	bl	8000298 <__aeabi_dsub>
 800f558:	4652      	mov	r2, sl
 800f55a:	465b      	mov	r3, fp
 800f55c:	f7f0 fe9e 	bl	800029c <__adddf3>
 800f560:	3d01      	subs	r5, #1
 800f562:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f566:	e9c4 6700 	strd	r6, r7, [r4]
 800f56a:	e755      	b.n	800f418 <__kernel_rem_pio2+0x518>
 800f56c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f570:	f7f0 fe94 	bl	800029c <__adddf3>
 800f574:	f108 38ff 	add.w	r8, r8, #4294967295
 800f578:	e758      	b.n	800f42c <__kernel_rem_pio2+0x52c>
 800f57a:	bf00      	nop
 800f57c:	f3af 8000 	nop.w
	...
 800f588:	41700000 	.word	0x41700000
 800f58c:	3e700000 	.word	0x3e700000
 800f590:	9b04      	ldr	r3, [sp, #16]
 800f592:	9a04      	ldr	r2, [sp, #16]
 800f594:	601f      	str	r7, [r3, #0]
 800f596:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800f59a:	605c      	str	r4, [r3, #4]
 800f59c:	609d      	str	r5, [r3, #8]
 800f59e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f5a2:	60d3      	str	r3, [r2, #12]
 800f5a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f5a8:	6110      	str	r0, [r2, #16]
 800f5aa:	6153      	str	r3, [r2, #20]
 800f5ac:	e719      	b.n	800f3e2 <__kernel_rem_pio2+0x4e2>
 800f5ae:	bf00      	nop

0800f5b0 <floor>:
 800f5b0:	ec51 0b10 	vmov	r0, r1, d0
 800f5b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5bc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f5c0:	2e13      	cmp	r6, #19
 800f5c2:	460c      	mov	r4, r1
 800f5c4:	4605      	mov	r5, r0
 800f5c6:	4680      	mov	r8, r0
 800f5c8:	dc34      	bgt.n	800f634 <floor+0x84>
 800f5ca:	2e00      	cmp	r6, #0
 800f5cc:	da17      	bge.n	800f5fe <floor+0x4e>
 800f5ce:	a332      	add	r3, pc, #200	@ (adr r3, 800f698 <floor+0xe8>)
 800f5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d4:	f7f0 fe62 	bl	800029c <__adddf3>
 800f5d8:	2200      	movs	r2, #0
 800f5da:	2300      	movs	r3, #0
 800f5dc:	f7f1 faa4 	bl	8000b28 <__aeabi_dcmpgt>
 800f5e0:	b150      	cbz	r0, 800f5f8 <floor+0x48>
 800f5e2:	2c00      	cmp	r4, #0
 800f5e4:	da55      	bge.n	800f692 <floor+0xe2>
 800f5e6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f5ea:	432c      	orrs	r4, r5
 800f5ec:	2500      	movs	r5, #0
 800f5ee:	42ac      	cmp	r4, r5
 800f5f0:	4c2b      	ldr	r4, [pc, #172]	@ (800f6a0 <floor+0xf0>)
 800f5f2:	bf08      	it	eq
 800f5f4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f5f8:	4621      	mov	r1, r4
 800f5fa:	4628      	mov	r0, r5
 800f5fc:	e023      	b.n	800f646 <floor+0x96>
 800f5fe:	4f29      	ldr	r7, [pc, #164]	@ (800f6a4 <floor+0xf4>)
 800f600:	4137      	asrs	r7, r6
 800f602:	ea01 0307 	and.w	r3, r1, r7
 800f606:	4303      	orrs	r3, r0
 800f608:	d01d      	beq.n	800f646 <floor+0x96>
 800f60a:	a323      	add	r3, pc, #140	@ (adr r3, 800f698 <floor+0xe8>)
 800f60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f610:	f7f0 fe44 	bl	800029c <__adddf3>
 800f614:	2200      	movs	r2, #0
 800f616:	2300      	movs	r3, #0
 800f618:	f7f1 fa86 	bl	8000b28 <__aeabi_dcmpgt>
 800f61c:	2800      	cmp	r0, #0
 800f61e:	d0eb      	beq.n	800f5f8 <floor+0x48>
 800f620:	2c00      	cmp	r4, #0
 800f622:	bfbe      	ittt	lt
 800f624:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f628:	4133      	asrlt	r3, r6
 800f62a:	18e4      	addlt	r4, r4, r3
 800f62c:	ea24 0407 	bic.w	r4, r4, r7
 800f630:	2500      	movs	r5, #0
 800f632:	e7e1      	b.n	800f5f8 <floor+0x48>
 800f634:	2e33      	cmp	r6, #51	@ 0x33
 800f636:	dd0a      	ble.n	800f64e <floor+0x9e>
 800f638:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f63c:	d103      	bne.n	800f646 <floor+0x96>
 800f63e:	4602      	mov	r2, r0
 800f640:	460b      	mov	r3, r1
 800f642:	f7f0 fe2b 	bl	800029c <__adddf3>
 800f646:	ec41 0b10 	vmov	d0, r0, r1
 800f64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f64e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f652:	f04f 37ff 	mov.w	r7, #4294967295
 800f656:	40df      	lsrs	r7, r3
 800f658:	4207      	tst	r7, r0
 800f65a:	d0f4      	beq.n	800f646 <floor+0x96>
 800f65c:	a30e      	add	r3, pc, #56	@ (adr r3, 800f698 <floor+0xe8>)
 800f65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f662:	f7f0 fe1b 	bl	800029c <__adddf3>
 800f666:	2200      	movs	r2, #0
 800f668:	2300      	movs	r3, #0
 800f66a:	f7f1 fa5d 	bl	8000b28 <__aeabi_dcmpgt>
 800f66e:	2800      	cmp	r0, #0
 800f670:	d0c2      	beq.n	800f5f8 <floor+0x48>
 800f672:	2c00      	cmp	r4, #0
 800f674:	da0a      	bge.n	800f68c <floor+0xdc>
 800f676:	2e14      	cmp	r6, #20
 800f678:	d101      	bne.n	800f67e <floor+0xce>
 800f67a:	3401      	adds	r4, #1
 800f67c:	e006      	b.n	800f68c <floor+0xdc>
 800f67e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f682:	2301      	movs	r3, #1
 800f684:	40b3      	lsls	r3, r6
 800f686:	441d      	add	r5, r3
 800f688:	4545      	cmp	r5, r8
 800f68a:	d3f6      	bcc.n	800f67a <floor+0xca>
 800f68c:	ea25 0507 	bic.w	r5, r5, r7
 800f690:	e7b2      	b.n	800f5f8 <floor+0x48>
 800f692:	2500      	movs	r5, #0
 800f694:	462c      	mov	r4, r5
 800f696:	e7af      	b.n	800f5f8 <floor+0x48>
 800f698:	8800759c 	.word	0x8800759c
 800f69c:	7e37e43c 	.word	0x7e37e43c
 800f6a0:	bff00000 	.word	0xbff00000
 800f6a4:	000fffff 	.word	0x000fffff

0800f6a8 <_init>:
 800f6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6aa:	bf00      	nop
 800f6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6ae:	bc08      	pop	{r3}
 800f6b0:	469e      	mov	lr, r3
 800f6b2:	4770      	bx	lr

0800f6b4 <_fini>:
 800f6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6b6:	bf00      	nop
 800f6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6ba:	bc08      	pop	{r3}
 800f6bc:	469e      	mov	lr, r3
 800f6be:	4770      	bx	lr
